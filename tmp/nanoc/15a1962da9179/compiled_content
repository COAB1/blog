{:	data{|o:Nanoc::Core::Identifier:
@type:	full:@stringI"8/posts/2019-01-14-halving-page-sizes-with-srcset.md:ET{:default{
:rawU: Nanoc::Core::TextualContent[I"Z/home/carol/workspace/blog/content/posts/2019-01-14-halving-page-sizes-with-srcset.md;
TI"Ì[Web bloat](https://www.webbloatscore.com/) is [discussed](http://idlewords.com/talks/website_obesity.htm) a lot nowadays. Web pages with fairly straightforward content‚Ää‚Äî‚Ääsuch as a Google search results page‚Ää‚Äî‚Ääare substantially bigger today than they were a few decades ago, even though the content itself hasn't changed that much. We, web developers, are at least partly to blame: laziness or just [bad programming](http://www.haneycodes.net/npm-left-pad-have-we-forgotten-how-to-program/) are definitively part of the problem (of course, laziness might stem from a tight or impossible deadline, and bad code might come from inexperienced programmers‚Ää‚Äî‚Ääno judgment going on here).

<!-- more -->

But here at Guava we believe that software should not be unnecessarily bloated, even though it could be slightly easier to develop and ship. We believe in delivering high quality production code, and a part of that is not taking the easy way out in detriment of page size.

We frequently have to start working on long-running software that has more than a few coding shortcuts that were probably necessary at the time to ship something quickly to production, but are now aching for optimization. Sometimes the improvements are too time-consuming to be worth our trouble, but sometimes they are an extremely easy win.

Such is the case of separating image assets by pixel density (DPI). As the name implies, DPI (dots per inch) is the amount of dots (or pixels, in our case) that fit in a square inch of screen real estate. The exact definition varies according to context, so for the sake of readability we'll say that low DPI means the average desktop or laptop screen and budget smartphones, while high DPI means the average smartphone, tablet or higher-resolution computer screens (e.g. Retina displays and 4k monitors).

Nowadays, smartphone customers are important to most online retail businesses, which means that we should serve high DPI images _when necessary_. The "when necessary" part is important because the easy way out is to _always_ serve high DPI assets, even though the client device might not need them. The problem with this is that high DPI images are roughly 4 times as big as their low DPI counterparts, so low DPI devices would be getting unnecessarily big images for nothing at all‚Ää‚Äî‚Ääweb bloat!

Serving different assets according to the client's DPI was not a trivial task a few years ago, which means that the web is probably filled with pages that still serve high DPI assets by default to all client browsers. But now that HTML5 is widely adopted we can make good use of [srcset](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/img) to do just that. To each their own: `srcset` takes a list of different images and serves the most appropriate one to each client. In image-heavy sites such as retail stores this is an excellent tool to optimize average page size and save a good deal of bandwidth‚Ää‚Äî‚Ääwhich means saving money. Smaller images also take less time to load, so customers will also see product images faster than before.

This very simple change allowed us to decrease page sizes in one of our projects over 50% in some of its most-accessed endpoints, and an overall average 25% page size reduction for low DPI customers. Considering that some of the pages were 4 or 5MB big, halving those sizes was a great improvement to our customers‚Ää‚Äî‚Ääeven more so considering that some of them might access our site on low-quality mobile networks, which can be excruciatingly slow sometimes. Considering the proportion of low DPI customers we have on an average day, this improvement saved our client some 7.5% of bandwidth.

Now that we've got some hindsight, it seems glaringly obvious that we should have been using this feature all along. But more often than not, extremely simple optimizations such as the one we described are overlooked by less experienced teams or worse‚Ää‚Äî‚Äädeemed "not important" by management because customers nowadays supposedly can spare a few megabytes per page (that may be so, but they don't want to!).

We think that bloated web pages hurt everyone involved: web developers, customers and businesses. We strive to achieve what we think is good quality web code: that which delivers optimized, slim web pages to all clients.

By [Leonardo Brito](https://medium.com/@lbrito) on [January 14, 2019](https://medium.com/p/f82a1c5deb26).

[Canonical link](https://medium.com/@lbrito/halving-page-sizes-with-srcset-f82a1c5deb26)

Exported from [Medium](https://medium.com) on May 1, 2019.
;
T:preU;[0I"ƒ<p><a href="https://www.webbloatscore.com/">Web bloat</a> is <a href="http://idlewords.com/talks/website_obesity.htm">discussed</a> a lot nowadays. Web pages with fairly straightforward content‚Ää‚Äî‚Ääsuch as a Google search results page‚Ää‚Äî‚Ääare substantially bigger today than they were a few decades ago, even though the content itself hasn‚Äôt changed that much. We, web developers, are at least partly to blame: laziness or just <a href="http://www.haneycodes.net/npm-left-pad-have-we-forgotten-how-to-program/">bad programming</a> are definitively part of the problem (of course, laziness might stem from a tight or impossible deadline, and bad code might come from inexperienced programmers‚Ää‚Äî‚Ääno judgment going on here).</p>

<!-- more -->

<p>But here at Guava we believe that software should not be unnecessarily bloated, even though it could be slightly easier to develop and ship. We believe in delivering high quality production code, and a part of that is not taking the easy way out in detriment of page size.</p>

<p>We frequently have to start working on long-running software that has more than a few coding shortcuts that were probably necessary at the time to ship something quickly to production, but are now aching for optimization. Sometimes the improvements are too time-consuming to be worth our trouble, but sometimes they are an extremely easy win.</p>

<p>Such is the case of separating image assets by pixel density (DPI). As the name implies, DPI (dots per inch) is the amount of dots (or pixels, in our case) that fit in a square inch of screen real estate. The exact definition varies according to context, so for the sake of readability we‚Äôll say that low DPI means the average desktop or laptop screen and budget smartphones, while high DPI means the average smartphone, tablet or higher-resolution computer screens (e.g. Retina displays and 4k monitors).</p>

<p>Nowadays, smartphone customers are important to most online retail businesses, which means that we should serve high DPI images <em>when necessary</em>. The ‚Äúwhen necessary‚Äù part is important because the easy way out is to <em>always</em> serve high DPI assets, even though the client device might not need them. The problem with this is that high DPI images are roughly 4 times as big as their low DPI counterparts, so low DPI devices would be getting unnecessarily big images for nothing at all‚Ää‚Äî‚Ääweb bloat!</p>

<p>Serving different assets according to the client‚Äôs DPI was not a trivial task a few years ago, which means that the web is probably filled with pages that still serve high DPI assets by default to all client browsers. But now that HTML5 is widely adopted we can make good use of <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/img">srcset</a> to do just that. To each their own: <code>srcset</code> takes a list of different images and serves the most appropriate one to each client. In image-heavy sites such as retail stores this is an excellent tool to optimize average page size and save a good deal of bandwidth‚Ää‚Äî‚Ääwhich means saving money. Smaller images also take less time to load, so customers will also see product images faster than before.</p>

<p>This very simple change allowed us to decrease page sizes in one of our projects over 50% in some of its most-accessed endpoints, and an overall average 25% page size reduction for low DPI customers. Considering that some of the pages were 4 or 5MB big, halving those sizes was a great improvement to our customers‚Ää‚Äî‚Ääeven more so considering that some of them might access our site on low-quality mobile networks, which can be excruciatingly slow sometimes. Considering the proportion of low DPI customers we have on an average day, this improvement saved our client some 7.5% of bandwidth.</p>

<p>Now that we‚Äôve got some hindsight, it seems glaringly obvious that we should have been using this feature all along. But more often than not, extremely simple optimizations such as the one we described are overlooked by less experienced teams or worse‚Ää‚Äî‚Äädeemed ‚Äúnot important‚Äù by management because customers nowadays supposedly can spare a few megabytes per page (that may be so, but they don‚Äôt want to!).</p>

<p>We think that bloated web pages hurt everyone involved: web developers, customers and businesses. We strive to achieve what we think is good quality web code: that which delivers optimized, slim web pages to all clients.</p>

<p>By <a href="https://medium.com/@lbrito">Leonardo Brito</a> on <a href="https://medium.com/p/f82a1c5deb26">January 14, 2019</a>.</p>

<p><a href="https://medium.com/@lbrito/halving-page-sizes-with-srcset-f82a1c5deb26">Canonical link</a></p>

<p>Exported from <a href="https://medium.com">Medium</a> on May 1, 2019.</p>
;
T:_0U;[0I"é<!DOCTYPE html><html lang="en"><head>
    <meta charset="utf-8">
    <title>A Developer's Notebook - Halving page sizes with srcset</title>
    <link rel="stylesheet" href="https://unpkg.com/purecss@1.0.1/build/pure-min.css" integrity="sha384-oAOxQR6DkCoMliIh8yFnu25d7Eq/PHS21PClpwjOTeU2jRSq11vu66rf90/cZr47" crossorigin="anonymous">
    <link rel="stylesheet" href="../../assets/stylesheet.css">
    <link rel="stylesheet" href="../../assets/highlight.css">

    <!-- you don't need to keep this, but it's cool for stats! -->
    <meta name="generator" content="Nanoc 4.11.9">
  </head>
  <body>
    <div id="layout">
      <div class="header">
        <h1>
          <a href="../../">A Developer's Notebook</a>
        </h1>
      </div>


      <div class="content">
        <nav class="pure-g">
          <div class="pure-u-2-3 links">
            <a href="../../index.html">Home</a> ¬∑
            <a href="../../tags.html">Tags</a> ¬∑
            <a href="../../years.html">Years</a> ¬∑
            <a href="../../about.html">About</a>
          </div>

          <div class="pure-u-1-3">
            <div class="contact">
              <span>
                <a href="https://github.com/lbrito1" download="">
                  <img src="../../assets/icons/github.svg" alt="Github icon">
                  </a>
              </span>
              <span>
                <a href="https://www.linkedin.com/in/leonardo-mendes-brito/">
                <img src="../../assets/icons/linkedin.svg" alt="LinkedIn icon">
                </a>
              </span>
            </div>
          </div>
        </nav>
        
  <div class="post-show">
    <h1>Halving page sizes with srcset</h1>
    <article class="text">
      <p><a href="https://www.webbloatscore.com/">Web bloat</a> is <a href="http://idlewords.com/talks/website_obesity.htm">discussed</a> a lot nowadays. Web pages with fairly straightforward content‚Ää‚Äî‚Ääsuch as a Google search results page‚Ää‚Äî‚Ääare substantially bigger today than they were a few decades ago, even though the content itself hasn‚Äôt changed that much. We, web developers, are at least partly to blame: laziness or just <a href="http://www.haneycodes.net/npm-left-pad-have-we-forgotten-how-to-program/">bad programming</a> are definitively part of the problem (of course, laziness might stem from a tight or impossible deadline, and bad code might come from inexperienced programmers‚Ää‚Äî‚Ääno judgment going on here).</p>

<!-- more -->

<p>But here at Guava we believe that software should not be unnecessarily bloated, even though it could be slightly easier to develop and ship. We believe in delivering high quality production code, and a part of that is not taking the easy way out in detriment of page size.</p>

<p>We frequently have to start working on long-running software that has more than a few coding shortcuts that were probably necessary at the time to ship something quickly to production, but are now aching for optimization. Sometimes the improvements are too time-consuming to be worth our trouble, but sometimes they are an extremely easy win.</p>

<p>Such is the case of separating image assets by pixel density (DPI). As the name implies, DPI (dots per inch) is the amount of dots (or pixels, in our case) that fit in a square inch of screen real estate. The exact definition varies according to context, so for the sake of readability we‚Äôll say that low DPI means the average desktop or laptop screen and budget smartphones, while high DPI means the average smartphone, tablet or higher-resolution computer screens (e.g. Retina displays and 4k monitors).</p>

<p>Nowadays, smartphone customers are important to most online retail businesses, which means that we should serve high DPI images <em>when necessary</em>. The ‚Äúwhen necessary‚Äù part is important because the easy way out is to <em>always</em> serve high DPI assets, even though the client device might not need them. The problem with this is that high DPI images are roughly 4 times as big as their low DPI counterparts, so low DPI devices would be getting unnecessarily big images for nothing at all‚Ää‚Äî‚Ääweb bloat!</p>

<p>Serving different assets according to the client‚Äôs DPI was not a trivial task a few years ago, which means that the web is probably filled with pages that still serve high DPI assets by default to all client browsers. But now that HTML5 is widely adopted we can make good use of <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/img">srcset</a> to do just that. To each their own: <code>srcset</code> takes a list of different images and serves the most appropriate one to each client. In image-heavy sites such as retail stores this is an excellent tool to optimize average page size and save a good deal of bandwidth‚Ää‚Äî‚Ääwhich means saving money. Smaller images also take less time to load, so customers will also see product images faster than before.</p>

<p>This very simple change allowed us to decrease page sizes in one of our projects over 50% in some of its most-accessed endpoints, and an overall average 25% page size reduction for low DPI customers. Considering that some of the pages were 4 or 5MB big, halving those sizes was a great improvement to our customers‚Ää‚Äî‚Ääeven more so considering that some of them might access our site on low-quality mobile networks, which can be excruciatingly slow sometimes. Considering the proportion of low DPI customers we have on an average day, this improvement saved our client some 7.5% of bandwidth.</p>

<p>Now that we‚Äôve got some hindsight, it seems glaringly obvious that we should have been using this feature all along. But more often than not, extremely simple optimizations such as the one we described are overlooked by less experienced teams or worse‚Ää‚Äî‚Äädeemed ‚Äúnot important‚Äù by management because customers nowadays supposedly can spare a few megabytes per page (that may be so, but they don‚Äôt want to!).</p>

<p>We think that bloated web pages hurt everyone involved: web developers, customers and businesses. We strive to achieve what we think is good quality web code: that which delivers optimized, slim web pages to all clients.</p>

<p>By <a href="https://medium.com/@lbrito">Leonardo Brito</a> on <a href="https://medium.com/p/f82a1c5deb26">January 14, 2019</a>.</p>

<p><a href="https://medium.com/@lbrito/halving-page-sizes-with-srcset-f82a1c5deb26">Canonical link</a></p>

<p>Exported from <a href="https://medium.com">Medium</a> on May 1, 2019.</p>

    </article>
    <aside>Posted at: Sep 03, 2018</aside>
    <div class="post-footer">
      <a href="../../index.html">Back</a>
    </div>
  </div>

        <div class="footer">
          2020 Leonardo Brito
        </div>
      </div>

    </div>
  


</body></html>;
T:	post@:	last@o;;;;	I"5/posts/2017-05-08-when-postgres-is-not-enough.md;
T{;{
;U;[I"W/home/carol/workspace/blog/content/posts/2017-05-08-when-postgres-is-not-enough.md;
TI"What happens when your project‚Äôs RDBMS is just not enough to deal with unexpectedly huge amounts of data?

You could try to de-normalize some tables here and there to avoid unnecessary JOINs, create a few indexes, implement some kind of pagination or even pre-process the data into a more palatable format. However, if you did all that and it still was not enough, the ‚Äúnatural impulse‚Äù is to give up on the RDBMS altogether and just use Elasticsearch. Sounds like a no-brainer, right?

<!-- more -->

Well, what if you can‚Äôt jump into Elasticsearch right away? This is a more subtle but much more realistic scenario which we faced in a project here at Guava.

In an ideal world, the correct or most appropriate technology stack would be chosen at the very beginning of all projects. For many reasons that are all too familiar to any seasoned developer, this is very seldom the case of any big software. The beginning of the project is precisely when you _least_ _know_ about the software requirements, thus it is often the point when seemingly innocuous choices are made which will cause great pain in the future. Once a wrong or sub-optimal choice is made, it will only get worse over time, _even before you even realize it is wrong_. While the team is still confident that the solution is salvageable and can be fixed through careful optimizations and esoteric incantations‚Ää‚Äî‚Äälike we described above‚Ää‚Äî‚Ääthe project is drifting further and further from completion, and a full stop would in fact be more productive.

Back to our concrete case: we had a massive and steadily-increasing set of highly normalized data on a RDB. Adding insult to injury, the input data was incredibly sparse, with batch-like data peaks followed by several hours with little activity. The data distribution made it clear that we would have to do some kind of pagination. The following figure shows our input data distribution, where the x-axis units represent 1 hour worth of data, and the y-axis represents the data count in that hour:

![](/assets/images/goiabada/0*71RikbZX7I55dU74.jpg)

As we can see in the chart, many 1-hour blocks had nearly no data at all, and the great majority of blocks had less than 100k entries. A few blocks have a huge amount of data, surpassing 700k entries. This chart has 1-hour precision, but if we zoom in and investigate the same data set with 1-minute precision, the chart would look more or less the same. This is only a small sample of the data set we were dealing with: the full set had over 20M entries, growing at a rate of about 1M entries per month.

We were asked to do some fairly standard BI stuff: report and dashboard generation. Because of the widely normalized data and the sheer amount of rows, we were forced into pre-processing very early in project. Our pre-processing hugely reduced the amount of data that the web app would actually have to process and display to the final user, but introduced a new set of problems: we were effectively de-normalizing the entire data set, which had to be done continuously and in small, manageable chunks (so we could tackle the sparse data distribution), and we were now responsible for maintaining the integrity and completeness of the optimized data. The processing also added a new layer of complexity to the application.

Our solution was viable, but only just; when it came to our attention that the upstream data was actually versioned and non-monotonic, we quickly realized that simply adjusting our solution to deal with versioning would add so much complexity and extra load to the RDB that would render it unusable. The moment had come when we would start feeling the itch to make the jump to Elasticsearch‚Ää‚Äî‚Ääat least for the optimized, pre-processed layer which we described above, sitting on top of the raw input data. In theory, Elasticsearch would neatly handle all of our major issues: massive data volume, versioning and high normalization.

However, the ideal world and the real world are worlds apart. We had already spent a few months worth of effort in developing and validating an arc of SQL logic that by nature depends on the initial choice of using an RDBMS as data source. Other teams of developers were already working on the same branch. Time constraints made it impossible for us to re-write the whole relational ecosystem, but at the same time continuing to use Postgres on the new layer was definitively not an option due to the versioning and performance issues we were facing.

## The right compromise

We made a compromise and decided to use _both Postgres and Elasticsearch on the same layer of pre-processed data_. This unusual solution allowed us to carry on using most of the valuable relational logic already done, while leveraging Elasticsearch‚Äôs speed and document versioning. Sitting beneath the dual-store layer we still had the same sturdy Postgres store with raw data.

The solution can be summarized as follows: Elasticsearch was set up upstream of our project, and an index was created with denormalized data gathered from our most-used tables. On our side, during pre-processing, we queried the Elasticsearch index and dumped the documents in a temporary table that existed only during pre-processing. The rest of the process remained more or less unaltered, allowing us to quickly solve 2 of the 3 major issues we were facing: performance and version treatment. The price to pay was code complexity, the third issue, which increased significantly with this approach. Additionally, this approach nudged the project closer to the ideal solution (using only Elasticsearch in the performance-critical parts of report generation)‚Ää‚Äî‚Ääother compromises might have gone the other way, digging deeper into RDBMS esotericism and further from the ideal solution.

Our solution was far from ideal: it was a compromise, but it was the most beneficial compromise that could be made at the moment. Sometimes a silver bullet like Elasticsearch seems to exist, but for many reasons it is just out of your reach for the time being and you must settle for a compromise. In these cases, make sure to make the right one.

By [Leonardo Brito](https://medium.com/@lbrito) on [May 8, 2017](https://medium.com/p/237b723be442).

[Canonical link](https://medium.com/@lbrito/when-postgres-is-not-enough-237b723be442)

Exported from [Medium](https://medium.com) on May 1, 2019.
;
T;U;[0I"È<p>What happens when your project‚Äôs RDBMS is just not enough to deal with unexpectedly huge amounts of data?</p>

<p>You could try to de-normalize some tables here and there to avoid unnecessary JOINs, create a few indexes, implement some kind of pagination or even pre-process the data into a more palatable format. However, if you did all that and it still was not enough, the ‚Äúnatural impulse‚Äù is to give up on the RDBMS altogether and just use Elasticsearch. Sounds like a no-brainer, right?</p>

<!-- more -->

<p>Well, what if you can‚Äôt jump into Elasticsearch right away? This is a more subtle but much more realistic scenario which we faced in a project here at Guava.</p>

<p>In an ideal world, the correct or most appropriate technology stack would be chosen at the very beginning of all projects. For many reasons that are all too familiar to any seasoned developer, this is very seldom the case of any big software. The beginning of the project is precisely when you <em>least</em> <em>know</em> about the software requirements, thus it is often the point when seemingly innocuous choices are made which will cause great pain in the future. Once a wrong or sub-optimal choice is made, it will only get worse over time, <em>even before you even realize it is wrong</em>. While the team is still confident that the solution is salvageable and can be fixed through careful optimizations and esoteric incantations‚Ää‚Äî‚Äälike we described above‚Ää‚Äî‚Ääthe project is drifting further and further from completion, and a full stop would in fact be more productive.</p>

<p>Back to our concrete case: we had a massive and steadily-increasing set of highly normalized data on a RDB. Adding insult to injury, the input data was incredibly sparse, with batch-like data peaks followed by several hours with little activity. The data distribution made it clear that we would have to do some kind of pagination. The following figure shows our input data distribution, where the x-axis units represent 1 hour worth of data, and the y-axis represents the data count in that hour:</p>

<p><img src="/assets/images/goiabada/0*71RikbZX7I55dU74.jpg" alt=""></p>

<p>As we can see in the chart, many 1-hour blocks had nearly no data at all, and the great majority of blocks had less than 100k entries. A few blocks have a huge amount of data, surpassing 700k entries. This chart has 1-hour precision, but if we zoom in and investigate the same data set with 1-minute precision, the chart would look more or less the same. This is only a small sample of the data set we were dealing with: the full set had over 20M entries, growing at a rate of about 1M entries per month.</p>

<p>We were asked to do some fairly standard BI stuff: report and dashboard generation. Because of the widely normalized data and the sheer amount of rows, we were forced into pre-processing very early in project. Our pre-processing hugely reduced the amount of data that the web app would actually have to process and display to the final user, but introduced a new set of problems: we were effectively de-normalizing the entire data set, which had to be done continuously and in small, manageable chunks (so we could tackle the sparse data distribution), and we were now responsible for maintaining the integrity and completeness of the optimized data. The processing also added a new layer of complexity to the application.</p>

<p>Our solution was viable, but only just; when it came to our attention that the upstream data was actually versioned and non-monotonic, we quickly realized that simply adjusting our solution to deal with versioning would add so much complexity and extra load to the RDB that would render it unusable. The moment had come when we would start feeling the itch to make the jump to Elasticsearch‚Ää‚Äî‚Ääat least for the optimized, pre-processed layer which we described above, sitting on top of the raw input data. In theory, Elasticsearch would neatly handle all of our major issues: massive data volume, versioning and high normalization.</p>

<p>However, the ideal world and the real world are worlds apart. We had already spent a few months worth of effort in developing and validating an arc of SQL logic that by nature depends on the initial choice of using an RDBMS as data source. Other teams of developers were already working on the same branch. Time constraints made it impossible for us to re-write the whole relational ecosystem, but at the same time continuing to use Postgres on the new layer was definitively not an option due to the versioning and performance issues we were facing.</p>

<h2 id="the-right-compromise">The right compromise</h2>

<p>We made a compromise and decided to use <em>both Postgres and Elasticsearch on the same layer of pre-processed data</em>. This unusual solution allowed us to carry on using most of the valuable relational logic already done, while leveraging Elasticsearch‚Äôs speed and document versioning. Sitting beneath the dual-store layer we still had the same sturdy Postgres store with raw data.</p>

<p>The solution can be summarized as follows: Elasticsearch was set up upstream of our project, and an index was created with denormalized data gathered from our most-used tables. On our side, during pre-processing, we queried the Elasticsearch index and dumped the documents in a temporary table that existed only during pre-processing. The rest of the process remained more or less unaltered, allowing us to quickly solve 2 of the 3 major issues we were facing: performance and version treatment. The price to pay was code complexity, the third issue, which increased significantly with this approach. Additionally, this approach nudged the project closer to the ideal solution (using only Elasticsearch in the performance-critical parts of report generation)‚Ää‚Äî‚Ääother compromises might have gone the other way, digging deeper into RDBMS esotericism and further from the ideal solution.</p>

<p>Our solution was far from ideal: it was a compromise, but it was the most beneficial compromise that could be made at the moment. Sometimes a silver bullet like Elasticsearch seems to exist, but for many reasons it is just out of your reach for the time being and you must settle for a compromise. In these cases, make sure to make the right one.</p>

<p>By <a href="https://medium.com/@lbrito">Leonardo Brito</a> on <a href="https://medium.com/p/237b723be442">May 8, 2017</a>.</p>

<p><a href="https://medium.com/@lbrito/when-postgres-is-not-enough-237b723be442">Canonical link</a></p>

<p>Exported from <a href="https://medium.com">Medium</a> on May 1, 2019.</p>
;
T;U;[0I"≤!<!DOCTYPE html><html lang="en"><head>
    <meta charset="utf-8">
    <title>A Developer's Notebook - When Postgres is not enough</title>
    <link rel="stylesheet" href="https://unpkg.com/purecss@1.0.1/build/pure-min.css" integrity="sha384-oAOxQR6DkCoMliIh8yFnu25d7Eq/PHS21PClpwjOTeU2jRSq11vu66rf90/cZr47" crossorigin="anonymous">
    <link rel="stylesheet" href="../../assets/stylesheet.css">
    <link rel="stylesheet" href="../../assets/highlight.css">

    <!-- you don't need to keep this, but it's cool for stats! -->
    <meta name="generator" content="Nanoc 4.11.9">
  </head>
  <body>
    <div id="layout">
      <div class="header">
        <h1>
          <a href="../../">A Developer's Notebook</a>
        </h1>
      </div>


      <div class="content">
        <nav class="pure-g">
          <div class="pure-u-2-3 links">
            <a href="../../index.html">Home</a> ¬∑
            <a href="../../tags.html">Tags</a> ¬∑
            <a href="../../years.html">Years</a> ¬∑
            <a href="../../about.html">About</a>
          </div>

          <div class="pure-u-1-3">
            <div class="contact">
              <span>
                <a href="https://github.com/lbrito1" download="">
                  <img src="../../assets/icons/github.svg" alt="Github icon">
                  </a>
              </span>
              <span>
                <a href="https://www.linkedin.com/in/leonardo-mendes-brito/">
                <img src="../../assets/icons/linkedin.svg" alt="LinkedIn icon">
                </a>
              </span>
            </div>
          </div>
        </nav>
        
  <div class="post-show">
    <h1>When Postgres is not enough</h1>
    <article class="text">
      <p>What happens when your project‚Äôs RDBMS is just not enough to deal with unexpectedly huge amounts of data?</p>

<p>You could try to de-normalize some tables here and there to avoid unnecessary JOINs, create a few indexes, implement some kind of pagination or even pre-process the data into a more palatable format. However, if you did all that and it still was not enough, the ‚Äúnatural impulse‚Äù is to give up on the RDBMS altogether and just use Elasticsearch. Sounds like a no-brainer, right?</p>

<!-- more -->

<p>Well, what if you can‚Äôt jump into Elasticsearch right away? This is a more subtle but much more realistic scenario which we faced in a project here at Guava.</p>

<p>In an ideal world, the correct or most appropriate technology stack would be chosen at the very beginning of all projects. For many reasons that are all too familiar to any seasoned developer, this is very seldom the case of any big software. The beginning of the project is precisely when you <em>least</em> <em>know</em> about the software requirements, thus it is often the point when seemingly innocuous choices are made which will cause great pain in the future. Once a wrong or sub-optimal choice is made, it will only get worse over time, <em>even before you even realize it is wrong</em>. While the team is still confident that the solution is salvageable and can be fixed through careful optimizations and esoteric incantations‚Ää‚Äî‚Äälike we described above‚Ää‚Äî‚Ääthe project is drifting further and further from completion, and a full stop would in fact be more productive.</p>

<p>Back to our concrete case: we had a massive and steadily-increasing set of highly normalized data on a RDB. Adding insult to injury, the input data was incredibly sparse, with batch-like data peaks followed by several hours with little activity. The data distribution made it clear that we would have to do some kind of pagination. The following figure shows our input data distribution, where the x-axis units represent 1 hour worth of data, and the y-axis represents the data count in that hour:</p>

<p><img src="../../assets/images/goiabada/0*71RikbZX7I55dU74.jpg" alt=""></p>

<p>As we can see in the chart, many 1-hour blocks had nearly no data at all, and the great majority of blocks had less than 100k entries. A few blocks have a huge amount of data, surpassing 700k entries. This chart has 1-hour precision, but if we zoom in and investigate the same data set with 1-minute precision, the chart would look more or less the same. This is only a small sample of the data set we were dealing with: the full set had over 20M entries, growing at a rate of about 1M entries per month.</p>

<p>We were asked to do some fairly standard BI stuff: report and dashboard generation. Because of the widely normalized data and the sheer amount of rows, we were forced into pre-processing very early in project. Our pre-processing hugely reduced the amount of data that the web app would actually have to process and display to the final user, but introduced a new set of problems: we were effectively de-normalizing the entire data set, which had to be done continuously and in small, manageable chunks (so we could tackle the sparse data distribution), and we were now responsible for maintaining the integrity and completeness of the optimized data. The processing also added a new layer of complexity to the application.</p>

<p>Our solution was viable, but only just; when it came to our attention that the upstream data was actually versioned and non-monotonic, we quickly realized that simply adjusting our solution to deal with versioning would add so much complexity and extra load to the RDB that would render it unusable. The moment had come when we would start feeling the itch to make the jump to Elasticsearch‚Ää‚Äî‚Ääat least for the optimized, pre-processed layer which we described above, sitting on top of the raw input data. In theory, Elasticsearch would neatly handle all of our major issues: massive data volume, versioning and high normalization.</p>

<p>However, the ideal world and the real world are worlds apart. We had already spent a few months worth of effort in developing and validating an arc of SQL logic that by nature depends on the initial choice of using an RDBMS as data source. Other teams of developers were already working on the same branch. Time constraints made it impossible for us to re-write the whole relational ecosystem, but at the same time continuing to use Postgres on the new layer was definitively not an option due to the versioning and performance issues we were facing.</p>

<h2 id="the-right-compromise">The right compromise</h2>

<p>We made a compromise and decided to use <em>both Postgres and Elasticsearch on the same layer of pre-processed data</em>. This unusual solution allowed us to carry on using most of the valuable relational logic already done, while leveraging Elasticsearch‚Äôs speed and document versioning. Sitting beneath the dual-store layer we still had the same sturdy Postgres store with raw data.</p>

<p>The solution can be summarized as follows: Elasticsearch was set up upstream of our project, and an index was created with denormalized data gathered from our most-used tables. On our side, during pre-processing, we queried the Elasticsearch index and dumped the documents in a temporary table that existed only during pre-processing. The rest of the process remained more or less unaltered, allowing us to quickly solve 2 of the 3 major issues we were facing: performance and version treatment. The price to pay was code complexity, the third issue, which increased significantly with this approach. Additionally, this approach nudged the project closer to the ideal solution (using only Elasticsearch in the performance-critical parts of report generation)‚Ää‚Äî‚Ääother compromises might have gone the other way, digging deeper into RDBMS esotericism and further from the ideal solution.</p>

<p>Our solution was far from ideal: it was a compromise, but it was the most beneficial compromise that could be made at the moment. Sometimes a silver bullet like Elasticsearch seems to exist, but for many reasons it is just out of your reach for the time being and you must settle for a compromise. In these cases, make sure to make the right one.</p>

<p>By <a href="https://medium.com/@lbrito">Leonardo Brito</a> on <a href="https://medium.com/p/237b723be442">May 8, 2017</a>.</p>

<p><a href="https://medium.com/@lbrito/when-postgres-is-not-enough-237b723be442">Canonical link</a></p>

<p>Exported from <a href="https://medium.com">Medium</a> on May 1, 2019.</p>

    </article>
    <aside>Posted at: May 08, 2017</aside>
    <div class="post-footer">
      <a href="../../index.html">Back</a>
    </div>
  </div>

        <div class="footer">
          2020 Leonardo Brito
        </div>
      </div>

    </div>
  


</body></html>;
T;@ ;@ o;;;;	I"F/posts/2017-09-04-improving-spec-speed-in-a-huge-old-Rails-app.md;
T{;{
;U;[I"h/home/carol/workspace/blog/content/posts/2017-09-04-improving-spec-speed-in-a-huge-old-Rails-app.md;
TI"A*We got a 6-year-old Rails app with ~370k LOC and a ~6k-test suite which took 24 minutes to complete. Not good! We took a few days off of the main project to see if we could make things better.

More often than not, test suites are the nasty underbelly of a Rails app. Size and age just aggravate the problem. Tests are seldom a high priority in any project, and speed might not be an issue at all in smaller apps where the whole test suite might take just a few seconds to complete. As the project grows and the CI takes increasingly longer to complete, spec speed suddenly becomes more of an issue.

"Small" and "new" are not exactly the case for a certain Rails project we're working on here at Guava. We're talking about a 6-year-old e-commerce portal with ~370k LOC, a couple million customers and a ~6k-test, 300-spec suite which took, on average, a whopping 24 minutes to complete in our CI. _Not good!_ So we took a couple of days off the main project to see if we could make things better‚Ää‚Äî‚Ääor less worse.

<!-- more -->

## Preliminaries‚Ää‚Äî‚Ääsomeone _must_ have solved¬†this!

The first step we took was, of course, to do some "literature review", so to speak. Googling "improving rspec spec speed" will yield dozens of "10 ways to improve spec speed"-like articles, with more or less the same tips repeated over and over: make less DB hits, make sure the tests don't do external requests, don't use `js: true` unless you need to, etc. Solid points, but all of them were either already used in our codebase or impractical to implement in a project this size.

We would need to find our own solutions.

## Bird's eye view: "macro" profiling

The first step in any kind of optimization is to assess the current situation. Profiling the test suite can help identify possible bottlenecks. Since we're using RSpec, this first step was just running the whole suite with the `--profile=100` flag, which outputs the 100 slowest examples and the 100 slowest example groups.

Unfortunately, most of the 100 slowest tests were similarly slow, with the slowest completing at around 8 seconds and the fastest (of this "top 100 slowest" group) at around 4 seconds. In other words, they all took more or less the same time (at least in order of magnitude) to complete. There was no large "bottleneck" billboard to chase after, no single, minutes-long behemoth of a test to slay.

The "example group" profiling section is where things got interesting. RSpec presents a list of groups (e.g. `describe` blocks) alongside their total running time and average running time of each example in the group. Again the average running times were very much alike and formed a very mild and reasonable slope, with no individual group that could be singled-out as significantly slower than the rest. However, a few groups caught my attention because of their really long total running time, even though they had good or normal average running times:

<div class="highlight"><pre><code class="language-pseudo">
Top 100 slowest example groups:
 Group 1
 3.02 seconds average (151.12 seconds / 50 examples) ./spec/‚Ä¶
 Group 2
 2.39 seconds average (143.25 seconds / 60 examples) ./spec/‚Ä¶
 Group 3
 1.7 seconds average (425.19 seconds / 250 examples) ./spec/‚Ä¶
 Group 4
 1.53 seconds average (145.27 seconds / 95 examples) ./spec/‚Ä¶
‚Ä¶
Group 38
 0.64877 seconds average (0.64877 seconds / 1 example) ./spec/‚Ä¶
 Group 39
 0.62933 seconds average (1.26 seconds / 2 examples) ./spec/‚Ä¶
 Group 40
 0.59483 seconds average (1.78 seconds / 3 examples) ./spec/‚Ä¶
 Group 41
 0.58132 seconds average (95.34 seconds / 164 examples) ./spec/‚Ä¶
 Group 42
 0.20273 seconds average (72.17 seconds / 356 examples) ./spec/‚Ä¶
</code></pre></div>

Groups 1 through 4 are clearly candidates for a closer look, but so are groups 41 and 42, which were buried deep in the report because of their relatively good average running times.

Now that we had a list of candidates for examination, it was time to bring in the microscope.

## Under the microscope: "micro" profiling with¬†RubyProf

The first spec we examined was Group 3, a large (250 examples) spec that took several minutes to run. After discarding the "obvious" possible culprits described in the literature review section above, we fired up [RubyProf](https://github.com/ruby-prof/ruby-prof), a MRI code profiler.

It would be highly impractical to run a code profiler on a spec with 250 examples, so again we ran `rspec --profile` on this individual file to get an overview of the examples in this spec. As could be expected, all the examples took a similar time to complete. So we chose a single example among the ones that took a bit more time to complete and dumped a RubyProf call tree at the end of the spec:

### group_3_spec.rb
<div class="highlight"><pre><code class="language-ruby">
...

it 'does something' do
  ...
  result = RubyProf.stop
  printer = RubyProf::CallTreePrinter.new(result)
  printer.print(path ".", profile: "profile")
end
</code></pre></div>

Examining the generated call tree with [KCacheGrind](http://kcachegrind.sourceforge.net/html/Home.html), we found out that IO waits (`IO#wait_readable` in the screenshot) were responsible for most of the wall time for this particular spec:

![Call tree for a sampled spec example in group\_3\_spec.rb¬†.](/assets/images/goiabada/1*FjCiO6MvtgTo0pr533qZVw.jpg)
Call tree for a sampled spec example in group\_3\_spec.rb¬†.

This heavy IO load was odd: all the HTTP requests were handled with VCR and there was no other blatant IO use such as file loading. Further examining VCR configuration lead to an interesting discovery.

## The VCR¬†caveat

For those unfamiliar with [VCR](https://github.com/vcr/vcr), it is a ruby gem that records HTTP interactions so that automated tests don't have to actual HTTP requests each run. The recorded interactions are persisted in disk and committed in the versioning system. In their own words:

> Record your test suite‚Äôs HTTP interactions and replay them during future test runs for fast, deterministic, accurate tests.

There are many ways to use VCR (insert\_cassette, use\_cassette, etc). The programmer that wrote this particular spec chose to hook VCR with the top-level describe block, as so:

`describe Foo, vcr: true do¬†...`

Unlike insert\_cassette and use\_cassette, which require a cassette name argument, `vcr: true` follows the spec's tree structure, creating directories for example groups (describe/context blocks) and individual cassettes for each example.

This might seem innocent enough, but Group 3 had 250 examples, most of which had some kind of HTTP interaction, resulting in over a hundred cassettes scattered over 40 or so folders. Many of the cassettes were identical, since there were examples that performed the same HTTP requests. For Group 3 alone, almost 2MB of cassettes were loaded! Despite surely being faster than making all the actual HTTP requests, loading this many files from disk was definitely an unnecessary IO strain‚Ää‚Äî‚Ääas the call tree showed.

Fortunately, we can easily force VCR to record all interactions in the group within a single cassette by using the¬†`:cassette_name` option:

`describe Foo, vcr: { cassette_name: 'foo_spec' } do¬†...`

The resulting new cassette for Group 3 had merely 33KB‚Ää‚Äî‚Ääorders of magnitude smaller than the previous cassettes. Reduced file size and the elimination of IO overhead caused by loading multiple scattered files significantly reduced spec speed: Group 3 now runs at around 110 seconds, nearly a quarter of the previous run time (425 seconds).

While using a single cassette was not always possible, and not always relevant (in smaller specs, for example), there were a great many specs that suffered loading dozens or hundreds of cassettes.

## Brute-forcing FactoryGirl helpers

We know that avoidable DB hits are one of the things that often slow down specs unnecessarily. In other words, tests commonly persist more data than they need to. One of the most easily traceable sources of persisted data are the FactoryGirl helpers (`create` and also `build`, which may persist data if associations are needed for that model).

Understanding if a specific test really needs to persist something is hard. Reading the test and making sure it does not touch the DB is not enough because of indirect DB hits which may be buried arbitrarily deep within the call tree of any of the methods used in the test. When you have several thousand tests, it's basically impossible to have that kind of knowledge over the entire suite. Unless you are reading the spec for a specific purpose (i.e. trying to improve your knowledge of a model or a behavior), spending so much effort towards understanding a spec also represents tremendous re-work‚Ää‚Äî‚Ääafter all, "understanding a spec" is obviously a huge part of the work needed to build a spec.

Thankfully, we don't have to understand the entire spec suite: we just have to leverage all those man-hours put into writing them by assuming they are correct and making sure the tests pass. So we did a global find-and-replace, replacing`create`with`build_stubbed`, then we ran the whole suite and did a`git checkout`on the failing specs. We repeated the process, now swapping `create`with `build`. After the process, our test suite was making several hundred DB hits less than before‚Ää‚Äî‚Ääfor next to zero work.

## Tidying up

Beyond the specs themselves, there is an entire load process that also consumes time. There were at least half a dozen gems in the test group that were either unnecessary or no longer used. `spec_helper` (and `rails_helper`) are also loaded in each spec, and had several unused or unnecessary code. Even `pending`tests can take a toll on the suite run time, since the entire testing apparatus (gems, spec\_helper, etc) is still loaded for the test.

## Final results

With these three improvements, CI run time fell from 24 minutes to 14 minutes‚Ää‚Äî‚Ääa 41.6% improvement. The project repo is also 20MB smaller due to the merged cassettes. All in just a couple of days' work!

These were solid improvements and should be celebrated. However, 14 minutes is still far from ideal for any TDD-style development. At some point in the future, we might want to look into fine-tuning our CI configuration, using a slimmer`spec_helper`(which is more or less untouched since we were in Rails 3, and loads all of Rails‚Äî we're on Rails 5 now, so we should leverage `rails_helper`if we can), and perhaps parallelizing some specs if possible.

By [Leonardo Brito](https://medium.com/@lbrito) on [September 4, 2017](https://medium.com/p/8f3ab05a33f9).

[Canonical link](https://medium.com/@lbrito/improving-spec-speed-in-a-huge-old-rails-app-8f3ab05a33f9)

Exported from [Medium](https://medium.com) on May 1, 2019.
;
T;U;[0I"–0<p>We got a 6-year-old Rails app with ~370k LOC and a ~6k-test suite which took 24 minutes to complete. Not good! We took a few days off of the main project to see if we could make things better.</p>

<p>More often than not, test suites are the nasty underbelly of a Rails app. Size and age just aggravate the problem. Tests are seldom a high priority in any project, and speed might not be an issue at all in smaller apps where the whole test suite might take just a few seconds to complete. As the project grows and the CI takes increasingly longer to complete, spec speed suddenly becomes more of an issue.</p>

<p>‚ÄúSmall‚Äù and ‚Äúnew‚Äù are not exactly the case for a certain Rails project we‚Äôre working on here at Guava. We‚Äôre talking about a 6-year-old e-commerce portal with ~370k LOC, a couple million customers and a ~6k-test, 300-spec suite which took, on average, a whopping 24 minutes to complete in our CI. <em>Not good!</em> So we took a couple of days off the main project to see if we could make things better‚Ää‚Äî‚Ääor less worse.</p>

<!-- more -->

<h2 id="preliminariessomeone-must-have-solvedthis">Preliminaries‚Ää‚Äî‚Ääsomeone <em>must</em> have solved¬†this!</h2>

<p>The first step we took was, of course, to do some ‚Äúliterature review‚Äù, so to speak. Googling ‚Äúimproving rspec spec speed‚Äù will yield dozens of ‚Äú10 ways to improve spec speed‚Äù-like articles, with more or less the same tips repeated over and over: make less DB hits, make sure the tests don‚Äôt do external requests, don‚Äôt use <code>js: true</code> unless you need to, etc. Solid points, but all of them were either already used in our codebase or impractical to implement in a project this size.</p>

<p>We would need to find our own solutions.</p>

<h2 id="birds-eye-view-macro-profiling">Bird‚Äôs eye view: ‚Äúmacro‚Äù profiling</h2>

<p>The first step in any kind of optimization is to assess the current situation. Profiling the test suite can help identify possible bottlenecks. Since we‚Äôre using RSpec, this first step was just running the whole suite with the <code>--profile=100</code> flag, which outputs the 100 slowest examples and the 100 slowest example groups.</p>

<p>Unfortunately, most of the 100 slowest tests were similarly slow, with the slowest completing at around 8 seconds and the fastest (of this ‚Äútop 100 slowest‚Äù group) at around 4 seconds. In other words, they all took more or less the same time (at least in order of magnitude) to complete. There was no large ‚Äúbottleneck‚Äù billboard to chase after, no single, minutes-long behemoth of a test to slay.</p>

<p>The ‚Äúexample group‚Äù profiling section is where things got interesting. RSpec presents a list of groups (e.g. <code>describe</code> blocks) alongside their total running time and average running time of each example in the group. Again the average running times were very much alike and formed a very mild and reasonable slope, with no individual group that could be singled-out as significantly slower than the rest. However, a few groups caught my attention because of their really long total running time, even though they had good or normal average running times:</p>

<div class="highlight"><pre><code class="language-pseudo">Top 100 slowest example groups:
 Group 1
 3.02 seconds average (151.12 seconds / 50 examples) ./spec/‚Ä¶
 Group 2
 2.39 seconds average (143.25 seconds / 60 examples) ./spec/‚Ä¶
 Group 3
 1.7 seconds average (425.19 seconds / 250 examples) ./spec/‚Ä¶
 Group 4
 1.53 seconds average (145.27 seconds / 95 examples) ./spec/‚Ä¶
‚Ä¶
Group 38
 0.64877 seconds average (0.64877 seconds / 1 example) ./spec/‚Ä¶
 Group 39
 0.62933 seconds average (1.26 seconds / 2 examples) ./spec/‚Ä¶
 Group 40
 0.59483 seconds average (1.78 seconds / 3 examples) ./spec/‚Ä¶
 Group 41
 0.58132 seconds average (95.34 seconds / 164 examples) ./spec/‚Ä¶
 Group 42
 0.20273 seconds average (72.17 seconds / 356 examples) ./spec/‚Ä¶</code></pre></div>

<p>Groups 1 through 4 are clearly candidates for a closer look, but so are groups 41 and 42, which were buried deep in the report because of their relatively good average running times.</p>

<p>Now that we had a list of candidates for examination, it was time to bring in the microscope.</p>

<h2 id="under-the-microscope-micro-profiling-withrubyprof">Under the microscope: ‚Äúmicro‚Äù profiling with¬†RubyProf</h2>

<p>The first spec we examined was Group 3, a large (250 examples) spec that took several minutes to run. After discarding the ‚Äúobvious‚Äù possible culprits described in the literature review section above, we fired up <a href="https://github.com/ruby-prof/ruby-prof">RubyProf</a>, a MRI code profiler.</p>

<p>It would be highly impractical to run a code profiler on a spec with 250 examples, so again we ran <code>rspec --profile</code> on this individual file to get an overview of the examples in this spec. As could be expected, all the examples took a similar time to complete. So we chose a single example among the ones that took a bit more time to complete and dumped a RubyProf call tree at the end of the spec:</p>

<h3 id="group3specrb">group_3_spec.rb</h3>
<div class="highlight"><pre><code class="language-ruby"><span class="o">...</span>

<span class="n">it</span> <span class="s1">'does something'</span> <span class="k">do</span>
  <span class="o">...</span>
  <span class="n">result</span> <span class="o">=</span> <span class="no">RubyProf</span><span class="p">.</span><span class="nf">stop</span>
  <span class="n">printer</span> <span class="o">=</span> <span class="no">RubyProf</span><span class="o">::</span><span class="no">CallTreePrinter</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span><span class="n">result</span><span class="p">)</span>
  <span class="n">printer</span><span class="p">.</span><span class="nf">print</span><span class="p">(</span><span class="n">path</span> <span class="s2">"."</span><span class="p">,</span> <span class="ss">profile: </span><span class="s2">"profile"</span><span class="p">)</span>
<span class="k">end</span></code></pre></div>

<p>Examining the generated call tree with <a href="http://kcachegrind.sourceforge.net/html/Home.html">KCacheGrind</a>, we found out that IO waits (<code>IO#wait_readable</code> in the screenshot) were responsible for most of the wall time for this particular spec:</p>

<p><img src="/assets/images/goiabada/1*FjCiO6MvtgTo0pr533qZVw.jpg" alt="Call tree for a sampled spec example in group_3_spec.rb¬†.">
Call tree for a sampled spec example in group_3_spec.rb¬†.</p>

<p>This heavy IO load was odd: all the HTTP requests were handled with VCR and there was no other blatant IO use such as file loading. Further examining VCR configuration lead to an interesting discovery.</p>

<h2 id="the-vcrcaveat">The VCR¬†caveat</h2>

<p>For those unfamiliar with <a href="https://github.com/vcr/vcr">VCR</a>, it is a ruby gem that records HTTP interactions so that automated tests don‚Äôt have to actual HTTP requests each run. The recorded interactions are persisted in disk and committed in the versioning system. In their own words:</p>

<blockquote>
  <p>Record your test suite‚Äôs HTTP interactions and replay them during future test runs for fast, deterministic, accurate tests.</p>
</blockquote>

<p>There are many ways to use VCR (insert_cassette, use_cassette, etc). The programmer that wrote this particular spec chose to hook VCR with the top-level describe block, as so:</p>

<p><code>describe Foo, vcr: true do¬†...</code></p>

<p>Unlike insert_cassette and use_cassette, which require a cassette name argument, <code>vcr: true</code> follows the spec‚Äôs tree structure, creating directories for example groups (describe/context blocks) and individual cassettes for each example.</p>

<p>This might seem innocent enough, but Group 3 had 250 examples, most of which had some kind of HTTP interaction, resulting in over a hundred cassettes scattered over 40 or so folders. Many of the cassettes were identical, since there were examples that performed the same HTTP requests. For Group 3 alone, almost 2MB of cassettes were loaded! Despite surely being faster than making all the actual HTTP requests, loading this many files from disk was definitely an unnecessary IO strain‚Ää‚Äî‚Ääas the call tree showed.</p>

<p>Fortunately, we can easily force VCR to record all interactions in the group within a single cassette by using the¬†<code>:cassette_name</code> option:</p>

<p><code>describe Foo, vcr: { cassette_name: 'foo_spec' } do¬†...</code></p>

<p>The resulting new cassette for Group 3 had merely 33KB‚Ää‚Äî‚Ääorders of magnitude smaller than the previous cassettes. Reduced file size and the elimination of IO overhead caused by loading multiple scattered files significantly reduced spec speed: Group 3 now runs at around 110 seconds, nearly a quarter of the previous run time (425 seconds).</p>

<p>While using a single cassette was not always possible, and not always relevant (in smaller specs, for example), there were a great many specs that suffered loading dozens or hundreds of cassettes.</p>

<h2 id="brute-forcing-factorygirl-helpers">Brute-forcing FactoryGirl helpers</h2>

<p>We know that avoidable DB hits are one of the things that often slow down specs unnecessarily. In other words, tests commonly persist more data than they need to. One of the most easily traceable sources of persisted data are the FactoryGirl helpers (<code>create</code> and also <code>build</code>, which may persist data if associations are needed for that model).</p>

<p>Understanding if a specific test really needs to persist something is hard. Reading the test and making sure it does not touch the DB is not enough because of indirect DB hits which may be buried arbitrarily deep within the call tree of any of the methods used in the test. When you have several thousand tests, it‚Äôs basically impossible to have that kind of knowledge over the entire suite. Unless you are reading the spec for a specific purpose (i.e. trying to improve your knowledge of a model or a behavior), spending so much effort towards understanding a spec also represents tremendous re-work‚Ää‚Äî‚Ääafter all, ‚Äúunderstanding a spec‚Äù is obviously a huge part of the work needed to build a spec.</p>

<p>Thankfully, we don‚Äôt have to understand the entire spec suite: we just have to leverage all those man-hours put into writing them by assuming they are correct and making sure the tests pass. So we did a global find-and-replace, replacing<code>create</code>with<code>build_stubbed</code>, then we ran the whole suite and did a<code>git checkout</code>on the failing specs. We repeated the process, now swapping <code>create</code>with <code>build</code>. After the process, our test suite was making several hundred DB hits less than before‚Ää‚Äî‚Ääfor next to zero work.</p>

<h2 id="tidying-up">Tidying up</h2>

<p>Beyond the specs themselves, there is an entire load process that also consumes time. There were at least half a dozen gems in the test group that were either unnecessary or no longer used. <code>spec_helper</code> (and <code>rails_helper</code>) are also loaded in each spec, and had several unused or unnecessary code. Even <code>pending</code>tests can take a toll on the suite run time, since the entire testing apparatus (gems, spec_helper, etc) is still loaded for the test.</p>

<h2 id="final-results">Final results</h2>

<p>With these three improvements, CI run time fell from 24 minutes to 14 minutes‚Ää‚Äî‚Ääa 41.6% improvement. The project repo is also 20MB smaller due to the merged cassettes. All in just a couple of days‚Äô work!</p>

<p>These were solid improvements and should be celebrated. However, 14 minutes is still far from ideal for any TDD-style development. At some point in the future, we might want to look into fine-tuning our CI configuration, using a slimmer<code>spec_helper</code>(which is more or less untouched since we were in Rails 3, and loads all of Rails‚Äî we‚Äôre on Rails 5 now, so we should leverage <code>rails_helper</code>if we can), and perhaps parallelizing some specs if possible.</p>

<p>By <a href="https://medium.com/@lbrito">Leonardo Brito</a> on <a href="https://medium.com/p/8f3ab05a33f9">September 4, 2017</a>.</p>

<p><a href="https://medium.com/@lbrito/improving-spec-speed-in-a-huge-old-rails-app-8f3ab05a33f9">Canonical link</a></p>

<p>Exported from <a href="https://medium.com">Medium</a> on May 1, 2019.</p>
;
T;U;[0I"›8<!DOCTYPE html><html lang="en"><head>
    <meta charset="utf-8">
    <title>A Developer's Notebook - Improving spec speed in a huge, old Rails app</title>
    <link rel="stylesheet" href="https://unpkg.com/purecss@1.0.1/build/pure-min.css" integrity="sha384-oAOxQR6DkCoMliIh8yFnu25d7Eq/PHS21PClpwjOTeU2jRSq11vu66rf90/cZr47" crossorigin="anonymous">
    <link rel="stylesheet" href="../../assets/stylesheet.css">
    <link rel="stylesheet" href="../../assets/highlight.css">

    <!-- you don't need to keep this, but it's cool for stats! -->
    <meta name="generator" content="Nanoc 4.11.9">
  </head>
  <body>
    <div id="layout">
      <div class="header">
        <h1>
          <a href="../../">A Developer's Notebook</a>
        </h1>
      </div>


      <div class="content">
        <nav class="pure-g">
          <div class="pure-u-2-3 links">
            <a href="../../index.html">Home</a> ¬∑
            <a href="../../tags.html">Tags</a> ¬∑
            <a href="../../years.html">Years</a> ¬∑
            <a href="../../about.html">About</a>
          </div>

          <div class="pure-u-1-3">
            <div class="contact">
              <span>
                <a href="https://github.com/lbrito1" download="">
                  <img src="../../assets/icons/github.svg" alt="Github icon">
                  </a>
              </span>
              <span>
                <a href="https://www.linkedin.com/in/leonardo-mendes-brito/">
                <img src="../../assets/icons/linkedin.svg" alt="LinkedIn icon">
                </a>
              </span>
            </div>
          </div>
        </nav>
        
  <div class="post-show">
    <h1>Improving spec speed in a huge, old Rails app</h1>
    <article class="text">
      <p>We got a 6-year-old Rails app with ~370k LOC and a ~6k-test suite which took 24 minutes to complete. Not good! We took a few days off of the main project to see if we could make things better.</p>

<p>More often than not, test suites are the nasty underbelly of a Rails app. Size and age just aggravate the problem. Tests are seldom a high priority in any project, and speed might not be an issue at all in smaller apps where the whole test suite might take just a few seconds to complete. As the project grows and the CI takes increasingly longer to complete, spec speed suddenly becomes more of an issue.</p>

<p>‚ÄúSmall‚Äù and ‚Äúnew‚Äù are not exactly the case for a certain Rails project we‚Äôre working on here at Guava. We‚Äôre talking about a 6-year-old e-commerce portal with ~370k LOC, a couple million customers and a ~6k-test, 300-spec suite which took, on average, a whopping 24 minutes to complete in our CI. <em>Not good!</em> So we took a couple of days off the main project to see if we could make things better‚Ää‚Äî‚Ääor less worse.</p>

<!-- more -->

<h2 id="preliminariessomeone-must-have-solvedthis">Preliminaries‚Ää‚Äî‚Ääsomeone <em>must</em> have solved&nbsp;this!</h2>

<p>The first step we took was, of course, to do some ‚Äúliterature review‚Äù, so to speak. Googling ‚Äúimproving rspec spec speed‚Äù will yield dozens of ‚Äú10 ways to improve spec speed‚Äù-like articles, with more or less the same tips repeated over and over: make less DB hits, make sure the tests don‚Äôt do external requests, don‚Äôt use <code>js: true</code> unless you need to, etc. Solid points, but all of them were either already used in our codebase or impractical to implement in a project this size.</p>

<p>We would need to find our own solutions.</p>

<h2 id="birds-eye-view-macro-profiling">Bird‚Äôs eye view: ‚Äúmacro‚Äù profiling</h2>

<p>The first step in any kind of optimization is to assess the current situation. Profiling the test suite can help identify possible bottlenecks. Since we‚Äôre using RSpec, this first step was just running the whole suite with the <code>--profile=100</code> flag, which outputs the 100 slowest examples and the 100 slowest example groups.</p>

<p>Unfortunately, most of the 100 slowest tests were similarly slow, with the slowest completing at around 8 seconds and the fastest (of this ‚Äútop 100 slowest‚Äù group) at around 4 seconds. In other words, they all took more or less the same time (at least in order of magnitude) to complete. There was no large ‚Äúbottleneck‚Äù billboard to chase after, no single, minutes-long behemoth of a test to slay.</p>

<p>The ‚Äúexample group‚Äù profiling section is where things got interesting. RSpec presents a list of groups (e.g. <code>describe</code> blocks) alongside their total running time and average running time of each example in the group. Again the average running times were very much alike and formed a very mild and reasonable slope, with no individual group that could be singled-out as significantly slower than the rest. However, a few groups caught my attention because of their really long total running time, even though they had good or normal average running times:</p>

<div class="highlight"><pre><code class="language-pseudo">Top 100 slowest example groups:
 Group 1
 3.02 seconds average (151.12 seconds / 50 examples) ./spec/‚Ä¶
 Group 2
 2.39 seconds average (143.25 seconds / 60 examples) ./spec/‚Ä¶
 Group 3
 1.7 seconds average (425.19 seconds / 250 examples) ./spec/‚Ä¶
 Group 4
 1.53 seconds average (145.27 seconds / 95 examples) ./spec/‚Ä¶
‚Ä¶
Group 38
 0.64877 seconds average (0.64877 seconds / 1 example) ./spec/‚Ä¶
 Group 39
 0.62933 seconds average (1.26 seconds / 2 examples) ./spec/‚Ä¶
 Group 40
 0.59483 seconds average (1.78 seconds / 3 examples) ./spec/‚Ä¶
 Group 41
 0.58132 seconds average (95.34 seconds / 164 examples) ./spec/‚Ä¶
 Group 42
 0.20273 seconds average (72.17 seconds / 356 examples) ./spec/‚Ä¶</code></pre></div>

<p>Groups 1 through 4 are clearly candidates for a closer look, but so are groups 41 and 42, which were buried deep in the report because of their relatively good average running times.</p>

<p>Now that we had a list of candidates for examination, it was time to bring in the microscope.</p>

<h2 id="under-the-microscope-micro-profiling-withrubyprof">Under the microscope: ‚Äúmicro‚Äù profiling with&nbsp;RubyProf</h2>

<p>The first spec we examined was Group 3, a large (250 examples) spec that took several minutes to run. After discarding the ‚Äúobvious‚Äù possible culprits described in the literature review section above, we fired up <a href="https://github.com/ruby-prof/ruby-prof">RubyProf</a>, a MRI code profiler.</p>

<p>It would be highly impractical to run a code profiler on a spec with 250 examples, so again we ran <code>rspec --profile</code> on this individual file to get an overview of the examples in this spec. As could be expected, all the examples took a similar time to complete. So we chose a single example among the ones that took a bit more time to complete and dumped a RubyProf call tree at the end of the spec:</p>

<h3 id="group3specrb">group_3_spec.rb</h3>
<div class="highlight"><pre><code class="language-ruby"><span class="o">...</span>

<span class="n">it</span> <span class="s1">'does something'</span> <span class="k">do</span>
  <span class="o">...</span>
  <span class="n">result</span> <span class="o">=</span> <span class="no">RubyProf</span><span class="p">.</span><span class="nf">stop</span>
  <span class="n">printer</span> <span class="o">=</span> <span class="no">RubyProf</span><span class="o">::</span><span class="no">CallTreePrinter</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span><span class="n">result</span><span class="p">)</span>
  <span class="n">printer</span><span class="p">.</span><span class="nf">print</span><span class="p">(</span><span class="n">path</span> <span class="s2">"."</span><span class="p">,</span> <span class="ss">profile: </span><span class="s2">"profile"</span><span class="p">)</span>
<span class="k">end</span></code></pre></div>

<p>Examining the generated call tree with <a href="http://kcachegrind.sourceforge.net/html/Home.html">KCacheGrind</a>, we found out that IO waits (<code>IO#wait_readable</code> in the screenshot) were responsible for most of the wall time for this particular spec:</p>

<p><img src="../../assets/images/goiabada/1*FjCiO6MvtgTo0pr533qZVw.jpg" alt="Call tree for a sampled spec example in group_3_spec.rb&nbsp;.">
Call tree for a sampled spec example in group_3_spec.rb&nbsp;.</p>

<p>This heavy IO load was odd: all the HTTP requests were handled with VCR and there was no other blatant IO use such as file loading. Further examining VCR configuration lead to an interesting discovery.</p>

<h2 id="the-vcrcaveat">The VCR&nbsp;caveat</h2>

<p>For those unfamiliar with <a href="https://github.com/vcr/vcr">VCR</a>, it is a ruby gem that records HTTP interactions so that automated tests don‚Äôt have to actual HTTP requests each run. The recorded interactions are persisted in disk and committed in the versioning system. In their own words:</p>

<blockquote>
  <p>Record your test suite‚Äôs HTTP interactions and replay them during future test runs for fast, deterministic, accurate tests.</p>
</blockquote>

<p>There are many ways to use VCR (insert_cassette, use_cassette, etc). The programmer that wrote this particular spec chose to hook VCR with the top-level describe block, as so:</p>

<p><code>describe Foo, vcr: true do&nbsp;...</code></p>

<p>Unlike insert_cassette and use_cassette, which require a cassette name argument, <code>vcr: true</code> follows the spec‚Äôs tree structure, creating directories for example groups (describe/context blocks) and individual cassettes for each example.</p>

<p>This might seem innocent enough, but Group 3 had 250 examples, most of which had some kind of HTTP interaction, resulting in over a hundred cassettes scattered over 40 or so folders. Many of the cassettes were identical, since there were examples that performed the same HTTP requests. For Group 3 alone, almost 2MB of cassettes were loaded! Despite surely being faster than making all the actual HTTP requests, loading this many files from disk was definitely an unnecessary IO strain‚Ää‚Äî‚Ääas the call tree showed.</p>

<p>Fortunately, we can easily force VCR to record all interactions in the group within a single cassette by using the&nbsp;<code>:cassette_name</code> option:</p>

<p><code>describe Foo, vcr: { cassette_name: 'foo_spec' } do&nbsp;...</code></p>

<p>The resulting new cassette for Group 3 had merely 33KB‚Ää‚Äî‚Ääorders of magnitude smaller than the previous cassettes. Reduced file size and the elimination of IO overhead caused by loading multiple scattered files significantly reduced spec speed: Group 3 now runs at around 110 seconds, nearly a quarter of the previous run time (425 seconds).</p>

<p>While using a single cassette was not always possible, and not always relevant (in smaller specs, for example), there were a great many specs that suffered loading dozens or hundreds of cassettes.</p>

<h2 id="brute-forcing-factorygirl-helpers">Brute-forcing FactoryGirl helpers</h2>

<p>We know that avoidable DB hits are one of the things that often slow down specs unnecessarily. In other words, tests commonly persist more data than they need to. One of the most easily traceable sources of persisted data are the FactoryGirl helpers (<code>create</code> and also <code>build</code>, which may persist data if associations are needed for that model).</p>

<p>Understanding if a specific test really needs to persist something is hard. Reading the test and making sure it does not touch the DB is not enough because of indirect DB hits which may be buried arbitrarily deep within the call tree of any of the methods used in the test. When you have several thousand tests, it‚Äôs basically impossible to have that kind of knowledge over the entire suite. Unless you are reading the spec for a specific purpose (i.e. trying to improve your knowledge of a model or a behavior), spending so much effort towards understanding a spec also represents tremendous re-work‚Ää‚Äî‚Ääafter all, ‚Äúunderstanding a spec‚Äù is obviously a huge part of the work needed to build a spec.</p>

<p>Thankfully, we don‚Äôt have to understand the entire spec suite: we just have to leverage all those man-hours put into writing them by assuming they are correct and making sure the tests pass. So we did a global find-and-replace, replacing<code>create</code>with<code>build_stubbed</code>, then we ran the whole suite and did a<code>git checkout</code>on the failing specs. We repeated the process, now swapping <code>create</code>with <code>build</code>. After the process, our test suite was making several hundred DB hits less than before‚Ää‚Äî‚Ääfor next to zero work.</p>

<h2 id="tidying-up">Tidying up</h2>

<p>Beyond the specs themselves, there is an entire load process that also consumes time. There were at least half a dozen gems in the test group that were either unnecessary or no longer used. <code>spec_helper</code> (and <code>rails_helper</code>) are also loaded in each spec, and had several unused or unnecessary code. Even <code>pending</code>tests can take a toll on the suite run time, since the entire testing apparatus (gems, spec_helper, etc) is still loaded for the test.</p>

<h2 id="final-results">Final results</h2>

<p>With these three improvements, CI run time fell from 24 minutes to 14 minutes‚Ää‚Äî‚Ääa 41.6% improvement. The project repo is also 20MB smaller due to the merged cassettes. All in just a couple of days‚Äô work!</p>

<p>These were solid improvements and should be celebrated. However, 14 minutes is still far from ideal for any TDD-style development. At some point in the future, we might want to look into fine-tuning our CI configuration, using a slimmer<code>spec_helper</code>(which is more or less untouched since we were in Rails 3, and loads all of Rails‚Äî we‚Äôre on Rails 5 now, so we should leverage <code>rails_helper</code>if we can), and perhaps parallelizing some specs if possible.</p>

<p>By <a href="https://medium.com/@lbrito">Leonardo Brito</a> on <a href="https://medium.com/p/8f3ab05a33f9">September 4, 2017</a>.</p>

<p><a href="https://medium.com/@lbrito/improving-spec-speed-in-a-huge-old-rails-app-8f3ab05a33f9">Canonical link</a></p>

<p>Exported from <a href="https://medium.com">Medium</a> on May 1, 2019.</p>

    </article>
    <aside>Posted at: Sep 04, 2017</aside>
    <div class="post-footer">
      <a href="../../index.html">Back</a>
    </div>
  </div>

        <div class="footer">
          2020 Leonardo Brito
        </div>
      </div>

    </div>
  


</body></html>;
T;@.;@.o;;;;	I":/posts/2015-09-20-ruby-dsl-metaprogramming-part-ii.md;
T{;{
;U;[I"\/home/carol/workspace/blog/content/posts/2015-09-20-ruby-dsl-metaprogramming-part-ii.md;
TI"\In the previous installment we built a simple text generator using some Ruby meta-programming tricks. It was still far from being our desired context-free grammar (CFG) generator, though, since it lacked many [CFG prerequisites](https://www.cs.rochester.edu/~nelson/courses/csc_173/grammars/cfg.html). Most flagrantly, we had no rule recursion and only one production (rule definition) per rule. Here's the what a script that would use both features:

<div class="highlight"><pre><code class="language-bash">
dictionary
  noun 'dog', 'bus'
  verb 'barked', 'parked'
  preposition 'at'

rule 'phrase'
  opt 'The', noun, verb, preposition, 'a', noun
  opt 'Here goes some', phrase, 'recursion.'
  opt 'Meet me', preposition, 'the station.'

grammar phrase: 10
</code></pre></div>

The `dictionary` section is just as we left it. Let's see what changed in the `rule` section.

<!-- more -->

Previously we had only one production per rule, so rule definitions such as `phrase` were captured by the `method_missing` method. This design would make multiple productions difficult to handle. Here's how we re-implemented the rule method:

<div class="highlight"><pre><code class="language-ruby">
def rule *args
  verbose "Read rule: #{args.to_s}"
  @last_rule = args.first.to_s
  @grammar.rules[@last_rule] = (Rule.new @last_rule)
  define_method(args.first.to_s) { @grammar.rules[args.first.to_s] }
  @state = :rule
end
</code></pre></div>

Once more we use `define_method` to dynamically define methods. Consider the `rule 'phrase'` statement present in our script: this would define a method named `phrase` which hopefully returns the `Rule` object within `@grammar.rules['phrase']`. Note that the returned rule _is not_ evaluated (i.e., it is still a Rule object, not a String object).

Now we keep track of the `@last_rule` so rule productions (options) are added to the appropriate rule. Options are captures by `opt`:

<div class="highlight"><pre><code class="language-ruby">
def opt *args
  if @state == :rule
    verbose "Read option for rule #{@last_rule}: #{args.to_s}"
    @grammar.rules[@last_rule].options << args
  end
end
</code></pre></div>

Here, `args` is an array of Rule production symbols (both terminal and non-terminal, i.e., both Strings and Rules). The set of Rule options will ultimately be an Array of Arrays of Rule production symbols corresponding to each `opt` line written in the DSL script (e.g. in the example above, `phrase` would have 3 options).

Rules are evaluated by `Grammar.generate`, which receives a Hash of rules and the amount of times they should be generated (e.g. `phrase: 10` in our example):

<div class="highlight"><pre><code class="language-ruby">
  def generate args
    text = ''
    args.each do |rulename, qty|
      (1..qty).each { text << @rules[rulename.to_s].to_s }
    end
    puts "Final result: \n========\n#{text}\n========"
  end
</code></pre></div>

How does Rule recursion work, though? Let's take a look at the `to_s` method in `Rule`:

<div class="highlight"><pre><code class="language-ruby">
  def to_s
    randkeys = options.sample
    randkeys.map! { |k| k.to_s }
    verbose "Applying rule #{@name} with keys: #{randkeys}."
    randkeys.join(" ")
  end
</code></pre></div>

Pretty straightforward: a production is chosen at random (e.g., 1 of the 3 options in our example), and each symbol in the production is evaluated into a String and concatenated into the final result. For example, say the first rule, `opt 'The', noun, verb, preposition, 'a', noun`, is chosen. Then `randkeys.map!` would call `to_s` for each key in the production: `'The'.to_s, noun.to_s`, etc. Recursion will happen if the key is a method that returns a Rule object (such as the `phrase` method we mentioned in the beginning of the post).

Let's try out a CFG classic: [well-formed parenthesis](https://en.wikipedia.org/wiki/Context-free_grammar#Well-formed_parentheses). Here's the script:

<div class="highlight"><pre><code class="language-bash">
rule 'par'
  opt '()'
  opt '(', par, ')'
  opt par, par

grammar par: 1
</code></pre></div>

And here's some sample output:

<div class="highlight"><pre><code class="language-bash">
$ ruby lero.rb examples.le
Final result:
========
( ( ( ( () ) ) () ) () )
========
$ ruby lero.rb examples.le
Final result:
========
( () )
========
$ ruby lero.rb examples.le
Final result:
========
() ()
========
</code></pre></div>

And now we're done! With only 2 classes (Grammar and Rule) and 1 additional file that defines a DSL (lero.rb), we were able to build a CFG-like text generator with the most important CFG properties.

[Full code](https://github.com/lbrito1/ruby_textgen) is available in the same repository.
;
T;U;[0I"‹&<p>In the previous installment we built a simple text generator using some Ruby meta-programming tricks. It was still far from being our desired context-free grammar (CFG) generator, though, since it lacked many <a href="https://www.cs.rochester.edu/~nelson/courses/csc_173/grammars/cfg.html">CFG prerequisites</a>. Most flagrantly, we had no rule recursion and only one production (rule definition) per rule. Here‚Äôs the what a script that would use both features:</p>

<div class="highlight"><pre><code class="language-bash">dictionary
  noun <span class="s1">'dog'</span>, <span class="s1">'bus'</span>
  verb <span class="s1">'barked'</span>, <span class="s1">'parked'</span>
  preposition <span class="s1">'at'</span>

rule <span class="s1">'phrase'</span>
  opt <span class="s1">'The'</span>, noun, verb, preposition, <span class="s1">'a'</span>, noun
  opt <span class="s1">'Here goes some'</span>, phrase, <span class="s1">'recursion.'</span>
  opt <span class="s1">'Meet me'</span>, preposition, <span class="s1">'the station.'</span>

grammar phrase: 10</code></pre></div>

<p>The <code>dictionary</code> section is just as we left it. Let‚Äôs see what changed in the <code>rule</code> section.</p>

<!-- more -->

<p>Previously we had only one production per rule, so rule definitions such as <code>phrase</code> were captured by the <code>method_missing</code> method. This design would make multiple productions difficult to handle. Here‚Äôs how we re-implemented the rule method:</p>

<div class="highlight"><pre><code class="language-ruby"><span class="k">def</span> <span class="nf">rule</span> <span class="o">*</span><span class="n">args</span>
  <span class="n">verbose</span> <span class="s2">"Read rule: </span><span class="si">#{</span><span class="n">args</span><span class="p">.</span><span class="nf">to_s</span><span class="si">}</span><span class="s2">"</span>
  <span class="vi">@last_rule</span> <span class="o">=</span> <span class="n">args</span><span class="p">.</span><span class="nf">first</span><span class="p">.</span><span class="nf">to_s</span>
  <span class="vi">@grammar</span><span class="p">.</span><span class="nf">rules</span><span class="p">[</span><span class="vi">@last_rule</span><span class="p">]</span> <span class="o">=</span> <span class="p">(</span><span class="no">Rule</span><span class="p">.</span><span class="nf">new</span> <span class="vi">@last_rule</span><span class="p">)</span>
  <span class="n">define_method</span><span class="p">(</span><span class="n">args</span><span class="p">.</span><span class="nf">first</span><span class="p">.</span><span class="nf">to_s</span><span class="p">)</span> <span class="p">{</span> <span class="vi">@grammar</span><span class="p">.</span><span class="nf">rules</span><span class="p">[</span><span class="n">args</span><span class="p">.</span><span class="nf">first</span><span class="p">.</span><span class="nf">to_s</span><span class="p">]</span> <span class="p">}</span>
  <span class="vi">@state</span> <span class="o">=</span> <span class="ss">:rule</span>
<span class="k">end</span></code></pre></div>

<p>Once more we use <code>define_method</code> to dynamically define methods. Consider the <code>rule 'phrase'</code> statement present in our script: this would define a method named <code>phrase</code> which hopefully returns the <code>Rule</code> object within <code>@grammar.rules['phrase']</code>. Note that the returned rule <em>is not</em> evaluated (i.e., it is still a Rule object, not a String object).</p>

<p>Now we keep track of the <code>@last_rule</code> so rule productions (options) are added to the appropriate rule. Options are captures by <code>opt</code>:</p>

<div class="highlight"><pre><code class="language-ruby"><span class="k">def</span> <span class="nf">opt</span> <span class="o">*</span><span class="n">args</span>
  <span class="k">if</span> <span class="vi">@state</span> <span class="o">==</span> <span class="ss">:rule</span>
    <span class="n">verbose</span> <span class="s2">"Read option for rule </span><span class="si">#{</span><span class="vi">@last_rule</span><span class="si">}</span><span class="s2">: </span><span class="si">#{</span><span class="n">args</span><span class="p">.</span><span class="nf">to_s</span><span class="si">}</span><span class="s2">"</span>
    <span class="vi">@grammar</span><span class="p">.</span><span class="nf">rules</span><span class="p">[</span><span class="vi">@last_rule</span><span class="p">].</span><span class="nf">options</span> <span class="o">&lt;&lt;</span> <span class="n">args</span>
  <span class="k">end</span>
<span class="k">end</span></code></pre></div>

<p>Here, <code>args</code> is an array of Rule production symbols (both terminal and non-terminal, i.e., both Strings and Rules). The set of Rule options will ultimately be an Array of Arrays of Rule production symbols corresponding to each <code>opt</code> line written in the DSL script (e.g. in the example above, <code>phrase</code> would have 3 options).</p>

<p>Rules are evaluated by <code>Grammar.generate</code>, which receives a Hash of rules and the amount of times they should be generated (e.g. <code>phrase: 10</code> in our example):</p>

<div class="highlight"><pre><code class="language-ruby">  <span class="k">def</span> <span class="nf">generate</span> <span class="n">args</span>
    <span class="n">text</span> <span class="o">=</span> <span class="s1">''</span>
    <span class="n">args</span><span class="p">.</span><span class="nf">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">rulename</span><span class="p">,</span> <span class="n">qty</span><span class="o">|</span>
      <span class="p">(</span><span class="mi">1</span><span class="o">..</span><span class="n">qty</span><span class="p">).</span><span class="nf">each</span> <span class="p">{</span> <span class="n">text</span> <span class="o">&lt;&lt;</span> <span class="vi">@rules</span><span class="p">[</span><span class="n">rulename</span><span class="p">.</span><span class="nf">to_s</span><span class="p">].</span><span class="nf">to_s</span> <span class="p">}</span>
    <span class="k">end</span>
    <span class="nb">puts</span> <span class="s2">"Final result: </span><span class="se">\n</span><span class="s2">========</span><span class="se">\n</span><span class="si">#{</span><span class="n">text</span><span class="si">}</span><span class="se">\n</span><span class="s2">========"</span>
  <span class="k">end</span></code></pre></div>

<p>How does Rule recursion work, though? Let‚Äôs take a look at the <code>to_s</code> method in <code>Rule</code>:</p>

<div class="highlight"><pre><code class="language-ruby">  <span class="k">def</span> <span class="nf">to_s</span>
    <span class="n">randkeys</span> <span class="o">=</span> <span class="n">options</span><span class="p">.</span><span class="nf">sample</span>
    <span class="n">randkeys</span><span class="p">.</span><span class="nf">map!</span> <span class="p">{</span> <span class="o">|</span><span class="n">k</span><span class="o">|</span> <span class="n">k</span><span class="p">.</span><span class="nf">to_s</span> <span class="p">}</span>
    <span class="n">verbose</span> <span class="s2">"Applying rule </span><span class="si">#{</span><span class="vi">@name</span><span class="si">}</span><span class="s2"> with keys: </span><span class="si">#{</span><span class="n">randkeys</span><span class="si">}</span><span class="s2">."</span>
    <span class="n">randkeys</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="s2">" "</span><span class="p">)</span>
  <span class="k">end</span></code></pre></div>

<p>Pretty straightforward: a production is chosen at random (e.g., 1 of the 3 options in our example), and each symbol in the production is evaluated into a String and concatenated into the final result. For example, say the first rule, <code>opt 'The', noun, verb, preposition, 'a', noun</code>, is chosen. Then <code>randkeys.map!</code> would call <code>to_s</code> for each key in the production: <code>'The'.to_s, noun.to_s</code>, etc. Recursion will happen if the key is a method that returns a Rule object (such as the <code>phrase</code> method we mentioned in the beginning of the post).</p>

<p>Let‚Äôs try out a CFG classic: <a href="https://en.wikipedia.org/wiki/Context-free_grammar#Well-formed_parentheses">well-formed parenthesis</a>. Here‚Äôs the script:</p>

<div class="highlight"><pre><code class="language-bash">rule <span class="s1">'par'</span>
  opt <span class="s1">'()'</span>
  opt <span class="s1">'('</span>, par, <span class="s1">')'</span>
  opt par, par

grammar par: 1</code></pre></div>

<p>And here‚Äôs some sample output:</p>

<div class="highlight"><pre><code class="language-bash"><span class="nv">$ </span>ruby lero.rb examples.le
Final result:
<span class="o">========</span>
<span class="o">(</span> <span class="o">(</span> <span class="o">(</span> <span class="o">(</span> <span class="o">()</span> <span class="o">)</span> <span class="o">)</span> <span class="o">()</span> <span class="o">)</span> <span class="o">()</span> <span class="o">)</span>
<span class="o">========</span>
<span class="nv">$ </span>ruby lero.rb examples.le
Final result:
<span class="o">========</span>
<span class="o">(</span> <span class="o">()</span> <span class="o">)</span>
<span class="o">========</span>
<span class="nv">$ </span>ruby lero.rb examples.le
Final result:
<span class="o">========</span>
<span class="o">()</span> <span class="o">()</span>
<span class="o">========</span></code></pre></div>

<p>And now we‚Äôre done! With only 2 classes (Grammar and Rule) and 1 additional file that defines a DSL (lero.rb), we were able to build a CFG-like text generator with the most important CFG properties.</p>

<p><a href="https://github.com/lbrito1/ruby_textgen">Full code</a> is available in the same repository.</p>
;
T;U;[0I"∏.<!DOCTYPE html><html lang="en"><head>
    <meta charset="utf-8">
    <title>A Developer's Notebook - Ruby DSL &amp; metaprogramming, part II</title>
    <link rel="stylesheet" href="https://unpkg.com/purecss@1.0.1/build/pure-min.css" integrity="sha384-oAOxQR6DkCoMliIh8yFnu25d7Eq/PHS21PClpwjOTeU2jRSq11vu66rf90/cZr47" crossorigin="anonymous">
    <link rel="stylesheet" href="../../assets/stylesheet.css">
    <link rel="stylesheet" href="../../assets/highlight.css">

    <!-- you don't need to keep this, but it's cool for stats! -->
    <meta name="generator" content="Nanoc 4.11.9">
  </head>
  <body>
    <div id="layout">
      <div class="header">
        <h1>
          <a href="../../">A Developer's Notebook</a>
        </h1>
      </div>


      <div class="content">
        <nav class="pure-g">
          <div class="pure-u-2-3 links">
            <a href="../../index.html">Home</a> ¬∑
            <a href="../../tags.html">Tags</a> ¬∑
            <a href="../../years.html">Years</a> ¬∑
            <a href="../../about.html">About</a>
          </div>

          <div class="pure-u-1-3">
            <div class="contact">
              <span>
                <a href="https://github.com/lbrito1" download="">
                  <img src="../../assets/icons/github.svg" alt="Github icon">
                  </a>
              </span>
              <span>
                <a href="https://www.linkedin.com/in/leonardo-mendes-brito/">
                <img src="../../assets/icons/linkedin.svg" alt="LinkedIn icon">
                </a>
              </span>
            </div>
          </div>
        </nav>
        
  <div class="post-show">
    <h1>Ruby DSL &amp; metaprogramming, part II</h1>
    <article class="text">
      <p>In the previous installment we built a simple text generator using some Ruby meta-programming tricks. It was still far from being our desired context-free grammar (CFG) generator, though, since it lacked many <a href="https://www.cs.rochester.edu/~nelson/courses/csc_173/grammars/cfg.html">CFG prerequisites</a>. Most flagrantly, we had no rule recursion and only one production (rule definition) per rule. Here‚Äôs the what a script that would use both features:</p>

<div class="highlight"><pre><code class="language-bash">dictionary
  noun <span class="s1">'dog'</span>, <span class="s1">'bus'</span>
  verb <span class="s1">'barked'</span>, <span class="s1">'parked'</span>
  preposition <span class="s1">'at'</span>

rule <span class="s1">'phrase'</span>
  opt <span class="s1">'The'</span>, noun, verb, preposition, <span class="s1">'a'</span>, noun
  opt <span class="s1">'Here goes some'</span>, phrase, <span class="s1">'recursion.'</span>
  opt <span class="s1">'Meet me'</span>, preposition, <span class="s1">'the station.'</span>

grammar phrase: 10</code></pre></div>

<p>The <code>dictionary</code> section is just as we left it. Let‚Äôs see what changed in the <code>rule</code> section.</p>

<!-- more -->

<p>Previously we had only one production per rule, so rule definitions such as <code>phrase</code> were captured by the <code>method_missing</code> method. This design would make multiple productions difficult to handle. Here‚Äôs how we re-implemented the rule method:</p>

<div class="highlight"><pre><code class="language-ruby"><span class="k">def</span> <span class="nf">rule</span> <span class="o">*</span><span class="n">args</span>
  <span class="n">verbose</span> <span class="s2">"Read rule: </span><span class="si">#{</span><span class="n">args</span><span class="p">.</span><span class="nf">to_s</span><span class="si">}</span><span class="s2">"</span>
  <span class="vi">@last_rule</span> <span class="o">=</span> <span class="n">args</span><span class="p">.</span><span class="nf">first</span><span class="p">.</span><span class="nf">to_s</span>
  <span class="vi">@grammar</span><span class="p">.</span><span class="nf">rules</span><span class="p">[</span><span class="vi">@last_rule</span><span class="p">]</span> <span class="o">=</span> <span class="p">(</span><span class="no">Rule</span><span class="p">.</span><span class="nf">new</span> <span class="vi">@last_rule</span><span class="p">)</span>
  <span class="n">define_method</span><span class="p">(</span><span class="n">args</span><span class="p">.</span><span class="nf">first</span><span class="p">.</span><span class="nf">to_s</span><span class="p">)</span> <span class="p">{</span> <span class="vi">@grammar</span><span class="p">.</span><span class="nf">rules</span><span class="p">[</span><span class="n">args</span><span class="p">.</span><span class="nf">first</span><span class="p">.</span><span class="nf">to_s</span><span class="p">]</span> <span class="p">}</span>
  <span class="vi">@state</span> <span class="o">=</span> <span class="ss">:rule</span>
<span class="k">end</span></code></pre></div>

<p>Once more we use <code>define_method</code> to dynamically define methods. Consider the <code>rule 'phrase'</code> statement present in our script: this would define a method named <code>phrase</code> which hopefully returns the <code>Rule</code> object within <code>@grammar.rules['phrase']</code>. Note that the returned rule <em>is not</em> evaluated (i.e., it is still a Rule object, not a String object).</p>

<p>Now we keep track of the <code>@last_rule</code> so rule productions (options) are added to the appropriate rule. Options are captures by <code>opt</code>:</p>

<div class="highlight"><pre><code class="language-ruby"><span class="k">def</span> <span class="nf">opt</span> <span class="o">*</span><span class="n">args</span>
  <span class="k">if</span> <span class="vi">@state</span> <span class="o">==</span> <span class="ss">:rule</span>
    <span class="n">verbose</span> <span class="s2">"Read option for rule </span><span class="si">#{</span><span class="vi">@last_rule</span><span class="si">}</span><span class="s2">: </span><span class="si">#{</span><span class="n">args</span><span class="p">.</span><span class="nf">to_s</span><span class="si">}</span><span class="s2">"</span>
    <span class="vi">@grammar</span><span class="p">.</span><span class="nf">rules</span><span class="p">[</span><span class="vi">@last_rule</span><span class="p">].</span><span class="nf">options</span> <span class="o">&lt;&lt;</span> <span class="n">args</span>
  <span class="k">end</span>
<span class="k">end</span></code></pre></div>

<p>Here, <code>args</code> is an array of Rule production symbols (both terminal and non-terminal, i.e., both Strings and Rules). The set of Rule options will ultimately be an Array of Arrays of Rule production symbols corresponding to each <code>opt</code> line written in the DSL script (e.g. in the example above, <code>phrase</code> would have 3 options).</p>

<p>Rules are evaluated by <code>Grammar.generate</code>, which receives a Hash of rules and the amount of times they should be generated (e.g. <code>phrase: 10</code> in our example):</p>

<div class="highlight"><pre><code class="language-ruby">  <span class="k">def</span> <span class="nf">generate</span> <span class="n">args</span>
    <span class="n">text</span> <span class="o">=</span> <span class="s1">''</span>
    <span class="n">args</span><span class="p">.</span><span class="nf">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">rulename</span><span class="p">,</span> <span class="n">qty</span><span class="o">|</span>
      <span class="p">(</span><span class="mi">1</span><span class="o">..</span><span class="n">qty</span><span class="p">).</span><span class="nf">each</span> <span class="p">{</span> <span class="n">text</span> <span class="o">&lt;&lt;</span> <span class="vi">@rules</span><span class="p">[</span><span class="n">rulename</span><span class="p">.</span><span class="nf">to_s</span><span class="p">].</span><span class="nf">to_s</span> <span class="p">}</span>
    <span class="k">end</span>
    <span class="nb">puts</span> <span class="s2">"Final result: </span><span class="se">\n</span><span class="s2">========</span><span class="se">\n</span><span class="si">#{</span><span class="n">text</span><span class="si">}</span><span class="se">\n</span><span class="s2">========"</span>
  <span class="k">end</span></code></pre></div>

<p>How does Rule recursion work, though? Let‚Äôs take a look at the <code>to_s</code> method in <code>Rule</code>:</p>

<div class="highlight"><pre><code class="language-ruby">  <span class="k">def</span> <span class="nf">to_s</span>
    <span class="n">randkeys</span> <span class="o">=</span> <span class="n">options</span><span class="p">.</span><span class="nf">sample</span>
    <span class="n">randkeys</span><span class="p">.</span><span class="nf">map!</span> <span class="p">{</span> <span class="o">|</span><span class="n">k</span><span class="o">|</span> <span class="n">k</span><span class="p">.</span><span class="nf">to_s</span> <span class="p">}</span>
    <span class="n">verbose</span> <span class="s2">"Applying rule </span><span class="si">#{</span><span class="vi">@name</span><span class="si">}</span><span class="s2"> with keys: </span><span class="si">#{</span><span class="n">randkeys</span><span class="si">}</span><span class="s2">."</span>
    <span class="n">randkeys</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="s2">" "</span><span class="p">)</span>
  <span class="k">end</span></code></pre></div>

<p>Pretty straightforward: a production is chosen at random (e.g., 1 of the 3 options in our example), and each symbol in the production is evaluated into a String and concatenated into the final result. For example, say the first rule, <code>opt 'The', noun, verb, preposition, 'a', noun</code>, is chosen. Then <code>randkeys.map!</code> would call <code>to_s</code> for each key in the production: <code>'The'.to_s, noun.to_s</code>, etc. Recursion will happen if the key is a method that returns a Rule object (such as the <code>phrase</code> method we mentioned in the beginning of the post).</p>

<p>Let‚Äôs try out a CFG classic: <a href="https://en.wikipedia.org/wiki/Context-free_grammar#Well-formed_parentheses">well-formed parenthesis</a>. Here‚Äôs the script:</p>

<div class="highlight"><pre><code class="language-bash">rule <span class="s1">'par'</span>
  opt <span class="s1">'()'</span>
  opt <span class="s1">'('</span>, par, <span class="s1">')'</span>
  opt par, par

grammar par: 1</code></pre></div>

<p>And here‚Äôs some sample output:</p>

<div class="highlight"><pre><code class="language-bash"><span class="nv">$ </span>ruby lero.rb examples.le
Final result:
<span class="o">========</span>
<span class="o">(</span> <span class="o">(</span> <span class="o">(</span> <span class="o">(</span> <span class="o">()</span> <span class="o">)</span> <span class="o">)</span> <span class="o">()</span> <span class="o">)</span> <span class="o">()</span> <span class="o">)</span>
<span class="o">========</span>
<span class="nv">$ </span>ruby lero.rb examples.le
Final result:
<span class="o">========</span>
<span class="o">(</span> <span class="o">()</span> <span class="o">)</span>
<span class="o">========</span>
<span class="nv">$ </span>ruby lero.rb examples.le
Final result:
<span class="o">========</span>
<span class="o">()</span> <span class="o">()</span>
<span class="o">========</span></code></pre></div>

<p>And now we‚Äôre done! With only 2 classes (Grammar and Rule) and 1 additional file that defines a DSL (lero.rb), we were able to build a CFG-like text generator with the most important CFG properties.</p>

<p><a href="https://github.com/lbrito1/ruby_textgen">Full code</a> is available in the same repository.</p>

    </article>
    <aside>Posted at: Sep 20, 2015</aside>
    <div class="post-footer">
      <a href="../../index.html">Back</a>
    </div>
  </div>

        <div class="footer">
          2020 Leonardo Brito
        </div>
      </div>

    </div>
  


</body></html>;
T;@<;@<o;;;;	I"B/posts/2014-04-06-shortest-path-part-i-dijkstras-algorithm.md;
T{;{
;U;[I"d/home/carol/workspace/blog/content/posts/2014-04-06-shortest-path-part-i-dijkstras-algorithm.md;
TI"bNow that we have a way to represent [graphs]({% link _posts/2014-03-23-graph.markdown %}), we can discuss one of the most important problems in graph theory: the shortest path problem (SPP). More or less formally, we'll define SPP as:


Given a weighted¬†graph G(V,E), find the sequence P = {v0, v1, v2, ..., v(n-1)}, vi ‚àà V, from vertex V0 to vertex V(n-1), such that¬†the list of edges¬†EP = {(v0,v1), (v1,v2), ... (v(n-2), v(n-1))} exists and the summation of costs of all elements e¬†‚àà EP is the smallest possible.


In other words, find the less expensive (ergo "shortest")¬†path between two vertices.

The trivial solution is using [BFS]({% link _posts/2014-03-31-trees-part-i.markdown %})¬†starting at vertex A and stopping when it reaches vertex B. However, BFS doesn't look at the edge costs: it calculates the path with¬†least edges, not the path with least total cost.

Although not necessarily the fastest, Dijkstra's algorithm is probably the most popular way to solve the shortest path problem due to its simplicity and elegance. The algorithm relies heavily on [priority queues]({% link _posts/2014-03-21-heap-priority-queues.markdown %}), so make sure to take a look at that if you haven't already.

**Pseudocode**

<div class="highlight"><pre><code class="language-bash">
dist[from] = 0
for v : G
      if v != source
            dist[v] = infinity
      prev[v] = -1
      PQ.add(v, dist[v])
while PQ.hasNext()
      u = PQ.pop()
      for each neighbor v of u
            alt = dist[u] + length(u, v)
            if alt < dist[v]
                  dist[v] = alt
                  prev[v] = u
                  PQ.decrease_key(v,alt)
return prev
</code></pre></div>

<!-- more -->

Lines 1-6 take care of initialization. Since we start at vertex "from", it is marked as having distance = 0. We haven't visited any other vertices yet, so we set there distances to infinity. prev[v] stores a pointer to vertex w such that by backtracking from v to prev[v] = w to prev[w] and so on we eventually arrive at vertex "from" by the shortest possible path. Since we don't know the shortest paths yet, all prevs are set to -1 (i.e. unknown). Every key-value pair (vertex, dist[vertex]) is stored in the priority queue.

Lines 7-14 calculate the shortest paths. The main loop (line 7) repeats |V| times, since there are |V| elements in the PQ. The min element _u_ is extracted at line 8 and lines 10-14 update the distances from u to all of u's neighbors (v), which is called edge relaxation: if dist[u] + length(u, v) is smaller than v's current distance, that means we've found a shorter path to v by going through u, so we update dist[v] and set prev[v] = u. Since the key-value pair (v,dist[v]) has changed, we update the priority queue with a decrease-key call (line 14).

As you may have noticed, Dijkstra's algorithm calculates the shortest path from one vertex to all the other vertices in the graph. So if we're only interested in the distance from one vertex to another, we may safely stop the algorithm after we've finished updating our target's neighbors, i.e. when u = target, because since it has been popped from the PQ, it won't ever be checked again.

As an example, here's how the algorithm works for the following graph (excerpt from the test output with _DEBUG flag):

[![graph1](/assets/images/codedeposit/2014/04/graph1.png)](/assets/images/codedeposit/2014/04/graph1.png)

**Weights (last parameter): **

<div class="highlight"><pre><code class="language-bash">
      add_edge(g, v0, v1, 2);
      add_edge(g, v0, v2, 3);
      add_edge(g, v1, v2, 1);
      add_edge(g, v2, v3, 1);
      add_edge(g, v4, v2, 1);
      add_edge(g, v4, v1, 1);
      add_edge(g, v5, v4, 1);
</code></pre></div>

**First iteration: ** since our starting point is v0, it gets popped first. Neighbors 1 and 2 are updated.

<div class="highlight"><pre><code class="language-bash">
NEIGHBORS OF v[0]:
--------------------
v[1]     optimal dist = 2       prev dist = 2147483647
v[2]     optimal dist = 3       prev dist = 2147483647
</code></pre></div>

**2nd & 3rd iteration: ** v[1] had the smallest distance in PQ, followed by v[2]. Their neighbors are updated.

<div class="highlight"><pre><code class="language-bash">
NEIGHBORS OF v[1]:
--------------------
v[0]     optimal dist = 4
v[2]     optimal dist = 3
v[4]     optimal dist = 3       prev dist = 2147483647


NEIGHBORS OF v[2]:
--------------------
v[0]     optimal dist = 6
v[1]     optimal dist = 4
v[3]     optimal dist = 4       prev dist = 2147483647
v[4]     optimal dist = 4
</code></pre></div>

**All the rest: **

<div class="highlight"><pre><code class="language-bash">
NEIGHBORS OF v[4]:
--------------------
v[2]     optimal dist = 4
v[1]     optimal dist = 4
v[5]     optimal dist = 4       prev dist = 2147483647


NEIGHBORS OF v[3]:
--------------------
v[2]     optimal dist = 5


NEIGHBORS OF v[5]:
--------------------
v[4]     optimal dist = 5
</code></pre></div>

**Final output (prev[] array):**

<div class="highlight"><pre><code class="language-bash">

Previous
===============

vert[0] -1
vert[1] 0
vert[2] 0
vert[3] 2
vert[4] 1
vert[5] 4
</code></pre></div>

i.e. the shortest path from 0 to 5 is: 0, 1, 4, 5. Path cost can be found at dist[vert5]. Verify that that's the shortest path: cost(0,1) = 2 (whilst cost(0,2) = 3), cost(1,4) = 1 and cost(4,5) = 1.

Below, the full code. We used our previously implemented [priority queues]({% link _posts/2014-03-21-heap-priority-queues.markdown %}) working as the PQ, and made the stop-at-target modification mentioned above. As always, updated source code and companion test code can be found @ github.

<div class="highlight"><pre><code class="language-c">

#include <limits.h>
#include "../tests/graph_test.c"
#include "../data_structures/heap.c"

int* dijkstra(graph* g, int from, int to)
{
      int nv = get_nv(g);

      int* dist         = malloc(sizeof(int)*nv);
      int* previous     = malloc(sizeof(int)*nv);
      heap* minheap = new_heap(nv, ORD_ASC, compare_kv);

      int i;
      for (i=0; i<nv; i++)
      {
            dist[i] = INT_MAX;
            previous[i] = -1;
            kv* val = new_kv(i, (void*) &dist[i], compare_integer);
            push(minheap, val);

            #ifdef _DEBUG
                  edge_iter* itd = new_edge_it(g,get_vertex(g,i));
                  edge* next = NULL;
                  while ((next = next_edge(itd)) != NULL) DBG("\n%d\tE(%lu,%lu) = %d",itd->idx,next->from->id,next->to->id,next->cost ) ;
                  free(itd);
            #endif
      }


      dist[from]        = 0;
      previous[from]    = -1;

      kv* min = NULL; int found = FALSE;
      while (((min = pop(minheap)) != NULL) && !found)
      {
            int u = min->k;
            visit_vert(g,u);

            edge_iter* it = new_edge_it(g,get_vertex(g,u));
            edge* next = NULL;


            DBG("\n\n\nNEIGHBORS OF v[%d]:\n--------------------",u);
            while ((next = next_edge(it)) != NULL)
            {
                  int v = next->to->id;
                  int ndist = dist[u] + next->cost;
                  DBG("\nv[%d]",v);
                  DBG("\t optimal dist = %d",ndist);

                  //relax edge
                  if ((ndist>=0) && (ndist<dist[v]) && (u!=v))
                  {
                        DBG("\tprev dist = %d",dist[v]);

                        dist[v]     = ndist;
                        previous[v] = u;

                        int vpos = -1;
                        kv* candidate = get_kv(minheap->array, minheap->heap_size, v, &vpos);
                        if (candidate !=NULL) update(minheap, vpos);
                  }
            }

            if (u==to) found = TRUE;
      }

      return previous;
}
</code></pre></div>

;
T;U;[0I"_M<p>Now that we have a way to represent <a href="%7B%%20link%20_posts/2014-03-23-graph.markdown%20%%7D">graphs</a>, we can discuss one of the most important problems in graph theory: the shortest path problem (SPP). More or less formally, we‚Äôll define SPP as:</p>

<p>Given a weighted¬†graph G(V,E), find the sequence P = {v0, v1, v2, ‚Ä¶, v(n-1)}, vi ‚àà V, from vertex V0 to vertex V(n-1), such that¬†the list of edges¬†EP = {(v0,v1), (v1,v2), ‚Ä¶ (v(n-2), v(n-1))} exists and the summation of costs of all elements e¬†‚àà EP is the smallest possible.</p>

<p>In other words, find the less expensive (ergo ‚Äúshortest‚Äù)¬†path between two vertices.</p>

<p>The trivial solution is using <a href="%7B%%20link%20_posts/2014-03-31-trees-part-i.markdown%20%%7D">BFS</a>¬†starting at vertex A and stopping when it reaches vertex B. However, BFS doesn‚Äôt look at the edge costs: it calculates the path with¬†least edges, not the path with least total cost.</p>

<p>Although not necessarily the fastest, Dijkstra‚Äôs algorithm is probably the most popular way to solve the shortest path problem due to its simplicity and elegance. The algorithm relies heavily on <a href="%7B%%20link%20_posts/2014-03-21-heap-priority-queues.markdown%20%%7D">priority queues</a>, so make sure to take a look at that if you haven‚Äôt already.</p>

<p><strong>Pseudocode</strong></p>

<div class="highlight"><pre><code class="language-bash">dist[from] <span class="o">=</span> 0
<span class="k">for </span>v : G
      <span class="k">if </span>v <span class="o">!=</span> <span class="nb">source
            </span>dist[v] <span class="o">=</span> infinity
      prev[v] <span class="o">=</span> <span class="nt">-1</span>
      PQ.add<span class="o">(</span>v, dist[v]<span class="o">)</span>
<span class="k">while </span>PQ.hasNext<span class="o">()</span>
      u <span class="o">=</span> PQ.pop<span class="o">()</span>
      <span class="k">for </span>each neighbor v of u
            alt <span class="o">=</span> dist[u] + length<span class="o">(</span>u, v<span class="o">)</span>
            <span class="k">if </span>alt &lt; dist[v]
                  dist[v] <span class="o">=</span> alt
                  prev[v] <span class="o">=</span> u
                  PQ.decrease_key<span class="o">(</span>v,alt<span class="o">)</span>
<span class="k">return </span>prev</code></pre></div>

<!-- more -->

<p>Lines 1-6 take care of initialization. Since we start at vertex ‚Äúfrom‚Äù, it is marked as having distance = 0. We haven‚Äôt visited any other vertices yet, so we set there distances to infinity. prev[v] stores a pointer to vertex w such that by backtracking from v to prev[v] = w to prev[w] and so on we eventually arrive at vertex ‚Äúfrom‚Äù by the shortest possible path. Since we don‚Äôt know the shortest paths yet, all prevs are set to -1 (i.e. unknown). Every key-value pair (vertex, dist[vertex]) is stored in the priority queue.</p>

<table>
  <tbody>
    <tr>
      <td>Lines 7-14 calculate the shortest paths. The main loop (line 7) repeats</td>
      <td>V</td>
      <td>times, since there are</td>
      <td>V</td>
      <td>elements in the PQ. The min element <em>u</em> is extracted at line 8 and lines 10-14 update the distances from u to all of u‚Äôs neighbors (v), which is called edge relaxation: if dist[u] + length(u, v) is smaller than v‚Äôs current distance, that means we‚Äôve found a shorter path to v by going through u, so we update dist[v] and set prev[v] = u. Since the key-value pair (v,dist[v]) has changed, we update the priority queue with a decrease-key call (line 14).</td>
    </tr>
  </tbody>
</table>

<p>As you may have noticed, Dijkstra‚Äôs algorithm calculates the shortest path from one vertex to all the other vertices in the graph. So if we‚Äôre only interested in the distance from one vertex to another, we may safely stop the algorithm after we‚Äôve finished updating our target‚Äôs neighbors, i.e. when u = target, because since it has been popped from the PQ, it won‚Äôt ever be checked again.</p>

<p>As an example, here‚Äôs how the algorithm works for the following graph (excerpt from the test output with _DEBUG flag):</p>

<p><a href="/assets/images/codedeposit/2014/04/graph1.png"><img src="/assets/images/codedeposit/2014/04/graph1.png" alt="graph1"></a></p>

<p>**Weights (last parameter): **</p>

<div class="highlight"><pre><code class="language-bash">      add_edge<span class="o">(</span>g, v0, v1, 2<span class="o">)</span><span class="p">;</span>
      add_edge<span class="o">(</span>g, v0, v2, 3<span class="o">)</span><span class="p">;</span>
      add_edge<span class="o">(</span>g, v1, v2, 1<span class="o">)</span><span class="p">;</span>
      add_edge<span class="o">(</span>g, v2, v3, 1<span class="o">)</span><span class="p">;</span>
      add_edge<span class="o">(</span>g, v4, v2, 1<span class="o">)</span><span class="p">;</span>
      add_edge<span class="o">(</span>g, v4, v1, 1<span class="o">)</span><span class="p">;</span>
      add_edge<span class="o">(</span>g, v5, v4, 1<span class="o">)</span><span class="p">;</span></code></pre></div>

<p>**First iteration: ** since our starting point is v0, it gets popped first. Neighbors 1 and 2 are updated.</p>

<div class="highlight"><pre><code class="language-bash">NEIGHBORS OF v[0]:
<span class="nt">--------------------</span>
v[1]     optimal dist <span class="o">=</span> 2       prev dist <span class="o">=</span> 2147483647
v[2]     optimal dist <span class="o">=</span> 3       prev dist <span class="o">=</span> 2147483647</code></pre></div>

<p>**2nd &amp; 3rd iteration: ** v[1] had the smallest distance in PQ, followed by v[2]. Their neighbors are updated.</p>

<div class="highlight"><pre><code class="language-bash">NEIGHBORS OF v[1]:
<span class="nt">--------------------</span>
v[0]     optimal dist <span class="o">=</span> 4
v[2]     optimal dist <span class="o">=</span> 3
v[4]     optimal dist <span class="o">=</span> 3       prev dist <span class="o">=</span> 2147483647


NEIGHBORS OF v[2]:
<span class="nt">--------------------</span>
v[0]     optimal dist <span class="o">=</span> 6
v[1]     optimal dist <span class="o">=</span> 4
v[3]     optimal dist <span class="o">=</span> 4       prev dist <span class="o">=</span> 2147483647
v[4]     optimal dist <span class="o">=</span> 4</code></pre></div>

<p>**All the rest: **</p>

<div class="highlight"><pre><code class="language-bash">NEIGHBORS OF v[4]:
<span class="nt">--------------------</span>
v[2]     optimal dist <span class="o">=</span> 4
v[1]     optimal dist <span class="o">=</span> 4
v[5]     optimal dist <span class="o">=</span> 4       prev dist <span class="o">=</span> 2147483647


NEIGHBORS OF v[3]:
<span class="nt">--------------------</span>
v[2]     optimal dist <span class="o">=</span> 5


NEIGHBORS OF v[5]:
<span class="nt">--------------------</span>
v[4]     optimal dist <span class="o">=</span> 5</code></pre></div>

<p><strong>Final output (prev[] array):</strong></p>

<div class="highlight"><pre><code class="language-bash">Previous
<span class="o">===============</span>

vert[0] <span class="nt">-1</span>
vert[1] 0
vert[2] 0
vert[3] 2
vert[4] 1
vert[5] 4</code></pre></div>

<p>i.e. the shortest path from 0 to 5 is: 0, 1, 4, 5. Path cost can be found at dist[vert5]. Verify that that‚Äôs the shortest path: cost(0,1) = 2 (whilst cost(0,2) = 3), cost(1,4) = 1 and cost(4,5) = 1.</p>

<p>Below, the full code. We used our previously implemented <a href="%7B%%20link%20_posts/2014-03-21-heap-priority-queues.markdown%20%%7D">priority queues</a> working as the PQ, and made the stop-at-target modification mentioned above. As always, updated source code and companion test code can be found @ github.</p>

<div class="highlight"><pre><code class="language-c"><span class="cp">#include 
#include "../tests/graph_test.c"
#include "../data_structures/heap.c"
</span>
<span class="kt">int</span><span class="o">*</span> <span class="nf">dijkstra</span><span class="p">(</span><span class="n">graph</span><span class="o">*</span> <span class="n">g</span><span class="p">,</span> <span class="kt">int</span> <span class="n">from</span><span class="p">,</span> <span class="kt">int</span> <span class="n">to</span><span class="p">)</span>
<span class="p">{</span>
      <span class="kt">int</span> <span class="n">nv</span> <span class="o">=</span> <span class="n">get_nv</span><span class="p">(</span><span class="n">g</span><span class="p">);</span>

      <span class="kt">int</span><span class="o">*</span> <span class="n">dist</span>         <span class="o">=</span> <span class="n">malloc</span><span class="p">(</span><span class="k">sizeof</span><span class="p">(</span><span class="kt">int</span><span class="p">)</span><span class="o">*</span><span class="n">nv</span><span class="p">);</span>
      <span class="kt">int</span><span class="o">*</span> <span class="n">previous</span>     <span class="o">=</span> <span class="n">malloc</span><span class="p">(</span><span class="k">sizeof</span><span class="p">(</span><span class="kt">int</span><span class="p">)</span><span class="o">*</span><span class="n">nv</span><span class="p">);</span>
      <span class="n">heap</span><span class="o">*</span> <span class="n">minheap</span> <span class="o">=</span> <span class="n">new_heap</span><span class="p">(</span><span class="n">nv</span><span class="p">,</span> <span class="n">ORD_ASC</span><span class="p">,</span> <span class="n">compare_kv</span><span class="p">);</span>

      <span class="kt">int</span> <span class="n">i</span><span class="p">;</span>
      <span class="k">for</span> <span class="p">(</span><span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">nv</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
      <span class="p">{</span>
            <span class="n">dist</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">INT_MAX</span><span class="p">;</span>
            <span class="n">previous</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
            <span class="n">kv</span><span class="o">*</span> <span class="n">val</span> <span class="o">=</span> <span class="n">new_kv</span><span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="p">(</span><span class="kt">void</span><span class="o">*</span><span class="p">)</span> <span class="o">&amp;</span><span class="n">dist</span><span class="p">[</span><span class="n">i</span><span class="p">],</span> <span class="n">compare_integer</span><span class="p">);</span>
            <span class="n">push</span><span class="p">(</span><span class="n">minheap</span><span class="p">,</span> <span class="n">val</span><span class="p">);</span>

            <span class="cp">#ifdef _DEBUG
</span>                  <span class="n">edge_iter</span><span class="o">*</span> <span class="n">itd</span> <span class="o">=</span> <span class="n">new_edge_it</span><span class="p">(</span><span class="n">g</span><span class="p">,</span><span class="n">get_vertex</span><span class="p">(</span><span class="n">g</span><span class="p">,</span><span class="n">i</span><span class="p">));</span>
                  <span class="n">edge</span><span class="o">*</span> <span class="n">next</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
                  <span class="k">while</span> <span class="p">((</span><span class="n">next</span> <span class="o">=</span> <span class="n">next_edge</span><span class="p">(</span><span class="n">itd</span><span class="p">))</span> <span class="o">!=</span> <span class="nb">NULL</span><span class="p">)</span> <span class="n">DBG</span><span class="p">(</span><span class="s">"</span><span class="se">\n</span><span class="s">%d</span><span class="se">\t</span><span class="s">E(%lu,%lu) = %d"</span><span class="p">,</span><span class="n">itd</span><span class="o">-&gt;</span><span class="n">idx</span><span class="p">,</span><span class="n">next</span><span class="o">-&gt;</span><span class="n">from</span><span class="o">-&gt;</span><span class="n">id</span><span class="p">,</span><span class="n">next</span><span class="o">-&gt;</span><span class="n">to</span><span class="o">-&gt;</span><span class="n">id</span><span class="p">,</span><span class="n">next</span><span class="o">-&gt;</span><span class="n">cost</span> <span class="p">)</span> <span class="p">;</span>
                  <span class="n">free</span><span class="p">(</span><span class="n">itd</span><span class="p">);</span>
            <span class="cp">#endif
</span>      <span class="p">}</span>


      <span class="n">dist</span><span class="p">[</span><span class="n">from</span><span class="p">]</span>        <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
      <span class="n">previous</span><span class="p">[</span><span class="n">from</span><span class="p">]</span>    <span class="o">=</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>

      <span class="n">kv</span><span class="o">*</span> <span class="n">min</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span> <span class="kt">int</span> <span class="n">found</span> <span class="o">=</span> <span class="n">FALSE</span><span class="p">;</span>
      <span class="k">while</span> <span class="p">(((</span><span class="n">min</span> <span class="o">=</span> <span class="n">pop</span><span class="p">(</span><span class="n">minheap</span><span class="p">))</span> <span class="o">!=</span> <span class="nb">NULL</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="n">found</span><span class="p">)</span>
      <span class="p">{</span>
            <span class="kt">int</span> <span class="n">u</span> <span class="o">=</span> <span class="n">min</span><span class="o">-&gt;</span><span class="n">k</span><span class="p">;</span>
            <span class="n">visit_vert</span><span class="p">(</span><span class="n">g</span><span class="p">,</span><span class="n">u</span><span class="p">);</span>

            <span class="n">edge_iter</span><span class="o">*</span> <span class="n">it</span> <span class="o">=</span> <span class="n">new_edge_it</span><span class="p">(</span><span class="n">g</span><span class="p">,</span><span class="n">get_vertex</span><span class="p">(</span><span class="n">g</span><span class="p">,</span><span class="n">u</span><span class="p">));</span>
            <span class="n">edge</span><span class="o">*</span> <span class="n">next</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>


            <span class="n">DBG</span><span class="p">(</span><span class="s">"</span><span class="se">\n\n\n</span><span class="s">NEIGHBORS OF v[%d]:</span><span class="se">\n</span><span class="s">--------------------"</span><span class="p">,</span><span class="n">u</span><span class="p">);</span>
            <span class="k">while</span> <span class="p">((</span><span class="n">next</span> <span class="o">=</span> <span class="n">next_edge</span><span class="p">(</span><span class="n">it</span><span class="p">))</span> <span class="o">!=</span> <span class="nb">NULL</span><span class="p">)</span>
            <span class="p">{</span>
                  <span class="kt">int</span> <span class="n">v</span> <span class="o">=</span> <span class="n">next</span><span class="o">-&gt;</span><span class="n">to</span><span class="o">-&gt;</span><span class="n">id</span><span class="p">;</span>
                  <span class="kt">int</span> <span class="n">ndist</span> <span class="o">=</span> <span class="n">dist</span><span class="p">[</span><span class="n">u</span><span class="p">]</span> <span class="o">+</span> <span class="n">next</span><span class="o">-&gt;</span><span class="n">cost</span><span class="p">;</span>
                  <span class="n">DBG</span><span class="p">(</span><span class="s">"</span><span class="se">\n</span><span class="s">v[%d]"</span><span class="p">,</span><span class="n">v</span><span class="p">);</span>
                  <span class="n">DBG</span><span class="p">(</span><span class="s">"</span><span class="se">\t</span><span class="s"> optimal dist = %d"</span><span class="p">,</span><span class="n">ndist</span><span class="p">);</span>

                  <span class="c1">//relax edge</span>
                  <span class="k">if</span> <span class="p">((</span><span class="n">ndist</span><span class="o">&gt;=</span><span class="mi">0</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="p">(</span><span class="n">ndist</span><span class="o">&lt;</span><span class="n">dist</span><span class="p">[</span><span class="n">v</span><span class="p">])</span> <span class="o">&amp;&amp;</span> <span class="p">(</span><span class="n">u</span><span class="o">!=</span><span class="n">v</span><span class="p">))</span>
                  <span class="p">{</span>
                        <span class="n">DBG</span><span class="p">(</span><span class="s">"</span><span class="se">\t</span><span class="s">prev dist = %d"</span><span class="p">,</span><span class="n">dist</span><span class="p">[</span><span class="n">v</span><span class="p">]);</span>

                        <span class="n">dist</span><span class="p">[</span><span class="n">v</span><span class="p">]</span>     <span class="o">=</span> <span class="n">ndist</span><span class="p">;</span>
                        <span class="n">previous</span><span class="p">[</span><span class="n">v</span><span class="p">]</span> <span class="o">=</span> <span class="n">u</span><span class="p">;</span>

                        <span class="kt">int</span> <span class="n">vpos</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
                        <span class="n">kv</span><span class="o">*</span> <span class="n">candidate</span> <span class="o">=</span> <span class="n">get_kv</span><span class="p">(</span><span class="n">minheap</span><span class="o">-&gt;</span><span class="n">array</span><span class="p">,</span> <span class="n">minheap</span><span class="o">-&gt;</span><span class="n">heap_size</span><span class="p">,</span> <span class="n">v</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">vpos</span><span class="p">);</span>
                        <span class="k">if</span> <span class="p">(</span><span class="n">candidate</span> <span class="o">!=</span><span class="nb">NULL</span><span class="p">)</span> <span class="n">update</span><span class="p">(</span><span class="n">minheap</span><span class="p">,</span> <span class="n">vpos</span><span class="p">);</span>
                  <span class="p">}</span>
            <span class="p">}</span>

            <span class="k">if</span> <span class="p">(</span><span class="n">u</span><span class="o">==</span><span class="n">to</span><span class="p">)</span> <span class="n">found</span> <span class="o">=</span> <span class="n">TRUE</span><span class="p">;</span>
      <span class="p">}</span>

      <span class="k">return</span> <span class="n">previous</span><span class="p">;</span>
<span class="p">}</span>
<span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;&lt;/</span><span class="n">div</span><span class="o">&gt;</span></code></pre></div>
;
T;U;[0I"kU<!DOCTYPE html><html lang="en"><head>
    <meta charset="utf-8">
    <title>A Developer's Notebook - Shortest path, part I - Dijkstra's algorithm</title>
    <link rel="stylesheet" href="https://unpkg.com/purecss@1.0.1/build/pure-min.css" integrity="sha384-oAOxQR6DkCoMliIh8yFnu25d7Eq/PHS21PClpwjOTeU2jRSq11vu66rf90/cZr47" crossorigin="anonymous">
    <link rel="stylesheet" href="../../assets/stylesheet.css">
    <link rel="stylesheet" href="../../assets/highlight.css">

    <!-- you don't need to keep this, but it's cool for stats! -->
    <meta name="generator" content="Nanoc 4.11.9">
  </head>
  <body>
    <div id="layout">
      <div class="header">
        <h1>
          <a href="../../">A Developer's Notebook</a>
        </h1>
      </div>


      <div class="content">
        <nav class="pure-g">
          <div class="pure-u-2-3 links">
            <a href="../../index.html">Home</a> ¬∑
            <a href="../../tags.html">Tags</a> ¬∑
            <a href="../../years.html">Years</a> ¬∑
            <a href="../../about.html">About</a>
          </div>

          <div class="pure-u-1-3">
            <div class="contact">
              <span>
                <a href="https://github.com/lbrito1" download="">
                  <img src="../../assets/icons/github.svg" alt="Github icon">
                  </a>
              </span>
              <span>
                <a href="https://www.linkedin.com/in/leonardo-mendes-brito/">
                <img src="../../assets/icons/linkedin.svg" alt="LinkedIn icon">
                </a>
              </span>
            </div>
          </div>
        </nav>
        
  <div class="post-show">
    <h1>Shortest path, part I - Dijkstra's algorithm</h1>
    <article class="text">
      <p>Now that we have a way to represent <a href="%7B%%20link%20_posts/2014-03-23-graph.markdown%20%%7D">graphs</a>, we can discuss one of the most important problems in graph theory: the shortest path problem (SPP). More or less formally, we‚Äôll define SPP as:</p>

<p>Given a weighted&nbsp;graph G(V,E), find the sequence P = {v0, v1, v2, ‚Ä¶, v(n-1)}, vi ‚àà V, from vertex V0 to vertex V(n-1), such that&nbsp;the list of edges&nbsp;EP = {(v0,v1), (v1,v2), ‚Ä¶ (v(n-2), v(n-1))} exists and the summation of costs of all elements e&nbsp;‚àà EP is the smallest possible.</p>

<p>In other words, find the less expensive (ergo ‚Äúshortest‚Äù)&nbsp;path between two vertices.</p>

<p>The trivial solution is using <a href="%7B%%20link%20_posts/2014-03-31-trees-part-i.markdown%20%%7D">BFS</a>&nbsp;starting at vertex A and stopping when it reaches vertex B. However, BFS doesn‚Äôt look at the edge costs: it calculates the path with&nbsp;least edges, not the path with least total cost.</p>

<p>Although not necessarily the fastest, Dijkstra‚Äôs algorithm is probably the most popular way to solve the shortest path problem due to its simplicity and elegance. The algorithm relies heavily on <a href="%7B%%20link%20_posts/2014-03-21-heap-priority-queues.markdown%20%%7D">priority queues</a>, so make sure to take a look at that if you haven‚Äôt already.</p>

<p><strong>Pseudocode</strong></p>

<div class="highlight"><pre><code class="language-bash">dist[from] <span class="o">=</span> 0
<span class="k">for </span>v : G
      <span class="k">if </span>v <span class="o">!=</span> <span class="nb">source
            </span>dist[v] <span class="o">=</span> infinity
      prev[v] <span class="o">=</span> <span class="nt">-1</span>
      PQ.add<span class="o">(</span>v, dist[v]<span class="o">)</span>
<span class="k">while </span>PQ.hasNext<span class="o">()</span>
      u <span class="o">=</span> PQ.pop<span class="o">()</span>
      <span class="k">for </span>each neighbor v of u
            alt <span class="o">=</span> dist[u] + length<span class="o">(</span>u, v<span class="o">)</span>
            <span class="k">if </span>alt &lt; dist[v]
                  dist[v] <span class="o">=</span> alt
                  prev[v] <span class="o">=</span> u
                  PQ.decrease_key<span class="o">(</span>v,alt<span class="o">)</span>
<span class="k">return </span>prev</code></pre></div>

<!-- more -->

<p>Lines 1-6 take care of initialization. Since we start at vertex ‚Äúfrom‚Äù, it is marked as having distance = 0. We haven‚Äôt visited any other vertices yet, so we set there distances to infinity. prev[v] stores a pointer to vertex w such that by backtracking from v to prev[v] = w to prev[w] and so on we eventually arrive at vertex ‚Äúfrom‚Äù by the shortest possible path. Since we don‚Äôt know the shortest paths yet, all prevs are set to -1 (i.e. unknown). Every key-value pair (vertex, dist[vertex]) is stored in the priority queue.</p>

<table>
  <tbody>
    <tr>
      <td>Lines 7-14 calculate the shortest paths. The main loop (line 7) repeats</td>
      <td>V</td>
      <td>times, since there are</td>
      <td>V</td>
      <td>elements in the PQ. The min element <em>u</em> is extracted at line 8 and lines 10-14 update the distances from u to all of u‚Äôs neighbors (v), which is called edge relaxation: if dist[u] + length(u, v) is smaller than v‚Äôs current distance, that means we‚Äôve found a shorter path to v by going through u, so we update dist[v] and set prev[v] = u. Since the key-value pair (v,dist[v]) has changed, we update the priority queue with a decrease-key call (line 14).</td>
    </tr>
  </tbody>
</table>

<p>As you may have noticed, Dijkstra‚Äôs algorithm calculates the shortest path from one vertex to all the other vertices in the graph. So if we‚Äôre only interested in the distance from one vertex to another, we may safely stop the algorithm after we‚Äôve finished updating our target‚Äôs neighbors, i.e. when u = target, because since it has been popped from the PQ, it won‚Äôt ever be checked again.</p>

<p>As an example, here‚Äôs how the algorithm works for the following graph (excerpt from the test output with _DEBUG flag):</p>

<p><a href="../../assets/images/codedeposit/2014/04/graph1.png"><img src="../../assets/images/codedeposit/2014/04/graph1.png" alt="graph1"></a></p>

<p>**Weights (last parameter): **</p>

<div class="highlight"><pre><code class="language-bash">      add_edge<span class="o">(</span>g, v0, v1, 2<span class="o">)</span><span class="p">;</span>
      add_edge<span class="o">(</span>g, v0, v2, 3<span class="o">)</span><span class="p">;</span>
      add_edge<span class="o">(</span>g, v1, v2, 1<span class="o">)</span><span class="p">;</span>
      add_edge<span class="o">(</span>g, v2, v3, 1<span class="o">)</span><span class="p">;</span>
      add_edge<span class="o">(</span>g, v4, v2, 1<span class="o">)</span><span class="p">;</span>
      add_edge<span class="o">(</span>g, v4, v1, 1<span class="o">)</span><span class="p">;</span>
      add_edge<span class="o">(</span>g, v5, v4, 1<span class="o">)</span><span class="p">;</span></code></pre></div>

<p>**First iteration: ** since our starting point is v0, it gets popped first. Neighbors 1 and 2 are updated.</p>

<div class="highlight"><pre><code class="language-bash">NEIGHBORS OF v[0]:
<span class="nt">--------------------</span>
v[1]     optimal dist <span class="o">=</span> 2       prev dist <span class="o">=</span> 2147483647
v[2]     optimal dist <span class="o">=</span> 3       prev dist <span class="o">=</span> 2147483647</code></pre></div>

<p>**2nd &amp; 3rd iteration: ** v[1] had the smallest distance in PQ, followed by v[2]. Their neighbors are updated.</p>

<div class="highlight"><pre><code class="language-bash">NEIGHBORS OF v[1]:
<span class="nt">--------------------</span>
v[0]     optimal dist <span class="o">=</span> 4
v[2]     optimal dist <span class="o">=</span> 3
v[4]     optimal dist <span class="o">=</span> 3       prev dist <span class="o">=</span> 2147483647


NEIGHBORS OF v[2]:
<span class="nt">--------------------</span>
v[0]     optimal dist <span class="o">=</span> 6
v[1]     optimal dist <span class="o">=</span> 4
v[3]     optimal dist <span class="o">=</span> 4       prev dist <span class="o">=</span> 2147483647
v[4]     optimal dist <span class="o">=</span> 4</code></pre></div>

<p>**All the rest: **</p>

<div class="highlight"><pre><code class="language-bash">NEIGHBORS OF v[4]:
<span class="nt">--------------------</span>
v[2]     optimal dist <span class="o">=</span> 4
v[1]     optimal dist <span class="o">=</span> 4
v[5]     optimal dist <span class="o">=</span> 4       prev dist <span class="o">=</span> 2147483647


NEIGHBORS OF v[3]:
<span class="nt">--------------------</span>
v[2]     optimal dist <span class="o">=</span> 5


NEIGHBORS OF v[5]:
<span class="nt">--------------------</span>
v[4]     optimal dist <span class="o">=</span> 5</code></pre></div>

<p><strong>Final output (prev[] array):</strong></p>

<div class="highlight"><pre><code class="language-bash">Previous
<span class="o">===============</span>

vert[0] <span class="nt">-1</span>
vert[1] 0
vert[2] 0
vert[3] 2
vert[4] 1
vert[5] 4</code></pre></div>

<p>i.e. the shortest path from 0 to 5 is: 0, 1, 4, 5. Path cost can be found at dist[vert5]. Verify that that‚Äôs the shortest path: cost(0,1) = 2 (whilst cost(0,2) = 3), cost(1,4) = 1 and cost(4,5) = 1.</p>

<p>Below, the full code. We used our previously implemented <a href="%7B%%20link%20_posts/2014-03-21-heap-priority-queues.markdown%20%%7D">priority queues</a> working as the PQ, and made the stop-at-target modification mentioned above. As always, updated source code and companion test code can be found @ github.</p>

<div class="highlight"><pre><code class="language-c"><span class="cp">#include 
#include "../tests/graph_test.c"
#include "../data_structures/heap.c"
</span>
<span class="kt">int</span><span class="o">*</span> <span class="nf">dijkstra</span><span class="p">(</span><span class="n">graph</span><span class="o">*</span> <span class="n">g</span><span class="p">,</span> <span class="kt">int</span> <span class="n">from</span><span class="p">,</span> <span class="kt">int</span> <span class="n">to</span><span class="p">)</span>
<span class="p">{</span>
      <span class="kt">int</span> <span class="n">nv</span> <span class="o">=</span> <span class="n">get_nv</span><span class="p">(</span><span class="n">g</span><span class="p">);</span>

      <span class="kt">int</span><span class="o">*</span> <span class="n">dist</span>         <span class="o">=</span> <span class="n">malloc</span><span class="p">(</span><span class="k">sizeof</span><span class="p">(</span><span class="kt">int</span><span class="p">)</span><span class="o">*</span><span class="n">nv</span><span class="p">);</span>
      <span class="kt">int</span><span class="o">*</span> <span class="n">previous</span>     <span class="o">=</span> <span class="n">malloc</span><span class="p">(</span><span class="k">sizeof</span><span class="p">(</span><span class="kt">int</span><span class="p">)</span><span class="o">*</span><span class="n">nv</span><span class="p">);</span>
      <span class="n">heap</span><span class="o">*</span> <span class="n">minheap</span> <span class="o">=</span> <span class="n">new_heap</span><span class="p">(</span><span class="n">nv</span><span class="p">,</span> <span class="n">ORD_ASC</span><span class="p">,</span> <span class="n">compare_kv</span><span class="p">);</span>

      <span class="kt">int</span> <span class="n">i</span><span class="p">;</span>
      <span class="k">for</span> <span class="p">(</span><span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">nv</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
      <span class="p">{</span>
            <span class="n">dist</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">INT_MAX</span><span class="p">;</span>
            <span class="n">previous</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
            <span class="n">kv</span><span class="o">*</span> <span class="n">val</span> <span class="o">=</span> <span class="n">new_kv</span><span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="p">(</span><span class="kt">void</span><span class="o">*</span><span class="p">)</span> <span class="o">&amp;</span><span class="n">dist</span><span class="p">[</span><span class="n">i</span><span class="p">],</span> <span class="n">compare_integer</span><span class="p">);</span>
            <span class="n">push</span><span class="p">(</span><span class="n">minheap</span><span class="p">,</span> <span class="n">val</span><span class="p">);</span>

            <span class="cp">#ifdef _DEBUG
</span>                  <span class="n">edge_iter</span><span class="o">*</span> <span class="n">itd</span> <span class="o">=</span> <span class="n">new_edge_it</span><span class="p">(</span><span class="n">g</span><span class="p">,</span><span class="n">get_vertex</span><span class="p">(</span><span class="n">g</span><span class="p">,</span><span class="n">i</span><span class="p">));</span>
                  <span class="n">edge</span><span class="o">*</span> <span class="n">next</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
                  <span class="k">while</span> <span class="p">((</span><span class="n">next</span> <span class="o">=</span> <span class="n">next_edge</span><span class="p">(</span><span class="n">itd</span><span class="p">))</span> <span class="o">!=</span> <span class="nb">NULL</span><span class="p">)</span> <span class="n">DBG</span><span class="p">(</span><span class="s">"</span><span class="se">\n</span><span class="s">%d</span><span class="se">\t</span><span class="s">E(%lu,%lu) = %d"</span><span class="p">,</span><span class="n">itd</span><span class="o">-&gt;</span><span class="n">idx</span><span class="p">,</span><span class="n">next</span><span class="o">-&gt;</span><span class="n">from</span><span class="o">-&gt;</span><span class="n">id</span><span class="p">,</span><span class="n">next</span><span class="o">-&gt;</span><span class="n">to</span><span class="o">-&gt;</span><span class="n">id</span><span class="p">,</span><span class="n">next</span><span class="o">-&gt;</span><span class="n">cost</span> <span class="p">)</span> <span class="p">;</span>
                  <span class="n">free</span><span class="p">(</span><span class="n">itd</span><span class="p">);</span>
            <span class="cp">#endif
</span>      <span class="p">}</span>


      <span class="n">dist</span><span class="p">[</span><span class="n">from</span><span class="p">]</span>        <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
      <span class="n">previous</span><span class="p">[</span><span class="n">from</span><span class="p">]</span>    <span class="o">=</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>

      <span class="n">kv</span><span class="o">*</span> <span class="n">min</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span> <span class="kt">int</span> <span class="n">found</span> <span class="o">=</span> <span class="n">FALSE</span><span class="p">;</span>
      <span class="k">while</span> <span class="p">(((</span><span class="n">min</span> <span class="o">=</span> <span class="n">pop</span><span class="p">(</span><span class="n">minheap</span><span class="p">))</span> <span class="o">!=</span> <span class="nb">NULL</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="n">found</span><span class="p">)</span>
      <span class="p">{</span>
            <span class="kt">int</span> <span class="n">u</span> <span class="o">=</span> <span class="n">min</span><span class="o">-&gt;</span><span class="n">k</span><span class="p">;</span>
            <span class="n">visit_vert</span><span class="p">(</span><span class="n">g</span><span class="p">,</span><span class="n">u</span><span class="p">);</span>

            <span class="n">edge_iter</span><span class="o">*</span> <span class="n">it</span> <span class="o">=</span> <span class="n">new_edge_it</span><span class="p">(</span><span class="n">g</span><span class="p">,</span><span class="n">get_vertex</span><span class="p">(</span><span class="n">g</span><span class="p">,</span><span class="n">u</span><span class="p">));</span>
            <span class="n">edge</span><span class="o">*</span> <span class="n">next</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>


            <span class="n">DBG</span><span class="p">(</span><span class="s">"</span><span class="se">\n\n\n</span><span class="s">NEIGHBORS OF v[%d]:</span><span class="se">\n</span><span class="s">--------------------"</span><span class="p">,</span><span class="n">u</span><span class="p">);</span>
            <span class="k">while</span> <span class="p">((</span><span class="n">next</span> <span class="o">=</span> <span class="n">next_edge</span><span class="p">(</span><span class="n">it</span><span class="p">))</span> <span class="o">!=</span> <span class="nb">NULL</span><span class="p">)</span>
            <span class="p">{</span>
                  <span class="kt">int</span> <span class="n">v</span> <span class="o">=</span> <span class="n">next</span><span class="o">-&gt;</span><span class="n">to</span><span class="o">-&gt;</span><span class="n">id</span><span class="p">;</span>
                  <span class="kt">int</span> <span class="n">ndist</span> <span class="o">=</span> <span class="n">dist</span><span class="p">[</span><span class="n">u</span><span class="p">]</span> <span class="o">+</span> <span class="n">next</span><span class="o">-&gt;</span><span class="n">cost</span><span class="p">;</span>
                  <span class="n">DBG</span><span class="p">(</span><span class="s">"</span><span class="se">\n</span><span class="s">v[%d]"</span><span class="p">,</span><span class="n">v</span><span class="p">);</span>
                  <span class="n">DBG</span><span class="p">(</span><span class="s">"</span><span class="se">\t</span><span class="s"> optimal dist = %d"</span><span class="p">,</span><span class="n">ndist</span><span class="p">);</span>

                  <span class="c1">//relax edge</span>
                  <span class="k">if</span> <span class="p">((</span><span class="n">ndist</span><span class="o">&gt;=</span><span class="mi">0</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="p">(</span><span class="n">ndist</span><span class="o">&lt;</span><span class="n">dist</span><span class="p">[</span><span class="n">v</span><span class="p">])</span> <span class="o">&amp;&amp;</span> <span class="p">(</span><span class="n">u</span><span class="o">!=</span><span class="n">v</span><span class="p">))</span>
                  <span class="p">{</span>
                        <span class="n">DBG</span><span class="p">(</span><span class="s">"</span><span class="se">\t</span><span class="s">prev dist = %d"</span><span class="p">,</span><span class="n">dist</span><span class="p">[</span><span class="n">v</span><span class="p">]);</span>

                        <span class="n">dist</span><span class="p">[</span><span class="n">v</span><span class="p">]</span>     <span class="o">=</span> <span class="n">ndist</span><span class="p">;</span>
                        <span class="n">previous</span><span class="p">[</span><span class="n">v</span><span class="p">]</span> <span class="o">=</span> <span class="n">u</span><span class="p">;</span>

                        <span class="kt">int</span> <span class="n">vpos</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
                        <span class="n">kv</span><span class="o">*</span> <span class="n">candidate</span> <span class="o">=</span> <span class="n">get_kv</span><span class="p">(</span><span class="n">minheap</span><span class="o">-&gt;</span><span class="n">array</span><span class="p">,</span> <span class="n">minheap</span><span class="o">-&gt;</span><span class="n">heap_size</span><span class="p">,</span> <span class="n">v</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">vpos</span><span class="p">);</span>
                        <span class="k">if</span> <span class="p">(</span><span class="n">candidate</span> <span class="o">!=</span><span class="nb">NULL</span><span class="p">)</span> <span class="n">update</span><span class="p">(</span><span class="n">minheap</span><span class="p">,</span> <span class="n">vpos</span><span class="p">);</span>
                  <span class="p">}</span>
            <span class="p">}</span>

            <span class="k">if</span> <span class="p">(</span><span class="n">u</span><span class="o">==</span><span class="n">to</span><span class="p">)</span> <span class="n">found</span> <span class="o">=</span> <span class="n">TRUE</span><span class="p">;</span>
      <span class="p">}</span>

      <span class="k">return</span> <span class="n">previous</span><span class="p">;</span>
<span class="p">}</span>
<span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;&lt;/</span><span class="n">div</span><span class="o">&gt;</span></code></pre></div>

    </article>
    <aside>Posted at: Apr 06, 2014</aside>
    <div class="post-footer">
      <a href="../../index.html">Back</a>
    </div>
  </div>

        <div class="footer">
          2020 Leonardo Brito
        </div>
      </div>

    </div>
  


</body></html>;
T;@J;@Jo;;;;	I"#/posts/2014-02-21-mergesort.md;
T{;{
;U;[I"E/home/carol/workspace/blog/content/posts/2014-02-21-mergesort.md;
TI"¿ Mergesort is an important sorting algorithm when you don't have efficient random memory access, since it doesn't rely on that and has good time complexity - O(n logn) specifically.

As a typical divide-and-conquer algorithm, Mergesort has two steps: first it recursively splits the lists in two until each half is unitary, then it recursively mends back the lists until it reaches the original size.

But before we dive into the actual algorithm, we need to make some changes to the linked list algorithm we'll be using.

<!-- more -->

On our previous post we weren't worried about instantiating multiple lists, but now we need a function that will do that and the data structure that will hold the necessary information:

<div class="highlight"><pre><code class="language-c">
typedef struct linked_list
{
      element *head;
      element *tail;
      unsigned size;
      int (*cmp) (void*, void*);
} linked_list;
</code></pre></div>

We now have a tail element: as we mentioned previously, having a tail handy allows us to reduce list-add time to O(1). Other than that we have the list size (number of elements) and a pointer to the compare function specific to whatever data type we want to use.

Okay, so let's get back to mergesort.

<div class="highlight"><pre><code class="language-c">

element* mergesort(linked_list* list, int order)
{
      linked_list *left = new_list(list->cmp);
      linked_list *right = new_list(list->cmp);

      if (list->head == NULL || list->head->next == NULL) return list->head;

      halve(list, left, right);

      element* merged = merge(mergesort(left, order),mergesort(right, order), list->cmp, order);

      free(left);
      free(right);

      return merged;
}
</code></pre></div>

Here we have divide step on line 8 (halve function) and conquer step on line 10 (merge function). On line 10, the first call to mergesort has precedence, so the algorithm will first recursively divide the left part of the list and then the right part - as in a pre-ordered traversal of a binary tree - and then go on to do the merging.

<div class="highlight"><pre><code class="language-c">
void halve(linked_list* list, linked_list* left, linked_list* right)
{
      element* middle = list->head;
      if (middle!=NULL) {
      int half = (int) ((list->size)/2.0f), i=0;
      while (++i<half) middle = middle->next;
      element* middle_head = middle->next;
      middle->next = NULL;

      left->head = list->head;
      left->size = (list->size)-half;

      right->head = middle_head;
      right->size = half;}
}
</code></pre></div>

Halving is simple: using the list size as a placemark, we find the middle element, set it as left half list's last element and set its successor as the head of the right half.

<div class="highlight"><pre><code class="language-c">

element* merge(element* a, element* b, int (*cmp) (void*, void*), int order)
{
      element* c = new_element(NULL);
      element* merged = c;
      while (a != NULL && b != NULL)
      {
            if ((order==ASC) ? (cmp(a->data, b->data) > 0) : (cmp(a->data, b->data) < 0))
            {
                  c->next = a;
                  a = a->next;
            }
            else
            {
                  c->next = b;
                  b = b->next;
            }
            c = c->next;
      }
      c->next = (a == NULL) ? b : a;
      return merged->next;
}

</code></pre></div>

To merge both lists, we stich together each half by comparing elements from both, one by one. Depending on the order (ascending/descending) we choose who comes first and set it as next on the consolidated list.

That's it! Fully runnable code can be found below as well as on github. After the code you can find compilation and expected output.

<div class="highlight"><pre><code class="language-c">
/*
    File: mergesort.c

    Copyright (c) 2014 Leonardo Brito <lbrito@gmail.com>

    This software is free software; you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation; either version 2 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License along
    with this program; if not, write the Free Software Foundation, Inc., 51
    Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
*/

#include "linked_list.c"
#include <time.h>
#include <stdlib.h>

#if !defined _TEST_SIZE_MSORT && defined _DEBUGGING
#define _TEST_SIZE_MSORT 10
#endif

#define ASC 0
#define DEC 1

element* mergesort(linked_list* list, int order);
void halve(linked_list* list, linked_list* left, linked_list* right);
element* merge(element* a, element* b, int (*cmp) (void*, void*), int order);

/**
 *  @brief Orders the list using mergesort
 *
 *  @param [in] list  Linked list
 *  @param [in] order Sorting order (ASC or DEC)
 *  @return partial result, used for recursion only
 */
element* mergesort(linked_list* list, int order)
{
      linked_list *left = new_list(list->cmp);
      linked_list *right = new_list(list->cmp);

      if (list->head == NULL || list->head->next == NULL) return list->head;

      halve(list, left, right);

      element* merged = merge(mergesort(left, order),mergesort(right, order), list->cmp, order);

      free(left);
      free(right);

      return merged;
}

/**
 *  @brief Splits a list into two halves
 *
 *  @param [in] list  Original list
 *  @param [in] left  Left half
 *  @param [in] right Right half
 */
void halve(linked_list* list, linked_list* left, linked_list* right)
{
      element* middle = list->head;
      if (middle!=NULL) {
      int half = (int) ((list->size)/2.0f), i=0;
      while (++i<half) middle = middle->next;
      element* middle_head = middle->next;
      middle->next = NULL;

      left->head = list->head;
      left->size = (list->size)-half;

      right->head = middle_head;
      right->size = half;}
}

/**
 *  @brief Merges two lists into a single list
 *
 *  @param [in] a   First half
 *  @param [in] b   Second half
 *  @param [in] cmp Comparator function
 *  @return Pointer to consolidated list's head
 */
element* merge(element* a, element* b, int (*cmp) (void*, void*), int order)
{
      element* c = new_element(NULL);
      element* merged = c;
      while (a != NULL && b != NULL)
      {
            if ((order==ASC) ? (cmp(a->data, b->data) > 0) : (cmp(a->data, b->data) < 0))
            {
                  c->next = a;
                  a = a->next;
            }
            else
            {
                  c->next = b;
                  b = b->next;
            }
            c = c->next;
      }
      c->next = (a == NULL) ? b : a;
      return merged->next;
}

//#ifdef _DEBUGGING
int main()
{
      linked_list* list = new_list(compare_integer);

      srand(time(NULL));

      int* x = malloc(sizeof(int)*_TEST_SIZE_MSORT);

      int i=0;
      for (;i<_TEST_SIZE_MSORT;i++)
      {
            x[i] = rand();
            add(list, &(x[i]));
      }

      element* xx = list->head;
      i=0;
      do { printf("\n[%d]\t%d",i++,*((int*)xx->data));
      } while ((xx=xx->next)!=NULL);

      printf("\n\nSorted:");
      xx = mergesort(list, DEC);
      list->head = xx;
      i=0;
      do { printf("\n[%d]\t%d",i++,*((int*)xx->data));
      } while ((xx=xx->next)!=NULL);

      return 0;
}
//#endif
</code></pre></div>

<div class="highlight"><pre><code class="language-bash">
C:\code\c\cstuff>gcc mergesort.c -o mergesort -D _TEST_SIZE_MSORT=20 -D DEBUGGING

C:\code\c\cstuff>mergesort

[0]     2549
[1]     30801
[2]     23795
[3]     9308
[4]     8425
[5]     23253
[6]     26244
[7]     32399
[8]     3802
[9]     30628
[10]    18291
[11]    29682
[12]    11105
[13]    23618
[14]    23104
[15]    11222
[16]    7193
[17]    1327
[18]    8573
[19]    30288

Sorted:
[0]     32399
[1]     30801
[2]     30628
[3]     30288
[4]     29682
[5]     26244
[6]     23795
[7]     23618
[8]     23253
[9]     23104
[10]    18291
[11]    11222
[12]    11105
[13]    9308
[14]    8573
[15]    8425
[16]    7193
[17]    3802
[18]    2549
[19]    1327
</code></pre></div>
;
T;U;[0I"å<p>Mergesort is an important sorting algorithm when you don‚Äôt have efficient random memory access, since it doesn‚Äôt rely on that and has good time complexity - O(n logn) specifically.</p>

<p>As a typical divide-and-conquer algorithm, Mergesort has two steps: first it recursively splits the lists in two until each half is unitary, then it recursively mends back the lists until it reaches the original size.</p>

<p>But before we dive into the actual algorithm, we need to make some changes to the linked list algorithm we‚Äôll be using.</p>

<!-- more -->

<p>On our previous post we weren‚Äôt worried about instantiating multiple lists, but now we need a function that will do that and the data structure that will hold the necessary information:</p>

<div class="highlight"><pre><code class="language-c"><span class="k">typedef</span> <span class="k">struct</span> <span class="n">linked_list</span>
<span class="p">{</span>
      <span class="n">element</span> <span class="o">*</span><span class="n">head</span><span class="p">;</span>
      <span class="n">element</span> <span class="o">*</span><span class="n">tail</span><span class="p">;</span>
      <span class="kt">unsigned</span> <span class="n">size</span><span class="p">;</span>
      <span class="kt">int</span> <span class="p">(</span><span class="o">*</span><span class="n">cmp</span><span class="p">)</span> <span class="p">(</span><span class="kt">void</span><span class="o">*</span><span class="p">,</span> <span class="kt">void</span><span class="o">*</span><span class="p">);</span>
<span class="p">}</span> <span class="n">linked_list</span><span class="p">;</span></code></pre></div>

<p>We now have a tail element: as we mentioned previously, having a tail handy allows us to reduce list-add time to O(1). Other than that we have the list size (number of elements) and a pointer to the compare function specific to whatever data type we want to use.</p>

<p>Okay, so let‚Äôs get back to mergesort.</p>

<div class="highlight"><pre><code class="language-c"><span class="n">element</span><span class="o">*</span> <span class="nf">mergesort</span><span class="p">(</span><span class="n">linked_list</span><span class="o">*</span> <span class="n">list</span><span class="p">,</span> <span class="kt">int</span> <span class="n">order</span><span class="p">)</span>
<span class="p">{</span>
      <span class="n">linked_list</span> <span class="o">*</span><span class="n">left</span> <span class="o">=</span> <span class="n">new_list</span><span class="p">(</span><span class="n">list</span><span class="o">-&gt;</span><span class="n">cmp</span><span class="p">);</span>
      <span class="n">linked_list</span> <span class="o">*</span><span class="n">right</span> <span class="o">=</span> <span class="n">new_list</span><span class="p">(</span><span class="n">list</span><span class="o">-&gt;</span><span class="n">cmp</span><span class="p">);</span>

      <span class="k">if</span> <span class="p">(</span><span class="n">list</span><span class="o">-&gt;</span><span class="n">head</span> <span class="o">==</span> <span class="nb">NULL</span> <span class="o">||</span> <span class="n">list</span><span class="o">-&gt;</span><span class="n">head</span><span class="o">-&gt;</span><span class="n">next</span> <span class="o">==</span> <span class="nb">NULL</span><span class="p">)</span> <span class="k">return</span> <span class="n">list</span><span class="o">-&gt;</span><span class="n">head</span><span class="p">;</span>

      <span class="n">halve</span><span class="p">(</span><span class="n">list</span><span class="p">,</span> <span class="n">left</span><span class="p">,</span> <span class="n">right</span><span class="p">);</span>

      <span class="n">element</span><span class="o">*</span> <span class="n">merged</span> <span class="o">=</span> <span class="n">merge</span><span class="p">(</span><span class="n">mergesort</span><span class="p">(</span><span class="n">left</span><span class="p">,</span> <span class="n">order</span><span class="p">),</span><span class="n">mergesort</span><span class="p">(</span><span class="n">right</span><span class="p">,</span> <span class="n">order</span><span class="p">),</span> <span class="n">list</span><span class="o">-&gt;</span><span class="n">cmp</span><span class="p">,</span> <span class="n">order</span><span class="p">);</span>

      <span class="n">free</span><span class="p">(</span><span class="n">left</span><span class="p">);</span>
      <span class="n">free</span><span class="p">(</span><span class="n">right</span><span class="p">);</span>

      <span class="k">return</span> <span class="n">merged</span><span class="p">;</span>
<span class="p">}</span></code></pre></div>

<p>Here we have divide step on line 8 (halve function) and conquer step on line 10 (merge function). On line 10, the first call to mergesort has precedence, so the algorithm will first recursively divide the left part of the list and then the right part - as in a pre-ordered traversal of a binary tree - and then go on to do the merging.</p>

<div class="highlight"><pre><code class="language-c"><span class="kt">void</span> <span class="nf">halve</span><span class="p">(</span><span class="n">linked_list</span><span class="o">*</span> <span class="n">list</span><span class="p">,</span> <span class="n">linked_list</span><span class="o">*</span> <span class="n">left</span><span class="p">,</span> <span class="n">linked_list</span><span class="o">*</span> <span class="n">right</span><span class="p">)</span>
<span class="p">{</span>
      <span class="n">element</span><span class="o">*</span> <span class="n">middle</span> <span class="o">=</span> <span class="n">list</span><span class="o">-&gt;</span><span class="n">head</span><span class="p">;</span>
      <span class="k">if</span> <span class="p">(</span><span class="n">middle</span><span class="o">!=</span><span class="nb">NULL</span><span class="p">)</span> <span class="p">{</span>
      <span class="kt">int</span> <span class="n">half</span> <span class="o">=</span> <span class="p">(</span><span class="kt">int</span><span class="p">)</span> <span class="p">((</span><span class="n">list</span><span class="o">-&gt;</span><span class="n">size</span><span class="p">)</span><span class="o">/</span><span class="mi">2</span><span class="p">.</span><span class="mi">0</span><span class="n">f</span><span class="p">),</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span>
      <span class="k">while</span> <span class="p">(</span><span class="o">++</span><span class="n">i</span><span class="o">&lt;</span><span class="n">half</span><span class="p">)</span> <span class="n">middle</span> <span class="o">=</span> <span class="n">middle</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">;</span>
      <span class="n">element</span><span class="o">*</span> <span class="n">middle_head</span> <span class="o">=</span> <span class="n">middle</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">;</span>
      <span class="n">middle</span><span class="o">-&gt;</span><span class="n">next</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>

      <span class="n">left</span><span class="o">-&gt;</span><span class="n">head</span> <span class="o">=</span> <span class="n">list</span><span class="o">-&gt;</span><span class="n">head</span><span class="p">;</span>
      <span class="n">left</span><span class="o">-&gt;</span><span class="n">size</span> <span class="o">=</span> <span class="p">(</span><span class="n">list</span><span class="o">-&gt;</span><span class="n">size</span><span class="p">)</span><span class="o">-</span><span class="n">half</span><span class="p">;</span>

      <span class="n">right</span><span class="o">-&gt;</span><span class="n">head</span> <span class="o">=</span> <span class="n">middle_head</span><span class="p">;</span>
      <span class="n">right</span><span class="o">-&gt;</span><span class="n">size</span> <span class="o">=</span> <span class="n">half</span><span class="p">;}</span>
<span class="p">}</span></code></pre></div>

<p>Halving is simple: using the list size as a placemark, we find the middle element, set it as left half list‚Äôs last element and set its successor as the head of the right half.</p>

<div class="highlight"><pre><code class="language-c"><span class="n">element</span><span class="o">*</span> <span class="nf">merge</span><span class="p">(</span><span class="n">element</span><span class="o">*</span> <span class="n">a</span><span class="p">,</span> <span class="n">element</span><span class="o">*</span> <span class="n">b</span><span class="p">,</span> <span class="kt">int</span> <span class="p">(</span><span class="o">*</span><span class="n">cmp</span><span class="p">)</span> <span class="p">(</span><span class="kt">void</span><span class="o">*</span><span class="p">,</span> <span class="kt">void</span><span class="o">*</span><span class="p">),</span> <span class="kt">int</span> <span class="n">order</span><span class="p">)</span>
<span class="p">{</span>
      <span class="n">element</span><span class="o">*</span> <span class="n">c</span> <span class="o">=</span> <span class="n">new_element</span><span class="p">(</span><span class="nb">NULL</span><span class="p">);</span>
      <span class="n">element</span><span class="o">*</span> <span class="n">merged</span> <span class="o">=</span> <span class="n">c</span><span class="p">;</span>
      <span class="k">while</span> <span class="p">(</span><span class="n">a</span> <span class="o">!=</span> <span class="nb">NULL</span> <span class="o">&amp;&amp;</span> <span class="n">b</span> <span class="o">!=</span> <span class="nb">NULL</span><span class="p">)</span>
      <span class="p">{</span>
            <span class="k">if</span> <span class="p">((</span><span class="n">order</span><span class="o">==</span><span class="n">ASC</span><span class="p">)</span> <span class="o">?</span> <span class="p">(</span><span class="n">cmp</span><span class="p">(</span><span class="n">a</span><span class="o">-&gt;</span><span class="n">data</span><span class="p">,</span> <span class="n">b</span><span class="o">-&gt;</span><span class="n">data</span><span class="p">)</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span> <span class="o">:</span> <span class="p">(</span><span class="n">cmp</span><span class="p">(</span><span class="n">a</span><span class="o">-&gt;</span><span class="n">data</span><span class="p">,</span> <span class="n">b</span><span class="o">-&gt;</span><span class="n">data</span><span class="p">)</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">))</span>
            <span class="p">{</span>
                  <span class="n">c</span><span class="o">-&gt;</span><span class="n">next</span> <span class="o">=</span> <span class="n">a</span><span class="p">;</span>
                  <span class="n">a</span> <span class="o">=</span> <span class="n">a</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">;</span>
            <span class="p">}</span>
            <span class="k">else</span>
            <span class="p">{</span>
                  <span class="n">c</span><span class="o">-&gt;</span><span class="n">next</span> <span class="o">=</span> <span class="n">b</span><span class="p">;</span>
                  <span class="n">b</span> <span class="o">=</span> <span class="n">b</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">;</span>
            <span class="p">}</span>
            <span class="n">c</span> <span class="o">=</span> <span class="n">c</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">;</span>
      <span class="p">}</span>
      <span class="n">c</span><span class="o">-&gt;</span><span class="n">next</span> <span class="o">=</span> <span class="p">(</span><span class="n">a</span> <span class="o">==</span> <span class="nb">NULL</span><span class="p">)</span> <span class="o">?</span> <span class="n">b</span> <span class="o">:</span> <span class="n">a</span><span class="p">;</span>
      <span class="k">return</span> <span class="n">merged</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">;</span>
<span class="p">}</span></code></pre></div>

<p>To merge both lists, we stich together each half by comparing elements from both, one by one. Depending on the order (ascending/descending) we choose who comes first and set it as next on the consolidated list.</p>

<p>That‚Äôs it! Fully runnable code can be found below as well as on github. After the code you can find compilation and expected output.</p>

<div class="highlight"><pre><code class="language-c"><span class="cm">/*
    File: mergesort.c

    Copyright (c) 2014 Leonardo Brito &lt;lbrito@gmail.com&gt;

    This software is free software; you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation; either version 2 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License along
    with this program; if not, write the Free Software Foundation, Inc., 51
    Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
*/</span>

<span class="cp">#include "linked_list.c"
#include 
#include 
</span>
<span class="cp">#if !defined _TEST_SIZE_MSORT &amp;&amp; defined _DEBUGGING
#define _TEST_SIZE_MSORT 10
#endif
</span>
<span class="cp">#define ASC 0
#define DEC 1
</span>
<span class="n">element</span><span class="o">*</span> <span class="nf">mergesort</span><span class="p">(</span><span class="n">linked_list</span><span class="o">*</span> <span class="n">list</span><span class="p">,</span> <span class="kt">int</span> <span class="n">order</span><span class="p">);</span>
<span class="kt">void</span> <span class="nf">halve</span><span class="p">(</span><span class="n">linked_list</span><span class="o">*</span> <span class="n">list</span><span class="p">,</span> <span class="n">linked_list</span><span class="o">*</span> <span class="n">left</span><span class="p">,</span> <span class="n">linked_list</span><span class="o">*</span> <span class="n">right</span><span class="p">);</span>
<span class="n">element</span><span class="o">*</span> <span class="nf">merge</span><span class="p">(</span><span class="n">element</span><span class="o">*</span> <span class="n">a</span><span class="p">,</span> <span class="n">element</span><span class="o">*</span> <span class="n">b</span><span class="p">,</span> <span class="kt">int</span> <span class="p">(</span><span class="o">*</span><span class="n">cmp</span><span class="p">)</span> <span class="p">(</span><span class="kt">void</span><span class="o">*</span><span class="p">,</span> <span class="kt">void</span><span class="o">*</span><span class="p">),</span> <span class="kt">int</span> <span class="n">order</span><span class="p">);</span>

<span class="cm">/**
 *  @brief Orders the list using mergesort
 *
 *  @param [in] list  Linked list
 *  @param [in] order Sorting order (ASC or DEC)
 *  @return partial result, used for recursion only
 */</span>
<span class="n">element</span><span class="o">*</span> <span class="nf">mergesort</span><span class="p">(</span><span class="n">linked_list</span><span class="o">*</span> <span class="n">list</span><span class="p">,</span> <span class="kt">int</span> <span class="n">order</span><span class="p">)</span>
<span class="p">{</span>
      <span class="n">linked_list</span> <span class="o">*</span><span class="n">left</span> <span class="o">=</span> <span class="n">new_list</span><span class="p">(</span><span class="n">list</span><span class="o">-&gt;</span><span class="n">cmp</span><span class="p">);</span>
      <span class="n">linked_list</span> <span class="o">*</span><span class="n">right</span> <span class="o">=</span> <span class="n">new_list</span><span class="p">(</span><span class="n">list</span><span class="o">-&gt;</span><span class="n">cmp</span><span class="p">);</span>

      <span class="k">if</span> <span class="p">(</span><span class="n">list</span><span class="o">-&gt;</span><span class="n">head</span> <span class="o">==</span> <span class="nb">NULL</span> <span class="o">||</span> <span class="n">list</span><span class="o">-&gt;</span><span class="n">head</span><span class="o">-&gt;</span><span class="n">next</span> <span class="o">==</span> <span class="nb">NULL</span><span class="p">)</span> <span class="k">return</span> <span class="n">list</span><span class="o">-&gt;</span><span class="n">head</span><span class="p">;</span>

      <span class="n">halve</span><span class="p">(</span><span class="n">list</span><span class="p">,</span> <span class="n">left</span><span class="p">,</span> <span class="n">right</span><span class="p">);</span>

      <span class="n">element</span><span class="o">*</span> <span class="n">merged</span> <span class="o">=</span> <span class="n">merge</span><span class="p">(</span><span class="n">mergesort</span><span class="p">(</span><span class="n">left</span><span class="p">,</span> <span class="n">order</span><span class="p">),</span><span class="n">mergesort</span><span class="p">(</span><span class="n">right</span><span class="p">,</span> <span class="n">order</span><span class="p">),</span> <span class="n">list</span><span class="o">-&gt;</span><span class="n">cmp</span><span class="p">,</span> <span class="n">order</span><span class="p">);</span>

      <span class="n">free</span><span class="p">(</span><span class="n">left</span><span class="p">);</span>
      <span class="n">free</span><span class="p">(</span><span class="n">right</span><span class="p">);</span>

      <span class="k">return</span> <span class="n">merged</span><span class="p">;</span>
<span class="p">}</span>

<span class="cm">/**
 *  @brief Splits a list into two halves
 *
 *  @param [in] list  Original list
 *  @param [in] left  Left half
 *  @param [in] right Right half
 */</span>
<span class="kt">void</span> <span class="nf">halve</span><span class="p">(</span><span class="n">linked_list</span><span class="o">*</span> <span class="n">list</span><span class="p">,</span> <span class="n">linked_list</span><span class="o">*</span> <span class="n">left</span><span class="p">,</span> <span class="n">linked_list</span><span class="o">*</span> <span class="n">right</span><span class="p">)</span>
<span class="p">{</span>
      <span class="n">element</span><span class="o">*</span> <span class="n">middle</span> <span class="o">=</span> <span class="n">list</span><span class="o">-&gt;</span><span class="n">head</span><span class="p">;</span>
      <span class="k">if</span> <span class="p">(</span><span class="n">middle</span><span class="o">!=</span><span class="nb">NULL</span><span class="p">)</span> <span class="p">{</span>
      <span class="kt">int</span> <span class="n">half</span> <span class="o">=</span> <span class="p">(</span><span class="kt">int</span><span class="p">)</span> <span class="p">((</span><span class="n">list</span><span class="o">-&gt;</span><span class="n">size</span><span class="p">)</span><span class="o">/</span><span class="mi">2</span><span class="p">.</span><span class="mi">0</span><span class="n">f</span><span class="p">),</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span>
      <span class="k">while</span> <span class="p">(</span><span class="o">++</span><span class="n">i</span><span class="o">&lt;</span><span class="n">half</span><span class="p">)</span> <span class="n">middle</span> <span class="o">=</span> <span class="n">middle</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">;</span>
      <span class="n">element</span><span class="o">*</span> <span class="n">middle_head</span> <span class="o">=</span> <span class="n">middle</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">;</span>
      <span class="n">middle</span><span class="o">-&gt;</span><span class="n">next</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>

      <span class="n">left</span><span class="o">-&gt;</span><span class="n">head</span> <span class="o">=</span> <span class="n">list</span><span class="o">-&gt;</span><span class="n">head</span><span class="p">;</span>
      <span class="n">left</span><span class="o">-&gt;</span><span class="n">size</span> <span class="o">=</span> <span class="p">(</span><span class="n">list</span><span class="o">-&gt;</span><span class="n">size</span><span class="p">)</span><span class="o">-</span><span class="n">half</span><span class="p">;</span>

      <span class="n">right</span><span class="o">-&gt;</span><span class="n">head</span> <span class="o">=</span> <span class="n">middle_head</span><span class="p">;</span>
      <span class="n">right</span><span class="o">-&gt;</span><span class="n">size</span> <span class="o">=</span> <span class="n">half</span><span class="p">;}</span>
<span class="p">}</span>

<span class="cm">/**
 *  @brief Merges two lists into a single list
 *
 *  @param [in] a   First half
 *  @param [in] b   Second half
 *  @param [in] cmp Comparator function
 *  @return Pointer to consolidated list's head
 */</span>
<span class="n">element</span><span class="o">*</span> <span class="nf">merge</span><span class="p">(</span><span class="n">element</span><span class="o">*</span> <span class="n">a</span><span class="p">,</span> <span class="n">element</span><span class="o">*</span> <span class="n">b</span><span class="p">,</span> <span class="kt">int</span> <span class="p">(</span><span class="o">*</span><span class="n">cmp</span><span class="p">)</span> <span class="p">(</span><span class="kt">void</span><span class="o">*</span><span class="p">,</span> <span class="kt">void</span><span class="o">*</span><span class="p">),</span> <span class="kt">int</span> <span class="n">order</span><span class="p">)</span>
<span class="p">{</span>
      <span class="n">element</span><span class="o">*</span> <span class="n">c</span> <span class="o">=</span> <span class="n">new_element</span><span class="p">(</span><span class="nb">NULL</span><span class="p">);</span>
      <span class="n">element</span><span class="o">*</span> <span class="n">merged</span> <span class="o">=</span> <span class="n">c</span><span class="p">;</span>
      <span class="k">while</span> <span class="p">(</span><span class="n">a</span> <span class="o">!=</span> <span class="nb">NULL</span> <span class="o">&amp;&amp;</span> <span class="n">b</span> <span class="o">!=</span> <span class="nb">NULL</span><span class="p">)</span>
      <span class="p">{</span>
            <span class="k">if</span> <span class="p">((</span><span class="n">order</span><span class="o">==</span><span class="n">ASC</span><span class="p">)</span> <span class="o">?</span> <span class="p">(</span><span class="n">cmp</span><span class="p">(</span><span class="n">a</span><span class="o">-&gt;</span><span class="n">data</span><span class="p">,</span> <span class="n">b</span><span class="o">-&gt;</span><span class="n">data</span><span class="p">)</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span> <span class="o">:</span> <span class="p">(</span><span class="n">cmp</span><span class="p">(</span><span class="n">a</span><span class="o">-&gt;</span><span class="n">data</span><span class="p">,</span> <span class="n">b</span><span class="o">-&gt;</span><span class="n">data</span><span class="p">)</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">))</span>
            <span class="p">{</span>
                  <span class="n">c</span><span class="o">-&gt;</span><span class="n">next</span> <span class="o">=</span> <span class="n">a</span><span class="p">;</span>
                  <span class="n">a</span> <span class="o">=</span> <span class="n">a</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">;</span>
            <span class="p">}</span>
            <span class="k">else</span>
            <span class="p">{</span>
                  <span class="n">c</span><span class="o">-&gt;</span><span class="n">next</span> <span class="o">=</span> <span class="n">b</span><span class="p">;</span>
                  <span class="n">b</span> <span class="o">=</span> <span class="n">b</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">;</span>
            <span class="p">}</span>
            <span class="n">c</span> <span class="o">=</span> <span class="n">c</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">;</span>
      <span class="p">}</span>
      <span class="n">c</span><span class="o">-&gt;</span><span class="n">next</span> <span class="o">=</span> <span class="p">(</span><span class="n">a</span> <span class="o">==</span> <span class="nb">NULL</span><span class="p">)</span> <span class="o">?</span> <span class="n">b</span> <span class="o">:</span> <span class="n">a</span><span class="p">;</span>
      <span class="k">return</span> <span class="n">merged</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">;</span>
<span class="p">}</span>

<span class="c1">//#ifdef _DEBUGGING</span>
<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
<span class="p">{</span>
      <span class="n">linked_list</span><span class="o">*</span> <span class="n">list</span> <span class="o">=</span> <span class="n">new_list</span><span class="p">(</span><span class="n">compare_integer</span><span class="p">);</span>

      <span class="n">srand</span><span class="p">(</span><span class="n">time</span><span class="p">(</span><span class="nb">NULL</span><span class="p">));</span>

      <span class="kt">int</span><span class="o">*</span> <span class="n">x</span> <span class="o">=</span> <span class="n">malloc</span><span class="p">(</span><span class="k">sizeof</span><span class="p">(</span><span class="kt">int</span><span class="p">)</span><span class="o">*</span><span class="n">_TEST_SIZE_MSORT</span><span class="p">);</span>

      <span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span>
      <span class="k">for</span> <span class="p">(;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">_TEST_SIZE_MSORT</span><span class="p">;</span><span class="n">i</span><span class="o">++</span><span class="p">)</span>
      <span class="p">{</span>
            <span class="n">x</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">rand</span><span class="p">();</span>
            <span class="n">add</span><span class="p">(</span><span class="n">list</span><span class="p">,</span> <span class="o">&amp;</span><span class="p">(</span><span class="n">x</span><span class="p">[</span><span class="n">i</span><span class="p">]));</span>
      <span class="p">}</span>

      <span class="n">element</span><span class="o">*</span> <span class="n">xx</span> <span class="o">=</span> <span class="n">list</span><span class="o">-&gt;</span><span class="n">head</span><span class="p">;</span>
      <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span>
      <span class="k">do</span> <span class="p">{</span> <span class="n">printf</span><span class="p">(</span><span class="s">"</span><span class="se">\n</span><span class="s">[%d]</span><span class="se">\t</span><span class="s">%d"</span><span class="p">,</span><span class="n">i</span><span class="o">++</span><span class="p">,</span><span class="o">*</span><span class="p">((</span><span class="kt">int</span><span class="o">*</span><span class="p">)</span><span class="n">xx</span><span class="o">-&gt;</span><span class="n">data</span><span class="p">));</span>
      <span class="p">}</span> <span class="k">while</span> <span class="p">((</span><span class="n">xx</span><span class="o">=</span><span class="n">xx</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">)</span><span class="o">!=</span><span class="nb">NULL</span><span class="p">);</span>

      <span class="n">printf</span><span class="p">(</span><span class="s">"</span><span class="se">\n\n</span><span class="s">Sorted:"</span><span class="p">);</span>
      <span class="n">xx</span> <span class="o">=</span> <span class="n">mergesort</span><span class="p">(</span><span class="n">list</span><span class="p">,</span> <span class="n">DEC</span><span class="p">);</span>
      <span class="n">list</span><span class="o">-&gt;</span><span class="n">head</span> <span class="o">=</span> <span class="n">xx</span><span class="p">;</span>
      <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span>
      <span class="k">do</span> <span class="p">{</span> <span class="n">printf</span><span class="p">(</span><span class="s">"</span><span class="se">\n</span><span class="s">[%d]</span><span class="se">\t</span><span class="s">%d"</span><span class="p">,</span><span class="n">i</span><span class="o">++</span><span class="p">,</span><span class="o">*</span><span class="p">((</span><span class="kt">int</span><span class="o">*</span><span class="p">)</span><span class="n">xx</span><span class="o">-&gt;</span><span class="n">data</span><span class="p">));</span>
      <span class="p">}</span> <span class="k">while</span> <span class="p">((</span><span class="n">xx</span><span class="o">=</span><span class="n">xx</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">)</span><span class="o">!=</span><span class="nb">NULL</span><span class="p">);</span>

      <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
<span class="c1">//#endif</span>
<span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;&lt;/</span><span class="n">div</span><span class="o">&gt;</span>


<span class="n">C</span><span class="o">:</span><span class="err">\</span><span class="n">code</span><span class="err">\</span><span class="n">c</span><span class="err">\</span><span class="n">cstuff</span><span class="o">&gt;</span><span class="n">gcc</span> <span class="n">mergesort</span><span class="p">.</span><span class="n">c</span> <span class="o">-</span><span class="n">o</span> <span class="n">mergesort</span> <span class="o">-</span><span class="n">D</span> <span class="n">_TEST_SIZE_MSORT</span><span class="o">=</span><span class="mi">20</span> <span class="o">-</span><span class="n">D</span> <span class="n">DEBUGGING</span>

<span class="n">C</span><span class="o">:</span><span class="err">\</span><span class="n">code</span><span class="err">\</span><span class="n">c</span><span class="err">\</span><span class="n">cstuff</span><span class="o">&gt;</span><span class="n">mergesort</span>

<span class="p">[</span><span class="mi">0</span><span class="p">]</span>     <span class="mi">2549</span>
<span class="p">[</span><span class="mi">1</span><span class="p">]</span>     <span class="mi">30801</span>
<span class="p">[</span><span class="mi">2</span><span class="p">]</span>     <span class="mi">23795</span>
<span class="p">[</span><span class="mi">3</span><span class="p">]</span>     <span class="mi">9308</span>
<span class="p">[</span><span class="mi">4</span><span class="p">]</span>     <span class="mi">8425</span>
<span class="p">[</span><span class="mi">5</span><span class="p">]</span>     <span class="mi">23253</span>
<span class="p">[</span><span class="mi">6</span><span class="p">]</span>     <span class="mi">26244</span>
<span class="p">[</span><span class="mi">7</span><span class="p">]</span>     <span class="mi">32399</span>
<span class="p">[</span><span class="mi">8</span><span class="p">]</span>     <span class="mi">3802</span>
<span class="p">[</span><span class="mi">9</span><span class="p">]</span>     <span class="mi">30628</span>
<span class="p">[</span><span class="mi">10</span><span class="p">]</span>    <span class="mi">18291</span>
<span class="p">[</span><span class="mi">11</span><span class="p">]</span>    <span class="mi">29682</span>
<span class="p">[</span><span class="mi">12</span><span class="p">]</span>    <span class="mi">11105</span>
<span class="p">[</span><span class="mi">13</span><span class="p">]</span>    <span class="mi">23618</span>
<span class="p">[</span><span class="mi">14</span><span class="p">]</span>    <span class="mi">23104</span>
<span class="p">[</span><span class="mi">15</span><span class="p">]</span>    <span class="mi">11222</span>
<span class="p">[</span><span class="mi">16</span><span class="p">]</span>    <span class="mi">7193</span>
<span class="p">[</span><span class="mi">17</span><span class="p">]</span>    <span class="mi">1327</span>
<span class="p">[</span><span class="mi">18</span><span class="p">]</span>    <span class="mi">8573</span>
<span class="p">[</span><span class="mi">19</span><span class="p">]</span>    <span class="mi">30288</span>

<span class="n">Sorted</span><span class="o">:</span>
<span class="p">[</span><span class="mi">0</span><span class="p">]</span>     <span class="mi">32399</span>
<span class="p">[</span><span class="mi">1</span><span class="p">]</span>     <span class="mi">30801</span>
<span class="p">[</span><span class="mi">2</span><span class="p">]</span>     <span class="mi">30628</span>
<span class="p">[</span><span class="mi">3</span><span class="p">]</span>     <span class="mi">30288</span>
<span class="p">[</span><span class="mi">4</span><span class="p">]</span>     <span class="mi">29682</span>
<span class="p">[</span><span class="mi">5</span><span class="p">]</span>     <span class="mi">26244</span>
<span class="p">[</span><span class="mi">6</span><span class="p">]</span>     <span class="mi">23795</span>
<span class="p">[</span><span class="mi">7</span><span class="p">]</span>     <span class="mi">23618</span>
<span class="p">[</span><span class="mi">8</span><span class="p">]</span>     <span class="mi">23253</span>
<span class="p">[</span><span class="mi">9</span><span class="p">]</span>     <span class="mi">23104</span>
<span class="p">[</span><span class="mi">10</span><span class="p">]</span>    <span class="mi">18291</span>
<span class="p">[</span><span class="mi">11</span><span class="p">]</span>    <span class="mi">11222</span>
<span class="p">[</span><span class="mi">12</span><span class="p">]</span>    <span class="mi">11105</span>
<span class="p">[</span><span class="mi">13</span><span class="p">]</span>    <span class="mi">9308</span>
<span class="p">[</span><span class="mi">14</span><span class="p">]</span>    <span class="mi">8573</span>
<span class="p">[</span><span class="mi">15</span><span class="p">]</span>    <span class="mi">8425</span>
<span class="p">[</span><span class="mi">16</span><span class="p">]</span>    <span class="mi">7193</span>
<span class="p">[</span><span class="mi">17</span><span class="p">]</span>    <span class="mi">3802</span>
<span class="p">[</span><span class="mi">18</span><span class="p">]</span>    <span class="mi">2549</span>
<span class="p">[</span><span class="mi">19</span><span class="p">]</span>    <span class="mi">1327</span></code></pre></div>
;
T;U;[0I"≥ì<!DOCTYPE html><html lang="en"><head>
    <meta charset="utf-8">
    <title>A Developer's Notebook - Mergesort</title>
    <link rel="stylesheet" href="https://unpkg.com/purecss@1.0.1/build/pure-min.css" integrity="sha384-oAOxQR6DkCoMliIh8yFnu25d7Eq/PHS21PClpwjOTeU2jRSq11vu66rf90/cZr47" crossorigin="anonymous">
    <link rel="stylesheet" href="../../assets/stylesheet.css">
    <link rel="stylesheet" href="../../assets/highlight.css">

    <!-- you don't need to keep this, but it's cool for stats! -->
    <meta name="generator" content="Nanoc 4.11.9">
  </head>
  <body>
    <div id="layout">
      <div class="header">
        <h1>
          <a href="../../">A Developer's Notebook</a>
        </h1>
      </div>


      <div class="content">
        <nav class="pure-g">
          <div class="pure-u-2-3 links">
            <a href="../../index.html">Home</a> ¬∑
            <a href="../../tags.html">Tags</a> ¬∑
            <a href="../../years.html">Years</a> ¬∑
            <a href="../../about.html">About</a>
          </div>

          <div class="pure-u-1-3">
            <div class="contact">
              <span>
                <a href="https://github.com/lbrito1" download="">
                  <img src="../../assets/icons/github.svg" alt="Github icon">
                  </a>
              </span>
              <span>
                <a href="https://www.linkedin.com/in/leonardo-mendes-brito/">
                <img src="../../assets/icons/linkedin.svg" alt="LinkedIn icon">
                </a>
              </span>
            </div>
          </div>
        </nav>
        
  <div class="post-show">
    <h1>Mergesort</h1>
    <article class="text">
      <p>Mergesort is an important sorting algorithm when you don‚Äôt have efficient random memory access, since it doesn‚Äôt rely on that and has good time complexity - O(n logn) specifically.</p>

<p>As a typical divide-and-conquer algorithm, Mergesort has two steps: first it recursively splits the lists in two until each half is unitary, then it recursively mends back the lists until it reaches the original size.</p>

<p>But before we dive into the actual algorithm, we need to make some changes to the linked list algorithm we‚Äôll be using.</p>

<!-- more -->

<p>On our previous post we weren‚Äôt worried about instantiating multiple lists, but now we need a function that will do that and the data structure that will hold the necessary information:</p>

<div class="highlight"><pre><code class="language-c"><span class="k">typedef</span> <span class="k">struct</span> <span class="n">linked_list</span>
<span class="p">{</span>
      <span class="n">element</span> <span class="o">*</span><span class="n">head</span><span class="p">;</span>
      <span class="n">element</span> <span class="o">*</span><span class="n">tail</span><span class="p">;</span>
      <span class="kt">unsigned</span> <span class="n">size</span><span class="p">;</span>
      <span class="kt">int</span> <span class="p">(</span><span class="o">*</span><span class="n">cmp</span><span class="p">)</span> <span class="p">(</span><span class="kt">void</span><span class="o">*</span><span class="p">,</span> <span class="kt">void</span><span class="o">*</span><span class="p">);</span>
<span class="p">}</span> <span class="n">linked_list</span><span class="p">;</span></code></pre></div>

<p>We now have a tail element: as we mentioned previously, having a tail handy allows us to reduce list-add time to O(1). Other than that we have the list size (number of elements) and a pointer to the compare function specific to whatever data type we want to use.</p>

<p>Okay, so let‚Äôs get back to mergesort.</p>

<div class="highlight"><pre><code class="language-c"><span class="n">element</span><span class="o">*</span> <span class="nf">mergesort</span><span class="p">(</span><span class="n">linked_list</span><span class="o">*</span> <span class="n">list</span><span class="p">,</span> <span class="kt">int</span> <span class="n">order</span><span class="p">)</span>
<span class="p">{</span>
      <span class="n">linked_list</span> <span class="o">*</span><span class="n">left</span> <span class="o">=</span> <span class="n">new_list</span><span class="p">(</span><span class="n">list</span><span class="o">-&gt;</span><span class="n">cmp</span><span class="p">);</span>
      <span class="n">linked_list</span> <span class="o">*</span><span class="n">right</span> <span class="o">=</span> <span class="n">new_list</span><span class="p">(</span><span class="n">list</span><span class="o">-&gt;</span><span class="n">cmp</span><span class="p">);</span>

      <span class="k">if</span> <span class="p">(</span><span class="n">list</span><span class="o">-&gt;</span><span class="n">head</span> <span class="o">==</span> <span class="nb">NULL</span> <span class="o">||</span> <span class="n">list</span><span class="o">-&gt;</span><span class="n">head</span><span class="o">-&gt;</span><span class="n">next</span> <span class="o">==</span> <span class="nb">NULL</span><span class="p">)</span> <span class="k">return</span> <span class="n">list</span><span class="o">-&gt;</span><span class="n">head</span><span class="p">;</span>

      <span class="n">halve</span><span class="p">(</span><span class="n">list</span><span class="p">,</span> <span class="n">left</span><span class="p">,</span> <span class="n">right</span><span class="p">);</span>

      <span class="n">element</span><span class="o">*</span> <span class="n">merged</span> <span class="o">=</span> <span class="n">merge</span><span class="p">(</span><span class="n">mergesort</span><span class="p">(</span><span class="n">left</span><span class="p">,</span> <span class="n">order</span><span class="p">),</span><span class="n">mergesort</span><span class="p">(</span><span class="n">right</span><span class="p">,</span> <span class="n">order</span><span class="p">),</span> <span class="n">list</span><span class="o">-&gt;</span><span class="n">cmp</span><span class="p">,</span> <span class="n">order</span><span class="p">);</span>

      <span class="n">free</span><span class="p">(</span><span class="n">left</span><span class="p">);</span>
      <span class="n">free</span><span class="p">(</span><span class="n">right</span><span class="p">);</span>

      <span class="k">return</span> <span class="n">merged</span><span class="p">;</span>
<span class="p">}</span></code></pre></div>

<p>Here we have divide step on line 8 (halve function) and conquer step on line 10 (merge function). On line 10, the first call to mergesort has precedence, so the algorithm will first recursively divide the left part of the list and then the right part - as in a pre-ordered traversal of a binary tree - and then go on to do the merging.</p>

<div class="highlight"><pre><code class="language-c"><span class="kt">void</span> <span class="nf">halve</span><span class="p">(</span><span class="n">linked_list</span><span class="o">*</span> <span class="n">list</span><span class="p">,</span> <span class="n">linked_list</span><span class="o">*</span> <span class="n">left</span><span class="p">,</span> <span class="n">linked_list</span><span class="o">*</span> <span class="n">right</span><span class="p">)</span>
<span class="p">{</span>
      <span class="n">element</span><span class="o">*</span> <span class="n">middle</span> <span class="o">=</span> <span class="n">list</span><span class="o">-&gt;</span><span class="n">head</span><span class="p">;</span>
      <span class="k">if</span> <span class="p">(</span><span class="n">middle</span><span class="o">!=</span><span class="nb">NULL</span><span class="p">)</span> <span class="p">{</span>
      <span class="kt">int</span> <span class="n">half</span> <span class="o">=</span> <span class="p">(</span><span class="kt">int</span><span class="p">)</span> <span class="p">((</span><span class="n">list</span><span class="o">-&gt;</span><span class="n">size</span><span class="p">)</span><span class="o">/</span><span class="mi">2</span><span class="p">.</span><span class="mi">0</span><span class="n">f</span><span class="p">),</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span>
      <span class="k">while</span> <span class="p">(</span><span class="o">++</span><span class="n">i</span><span class="o">&lt;</span><span class="n">half</span><span class="p">)</span> <span class="n">middle</span> <span class="o">=</span> <span class="n">middle</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">;</span>
      <span class="n">element</span><span class="o">*</span> <span class="n">middle_head</span> <span class="o">=</span> <span class="n">middle</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">;</span>
      <span class="n">middle</span><span class="o">-&gt;</span><span class="n">next</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>

      <span class="n">left</span><span class="o">-&gt;</span><span class="n">head</span> <span class="o">=</span> <span class="n">list</span><span class="o">-&gt;</span><span class="n">head</span><span class="p">;</span>
      <span class="n">left</span><span class="o">-&gt;</span><span class="n">size</span> <span class="o">=</span> <span class="p">(</span><span class="n">list</span><span class="o">-&gt;</span><span class="n">size</span><span class="p">)</span><span class="o">-</span><span class="n">half</span><span class="p">;</span>

      <span class="n">right</span><span class="o">-&gt;</span><span class="n">head</span> <span class="o">=</span> <span class="n">middle_head</span><span class="p">;</span>
      <span class="n">right</span><span class="o">-&gt;</span><span class="n">size</span> <span class="o">=</span> <span class="n">half</span><span class="p">;}</span>
<span class="p">}</span></code></pre></div>

<p>Halving is simple: using the list size as a placemark, we find the middle element, set it as left half list‚Äôs last element and set its successor as the head of the right half.</p>

<div class="highlight"><pre><code class="language-c"><span class="n">element</span><span class="o">*</span> <span class="nf">merge</span><span class="p">(</span><span class="n">element</span><span class="o">*</span> <span class="n">a</span><span class="p">,</span> <span class="n">element</span><span class="o">*</span> <span class="n">b</span><span class="p">,</span> <span class="kt">int</span> <span class="p">(</span><span class="o">*</span><span class="n">cmp</span><span class="p">)</span> <span class="p">(</span><span class="kt">void</span><span class="o">*</span><span class="p">,</span> <span class="kt">void</span><span class="o">*</span><span class="p">),</span> <span class="kt">int</span> <span class="n">order</span><span class="p">)</span>
<span class="p">{</span>
      <span class="n">element</span><span class="o">*</span> <span class="n">c</span> <span class="o">=</span> <span class="n">new_element</span><span class="p">(</span><span class="nb">NULL</span><span class="p">);</span>
      <span class="n">element</span><span class="o">*</span> <span class="n">merged</span> <span class="o">=</span> <span class="n">c</span><span class="p">;</span>
      <span class="k">while</span> <span class="p">(</span><span class="n">a</span> <span class="o">!=</span> <span class="nb">NULL</span> <span class="o">&amp;&amp;</span> <span class="n">b</span> <span class="o">!=</span> <span class="nb">NULL</span><span class="p">)</span>
      <span class="p">{</span>
            <span class="k">if</span> <span class="p">((</span><span class="n">order</span><span class="o">==</span><span class="n">ASC</span><span class="p">)</span> <span class="o">?</span> <span class="p">(</span><span class="n">cmp</span><span class="p">(</span><span class="n">a</span><span class="o">-&gt;</span><span class="n">data</span><span class="p">,</span> <span class="n">b</span><span class="o">-&gt;</span><span class="n">data</span><span class="p">)</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span> <span class="o">:</span> <span class="p">(</span><span class="n">cmp</span><span class="p">(</span><span class="n">a</span><span class="o">-&gt;</span><span class="n">data</span><span class="p">,</span> <span class="n">b</span><span class="o">-&gt;</span><span class="n">data</span><span class="p">)</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">))</span>
            <span class="p">{</span>
                  <span class="n">c</span><span class="o">-&gt;</span><span class="n">next</span> <span class="o">=</span> <span class="n">a</span><span class="p">;</span>
                  <span class="n">a</span> <span class="o">=</span> <span class="n">a</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">;</span>
            <span class="p">}</span>
            <span class="k">else</span>
            <span class="p">{</span>
                  <span class="n">c</span><span class="o">-&gt;</span><span class="n">next</span> <span class="o">=</span> <span class="n">b</span><span class="p">;</span>
                  <span class="n">b</span> <span class="o">=</span> <span class="n">b</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">;</span>
            <span class="p">}</span>
            <span class="n">c</span> <span class="o">=</span> <span class="n">c</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">;</span>
      <span class="p">}</span>
      <span class="n">c</span><span class="o">-&gt;</span><span class="n">next</span> <span class="o">=</span> <span class="p">(</span><span class="n">a</span> <span class="o">==</span> <span class="nb">NULL</span><span class="p">)</span> <span class="o">?</span> <span class="n">b</span> <span class="o">:</span> <span class="n">a</span><span class="p">;</span>
      <span class="k">return</span> <span class="n">merged</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">;</span>
<span class="p">}</span></code></pre></div>

<p>To merge both lists, we stich together each half by comparing elements from both, one by one. Depending on the order (ascending/descending) we choose who comes first and set it as next on the consolidated list.</p>

<p>That‚Äôs it! Fully runnable code can be found below as well as on github. After the code you can find compilation and expected output.</p>

<div class="highlight"><pre><code class="language-c"><span class="cm">/*
    File: mergesort.c

    Copyright (c) 2014 Leonardo Brito &lt;lbrito@gmail.com&gt;

    This software is free software; you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation; either version 2 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License along
    with this program; if not, write the Free Software Foundation, Inc., 51
    Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
*/</span>

<span class="cp">#include "linked_list.c"
#include 
#include 
</span>
<span class="cp">#if !defined _TEST_SIZE_MSORT &amp;&amp; defined _DEBUGGING
#define _TEST_SIZE_MSORT 10
#endif
</span>
<span class="cp">#define ASC 0
#define DEC 1
</span>
<span class="n">element</span><span class="o">*</span> <span class="nf">mergesort</span><span class="p">(</span><span class="n">linked_list</span><span class="o">*</span> <span class="n">list</span><span class="p">,</span> <span class="kt">int</span> <span class="n">order</span><span class="p">);</span>
<span class="kt">void</span> <span class="nf">halve</span><span class="p">(</span><span class="n">linked_list</span><span class="o">*</span> <span class="n">list</span><span class="p">,</span> <span class="n">linked_list</span><span class="o">*</span> <span class="n">left</span><span class="p">,</span> <span class="n">linked_list</span><span class="o">*</span> <span class="n">right</span><span class="p">);</span>
<span class="n">element</span><span class="o">*</span> <span class="nf">merge</span><span class="p">(</span><span class="n">element</span><span class="o">*</span> <span class="n">a</span><span class="p">,</span> <span class="n">element</span><span class="o">*</span> <span class="n">b</span><span class="p">,</span> <span class="kt">int</span> <span class="p">(</span><span class="o">*</span><span class="n">cmp</span><span class="p">)</span> <span class="p">(</span><span class="kt">void</span><span class="o">*</span><span class="p">,</span> <span class="kt">void</span><span class="o">*</span><span class="p">),</span> <span class="kt">int</span> <span class="n">order</span><span class="p">);</span>

<span class="cm">/**
 *  @brief Orders the list using mergesort
 *
 *  @param [in] list  Linked list
 *  @param [in] order Sorting order (ASC or DEC)
 *  @return partial result, used for recursion only
 */</span>
<span class="n">element</span><span class="o">*</span> <span class="nf">mergesort</span><span class="p">(</span><span class="n">linked_list</span><span class="o">*</span> <span class="n">list</span><span class="p">,</span> <span class="kt">int</span> <span class="n">order</span><span class="p">)</span>
<span class="p">{</span>
      <span class="n">linked_list</span> <span class="o">*</span><span class="n">left</span> <span class="o">=</span> <span class="n">new_list</span><span class="p">(</span><span class="n">list</span><span class="o">-&gt;</span><span class="n">cmp</span><span class="p">);</span>
      <span class="n">linked_list</span> <span class="o">*</span><span class="n">right</span> <span class="o">=</span> <span class="n">new_list</span><span class="p">(</span><span class="n">list</span><span class="o">-&gt;</span><span class="n">cmp</span><span class="p">);</span>

      <span class="k">if</span> <span class="p">(</span><span class="n">list</span><span class="o">-&gt;</span><span class="n">head</span> <span class="o">==</span> <span class="nb">NULL</span> <span class="o">||</span> <span class="n">list</span><span class="o">-&gt;</span><span class="n">head</span><span class="o">-&gt;</span><span class="n">next</span> <span class="o">==</span> <span class="nb">NULL</span><span class="p">)</span> <span class="k">return</span> <span class="n">list</span><span class="o">-&gt;</span><span class="n">head</span><span class="p">;</span>

      <span class="n">halve</span><span class="p">(</span><span class="n">list</span><span class="p">,</span> <span class="n">left</span><span class="p">,</span> <span class="n">right</span><span class="p">);</span>

      <span class="n">element</span><span class="o">*</span> <span class="n">merged</span> <span class="o">=</span> <span class="n">merge</span><span class="p">(</span><span class="n">mergesort</span><span class="p">(</span><span class="n">left</span><span class="p">,</span> <span class="n">order</span><span class="p">),</span><span class="n">mergesort</span><span class="p">(</span><span class="n">right</span><span class="p">,</span> <span class="n">order</span><span class="p">),</span> <span class="n">list</span><span class="o">-&gt;</span><span class="n">cmp</span><span class="p">,</span> <span class="n">order</span><span class="p">);</span>

      <span class="n">free</span><span class="p">(</span><span class="n">left</span><span class="p">);</span>
      <span class="n">free</span><span class="p">(</span><span class="n">right</span><span class="p">);</span>

      <span class="k">return</span> <span class="n">merged</span><span class="p">;</span>
<span class="p">}</span>

<span class="cm">/**
 *  @brief Splits a list into two halves
 *
 *  @param [in] list  Original list
 *  @param [in] left  Left half
 *  @param [in] right Right half
 */</span>
<span class="kt">void</span> <span class="nf">halve</span><span class="p">(</span><span class="n">linked_list</span><span class="o">*</span> <span class="n">list</span><span class="p">,</span> <span class="n">linked_list</span><span class="o">*</span> <span class="n">left</span><span class="p">,</span> <span class="n">linked_list</span><span class="o">*</span> <span class="n">right</span><span class="p">)</span>
<span class="p">{</span>
      <span class="n">element</span><span class="o">*</span> <span class="n">middle</span> <span class="o">=</span> <span class="n">list</span><span class="o">-&gt;</span><span class="n">head</span><span class="p">;</span>
      <span class="k">if</span> <span class="p">(</span><span class="n">middle</span><span class="o">!=</span><span class="nb">NULL</span><span class="p">)</span> <span class="p">{</span>
      <span class="kt">int</span> <span class="n">half</span> <span class="o">=</span> <span class="p">(</span><span class="kt">int</span><span class="p">)</span> <span class="p">((</span><span class="n">list</span><span class="o">-&gt;</span><span class="n">size</span><span class="p">)</span><span class="o">/</span><span class="mi">2</span><span class="p">.</span><span class="mi">0</span><span class="n">f</span><span class="p">),</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span>
      <span class="k">while</span> <span class="p">(</span><span class="o">++</span><span class="n">i</span><span class="o">&lt;</span><span class="n">half</span><span class="p">)</span> <span class="n">middle</span> <span class="o">=</span> <span class="n">middle</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">;</span>
      <span class="n">element</span><span class="o">*</span> <span class="n">middle_head</span> <span class="o">=</span> <span class="n">middle</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">;</span>
      <span class="n">middle</span><span class="o">-&gt;</span><span class="n">next</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>

      <span class="n">left</span><span class="o">-&gt;</span><span class="n">head</span> <span class="o">=</span> <span class="n">list</span><span class="o">-&gt;</span><span class="n">head</span><span class="p">;</span>
      <span class="n">left</span><span class="o">-&gt;</span><span class="n">size</span> <span class="o">=</span> <span class="p">(</span><span class="n">list</span><span class="o">-&gt;</span><span class="n">size</span><span class="p">)</span><span class="o">-</span><span class="n">half</span><span class="p">;</span>

      <span class="n">right</span><span class="o">-&gt;</span><span class="n">head</span> <span class="o">=</span> <span class="n">middle_head</span><span class="p">;</span>
      <span class="n">right</span><span class="o">-&gt;</span><span class="n">size</span> <span class="o">=</span> <span class="n">half</span><span class="p">;}</span>
<span class="p">}</span>

<span class="cm">/**
 *  @brief Merges two lists into a single list
 *
 *  @param [in] a   First half
 *  @param [in] b   Second half
 *  @param [in] cmp Comparator function
 *  @return Pointer to consolidated list's head
 */</span>
<span class="n">element</span><span class="o">*</span> <span class="nf">merge</span><span class="p">(</span><span class="n">element</span><span class="o">*</span> <span class="n">a</span><span class="p">,</span> <span class="n">element</span><span class="o">*</span> <span class="n">b</span><span class="p">,</span> <span class="kt">int</span> <span class="p">(</span><span class="o">*</span><span class="n">cmp</span><span class="p">)</span> <span class="p">(</span><span class="kt">void</span><span class="o">*</span><span class="p">,</span> <span class="kt">void</span><span class="o">*</span><span class="p">),</span> <span class="kt">int</span> <span class="n">order</span><span class="p">)</span>
<span class="p">{</span>
      <span class="n">element</span><span class="o">*</span> <span class="n">c</span> <span class="o">=</span> <span class="n">new_element</span><span class="p">(</span><span class="nb">NULL</span><span class="p">);</span>
      <span class="n">element</span><span class="o">*</span> <span class="n">merged</span> <span class="o">=</span> <span class="n">c</span><span class="p">;</span>
      <span class="k">while</span> <span class="p">(</span><span class="n">a</span> <span class="o">!=</span> <span class="nb">NULL</span> <span class="o">&amp;&amp;</span> <span class="n">b</span> <span class="o">!=</span> <span class="nb">NULL</span><span class="p">)</span>
      <span class="p">{</span>
            <span class="k">if</span> <span class="p">((</span><span class="n">order</span><span class="o">==</span><span class="n">ASC</span><span class="p">)</span> <span class="o">?</span> <span class="p">(</span><span class="n">cmp</span><span class="p">(</span><span class="n">a</span><span class="o">-&gt;</span><span class="n">data</span><span class="p">,</span> <span class="n">b</span><span class="o">-&gt;</span><span class="n">data</span><span class="p">)</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span> <span class="o">:</span> <span class="p">(</span><span class="n">cmp</span><span class="p">(</span><span class="n">a</span><span class="o">-&gt;</span><span class="n">data</span><span class="p">,</span> <span class="n">b</span><span class="o">-&gt;</span><span class="n">data</span><span class="p">)</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">))</span>
            <span class="p">{</span>
                  <span class="n">c</span><span class="o">-&gt;</span><span class="n">next</span> <span class="o">=</span> <span class="n">a</span><span class="p">;</span>
                  <span class="n">a</span> <span class="o">=</span> <span class="n">a</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">;</span>
            <span class="p">}</span>
            <span class="k">else</span>
            <span class="p">{</span>
                  <span class="n">c</span><span class="o">-&gt;</span><span class="n">next</span> <span class="o">=</span> <span class="n">b</span><span class="p">;</span>
                  <span class="n">b</span> <span class="o">=</span> <span class="n">b</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">;</span>
            <span class="p">}</span>
            <span class="n">c</span> <span class="o">=</span> <span class="n">c</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">;</span>
      <span class="p">}</span>
      <span class="n">c</span><span class="o">-&gt;</span><span class="n">next</span> <span class="o">=</span> <span class="p">(</span><span class="n">a</span> <span class="o">==</span> <span class="nb">NULL</span><span class="p">)</span> <span class="o">?</span> <span class="n">b</span> <span class="o">:</span> <span class="n">a</span><span class="p">;</span>
      <span class="k">return</span> <span class="n">merged</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">;</span>
<span class="p">}</span>

<span class="c1">//#ifdef _DEBUGGING</span>
<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
<span class="p">{</span>
      <span class="n">linked_list</span><span class="o">*</span> <span class="n">list</span> <span class="o">=</span> <span class="n">new_list</span><span class="p">(</span><span class="n">compare_integer</span><span class="p">);</span>

      <span class="n">srand</span><span class="p">(</span><span class="n">time</span><span class="p">(</span><span class="nb">NULL</span><span class="p">));</span>

      <span class="kt">int</span><span class="o">*</span> <span class="n">x</span> <span class="o">=</span> <span class="n">malloc</span><span class="p">(</span><span class="k">sizeof</span><span class="p">(</span><span class="kt">int</span><span class="p">)</span><span class="o">*</span><span class="n">_TEST_SIZE_MSORT</span><span class="p">);</span>

      <span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span>
      <span class="k">for</span> <span class="p">(;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">_TEST_SIZE_MSORT</span><span class="p">;</span><span class="n">i</span><span class="o">++</span><span class="p">)</span>
      <span class="p">{</span>
            <span class="n">x</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">rand</span><span class="p">();</span>
            <span class="n">add</span><span class="p">(</span><span class="n">list</span><span class="p">,</span> <span class="o">&amp;</span><span class="p">(</span><span class="n">x</span><span class="p">[</span><span class="n">i</span><span class="p">]));</span>
      <span class="p">}</span>

      <span class="n">element</span><span class="o">*</span> <span class="n">xx</span> <span class="o">=</span> <span class="n">list</span><span class="o">-&gt;</span><span class="n">head</span><span class="p">;</span>
      <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span>
      <span class="k">do</span> <span class="p">{</span> <span class="n">printf</span><span class="p">(</span><span class="s">"</span><span class="se">\n</span><span class="s">[%d]</span><span class="se">\t</span><span class="s">%d"</span><span class="p">,</span><span class="n">i</span><span class="o">++</span><span class="p">,</span><span class="o">*</span><span class="p">((</span><span class="kt">int</span><span class="o">*</span><span class="p">)</span><span class="n">xx</span><span class="o">-&gt;</span><span class="n">data</span><span class="p">));</span>
      <span class="p">}</span> <span class="k">while</span> <span class="p">((</span><span class="n">xx</span><span class="o">=</span><span class="n">xx</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">)</span><span class="o">!=</span><span class="nb">NULL</span><span class="p">);</span>

      <span class="n">printf</span><span class="p">(</span><span class="s">"</span><span class="se">\n\n</span><span class="s">Sorted:"</span><span class="p">);</span>
      <span class="n">xx</span> <span class="o">=</span> <span class="n">mergesort</span><span class="p">(</span><span class="n">list</span><span class="p">,</span> <span class="n">DEC</span><span class="p">);</span>
      <span class="n">list</span><span class="o">-&gt;</span><span class="n">head</span> <span class="o">=</span> <span class="n">xx</span><span class="p">;</span>
      <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span>
      <span class="k">do</span> <span class="p">{</span> <span class="n">printf</span><span class="p">(</span><span class="s">"</span><span class="se">\n</span><span class="s">[%d]</span><span class="se">\t</span><span class="s">%d"</span><span class="p">,</span><span class="n">i</span><span class="o">++</span><span class="p">,</span><span class="o">*</span><span class="p">((</span><span class="kt">int</span><span class="o">*</span><span class="p">)</span><span class="n">xx</span><span class="o">-&gt;</span><span class="n">data</span><span class="p">));</span>
      <span class="p">}</span> <span class="k">while</span> <span class="p">((</span><span class="n">xx</span><span class="o">=</span><span class="n">xx</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">)</span><span class="o">!=</span><span class="nb">NULL</span><span class="p">);</span>

      <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
<span class="c1">//#endif</span>
<span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;&lt;/</span><span class="n">div</span><span class="o">&gt;</span>


<span class="n">C</span><span class="o">:</span><span class="err">\</span><span class="n">code</span><span class="err">\</span><span class="n">c</span><span class="err">\</span><span class="n">cstuff</span><span class="o">&gt;</span><span class="n">gcc</span> <span class="n">mergesort</span><span class="p">.</span><span class="n">c</span> <span class="o">-</span><span class="n">o</span> <span class="n">mergesort</span> <span class="o">-</span><span class="n">D</span> <span class="n">_TEST_SIZE_MSORT</span><span class="o">=</span><span class="mi">20</span> <span class="o">-</span><span class="n">D</span> <span class="n">DEBUGGING</span>

<span class="n">C</span><span class="o">:</span><span class="err">\</span><span class="n">code</span><span class="err">\</span><span class="n">c</span><span class="err">\</span><span class="n">cstuff</span><span class="o">&gt;</span><span class="n">mergesort</span>

<span class="p">[</span><span class="mi">0</span><span class="p">]</span>     <span class="mi">2549</span>
<span class="p">[</span><span class="mi">1</span><span class="p">]</span>     <span class="mi">30801</span>
<span class="p">[</span><span class="mi">2</span><span class="p">]</span>     <span class="mi">23795</span>
<span class="p">[</span><span class="mi">3</span><span class="p">]</span>     <span class="mi">9308</span>
<span class="p">[</span><span class="mi">4</span><span class="p">]</span>     <span class="mi">8425</span>
<span class="p">[</span><span class="mi">5</span><span class="p">]</span>     <span class="mi">23253</span>
<span class="p">[</span><span class="mi">6</span><span class="p">]</span>     <span class="mi">26244</span>
<span class="p">[</span><span class="mi">7</span><span class="p">]</span>     <span class="mi">32399</span>
<span class="p">[</span><span class="mi">8</span><span class="p">]</span>     <span class="mi">3802</span>
<span class="p">[</span><span class="mi">9</span><span class="p">]</span>     <span class="mi">30628</span>
<span class="p">[</span><span class="mi">10</span><span class="p">]</span>    <span class="mi">18291</span>
<span class="p">[</span><span class="mi">11</span><span class="p">]</span>    <span class="mi">29682</span>
<span class="p">[</span><span class="mi">12</span><span class="p">]</span>    <span class="mi">11105</span>
<span class="p">[</span><span class="mi">13</span><span class="p">]</span>    <span class="mi">23618</span>
<span class="p">[</span><span class="mi">14</span><span class="p">]</span>    <span class="mi">23104</span>
<span class="p">[</span><span class="mi">15</span><span class="p">]</span>    <span class="mi">11222</span>
<span class="p">[</span><span class="mi">16</span><span class="p">]</span>    <span class="mi">7193</span>
<span class="p">[</span><span class="mi">17</span><span class="p">]</span>    <span class="mi">1327</span>
<span class="p">[</span><span class="mi">18</span><span class="p">]</span>    <span class="mi">8573</span>
<span class="p">[</span><span class="mi">19</span><span class="p">]</span>    <span class="mi">30288</span>

<span class="n">Sorted</span><span class="o">:</span>
<span class="p">[</span><span class="mi">0</span><span class="p">]</span>     <span class="mi">32399</span>
<span class="p">[</span><span class="mi">1</span><span class="p">]</span>     <span class="mi">30801</span>
<span class="p">[</span><span class="mi">2</span><span class="p">]</span>     <span class="mi">30628</span>
<span class="p">[</span><span class="mi">3</span><span class="p">]</span>     <span class="mi">30288</span>
<span class="p">[</span><span class="mi">4</span><span class="p">]</span>     <span class="mi">29682</span>
<span class="p">[</span><span class="mi">5</span><span class="p">]</span>     <span class="mi">26244</span>
<span class="p">[</span><span class="mi">6</span><span class="p">]</span>     <span class="mi">23795</span>
<span class="p">[</span><span class="mi">7</span><span class="p">]</span>     <span class="mi">23618</span>
<span class="p">[</span><span class="mi">8</span><span class="p">]</span>     <span class="mi">23253</span>
<span class="p">[</span><span class="mi">9</span><span class="p">]</span>     <span class="mi">23104</span>
<span class="p">[</span><span class="mi">10</span><span class="p">]</span>    <span class="mi">18291</span>
<span class="p">[</span><span class="mi">11</span><span class="p">]</span>    <span class="mi">11222</span>
<span class="p">[</span><span class="mi">12</span><span class="p">]</span>    <span class="mi">11105</span>
<span class="p">[</span><span class="mi">13</span><span class="p">]</span>    <span class="mi">9308</span>
<span class="p">[</span><span class="mi">14</span><span class="p">]</span>    <span class="mi">8573</span>
<span class="p">[</span><span class="mi">15</span><span class="p">]</span>    <span class="mi">8425</span>
<span class="p">[</span><span class="mi">16</span><span class="p">]</span>    <span class="mi">7193</span>
<span class="p">[</span><span class="mi">17</span><span class="p">]</span>    <span class="mi">3802</span>
<span class="p">[</span><span class="mi">18</span><span class="p">]</span>    <span class="mi">2549</span>
<span class="p">[</span><span class="mi">19</span><span class="p">]</span>    <span class="mi">1327</span></code></pre></div>

    </article>
    <aside>Posted at: Feb 21, 2014</aside>
    <div class="post-footer">
      <a href="../../index.html">Back</a>
    </div>
  </div>

        <div class="footer">
          2020 Leonardo Brito
        </div>
      </div>

    </div>
  


</body></html>;
T;@X;@Xo;;;;	I"9/posts/2015-09-11-ruby-dsl-metaprogramming-part-i.md;
T{;{
;U;[I"[/home/carol/workspace/blog/content/posts/2015-09-11-ruby-dsl-metaprogramming-part-i.md;
TI"!I've been working with Ruby for nearly a year now, which means I'm starting to feel the urge to tell people how awesome the language is. One of the most interesting aspects of Ruby to me is [metaprogramming](https://en.wikipedia.org/wiki/Metaprogramming), which it seems to have quite a vocation for.

Since college I have a fondness for automata and formal languages theory. One of the topics I particularly like is text generation (if you haven't already, check out the excellent [SCIgen](http://pdos.csail.mit.edu/scigen/) and the [Dada engine](http://dev.null.org/dadaengine/)), so I thought that building a Context-free grammar (CFG)-like text generator in Ruby would be a nice little exercise and an opportunity to use some of the language's coolest features. Also I've implemented one of those using Java several years ago, and it was _a mess_, so I was curious as to how much of an improvement would Ruby offer.

Suppose the following script:

<div class="highlight"><pre><code class="language-ruby">
dictionary 'noun', 'dog', 'bus'
dictionary 'verb', 'barked', 'parked'
dictionary 'preposition', 'at'

rule 'phrase', 'noun', 'verb', 'preposition', 'noun'

codex 'phrase'
</code></pre></div>

We'd like `dictionary` to store some words according to their classes, and `rule` to define a specific ordering of words. For now let's not worry about `codex` (it's just a collection of rules).

At this point the seasoned programmer is mentally sketching some kind of text parser. It's an okay solution, but isn't there something _nicer_ we can do? Well, there is: [DSL](https://en.wikipedia.org/wiki/Domain-specific_language)s! In fact, Ruby is quite an excellent tool to build a DSL, and many famed Ruby-powered applications such as Rspec (and [many others](http://www.leighhalliday.com/creating-ruby-dsl)) define some kind of DSL.

<!-- more -->

Conveniently enough, our little script is actually valid Ruby code (Ruby doesn't care for parenthesis or semicolons). So lets define the dictionary, rule and codex methods:

<div class="highlight"><pre><code class="language-ruby">
#!/usr/bin/env ruby
require_relative 'grammar'
require_relative 'dictionary'
require_relative 'rule'
require_relative 'codex'

@grammar = Grammar.new

def dictionary key, *values
  puts "Read dictionary with: #{key} #{values.to_s}"
  Dictionary.instance.add key, values
end

def rule name, *keys
  puts "Read rule with: #{name} #{keys.to_s}"
  @grammar.rules[name] = Rule.new keys
end

def codex *rulenames
  puts "Read codex with: #{rulenames.to_s}"
  @grammar.codex << (Codex.new rulenames)
end

load 'script.le'
@grammar.generate
</code></pre></div>

Notice the asterisks in the method definitions; they're called splat operators (good reference [here](http://jacopretorius.net/2012/01/splat-operator-in-ruby.html) and [here](https://endofline.wordpress.com/2011/01/21/the-strange-ruby-splat/)). Splats are useful for several things; in our case, we'd like each dictionary entry to have one _key_ (e.g. 'noun') and several _values_: splat takes an arbitrary number of arguments and slurps them into one variable.

So the basic structure is: a `Grammar` has one `Dictionary` and several `Rules` and `Codices`. Text is generated by going running each codex, which applies each of its rules, which combines words together. Simple enough. Here's what output looks like:

<div class="highlight"><pre><code class="language-bash">
lbrito@lbrito:~/Documents/ruby_textgen$ ruby lero.rb
Read dictionary with: noun ["dog", "bus"]
Read dictionary with: verb ["barked", "parked"]
Read dictionary with: preposition ["at"]
Read rule with: phrase ["noun", "verb", "preposition", "noun"]
Read codex with: ["phrase"]
Codex is applying phrase
Applying rule with key: noun
Fetching noun from dictionary
Applying rule with key: verb
Fetching verb from dictionary
Applying rule with key: preposition
Fetching preposition from dictionary
Applying rule with key: noun
Fetching noun from dictionary
Final result:
=======
bus barked at dog
=======
</code></pre></div>

Nonsensical, but still pretty cool.

Let's take a look at our DSL script for a while. It works fine, but isn't very [DRY](https://en.wikipedia.org/wiki/Don%27t_repeat_yourself). Wouldn't it be nice to add some structure and be less repetitious? Let's try to define Dictionary and Rule entries as functions:

<div class="highlight"><pre><code class="language-bash">
dictionary
  noun 'dog', 'bus'
  verb 'barked', 'parked'
  preposition 'at'

rule
  phrase 'noun', 'verb', 'preposition', 'noun'

codex 'phrase'
</code></pre></div>

Much better. But what if we wanted different nouns to belong in different dictionary entries, say, `animal_nouns` and `vehicle_nouns`? Are we supposed to define every possible word class as a separate method? That's not very DRY!

Here's where things start getting beautiful: Ruby has a method called `method_missing` (good material [here](http://rubylearning.com/satishtalim/ruby_method_missing.html) and [here](http://www.alef1.org/ruby/method_missing/)), which by default raises a NoMethodError, but can be overridden to do some cool stuff. Let's leverage the power of `method_missing`:

<div class="highlight"><pre><code class="language-ruby">
...

def dictionary
  @state = :dictionary
end

def rule
  @state = :rule
end

def codex *rulenames
  puts "Read codex with: #{rulenames.to_s}"
  @grammar.codex << (Codex.new rulenames)
end

@state = :idle

def method_missing method, *args, &block
  case @state
  when :dictionary
    puts "Read dictionary with: #{method.to_s} #{args.to_s}"
    Dictionary.instance.add method.to_s, args
  when :rule
    puts "Read rule with: #{method.to_s} #{args.to_s}"
    @grammar.rules[method.to_s] = (Rule.new args)
  when :idle
  else
    puts "Boom! Something went wrong. I don't know what to do with #{@state.to_s}."
  end
end
</code></pre></div>

Now `method_missing` captures undefined methods and the appropriate entries are created depending on which function was last called (i.e. `dictionary` or `rule`). This relieves us from defining methods for `noun`, `verb`, etc. Pretty great, but we can do better. We still have some very trivial-looking method definitions in our DSL:

<div class="highlight"><pre><code class="language-ruby">
def dictionary
  @state = :dictionary
end

def rule
  @state = :rule
end
</code></pre></div>

What if we decide later on to add some new functionality to our DSL that works analogously to rules and dictionaries? We'd have to write more method definitions that just¬†set¬†the¬†@`state` variable. Once more, Ruby offers us some DRYing magic: we can dynamically define methods just as if they were objects.

<div class="highlight"><pre><code class="language-ruby">
...

%w'rule dictionary'.each do |keyword|
  define_method(keyword) { @state = keyword.to_sym }
end
</code></pre></div>

The resulting methods are identical to the ones we defined statically with `def`. This may not seem like a great advantage over our previous code, but imagine if there were not 2 but 20 similar methods which could be dynamically defined - quite an improvement! There's still room for improvement using `define_method`. Instead of storing strings in a Dictionary, we might as well define a function that chooses an entry at random. Here's the Dictionary class:

<div class="highlight"><pre><code class="language-ruby">

require 'singleton'

class Dictionary
  include Singleton


  def add key, values
    @dicts ||= {}
    @dicts[key] = values
  end

  def fetch key
    puts "Fetching #{key} from dictionary"
    @dicts[key].sample
  end

end

</code></pre></div>

We can eliminate the need for that entire class by defining methods dynamically using a single line of code:

<div class="highlight"><pre><code class="language-ruby">
...

def method_missing method, *args, &block
  case @state
  when :dictionary
    puts "Read dictionary with: #{method.to_s} #{args.to_s}"
    define_method(method) { args.sample }

...
</code></pre></div>

If you're wondering, `sample` picks an array element at random.

So that's that: we successfully used some of Ruby's core metaprogramming tools, `method_missing` and `define_method`, to improve our little program. [Full code](https://github.com/lbrito1/ruby_textgen/tree/part-1) is hosted on Github - please not that it may differ slightly from what is presented here for didactic reasons.

In the next installment we'll continue to improve our DSL using more interesting Ruby features.
;
T;U;[0I"ŸF<p>I‚Äôve been working with Ruby for nearly a year now, which means I‚Äôm starting to feel the urge to tell people how awesome the language is. One of the most interesting aspects of Ruby to me is <a href="https://en.wikipedia.org/wiki/Metaprogramming">metaprogramming</a>, which it seems to have quite a vocation for.</p>

<p>Since college I have a fondness for automata and formal languages theory. One of the topics I particularly like is text generation (if you haven‚Äôt already, check out the excellent <a href="http://pdos.csail.mit.edu/scigen/">SCIgen</a> and the <a href="http://dev.null.org/dadaengine/">Dada engine</a>), so I thought that building a Context-free grammar (CFG)-like text generator in Ruby would be a nice little exercise and an opportunity to use some of the language‚Äôs coolest features. Also I‚Äôve implemented one of those using Java several years ago, and it was <em>a mess</em>, so I was curious as to how much of an improvement would Ruby offer.</p>

<p>Suppose the following script:</p>

<div class="highlight"><pre><code class="language-ruby"><span class="n">dictionary</span> <span class="s1">'noun'</span><span class="p">,</span> <span class="s1">'dog'</span><span class="p">,</span> <span class="s1">'bus'</span>
<span class="n">dictionary</span> <span class="s1">'verb'</span><span class="p">,</span> <span class="s1">'barked'</span><span class="p">,</span> <span class="s1">'parked'</span>
<span class="n">dictionary</span> <span class="s1">'preposition'</span><span class="p">,</span> <span class="s1">'at'</span>

<span class="n">rule</span> <span class="s1">'phrase'</span><span class="p">,</span> <span class="s1">'noun'</span><span class="p">,</span> <span class="s1">'verb'</span><span class="p">,</span> <span class="s1">'preposition'</span><span class="p">,</span> <span class="s1">'noun'</span>

<span class="n">codex</span> <span class="s1">'phrase'</span></code></pre></div>

<p>We‚Äôd like <code>dictionary</code> to store some words according to their classes, and <code>rule</code> to define a specific ordering of words. For now let‚Äôs not worry about <code>codex</code> (it‚Äôs just a collection of rules).</p>

<p>At this point the seasoned programmer is mentally sketching some kind of text parser. It‚Äôs an okay solution, but isn‚Äôt there something <em>nicer</em> we can do? Well, there is: <a href="https://en.wikipedia.org/wiki/Domain-specific_language">DSL</a>s! In fact, Ruby is quite an excellent tool to build a DSL, and many famed Ruby-powered applications such as Rspec (and <a href="http://www.leighhalliday.com/creating-ruby-dsl">many others</a>) define some kind of DSL.</p>

<!-- more -->

<p>Conveniently enough, our little script is actually valid Ruby code (Ruby doesn‚Äôt care for parenthesis or semicolons). So lets define the dictionary, rule and codex methods:</p>

<div class="highlight"><pre><code class="language-ruby"><span class="c1">#!/usr/bin/env ruby</span>
<span class="nb">require_relative</span> <span class="s1">'grammar'</span>
<span class="nb">require_relative</span> <span class="s1">'dictionary'</span>
<span class="nb">require_relative</span> <span class="s1">'rule'</span>
<span class="nb">require_relative</span> <span class="s1">'codex'</span>

<span class="vi">@grammar</span> <span class="o">=</span> <span class="no">Grammar</span><span class="p">.</span><span class="nf">new</span>

<span class="k">def</span> <span class="nf">dictionary</span> <span class="n">key</span><span class="p">,</span> <span class="o">*</span><span class="n">values</span>
  <span class="nb">puts</span> <span class="s2">"Read dictionary with: </span><span class="si">#{</span><span class="n">key</span><span class="si">}</span><span class="s2"> </span><span class="si">#{</span><span class="n">values</span><span class="p">.</span><span class="nf">to_s</span><span class="si">}</span><span class="s2">"</span>
  <span class="no">Dictionary</span><span class="p">.</span><span class="nf">instance</span><span class="p">.</span><span class="nf">add</span> <span class="n">key</span><span class="p">,</span> <span class="n">values</span>
<span class="k">end</span>

<span class="k">def</span> <span class="nf">rule</span> <span class="nb">name</span><span class="p">,</span> <span class="o">*</span><span class="n">keys</span>
  <span class="nb">puts</span> <span class="s2">"Read rule with: </span><span class="si">#{</span><span class="nb">name</span><span class="si">}</span><span class="s2"> </span><span class="si">#{</span><span class="n">keys</span><span class="p">.</span><span class="nf">to_s</span><span class="si">}</span><span class="s2">"</span>
  <span class="vi">@grammar</span><span class="p">.</span><span class="nf">rules</span><span class="p">[</span><span class="nb">name</span><span class="p">]</span> <span class="o">=</span> <span class="no">Rule</span><span class="p">.</span><span class="nf">new</span> <span class="n">keys</span>
<span class="k">end</span>

<span class="k">def</span> <span class="nf">codex</span> <span class="o">*</span><span class="n">rulenames</span>
  <span class="nb">puts</span> <span class="s2">"Read codex with: </span><span class="si">#{</span><span class="n">rulenames</span><span class="p">.</span><span class="nf">to_s</span><span class="si">}</span><span class="s2">"</span>
  <span class="vi">@grammar</span><span class="p">.</span><span class="nf">codex</span> <span class="o">&lt;&lt;</span> <span class="p">(</span><span class="no">Codex</span><span class="p">.</span><span class="nf">new</span> <span class="n">rulenames</span><span class="p">)</span>
<span class="k">end</span>

<span class="nb">load</span> <span class="s1">'script.le'</span>
<span class="vi">@grammar</span><span class="p">.</span><span class="nf">generate</span></code></pre></div>

<p>Notice the asterisks in the method definitions; they‚Äôre called splat operators (good reference <a href="http://jacopretorius.net/2012/01/splat-operator-in-ruby.html">here</a> and <a href="https://endofline.wordpress.com/2011/01/21/the-strange-ruby-splat/">here</a>). Splats are useful for several things; in our case, we‚Äôd like each dictionary entry to have one <em>key</em> (e.g. ‚Äònoun‚Äô) and several <em>values</em>: splat takes an arbitrary number of arguments and slurps them into one variable.</p>

<p>So the basic structure is: a <code>Grammar</code> has one <code>Dictionary</code> and several <code>Rules</code> and <code>Codices</code>. Text is generated by going running each codex, which applies each of its rules, which combines words together. Simple enough. Here‚Äôs what output looks like:</p>

<div class="highlight"><pre><code class="language-bash">lbrito@lbrito:~/Documents/ruby_textgen<span class="nv">$ </span>ruby lero.rb
Read dictionary with: noun <span class="o">[</span><span class="s2">"dog"</span>, <span class="s2">"bus"</span><span class="o">]</span>
Read dictionary with: verb <span class="o">[</span><span class="s2">"barked"</span>, <span class="s2">"parked"</span><span class="o">]</span>
Read dictionary with: preposition <span class="o">[</span><span class="s2">"at"</span><span class="o">]</span>
Read rule with: phrase <span class="o">[</span><span class="s2">"noun"</span>, <span class="s2">"verb"</span>, <span class="s2">"preposition"</span>, <span class="s2">"noun"</span><span class="o">]</span>
Read codex with: <span class="o">[</span><span class="s2">"phrase"</span><span class="o">]</span>
Codex is applying phrase
Applying rule with key: noun
Fetching noun from dictionary
Applying rule with key: verb
Fetching verb from dictionary
Applying rule with key: preposition
Fetching preposition from dictionary
Applying rule with key: noun
Fetching noun from dictionary
Final result:
<span class="o">=======</span>
bus barked at dog
<span class="o">=======</span></code></pre></div>

<p>Nonsensical, but still pretty cool.</p>

<p>Let‚Äôs take a look at our DSL script for a while. It works fine, but isn‚Äôt very <a href="https://en.wikipedia.org/wiki/Don%27t_repeat_yourself">DRY</a>. Wouldn‚Äôt it be nice to add some structure and be less repetitious? Let‚Äôs try to define Dictionary and Rule entries as functions:</p>

<div class="highlight"><pre><code class="language-bash">dictionary
  noun <span class="s1">'dog'</span>, <span class="s1">'bus'</span>
  verb <span class="s1">'barked'</span>, <span class="s1">'parked'</span>
  preposition <span class="s1">'at'</span>

rule
  phrase <span class="s1">'noun'</span>, <span class="s1">'verb'</span>, <span class="s1">'preposition'</span>, <span class="s1">'noun'</span>

codex <span class="s1">'phrase'</span></code></pre></div>

<p>Much better. But what if we wanted different nouns to belong in different dictionary entries, say, <code>animal_nouns</code> and <code>vehicle_nouns</code>? Are we supposed to define every possible word class as a separate method? That‚Äôs not very DRY!</p>

<p>Here‚Äôs where things start getting beautiful: Ruby has a method called <code>method_missing</code> (good material <a href="http://rubylearning.com/satishtalim/ruby_method_missing.html">here</a> and <a href="http://www.alef1.org/ruby/method_missing/">here</a>), which by default raises a NoMethodError, but can be overridden to do some cool stuff. Let‚Äôs leverage the power of <code>method_missing</code>:</p>

<div class="highlight"><pre><code class="language-ruby"><span class="o">...</span>

<span class="k">def</span> <span class="nf">dictionary</span>
  <span class="vi">@state</span> <span class="o">=</span> <span class="ss">:dictionary</span>
<span class="k">end</span>

<span class="k">def</span> <span class="nf">rule</span>
  <span class="vi">@state</span> <span class="o">=</span> <span class="ss">:rule</span>
<span class="k">end</span>

<span class="k">def</span> <span class="nf">codex</span> <span class="o">*</span><span class="n">rulenames</span>
  <span class="nb">puts</span> <span class="s2">"Read codex with: </span><span class="si">#{</span><span class="n">rulenames</span><span class="p">.</span><span class="nf">to_s</span><span class="si">}</span><span class="s2">"</span>
  <span class="vi">@grammar</span><span class="p">.</span><span class="nf">codex</span> <span class="o">&lt;&lt;</span> <span class="p">(</span><span class="no">Codex</span><span class="p">.</span><span class="nf">new</span> <span class="n">rulenames</span><span class="p">)</span>
<span class="k">end</span>

<span class="vi">@state</span> <span class="o">=</span> <span class="ss">:idle</span>

<span class="k">def</span> <span class="nf">method_missing</span> <span class="nb">method</span><span class="p">,</span> <span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">block</span>
  <span class="k">case</span> <span class="vi">@state</span>
  <span class="k">when</span> <span class="ss">:dictionary</span>
    <span class="nb">puts</span> <span class="s2">"Read dictionary with: </span><span class="si">#{</span><span class="nb">method</span><span class="p">.</span><span class="nf">to_s</span><span class="si">}</span><span class="s2"> </span><span class="si">#{</span><span class="n">args</span><span class="p">.</span><span class="nf">to_s</span><span class="si">}</span><span class="s2">"</span>
    <span class="no">Dictionary</span><span class="p">.</span><span class="nf">instance</span><span class="p">.</span><span class="nf">add</span> <span class="nb">method</span><span class="p">.</span><span class="nf">to_s</span><span class="p">,</span> <span class="n">args</span>
  <span class="k">when</span> <span class="ss">:rule</span>
    <span class="nb">puts</span> <span class="s2">"Read rule with: </span><span class="si">#{</span><span class="nb">method</span><span class="p">.</span><span class="nf">to_s</span><span class="si">}</span><span class="s2"> </span><span class="si">#{</span><span class="n">args</span><span class="p">.</span><span class="nf">to_s</span><span class="si">}</span><span class="s2">"</span>
    <span class="vi">@grammar</span><span class="p">.</span><span class="nf">rules</span><span class="p">[</span><span class="nb">method</span><span class="p">.</span><span class="nf">to_s</span><span class="p">]</span> <span class="o">=</span> <span class="p">(</span><span class="no">Rule</span><span class="p">.</span><span class="nf">new</span> <span class="n">args</span><span class="p">)</span>
  <span class="k">when</span> <span class="ss">:idle</span>
  <span class="k">else</span>
    <span class="nb">puts</span> <span class="s2">"Boom! Something went wrong. I don't know what to do with </span><span class="si">#{</span><span class="vi">@state</span><span class="p">.</span><span class="nf">to_s</span><span class="si">}</span><span class="s2">."</span>
  <span class="k">end</span>
<span class="k">end</span></code></pre></div>

<p>Now <code>method_missing</code> captures undefined methods and the appropriate entries are created depending on which function was last called (i.e. <code>dictionary</code> or <code>rule</code>). This relieves us from defining methods for <code>noun</code>, <code>verb</code>, etc. Pretty great, but we can do better. We still have some very trivial-looking method definitions in our DSL:</p>

<div class="highlight"><pre><code class="language-ruby"><span class="k">def</span> <span class="nf">dictionary</span>
  <span class="vi">@state</span> <span class="o">=</span> <span class="ss">:dictionary</span>
<span class="k">end</span>

<span class="k">def</span> <span class="nf">rule</span>
  <span class="vi">@state</span> <span class="o">=</span> <span class="ss">:rule</span>
<span class="k">end</span></code></pre></div>

<p>What if we decide later on to add some new functionality to our DSL that works analogously to rules and dictionaries? We‚Äôd have to write more method definitions that just¬†set¬†the¬†@<code>state</code> variable. Once more, Ruby offers us some DRYing magic: we can dynamically define methods just as if they were objects.</p>

<div class="highlight"><pre><code class="language-ruby"><span class="o">...</span>

<span class="sx">%w'rule dictionary'</span><span class="p">.</span><span class="nf">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">keyword</span><span class="o">|</span>
  <span class="n">define_method</span><span class="p">(</span><span class="n">keyword</span><span class="p">)</span> <span class="p">{</span> <span class="vi">@state</span> <span class="o">=</span> <span class="n">keyword</span><span class="p">.</span><span class="nf">to_sym</span> <span class="p">}</span>
<span class="k">end</span></code></pre></div>

<p>The resulting methods are identical to the ones we defined statically with <code>def</code>. This may not seem like a great advantage over our previous code, but imagine if there were not 2 but 20 similar methods which could be dynamically defined - quite an improvement! There‚Äôs still room for improvement using <code>define_method</code>. Instead of storing strings in a Dictionary, we might as well define a function that chooses an entry at random. Here‚Äôs the Dictionary class:</p>

<div class="highlight"><pre><code class="language-ruby"><span class="nb">require</span> <span class="s1">'singleton'</span>

<span class="k">class</span> <span class="nc">Dictionary</span>
  <span class="kp">include</span> <span class="no">Singleton</span>


  <span class="k">def</span> <span class="nf">add</span> <span class="n">key</span><span class="p">,</span> <span class="n">values</span>
    <span class="vi">@dicts</span> <span class="o">||=</span> <span class="p">{}</span>
    <span class="vi">@dicts</span><span class="p">[</span><span class="n">key</span><span class="p">]</span> <span class="o">=</span> <span class="n">values</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">fetch</span> <span class="n">key</span>
    <span class="nb">puts</span> <span class="s2">"Fetching </span><span class="si">#{</span><span class="n">key</span><span class="si">}</span><span class="s2"> from dictionary"</span>
    <span class="vi">@dicts</span><span class="p">[</span><span class="n">key</span><span class="p">].</span><span class="nf">sample</span>
  <span class="k">end</span>

<span class="k">end</span></code></pre></div>

<p>We can eliminate the need for that entire class by defining methods dynamically using a single line of code:</p>

<div class="highlight"><pre><code class="language-ruby"><span class="o">...</span>

<span class="k">def</span> <span class="nf">method_missing</span> <span class="nb">method</span><span class="p">,</span> <span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">block</span>
  <span class="k">case</span> <span class="vi">@state</span>
  <span class="k">when</span> <span class="ss">:dictionary</span>
    <span class="nb">puts</span> <span class="s2">"Read dictionary with: </span><span class="si">#{</span><span class="nb">method</span><span class="p">.</span><span class="nf">to_s</span><span class="si">}</span><span class="s2"> </span><span class="si">#{</span><span class="n">args</span><span class="p">.</span><span class="nf">to_s</span><span class="si">}</span><span class="s2">"</span>
    <span class="n">define_method</span><span class="p">(</span><span class="nb">method</span><span class="p">)</span> <span class="p">{</span> <span class="n">args</span><span class="p">.</span><span class="nf">sample</span> <span class="p">}</span>

<span class="o">...</span></code></pre></div>

<p>If you‚Äôre wondering, <code>sample</code> picks an array element at random.</p>

<p>So that‚Äôs that: we successfully used some of Ruby‚Äôs core metaprogramming tools, <code>method_missing</code> and <code>define_method</code>, to improve our little program. <a href="https://github.com/lbrito1/ruby_textgen/tree/part-1">Full code</a> is hosted on Github - please not that it may differ slightly from what is presented here for didactic reasons.</p>

<p>In the next installment we‚Äôll continue to improve our DSL using more interesting Ruby features.</p>
;
T;U;[0I"øN<!DOCTYPE html><html lang="en"><head>
    <meta charset="utf-8">
    <title>A Developer's Notebook - Ruby DSL &amp; metaprogramming, part I</title>
    <link rel="stylesheet" href="https://unpkg.com/purecss@1.0.1/build/pure-min.css" integrity="sha384-oAOxQR6DkCoMliIh8yFnu25d7Eq/PHS21PClpwjOTeU2jRSq11vu66rf90/cZr47" crossorigin="anonymous">
    <link rel="stylesheet" href="../../assets/stylesheet.css">
    <link rel="stylesheet" href="../../assets/highlight.css">

    <!-- you don't need to keep this, but it's cool for stats! -->
    <meta name="generator" content="Nanoc 4.11.9">
  </head>
  <body>
    <div id="layout">
      <div class="header">
        <h1>
          <a href="../../">A Developer's Notebook</a>
        </h1>
      </div>


      <div class="content">
        <nav class="pure-g">
          <div class="pure-u-2-3 links">
            <a href="../../index.html">Home</a> ¬∑
            <a href="../../tags.html">Tags</a> ¬∑
            <a href="../../years.html">Years</a> ¬∑
            <a href="../../about.html">About</a>
          </div>

          <div class="pure-u-1-3">
            <div class="contact">
              <span>
                <a href="https://github.com/lbrito1" download="">
                  <img src="../../assets/icons/github.svg" alt="Github icon">
                  </a>
              </span>
              <span>
                <a href="https://www.linkedin.com/in/leonardo-mendes-brito/">
                <img src="../../assets/icons/linkedin.svg" alt="LinkedIn icon">
                </a>
              </span>
            </div>
          </div>
        </nav>
        
  <div class="post-show">
    <h1>Ruby DSL &amp; metaprogramming, part I</h1>
    <article class="text">
      <p>I‚Äôve been working with Ruby for nearly a year now, which means I‚Äôm starting to feel the urge to tell people how awesome the language is. One of the most interesting aspects of Ruby to me is <a href="https://en.wikipedia.org/wiki/Metaprogramming">metaprogramming</a>, which it seems to have quite a vocation for.</p>

<p>Since college I have a fondness for automata and formal languages theory. One of the topics I particularly like is text generation (if you haven‚Äôt already, check out the excellent <a href="http://pdos.csail.mit.edu/scigen/">SCIgen</a> and the <a href="http://dev.null.org/dadaengine/">Dada engine</a>), so I thought that building a Context-free grammar (CFG)-like text generator in Ruby would be a nice little exercise and an opportunity to use some of the language‚Äôs coolest features. Also I‚Äôve implemented one of those using Java several years ago, and it was <em>a mess</em>, so I was curious as to how much of an improvement would Ruby offer.</p>

<p>Suppose the following script:</p>

<div class="highlight"><pre><code class="language-ruby"><span class="n">dictionary</span> <span class="s1">'noun'</span><span class="p">,</span> <span class="s1">'dog'</span><span class="p">,</span> <span class="s1">'bus'</span>
<span class="n">dictionary</span> <span class="s1">'verb'</span><span class="p">,</span> <span class="s1">'barked'</span><span class="p">,</span> <span class="s1">'parked'</span>
<span class="n">dictionary</span> <span class="s1">'preposition'</span><span class="p">,</span> <span class="s1">'at'</span>

<span class="n">rule</span> <span class="s1">'phrase'</span><span class="p">,</span> <span class="s1">'noun'</span><span class="p">,</span> <span class="s1">'verb'</span><span class="p">,</span> <span class="s1">'preposition'</span><span class="p">,</span> <span class="s1">'noun'</span>

<span class="n">codex</span> <span class="s1">'phrase'</span></code></pre></div>

<p>We‚Äôd like <code>dictionary</code> to store some words according to their classes, and <code>rule</code> to define a specific ordering of words. For now let‚Äôs not worry about <code>codex</code> (it‚Äôs just a collection of rules).</p>

<p>At this point the seasoned programmer is mentally sketching some kind of text parser. It‚Äôs an okay solution, but isn‚Äôt there something <em>nicer</em> we can do? Well, there is: <a href="https://en.wikipedia.org/wiki/Domain-specific_language">DSL</a>s! In fact, Ruby is quite an excellent tool to build a DSL, and many famed Ruby-powered applications such as Rspec (and <a href="http://www.leighhalliday.com/creating-ruby-dsl">many others</a>) define some kind of DSL.</p>

<!-- more -->

<p>Conveniently enough, our little script is actually valid Ruby code (Ruby doesn‚Äôt care for parenthesis or semicolons). So lets define the dictionary, rule and codex methods:</p>

<div class="highlight"><pre><code class="language-ruby"><span class="c1">#!/usr/bin/env ruby</span>
<span class="nb">require_relative</span> <span class="s1">'grammar'</span>
<span class="nb">require_relative</span> <span class="s1">'dictionary'</span>
<span class="nb">require_relative</span> <span class="s1">'rule'</span>
<span class="nb">require_relative</span> <span class="s1">'codex'</span>

<span class="vi">@grammar</span> <span class="o">=</span> <span class="no">Grammar</span><span class="p">.</span><span class="nf">new</span>

<span class="k">def</span> <span class="nf">dictionary</span> <span class="n">key</span><span class="p">,</span> <span class="o">*</span><span class="n">values</span>
  <span class="nb">puts</span> <span class="s2">"Read dictionary with: </span><span class="si">#{</span><span class="n">key</span><span class="si">}</span><span class="s2"> </span><span class="si">#{</span><span class="n">values</span><span class="p">.</span><span class="nf">to_s</span><span class="si">}</span><span class="s2">"</span>
  <span class="no">Dictionary</span><span class="p">.</span><span class="nf">instance</span><span class="p">.</span><span class="nf">add</span> <span class="n">key</span><span class="p">,</span> <span class="n">values</span>
<span class="k">end</span>

<span class="k">def</span> <span class="nf">rule</span> <span class="nb">name</span><span class="p">,</span> <span class="o">*</span><span class="n">keys</span>
  <span class="nb">puts</span> <span class="s2">"Read rule with: </span><span class="si">#{</span><span class="nb">name</span><span class="si">}</span><span class="s2"> </span><span class="si">#{</span><span class="n">keys</span><span class="p">.</span><span class="nf">to_s</span><span class="si">}</span><span class="s2">"</span>
  <span class="vi">@grammar</span><span class="p">.</span><span class="nf">rules</span><span class="p">[</span><span class="nb">name</span><span class="p">]</span> <span class="o">=</span> <span class="no">Rule</span><span class="p">.</span><span class="nf">new</span> <span class="n">keys</span>
<span class="k">end</span>

<span class="k">def</span> <span class="nf">codex</span> <span class="o">*</span><span class="n">rulenames</span>
  <span class="nb">puts</span> <span class="s2">"Read codex with: </span><span class="si">#{</span><span class="n">rulenames</span><span class="p">.</span><span class="nf">to_s</span><span class="si">}</span><span class="s2">"</span>
  <span class="vi">@grammar</span><span class="p">.</span><span class="nf">codex</span> <span class="o">&lt;&lt;</span> <span class="p">(</span><span class="no">Codex</span><span class="p">.</span><span class="nf">new</span> <span class="n">rulenames</span><span class="p">)</span>
<span class="k">end</span>

<span class="nb">load</span> <span class="s1">'script.le'</span>
<span class="vi">@grammar</span><span class="p">.</span><span class="nf">generate</span></code></pre></div>

<p>Notice the asterisks in the method definitions; they‚Äôre called splat operators (good reference <a href="http://jacopretorius.net/2012/01/splat-operator-in-ruby.html">here</a> and <a href="https://endofline.wordpress.com/2011/01/21/the-strange-ruby-splat/">here</a>). Splats are useful for several things; in our case, we‚Äôd like each dictionary entry to have one <em>key</em> (e.g. ‚Äònoun‚Äô) and several <em>values</em>: splat takes an arbitrary number of arguments and slurps them into one variable.</p>

<p>So the basic structure is: a <code>Grammar</code> has one <code>Dictionary</code> and several <code>Rules</code> and <code>Codices</code>. Text is generated by going running each codex, which applies each of its rules, which combines words together. Simple enough. Here‚Äôs what output looks like:</p>

<div class="highlight"><pre><code class="language-bash">lbrito@lbrito:~/Documents/ruby_textgen<span class="nv">$ </span>ruby lero.rb
Read dictionary with: noun <span class="o">[</span><span class="s2">"dog"</span>, <span class="s2">"bus"</span><span class="o">]</span>
Read dictionary with: verb <span class="o">[</span><span class="s2">"barked"</span>, <span class="s2">"parked"</span><span class="o">]</span>
Read dictionary with: preposition <span class="o">[</span><span class="s2">"at"</span><span class="o">]</span>
Read rule with: phrase <span class="o">[</span><span class="s2">"noun"</span>, <span class="s2">"verb"</span>, <span class="s2">"preposition"</span>, <span class="s2">"noun"</span><span class="o">]</span>
Read codex with: <span class="o">[</span><span class="s2">"phrase"</span><span class="o">]</span>
Codex is applying phrase
Applying rule with key: noun
Fetching noun from dictionary
Applying rule with key: verb
Fetching verb from dictionary
Applying rule with key: preposition
Fetching preposition from dictionary
Applying rule with key: noun
Fetching noun from dictionary
Final result:
<span class="o">=======</span>
bus barked at dog
<span class="o">=======</span></code></pre></div>

<p>Nonsensical, but still pretty cool.</p>

<p>Let‚Äôs take a look at our DSL script for a while. It works fine, but isn‚Äôt very <a href="https://en.wikipedia.org/wiki/Don%27t_repeat_yourself">DRY</a>. Wouldn‚Äôt it be nice to add some structure and be less repetitious? Let‚Äôs try to define Dictionary and Rule entries as functions:</p>

<div class="highlight"><pre><code class="language-bash">dictionary
  noun <span class="s1">'dog'</span>, <span class="s1">'bus'</span>
  verb <span class="s1">'barked'</span>, <span class="s1">'parked'</span>
  preposition <span class="s1">'at'</span>

rule
  phrase <span class="s1">'noun'</span>, <span class="s1">'verb'</span>, <span class="s1">'preposition'</span>, <span class="s1">'noun'</span>

codex <span class="s1">'phrase'</span></code></pre></div>

<p>Much better. But what if we wanted different nouns to belong in different dictionary entries, say, <code>animal_nouns</code> and <code>vehicle_nouns</code>? Are we supposed to define every possible word class as a separate method? That‚Äôs not very DRY!</p>

<p>Here‚Äôs where things start getting beautiful: Ruby has a method called <code>method_missing</code> (good material <a href="http://rubylearning.com/satishtalim/ruby_method_missing.html">here</a> and <a href="http://www.alef1.org/ruby/method_missing/">here</a>), which by default raises a NoMethodError, but can be overridden to do some cool stuff. Let‚Äôs leverage the power of <code>method_missing</code>:</p>

<div class="highlight"><pre><code class="language-ruby"><span class="o">...</span>

<span class="k">def</span> <span class="nf">dictionary</span>
  <span class="vi">@state</span> <span class="o">=</span> <span class="ss">:dictionary</span>
<span class="k">end</span>

<span class="k">def</span> <span class="nf">rule</span>
  <span class="vi">@state</span> <span class="o">=</span> <span class="ss">:rule</span>
<span class="k">end</span>

<span class="k">def</span> <span class="nf">codex</span> <span class="o">*</span><span class="n">rulenames</span>
  <span class="nb">puts</span> <span class="s2">"Read codex with: </span><span class="si">#{</span><span class="n">rulenames</span><span class="p">.</span><span class="nf">to_s</span><span class="si">}</span><span class="s2">"</span>
  <span class="vi">@grammar</span><span class="p">.</span><span class="nf">codex</span> <span class="o">&lt;&lt;</span> <span class="p">(</span><span class="no">Codex</span><span class="p">.</span><span class="nf">new</span> <span class="n">rulenames</span><span class="p">)</span>
<span class="k">end</span>

<span class="vi">@state</span> <span class="o">=</span> <span class="ss">:idle</span>

<span class="k">def</span> <span class="nf">method_missing</span> <span class="nb">method</span><span class="p">,</span> <span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">block</span>
  <span class="k">case</span> <span class="vi">@state</span>
  <span class="k">when</span> <span class="ss">:dictionary</span>
    <span class="nb">puts</span> <span class="s2">"Read dictionary with: </span><span class="si">#{</span><span class="nb">method</span><span class="p">.</span><span class="nf">to_s</span><span class="si">}</span><span class="s2"> </span><span class="si">#{</span><span class="n">args</span><span class="p">.</span><span class="nf">to_s</span><span class="si">}</span><span class="s2">"</span>
    <span class="no">Dictionary</span><span class="p">.</span><span class="nf">instance</span><span class="p">.</span><span class="nf">add</span> <span class="nb">method</span><span class="p">.</span><span class="nf">to_s</span><span class="p">,</span> <span class="n">args</span>
  <span class="k">when</span> <span class="ss">:rule</span>
    <span class="nb">puts</span> <span class="s2">"Read rule with: </span><span class="si">#{</span><span class="nb">method</span><span class="p">.</span><span class="nf">to_s</span><span class="si">}</span><span class="s2"> </span><span class="si">#{</span><span class="n">args</span><span class="p">.</span><span class="nf">to_s</span><span class="si">}</span><span class="s2">"</span>
    <span class="vi">@grammar</span><span class="p">.</span><span class="nf">rules</span><span class="p">[</span><span class="nb">method</span><span class="p">.</span><span class="nf">to_s</span><span class="p">]</span> <span class="o">=</span> <span class="p">(</span><span class="no">Rule</span><span class="p">.</span><span class="nf">new</span> <span class="n">args</span><span class="p">)</span>
  <span class="k">when</span> <span class="ss">:idle</span>
  <span class="k">else</span>
    <span class="nb">puts</span> <span class="s2">"Boom! Something went wrong. I don't know what to do with </span><span class="si">#{</span><span class="vi">@state</span><span class="p">.</span><span class="nf">to_s</span><span class="si">}</span><span class="s2">."</span>
  <span class="k">end</span>
<span class="k">end</span></code></pre></div>

<p>Now <code>method_missing</code> captures undefined methods and the appropriate entries are created depending on which function was last called (i.e. <code>dictionary</code> or <code>rule</code>). This relieves us from defining methods for <code>noun</code>, <code>verb</code>, etc. Pretty great, but we can do better. We still have some very trivial-looking method definitions in our DSL:</p>

<div class="highlight"><pre><code class="language-ruby"><span class="k">def</span> <span class="nf">dictionary</span>
  <span class="vi">@state</span> <span class="o">=</span> <span class="ss">:dictionary</span>
<span class="k">end</span>

<span class="k">def</span> <span class="nf">rule</span>
  <span class="vi">@state</span> <span class="o">=</span> <span class="ss">:rule</span>
<span class="k">end</span></code></pre></div>

<p>What if we decide later on to add some new functionality to our DSL that works analogously to rules and dictionaries? We‚Äôd have to write more method definitions that just&nbsp;set&nbsp;the&nbsp;@<code>state</code> variable. Once more, Ruby offers us some DRYing magic: we can dynamically define methods just as if they were objects.</p>

<div class="highlight"><pre><code class="language-ruby"><span class="o">...</span>

<span class="sx">%w'rule dictionary'</span><span class="p">.</span><span class="nf">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">keyword</span><span class="o">|</span>
  <span class="n">define_method</span><span class="p">(</span><span class="n">keyword</span><span class="p">)</span> <span class="p">{</span> <span class="vi">@state</span> <span class="o">=</span> <span class="n">keyword</span><span class="p">.</span><span class="nf">to_sym</span> <span class="p">}</span>
<span class="k">end</span></code></pre></div>

<p>The resulting methods are identical to the ones we defined statically with <code>def</code>. This may not seem like a great advantage over our previous code, but imagine if there were not 2 but 20 similar methods which could be dynamically defined - quite an improvement! There‚Äôs still room for improvement using <code>define_method</code>. Instead of storing strings in a Dictionary, we might as well define a function that chooses an entry at random. Here‚Äôs the Dictionary class:</p>

<div class="highlight"><pre><code class="language-ruby"><span class="nb">require</span> <span class="s1">'singleton'</span>

<span class="k">class</span> <span class="nc">Dictionary</span>
  <span class="kp">include</span> <span class="no">Singleton</span>


  <span class="k">def</span> <span class="nf">add</span> <span class="n">key</span><span class="p">,</span> <span class="n">values</span>
    <span class="vi">@dicts</span> <span class="o">||=</span> <span class="p">{}</span>
    <span class="vi">@dicts</span><span class="p">[</span><span class="n">key</span><span class="p">]</span> <span class="o">=</span> <span class="n">values</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">fetch</span> <span class="n">key</span>
    <span class="nb">puts</span> <span class="s2">"Fetching </span><span class="si">#{</span><span class="n">key</span><span class="si">}</span><span class="s2"> from dictionary"</span>
    <span class="vi">@dicts</span><span class="p">[</span><span class="n">key</span><span class="p">].</span><span class="nf">sample</span>
  <span class="k">end</span>

<span class="k">end</span></code></pre></div>

<p>We can eliminate the need for that entire class by defining methods dynamically using a single line of code:</p>

<div class="highlight"><pre><code class="language-ruby"><span class="o">...</span>

<span class="k">def</span> <span class="nf">method_missing</span> <span class="nb">method</span><span class="p">,</span> <span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">block</span>
  <span class="k">case</span> <span class="vi">@state</span>
  <span class="k">when</span> <span class="ss">:dictionary</span>
    <span class="nb">puts</span> <span class="s2">"Read dictionary with: </span><span class="si">#{</span><span class="nb">method</span><span class="p">.</span><span class="nf">to_s</span><span class="si">}</span><span class="s2"> </span><span class="si">#{</span><span class="n">args</span><span class="p">.</span><span class="nf">to_s</span><span class="si">}</span><span class="s2">"</span>
    <span class="n">define_method</span><span class="p">(</span><span class="nb">method</span><span class="p">)</span> <span class="p">{</span> <span class="n">args</span><span class="p">.</span><span class="nf">sample</span> <span class="p">}</span>

<span class="o">...</span></code></pre></div>

<p>If you‚Äôre wondering, <code>sample</code> picks an array element at random.</p>

<p>So that‚Äôs that: we successfully used some of Ruby‚Äôs core metaprogramming tools, <code>method_missing</code> and <code>define_method</code>, to improve our little program. <a href="https://github.com/lbrito1/ruby_textgen/tree/part-1">Full code</a> is hosted on Github - please not that it may differ slightly from what is presented here for didactic reasons.</p>

<p>In the next installment we‚Äôll continue to improve our DSL using more interesting Ruby features.</p>

    </article>
    <aside>Posted at: Sep 11, 2015</aside>
    <div class="post-footer">
      <a href="../../index.html">Back</a>
    </div>
  </div>

        <div class="footer">
          2020 Leonardo Brito
        </div>
      </div>

    </div>
  


</body></html>;
T;@f;@fo;;;;	I"./posts/2014-03-21-heap-priority-queues.md;
T{;{
;U;[I"P/home/carol/workspace/blog/content/posts/2014-03-21-heap-priority-queues.md;
TI"ä%Priority queues (PQs) are abstract data types that work just like regular stacks, but the popping order depends on each element‚Äôs priority instead of the sequence they were pushed onto the queue (FIFO or LIFO).

The na√Øve way of implementing a PQ consists of using an unsorted list or array and searching for the highest-priority element at each pop, which takes O(n) time. There are several more efficient implementations, of which the most usual is the heap.

Heaps are complete (i.e. all levels except possibly the last are filled) binary trees that work as PQs by maintaining the following property: children nodes always have a smaller priority than their parent, i.e. for any node A with children B and C, priority(B) < priority(A) && priority(C) < priority(A). Note that there is no assumed relation between siblings or cousins.

[![max-heap and corresponding array.](/assets/images/codedeposit/2014/03/heap.jpg)](/assets/images/codedeposit/2014/03/heap.jpg)
*max-heap and corresponding array.*

Each element of a heap has two pieces of information: a key and a value, hence we call them key-value (KV) pair. The key identifies the specific element, and the value determines the element‚Äôs priority within the heap. Heaps can be min-heaps (low value = high priority) or max-heaps (high value = high priority).

<!-- more -->

As any other data structure, we need at least the two basic operations: insert data and remove data. PQs also warrant an update priority operation. Here‚Äôs how we‚Äôll implement those.

<div class="highlight"><pre><code class="language-c">
typedef struct {
      void** array;
      int array_size;
      int heap_size;
      int order;
      int (*cmp) (void*, void*);
} heap;
</code></pre></div>

First we have the heap structure. The binary tree is implemented as an array, using the following macros to get the child and parent indexes:

<div class="highlight"><pre><code class="language-c">

#define PARENT(i) i>>1
#define LEFT(i) i<<1
#define RIGHT(i) (i<<1)+1  </code></pre></div>

heap_size is the actual number of elements in the heap, and array_size is the maximum heap size. Here‚Äôs the initialization code for a heap struct:

<div class="highlight"><pre><code class="language-c">


/**
 *  @brief Create new heap data structure
 *
 *  @param [in] size    maximum heap size
 *  @param [in] ord     minheap: ORD_ASC, maxheap: ORD_DES
 *  @param [in] compare comparator
 *  @return Return_Description
 */
heap* new_heap(int size, int ord, int (*compare) (void*, void*))
{
      heap* h = malloc(sizeof(heap));
      h->array = malloc(sizeof(void*)*size+1);
      h->array_size = size+1;
      h->array[0] = NULL;     //very important!! baadf00d
      h->heap_size = 0;
      h->cmp = compare;
      h->order = ord;
      return h;
}


</code></pre></div>

Because we won‚Äôt be using array index 0 (since both children would also be 0), we need to remember two things: increasing by 1 the request maximum heap size (and allocating accordingly) and always filling aray[0] with something we know (preferably NULL) so we don‚Äôt get bogus memory reads if we do something wrong.

To maintain the heap property, we must use the heapify subroutine. Heapify works as following: given an array index i such that array[i] may have a lower priority than its children (thus violating the heap property), ‚Äúfloat down‚Äù array[i] until it reaches the correct level, guaranteeing i is the root of a valid heap:

<div class="highlight"><pre><code class="language-c">

/**
 *  @brief Heapifies subtree rooted at h->array[idx], assuming
 *  that its two subtree children are already heaps. This is done
 *  by "floating down" the value at idx, which may violate heap
 *  condition, until it reaches the appropriate depth.
 *
 *  @param [in] h   Parameter_Description
 *  @param [in] idx Parameter_Description
 */
void heapify(heap* h, int idx)
{
      int l = LEFT(idx);
      int r = RIGHT(idx);
      int largest = idx;

      if (h->order == ORD_ASC)
      {
            if ((l<=h->heap_size) && (h->cmp(h->array[l], h->array[idx]) > 0)) largest = l;
            if ((r<=h->heap_size) && (h->cmp(h->array[r], h->array[largest]) > 0)) largest = r;
      }
      else if (h->order == ORD_DES)
      {
            if ((l<=h->heap_size) && (h->cmp(h->array[l], h->array[idx]) < 0)) largest = l;
            if ((r<=h->heap_size) && (h->cmp(h->array[r], h->array[largest]) < 0)) largest = r;       }              if (largest != idx)        {             exch(&h->array[idx], &h->array[largest]);
            heapify(h, largest);
      }
}
</code></pre></div>

The remaining operations are rather simple:

Pop removes array[1] (heap‚Äôs node with highest priority), replaces it with array[heapsize] and calls heapify at the heap root.

Push ‚Äúfloats up‚Äù the new value to be inserted starting at the bottom of the heap until it reaches the appropriate level.

Update (aka ‚Äúdecrease-key‚Äù or ‚Äúincrease-key‚Äù) changes the priority of a node and re-evaluates the heap so that it maintains heap property.

Full code can be found below and on my Github, at data_structures/heap.c. Runnable tests can be found in tests/test_heap.c

<div class="highlight"><pre><code class="language-c">


/*
    File: heap.c

    Copyright (c) 2014 Leonardo Brito <lbrito@gmail.com>

    This software is free software; you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation; either version 2 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License along
    with this program; if not, write the Free Software Foundation, Inc., 51
    Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
*/

#include <stdlib.h>

#define PARENT(i) i>>1
#define LEFT(i) i<<1
#define RIGHT(i) (i<<1)+1
static inline void exch(void** a, void** b) { void* p = *a; *a = *b; *b = p; }

typedef struct {
      void** array;
      int array_size;
      int heap_size;
      int order;
      int (*cmp) (void*, void*);
} heap;

/**
 *  @brief Create new heap data structure
 *
 *  @param [in] size    maximum heap size
 *  @param [in] ord     minheap: ORD_ASC, maxheap: ORD_DES
 *  @param [in] compare comparator
 *  @return Return_Description
 */
heap* new_heap(int size, int ord, int (*compare) (void*, void*))
{
      heap* h = malloc(sizeof(heap));
      h->array = malloc(sizeof(void*)*size+1);
      h->array_size = size+1;
      h->array[0] = NULL;     //very important!! baadf00d
      h->heap_size = 0;
      h->cmp = compare;
      h->order = ord;
      return h;
}

/**
 *  @brief Heapifies subtree rooted at h->array[idx], assuming
 *  that its two subtree children are already heaps. This is done
 *  by "floating down" the value at idx, which may violate heap
 *  condition, until it reaches the appropriate depth.
 *
 *  @param [in] h   Parameter_Description
 *  @param [in] idx Parameter_Description
 */
void heapify(heap* h, int idx)
{
      int l = LEFT(idx);
      int r = RIGHT(idx);
      int largest = idx;

      if (h->order == ORD_ASC)
      {
            if ((l<=h->heap_size) && (h->cmp(h->array[l], h->array[idx]) > 0)) largest = l;
            if ((r<=h->heap_size) && (h->cmp(h->array[r], h->array[largest]) > 0)) largest = r;
      }
      else if (h->order == ORD_DES)
      {
            if ((l<=h->heap_size) && (h->cmp(h->array[l], h->array[idx]) < 0)) largest = l;
            if ((r<=h->heap_size) && (h->cmp(h->array[r], h->array[largest]) < 0)) largest = r;
      }

      if (largest != idx)
      {
            exch(&h->array[idx], &h->array[largest]);
            heapify(h, largest);
      }
}

/**
 *  @brief Builds a heap from an unsorted array (h->array)
 *
 *  @param [in] h
 */
void build_heap(heap* h)
{
      int i;
      for(i = h->heap_size>>1; i>0; i--) heapify(h, i);
}

/**
 *  @brief Pops min/maxval from heap
 *
 *  @param [in] h
 *  @return pointer to min/maxval
 */
void* pop(heap* h)
{
      if(h->heap_size<1) return NULL;
      void* max = h->array[1];
      h->array[1] = h->array[h->heap_size--];
      heapify(h,1);
      return max;
}

void* pop_at(heap* h, int pos)
{
      if(h->heap_size<1) return NULL;
      void* max = h->array[pos];
      h->array[pos] = h->array[h->heap_size--];
      heapify(h,pos);
      return max;
}



/**
 *  @brief Pushes value onto heap
 *
 *  @param [in] h
 *  @param [in] k
 *  @return FALSE if heap is full, TRUE otherwise
 */
int push(heap* h, void* k)
{
      if (k==NULL) return FALSE;
      if (h->heap_size == h->array_size - 1) return FALSE;
      h->heap_size++;

      int i = h->heap_size;

      if (i>1) {
            if (h->order == ORD_ASC)
                  for (i = h->heap_size; i>1 && h->cmp(h->array[PARENT(i)], k) < 0; i = PARENT(i)) h->array[i] = h->array[PARENT(i)];
            else if (h->order == ORD_DES)
                  for (i = h->heap_size; i>1 && h->cmp(h->array[PARENT(i)], k) > 0; i = PARENT(i)) h->array[i] = h->array[PARENT(i)];
      }

      h->array[i] = k;

      return TRUE;
}

/**
 *  @brief Brief
 *
 *  @param [in] h      Parameter_Description
 *  @param [in] pos    Parameter_Description
 *  @param [in] newval Parameter_Description
 *  @return Return_Description
 */
void update(heap* h, int pos)
{
      push(h, pop_at(h, pos));
}


</code></pre></div>
;
T;U;[0I"Dâ<p>Priority queues (PQs) are abstract data types that work just like regular stacks, but the popping order depends on each element‚Äôs priority instead of the sequence they were pushed onto the queue (FIFO or LIFO).</p>

<p>The na√Øve way of implementing a PQ consists of using an unsorted list or array and searching for the highest-priority element at each pop, which takes O(n) time. There are several more efficient implementations, of which the most usual is the heap.</p>

<p>Heaps are complete (i.e. all levels except possibly the last are filled) binary trees that work as PQs by maintaining the following property: children nodes always have a smaller priority than their parent, i.e. for any node A with children B and C, priority(B) &lt; priority(A) &amp;&amp; priority(C) &lt; priority(A). Note that there is no assumed relation between siblings or cousins.</p>

<p><a href="/assets/images/codedeposit/2014/03/heap.jpg"><img src="/assets/images/codedeposit/2014/03/heap.jpg" alt="max-heap and corresponding array."></a>
<em>max-heap and corresponding array.</em></p>

<p>Each element of a heap has two pieces of information: a key and a value, hence we call them key-value (KV) pair. The key identifies the specific element, and the value determines the element‚Äôs priority within the heap. Heaps can be min-heaps (low value = high priority) or max-heaps (high value = high priority).</p>

<!-- more -->

<p>As any other data structure, we need at least the two basic operations: insert data and remove data. PQs also warrant an update priority operation. Here‚Äôs how we‚Äôll implement those.</p>

<div class="highlight"><pre><code class="language-c"><span class="k">typedef</span> <span class="k">struct</span> <span class="p">{</span>
      <span class="kt">void</span><span class="o">**</span> <span class="n">array</span><span class="p">;</span>
      <span class="kt">int</span> <span class="n">array_size</span><span class="p">;</span>
      <span class="kt">int</span> <span class="n">heap_size</span><span class="p">;</span>
      <span class="kt">int</span> <span class="n">order</span><span class="p">;</span>
      <span class="kt">int</span> <span class="p">(</span><span class="o">*</span><span class="n">cmp</span><span class="p">)</span> <span class="p">(</span><span class="kt">void</span><span class="o">*</span><span class="p">,</span> <span class="kt">void</span><span class="o">*</span><span class="p">);</span>
<span class="p">}</span> <span class="n">heap</span><span class="p">;</span></code></pre></div>

<p>First we have the heap structure. The binary tree is implemented as an array, using the following macros to get the child and parent indexes:</p>

<div class="highlight"><pre><code class="language-c"><span class="cp">#define PARENT(i) i&gt;&gt;1
#define LEFT(i) i&lt;&lt;1
#define RIGHT(i) (i&lt;&lt;1)+1</span></code></pre></div>

<p>heap_size is the actual number of elements in the heap, and array_size is the maximum heap size. Here‚Äôs the initialization code for a heap struct:</p>

<div class="highlight"><pre><code class="language-c"><span class="cm">/**
 *  @brief Create new heap data structure
 *
 *  @param [in] size    maximum heap size
 *  @param [in] ord     minheap: ORD_ASC, maxheap: ORD_DES
 *  @param [in] compare comparator
 *  @return Return_Description
 */</span>
<span class="n">heap</span><span class="o">*</span> <span class="nf">new_heap</span><span class="p">(</span><span class="kt">int</span> <span class="n">size</span><span class="p">,</span> <span class="kt">int</span> <span class="n">ord</span><span class="p">,</span> <span class="kt">int</span> <span class="p">(</span><span class="o">*</span><span class="n">compare</span><span class="p">)</span> <span class="p">(</span><span class="kt">void</span><span class="o">*</span><span class="p">,</span> <span class="kt">void</span><span class="o">*</span><span class="p">))</span>
<span class="p">{</span>
      <span class="n">heap</span><span class="o">*</span> <span class="n">h</span> <span class="o">=</span> <span class="n">malloc</span><span class="p">(</span><span class="k">sizeof</span><span class="p">(</span><span class="n">heap</span><span class="p">));</span>
      <span class="n">h</span><span class="o">-&gt;</span><span class="n">array</span> <span class="o">=</span> <span class="n">malloc</span><span class="p">(</span><span class="k">sizeof</span><span class="p">(</span><span class="kt">void</span><span class="o">*</span><span class="p">)</span><span class="o">*</span><span class="n">size</span><span class="o">+</span><span class="mi">1</span><span class="p">);</span>
      <span class="n">h</span><span class="o">-&gt;</span><span class="n">array_size</span> <span class="o">=</span> <span class="n">size</span><span class="o">+</span><span class="mi">1</span><span class="p">;</span>
      <span class="n">h</span><span class="o">-&gt;</span><span class="n">array</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>     <span class="c1">//very important!! baadf00d</span>
      <span class="n">h</span><span class="o">-&gt;</span><span class="n">heap_size</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
      <span class="n">h</span><span class="o">-&gt;</span><span class="n">cmp</span> <span class="o">=</span> <span class="n">compare</span><span class="p">;</span>
      <span class="n">h</span><span class="o">-&gt;</span><span class="n">order</span> <span class="o">=</span> <span class="n">ord</span><span class="p">;</span>
      <span class="k">return</span> <span class="n">h</span><span class="p">;</span>
<span class="p">}</span></code></pre></div>

<p>Because we won‚Äôt be using array index 0 (since both children would also be 0), we need to remember two things: increasing by 1 the request maximum heap size (and allocating accordingly) and always filling aray[0] with something we know (preferably NULL) so we don‚Äôt get bogus memory reads if we do something wrong.</p>

<p>To maintain the heap property, we must use the heapify subroutine. Heapify works as following: given an array index i such that array[i] may have a lower priority than its children (thus violating the heap property), ‚Äúfloat down‚Äù array[i] until it reaches the correct level, guaranteeing i is the root of a valid heap:</p>

<div class="highlight"><pre><code class="language-c"><span class="cm">/**
 *  @brief Heapifies subtree rooted at h-&gt;array[idx], assuming
 *  that its two subtree children are already heaps. This is done
 *  by "floating down" the value at idx, which may violate heap
 *  condition, until it reaches the appropriate depth.
 *
 *  @param [in] h   Parameter_Description
 *  @param [in] idx Parameter_Description
 */</span>
<span class="kt">void</span> <span class="nf">heapify</span><span class="p">(</span><span class="n">heap</span><span class="o">*</span> <span class="n">h</span><span class="p">,</span> <span class="kt">int</span> <span class="n">idx</span><span class="p">)</span>
<span class="p">{</span>
      <span class="kt">int</span> <span class="n">l</span> <span class="o">=</span> <span class="n">LEFT</span><span class="p">(</span><span class="n">idx</span><span class="p">);</span>
      <span class="kt">int</span> <span class="n">r</span> <span class="o">=</span> <span class="n">RIGHT</span><span class="p">(</span><span class="n">idx</span><span class="p">);</span>
      <span class="kt">int</span> <span class="n">largest</span> <span class="o">=</span> <span class="n">idx</span><span class="p">;</span>

      <span class="k">if</span> <span class="p">(</span><span class="n">h</span><span class="o">-&gt;</span><span class="n">order</span> <span class="o">==</span> <span class="n">ORD_ASC</span><span class="p">)</span>
      <span class="p">{</span>
            <span class="k">if</span> <span class="p">((</span><span class="n">l</span><span class="o">&lt;=</span><span class="n">h</span><span class="o">-&gt;</span><span class="n">heap_size</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="p">(</span><span class="n">h</span><span class="o">-&gt;</span><span class="n">cmp</span><span class="p">(</span><span class="n">h</span><span class="o">-&gt;</span><span class="n">array</span><span class="p">[</span><span class="n">l</span><span class="p">],</span> <span class="n">h</span><span class="o">-&gt;</span><span class="n">array</span><span class="p">[</span><span class="n">idx</span><span class="p">])</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">))</span> <span class="n">largest</span> <span class="o">=</span> <span class="n">l</span><span class="p">;</span>
            <span class="k">if</span> <span class="p">((</span><span class="n">r</span><span class="o">&lt;=</span><span class="n">h</span><span class="o">-&gt;</span><span class="n">heap_size</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="p">(</span><span class="n">h</span><span class="o">-&gt;</span><span class="n">cmp</span><span class="p">(</span><span class="n">h</span><span class="o">-&gt;</span><span class="n">array</span><span class="p">[</span><span class="n">r</span><span class="p">],</span> <span class="n">h</span><span class="o">-&gt;</span><span class="n">array</span><span class="p">[</span><span class="n">largest</span><span class="p">])</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">))</span> <span class="n">largest</span> <span class="o">=</span> <span class="n">r</span><span class="p">;</span>
      <span class="p">}</span>
      <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">h</span><span class="o">-&gt;</span><span class="n">order</span> <span class="o">==</span> <span class="n">ORD_DES</span><span class="p">)</span>
      <span class="p">{</span>
            <span class="k">if</span> <span class="p">((</span><span class="n">l</span><span class="o">&lt;=</span><span class="n">h</span><span class="o">-&gt;</span><span class="n">heap_size</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="p">(</span><span class="n">h</span><span class="o">-&gt;</span><span class="n">cmp</span><span class="p">(</span><span class="n">h</span><span class="o">-&gt;</span><span class="n">array</span><span class="p">[</span><span class="n">l</span><span class="p">],</span> <span class="n">h</span><span class="o">-&gt;</span><span class="n">array</span><span class="p">[</span><span class="n">idx</span><span class="p">])</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">))</span> <span class="n">largest</span> <span class="o">=</span> <span class="n">l</span><span class="p">;</span>
            <span class="k">if</span> <span class="p">((</span><span class="n">r</span><span class="o">&lt;=</span><span class="n">h</span><span class="o">-&gt;</span><span class="n">heap_size</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="p">(</span><span class="n">h</span><span class="o">-&gt;</span><span class="n">cmp</span><span class="p">(</span><span class="n">h</span><span class="o">-&gt;</span><span class="n">array</span><span class="p">[</span><span class="n">r</span><span class="p">],</span> <span class="n">h</span><span class="o">-&gt;</span><span class="n">array</span><span class="p">[</span><span class="n">largest</span><span class="p">])</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">))</span> <span class="n">largest</span> <span class="o">=</span> <span class="n">r</span><span class="p">;</span>       <span class="p">}</span>              <span class="k">if</span> <span class="p">(</span><span class="n">largest</span> <span class="o">!=</span> <span class="n">idx</span><span class="p">)</span>        <span class="p">{</span>             <span class="n">exch</span><span class="p">(</span><span class="o">&amp;</span><span class="n">h</span><span class="o">-&gt;</span><span class="n">array</span><span class="p">[</span><span class="n">idx</span><span class="p">],</span> <span class="o">&amp;</span><span class="n">h</span><span class="o">-&gt;</span><span class="n">array</span><span class="p">[</span><span class="n">largest</span><span class="p">]);</span>
            <span class="n">heapify</span><span class="p">(</span><span class="n">h</span><span class="p">,</span> <span class="n">largest</span><span class="p">);</span>
      <span class="p">}</span>
<span class="p">}</span></code></pre></div>

<p>The remaining operations are rather simple:</p>

<p>Pop removes array[1] (heap‚Äôs node with highest priority), replaces it with array[heapsize] and calls heapify at the heap root.</p>

<p>Push ‚Äúfloats up‚Äù the new value to be inserted starting at the bottom of the heap until it reaches the appropriate level.</p>

<p>Update (aka ‚Äúdecrease-key‚Äù or ‚Äúincrease-key‚Äù) changes the priority of a node and re-evaluates the heap so that it maintains heap property.</p>

<p>Full code can be found below and on my Github, at data_structures/heap.c. Runnable tests can be found in tests/test_heap.c</p>

<div class="highlight"><pre><code class="language-c"><span class="cm">/*
    File: heap.c

    Copyright (c) 2014 Leonardo Brito &lt;lbrito@gmail.com&gt;

    This software is free software; you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation; either version 2 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License along
    with this program; if not, write the Free Software Foundation, Inc., 51
    Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
*/</span>

<span class="cp">#include 
</span>
<span class="cp">#define PARENT(i) i&gt;&gt;1
#define LEFT(i) i&lt;&lt;1
#define RIGHT(i) (i&lt;&lt;1)+1
</span><span class="k">static</span> <span class="kr">inline</span> <span class="kt">void</span> <span class="nf">exch</span><span class="p">(</span><span class="kt">void</span><span class="o">**</span> <span class="n">a</span><span class="p">,</span> <span class="kt">void</span><span class="o">**</span> <span class="n">b</span><span class="p">)</span> <span class="p">{</span> <span class="kt">void</span><span class="o">*</span> <span class="n">p</span> <span class="o">=</span> <span class="o">*</span><span class="n">a</span><span class="p">;</span> <span class="o">*</span><span class="n">a</span> <span class="o">=</span> <span class="o">*</span><span class="n">b</span><span class="p">;</span> <span class="o">*</span><span class="n">b</span> <span class="o">=</span> <span class="n">p</span><span class="p">;</span> <span class="p">}</span>

<span class="k">typedef</span> <span class="k">struct</span> <span class="p">{</span>
      <span class="kt">void</span><span class="o">**</span> <span class="n">array</span><span class="p">;</span>
      <span class="kt">int</span> <span class="n">array_size</span><span class="p">;</span>
      <span class="kt">int</span> <span class="n">heap_size</span><span class="p">;</span>
      <span class="kt">int</span> <span class="n">order</span><span class="p">;</span>
      <span class="kt">int</span> <span class="p">(</span><span class="o">*</span><span class="n">cmp</span><span class="p">)</span> <span class="p">(</span><span class="kt">void</span><span class="o">*</span><span class="p">,</span> <span class="kt">void</span><span class="o">*</span><span class="p">);</span>
<span class="p">}</span> <span class="n">heap</span><span class="p">;</span>

<span class="cm">/**
 *  @brief Create new heap data structure
 *
 *  @param [in] size    maximum heap size
 *  @param [in] ord     minheap: ORD_ASC, maxheap: ORD_DES
 *  @param [in] compare comparator
 *  @return Return_Description
 */</span>
<span class="n">heap</span><span class="o">*</span> <span class="nf">new_heap</span><span class="p">(</span><span class="kt">int</span> <span class="n">size</span><span class="p">,</span> <span class="kt">int</span> <span class="n">ord</span><span class="p">,</span> <span class="kt">int</span> <span class="p">(</span><span class="o">*</span><span class="n">compare</span><span class="p">)</span> <span class="p">(</span><span class="kt">void</span><span class="o">*</span><span class="p">,</span> <span class="kt">void</span><span class="o">*</span><span class="p">))</span>
<span class="p">{</span>
      <span class="n">heap</span><span class="o">*</span> <span class="n">h</span> <span class="o">=</span> <span class="n">malloc</span><span class="p">(</span><span class="k">sizeof</span><span class="p">(</span><span class="n">heap</span><span class="p">));</span>
      <span class="n">h</span><span class="o">-&gt;</span><span class="n">array</span> <span class="o">=</span> <span class="n">malloc</span><span class="p">(</span><span class="k">sizeof</span><span class="p">(</span><span class="kt">void</span><span class="o">*</span><span class="p">)</span><span class="o">*</span><span class="n">size</span><span class="o">+</span><span class="mi">1</span><span class="p">);</span>
      <span class="n">h</span><span class="o">-&gt;</span><span class="n">array_size</span> <span class="o">=</span> <span class="n">size</span><span class="o">+</span><span class="mi">1</span><span class="p">;</span>
      <span class="n">h</span><span class="o">-&gt;</span><span class="n">array</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>     <span class="c1">//very important!! baadf00d</span>
      <span class="n">h</span><span class="o">-&gt;</span><span class="n">heap_size</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
      <span class="n">h</span><span class="o">-&gt;</span><span class="n">cmp</span> <span class="o">=</span> <span class="n">compare</span><span class="p">;</span>
      <span class="n">h</span><span class="o">-&gt;</span><span class="n">order</span> <span class="o">=</span> <span class="n">ord</span><span class="p">;</span>
      <span class="k">return</span> <span class="n">h</span><span class="p">;</span>
<span class="p">}</span>

<span class="cm">/**
 *  @brief Heapifies subtree rooted at h-&gt;array[idx], assuming
 *  that its two subtree children are already heaps. This is done
 *  by "floating down" the value at idx, which may violate heap
 *  condition, until it reaches the appropriate depth.
 *
 *  @param [in] h   Parameter_Description
 *  @param [in] idx Parameter_Description
 */</span>
<span class="kt">void</span> <span class="nf">heapify</span><span class="p">(</span><span class="n">heap</span><span class="o">*</span> <span class="n">h</span><span class="p">,</span> <span class="kt">int</span> <span class="n">idx</span><span class="p">)</span>
<span class="p">{</span>
      <span class="kt">int</span> <span class="n">l</span> <span class="o">=</span> <span class="n">LEFT</span><span class="p">(</span><span class="n">idx</span><span class="p">);</span>
      <span class="kt">int</span> <span class="n">r</span> <span class="o">=</span> <span class="n">RIGHT</span><span class="p">(</span><span class="n">idx</span><span class="p">);</span>
      <span class="kt">int</span> <span class="n">largest</span> <span class="o">=</span> <span class="n">idx</span><span class="p">;</span>

      <span class="k">if</span> <span class="p">(</span><span class="n">h</span><span class="o">-&gt;</span><span class="n">order</span> <span class="o">==</span> <span class="n">ORD_ASC</span><span class="p">)</span>
      <span class="p">{</span>
            <span class="k">if</span> <span class="p">((</span><span class="n">l</span><span class="o">&lt;=</span><span class="n">h</span><span class="o">-&gt;</span><span class="n">heap_size</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="p">(</span><span class="n">h</span><span class="o">-&gt;</span><span class="n">cmp</span><span class="p">(</span><span class="n">h</span><span class="o">-&gt;</span><span class="n">array</span><span class="p">[</span><span class="n">l</span><span class="p">],</span> <span class="n">h</span><span class="o">-&gt;</span><span class="n">array</span><span class="p">[</span><span class="n">idx</span><span class="p">])</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">))</span> <span class="n">largest</span> <span class="o">=</span> <span class="n">l</span><span class="p">;</span>
            <span class="k">if</span> <span class="p">((</span><span class="n">r</span><span class="o">&lt;=</span><span class="n">h</span><span class="o">-&gt;</span><span class="n">heap_size</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="p">(</span><span class="n">h</span><span class="o">-&gt;</span><span class="n">cmp</span><span class="p">(</span><span class="n">h</span><span class="o">-&gt;</span><span class="n">array</span><span class="p">[</span><span class="n">r</span><span class="p">],</span> <span class="n">h</span><span class="o">-&gt;</span><span class="n">array</span><span class="p">[</span><span class="n">largest</span><span class="p">])</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">))</span> <span class="n">largest</span> <span class="o">=</span> <span class="n">r</span><span class="p">;</span>
      <span class="p">}</span>
      <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">h</span><span class="o">-&gt;</span><span class="n">order</span> <span class="o">==</span> <span class="n">ORD_DES</span><span class="p">)</span>
      <span class="p">{</span>
            <span class="k">if</span> <span class="p">((</span><span class="n">l</span><span class="o">&lt;=</span><span class="n">h</span><span class="o">-&gt;</span><span class="n">heap_size</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="p">(</span><span class="n">h</span><span class="o">-&gt;</span><span class="n">cmp</span><span class="p">(</span><span class="n">h</span><span class="o">-&gt;</span><span class="n">array</span><span class="p">[</span><span class="n">l</span><span class="p">],</span> <span class="n">h</span><span class="o">-&gt;</span><span class="n">array</span><span class="p">[</span><span class="n">idx</span><span class="p">])</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">))</span> <span class="n">largest</span> <span class="o">=</span> <span class="n">l</span><span class="p">;</span>
            <span class="k">if</span> <span class="p">((</span><span class="n">r</span><span class="o">&lt;=</span><span class="n">h</span><span class="o">-&gt;</span><span class="n">heap_size</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="p">(</span><span class="n">h</span><span class="o">-&gt;</span><span class="n">cmp</span><span class="p">(</span><span class="n">h</span><span class="o">-&gt;</span><span class="n">array</span><span class="p">[</span><span class="n">r</span><span class="p">],</span> <span class="n">h</span><span class="o">-&gt;</span><span class="n">array</span><span class="p">[</span><span class="n">largest</span><span class="p">])</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">))</span> <span class="n">largest</span> <span class="o">=</span> <span class="n">r</span><span class="p">;</span>
      <span class="p">}</span>

      <span class="k">if</span> <span class="p">(</span><span class="n">largest</span> <span class="o">!=</span> <span class="n">idx</span><span class="p">)</span>
      <span class="p">{</span>
            <span class="n">exch</span><span class="p">(</span><span class="o">&amp;</span><span class="n">h</span><span class="o">-&gt;</span><span class="n">array</span><span class="p">[</span><span class="n">idx</span><span class="p">],</span> <span class="o">&amp;</span><span class="n">h</span><span class="o">-&gt;</span><span class="n">array</span><span class="p">[</span><span class="n">largest</span><span class="p">]);</span>
            <span class="n">heapify</span><span class="p">(</span><span class="n">h</span><span class="p">,</span> <span class="n">largest</span><span class="p">);</span>
      <span class="p">}</span>
<span class="p">}</span>

<span class="cm">/**
 *  @brief Builds a heap from an unsorted array (h-&gt;array)
 *
 *  @param [in] h
 */</span>
<span class="kt">void</span> <span class="nf">build_heap</span><span class="p">(</span><span class="n">heap</span><span class="o">*</span> <span class="n">h</span><span class="p">)</span>
<span class="p">{</span>
      <span class="kt">int</span> <span class="n">i</span><span class="p">;</span>
      <span class="k">for</span><span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="n">h</span><span class="o">-&gt;</span><span class="n">heap_size</span><span class="o">&gt;&gt;</span><span class="mi">1</span><span class="p">;</span> <span class="n">i</span><span class="o">&gt;</span><span class="mi">0</span><span class="p">;</span> <span class="n">i</span><span class="o">--</span><span class="p">)</span> <span class="n">heapify</span><span class="p">(</span><span class="n">h</span><span class="p">,</span> <span class="n">i</span><span class="p">);</span>
<span class="p">}</span>

<span class="cm">/**
 *  @brief Pops min/maxval from heap
 *
 *  @param [in] h
 *  @return pointer to min/maxval
 */</span>
<span class="kt">void</span><span class="o">*</span> <span class="nf">pop</span><span class="p">(</span><span class="n">heap</span><span class="o">*</span> <span class="n">h</span><span class="p">)</span>
<span class="p">{</span>
      <span class="k">if</span><span class="p">(</span><span class="n">h</span><span class="o">-&gt;</span><span class="n">heap_size</span><span class="o">&lt;</span><span class="mi">1</span><span class="p">)</span> <span class="k">return</span> <span class="nb">NULL</span><span class="p">;</span>
      <span class="kt">void</span><span class="o">*</span> <span class="n">max</span> <span class="o">=</span> <span class="n">h</span><span class="o">-&gt;</span><span class="n">array</span><span class="p">[</span><span class="mi">1</span><span class="p">];</span>
      <span class="n">h</span><span class="o">-&gt;</span><span class="n">array</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="n">h</span><span class="o">-&gt;</span><span class="n">array</span><span class="p">[</span><span class="n">h</span><span class="o">-&gt;</span><span class="n">heap_size</span><span class="o">--</span><span class="p">];</span>
      <span class="n">heapify</span><span class="p">(</span><span class="n">h</span><span class="p">,</span><span class="mi">1</span><span class="p">);</span>
      <span class="k">return</span> <span class="n">max</span><span class="p">;</span>
<span class="p">}</span>

<span class="kt">void</span><span class="o">*</span> <span class="nf">pop_at</span><span class="p">(</span><span class="n">heap</span><span class="o">*</span> <span class="n">h</span><span class="p">,</span> <span class="kt">int</span> <span class="n">pos</span><span class="p">)</span>
<span class="p">{</span>
      <span class="k">if</span><span class="p">(</span><span class="n">h</span><span class="o">-&gt;</span><span class="n">heap_size</span><span class="o">&lt;</span><span class="mi">1</span><span class="p">)</span> <span class="k">return</span> <span class="nb">NULL</span><span class="p">;</span>
      <span class="kt">void</span><span class="o">*</span> <span class="n">max</span> <span class="o">=</span> <span class="n">h</span><span class="o">-&gt;</span><span class="n">array</span><span class="p">[</span><span class="n">pos</span><span class="p">];</span>
      <span class="n">h</span><span class="o">-&gt;</span><span class="n">array</span><span class="p">[</span><span class="n">pos</span><span class="p">]</span> <span class="o">=</span> <span class="n">h</span><span class="o">-&gt;</span><span class="n">array</span><span class="p">[</span><span class="n">h</span><span class="o">-&gt;</span><span class="n">heap_size</span><span class="o">--</span><span class="p">];</span>
      <span class="n">heapify</span><span class="p">(</span><span class="n">h</span><span class="p">,</span><span class="n">pos</span><span class="p">);</span>
      <span class="k">return</span> <span class="n">max</span><span class="p">;</span>
<span class="p">}</span>



<span class="cm">/**
 *  @brief Pushes value onto heap
 *
 *  @param [in] h
 *  @param [in] k
 *  @return FALSE if heap is full, TRUE otherwise
 */</span>
<span class="kt">int</span> <span class="nf">push</span><span class="p">(</span><span class="n">heap</span><span class="o">*</span> <span class="n">h</span><span class="p">,</span> <span class="kt">void</span><span class="o">*</span> <span class="n">k</span><span class="p">)</span>
<span class="p">{</span>
      <span class="k">if</span> <span class="p">(</span><span class="n">k</span><span class="o">==</span><span class="nb">NULL</span><span class="p">)</span> <span class="k">return</span> <span class="n">FALSE</span><span class="p">;</span>
      <span class="k">if</span> <span class="p">(</span><span class="n">h</span><span class="o">-&gt;</span><span class="n">heap_size</span> <span class="o">==</span> <span class="n">h</span><span class="o">-&gt;</span><span class="n">array_size</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span> <span class="k">return</span> <span class="n">FALSE</span><span class="p">;</span>
      <span class="n">h</span><span class="o">-&gt;</span><span class="n">heap_size</span><span class="o">++</span><span class="p">;</span>

      <span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">h</span><span class="o">-&gt;</span><span class="n">heap_size</span><span class="p">;</span>

      <span class="k">if</span> <span class="p">(</span><span class="n">i</span><span class="o">&gt;</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">h</span><span class="o">-&gt;</span><span class="n">order</span> <span class="o">==</span> <span class="n">ORD_ASC</span><span class="p">)</span>
                  <span class="k">for</span> <span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="n">h</span><span class="o">-&gt;</span><span class="n">heap_size</span><span class="p">;</span> <span class="n">i</span><span class="o">&gt;</span><span class="mi">1</span> <span class="o">&amp;&amp;</span> <span class="n">h</span><span class="o">-&gt;</span><span class="n">cmp</span><span class="p">(</span><span class="n">h</span><span class="o">-&gt;</span><span class="n">array</span><span class="p">[</span><span class="n">PARENT</span><span class="p">(</span><span class="n">i</span><span class="p">)],</span> <span class="n">k</span><span class="p">)</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">=</span> <span class="n">PARENT</span><span class="p">(</span><span class="n">i</span><span class="p">))</span> <span class="n">h</span><span class="o">-&gt;</span><span class="n">array</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">h</span><span class="o">-&gt;</span><span class="n">array</span><span class="p">[</span><span class="n">PARENT</span><span class="p">(</span><span class="n">i</span><span class="p">)];</span>
            <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">h</span><span class="o">-&gt;</span><span class="n">order</span> <span class="o">==</span> <span class="n">ORD_DES</span><span class="p">)</span>
                  <span class="k">for</span> <span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="n">h</span><span class="o">-&gt;</span><span class="n">heap_size</span><span class="p">;</span> <span class="n">i</span><span class="o">&gt;</span><span class="mi">1</span> <span class="o">&amp;&amp;</span> <span class="n">h</span><span class="o">-&gt;</span><span class="n">cmp</span><span class="p">(</span><span class="n">h</span><span class="o">-&gt;</span><span class="n">array</span><span class="p">[</span><span class="n">PARENT</span><span class="p">(</span><span class="n">i</span><span class="p">)],</span> <span class="n">k</span><span class="p">)</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">=</span> <span class="n">PARENT</span><span class="p">(</span><span class="n">i</span><span class="p">))</span> <span class="n">h</span><span class="o">-&gt;</span><span class="n">array</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">h</span><span class="o">-&gt;</span><span class="n">array</span><span class="p">[</span><span class="n">PARENT</span><span class="p">(</span><span class="n">i</span><span class="p">)];</span>
      <span class="p">}</span>

      <span class="n">h</span><span class="o">-&gt;</span><span class="n">array</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">k</span><span class="p">;</span>

      <span class="k">return</span> <span class="n">TRUE</span><span class="p">;</span>
<span class="p">}</span>

<span class="cm">/**
 *  @brief Brief
 *
 *  @param [in] h      Parameter_Description
 *  @param [in] pos    Parameter_Description
 *  @param [in] newval Parameter_Description
 *  @return Return_Description
 */</span>
<span class="kt">void</span> <span class="nf">update</span><span class="p">(</span><span class="n">heap</span><span class="o">*</span> <span class="n">h</span><span class="p">,</span> <span class="kt">int</span> <span class="n">pos</span><span class="p">)</span>
<span class="p">{</span>
      <span class="n">push</span><span class="p">(</span><span class="n">h</span><span class="p">,</span> <span class="n">pop_at</span><span class="p">(</span><span class="n">h</span><span class="p">,</span> <span class="n">pos</span><span class="p">));</span>
<span class="p">}</span>


<span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;&lt;/</span><span class="n">div</span><span class="o">&gt;</span></code></pre></div>
;
T;U;[0I"ë<!DOCTYPE html><html lang="en"><head>
    <meta charset="utf-8">
    <title>A Developer's Notebook - Heap &amp; Priority Queues</title>
    <link rel="stylesheet" href="https://unpkg.com/purecss@1.0.1/build/pure-min.css" integrity="sha384-oAOxQR6DkCoMliIh8yFnu25d7Eq/PHS21PClpwjOTeU2jRSq11vu66rf90/cZr47" crossorigin="anonymous">
    <link rel="stylesheet" href="../../assets/stylesheet.css">
    <link rel="stylesheet" href="../../assets/highlight.css">

    <!-- you don't need to keep this, but it's cool for stats! -->
    <meta name="generator" content="Nanoc 4.11.9">
  </head>
  <body>
    <div id="layout">
      <div class="header">
        <h1>
          <a href="../../">A Developer's Notebook</a>
        </h1>
      </div>


      <div class="content">
        <nav class="pure-g">
          <div class="pure-u-2-3 links">
            <a href="../../index.html">Home</a> ¬∑
            <a href="../../tags.html">Tags</a> ¬∑
            <a href="../../years.html">Years</a> ¬∑
            <a href="../../about.html">About</a>
          </div>

          <div class="pure-u-1-3">
            <div class="contact">
              <span>
                <a href="https://github.com/lbrito1" download="">
                  <img src="../../assets/icons/github.svg" alt="Github icon">
                  </a>
              </span>
              <span>
                <a href="https://www.linkedin.com/in/leonardo-mendes-brito/">
                <img src="../../assets/icons/linkedin.svg" alt="LinkedIn icon">
                </a>
              </span>
            </div>
          </div>
        </nav>
        
  <div class="post-show">
    <h1>Heap &amp; Priority Queues</h1>
    <article class="text">
      <p>Priority queues (PQs) are abstract data types that work just like regular stacks, but the popping order depends on each element‚Äôs priority instead of the sequence they were pushed onto the queue (FIFO or LIFO).</p>

<p>The na√Øve way of implementing a PQ consists of using an unsorted list or array and searching for the highest-priority element at each pop, which takes O(n) time. There are several more efficient implementations, of which the most usual is the heap.</p>

<p>Heaps are complete (i.e. all levels except possibly the last are filled) binary trees that work as PQs by maintaining the following property: children nodes always have a smaller priority than their parent, i.e. for any node A with children B and C, priority(B) &lt; priority(A) &amp;&amp; priority(C) &lt; priority(A). Note that there is no assumed relation between siblings or cousins.</p>

<p><a href="../../assets/images/codedeposit/2014/03/heap.jpg"><img src="../../assets/images/codedeposit/2014/03/heap.jpg" alt="max-heap and corresponding array."></a>
<em>max-heap and corresponding array.</em></p>

<p>Each element of a heap has two pieces of information: a key and a value, hence we call them key-value (KV) pair. The key identifies the specific element, and the value determines the element‚Äôs priority within the heap. Heaps can be min-heaps (low value = high priority) or max-heaps (high value = high priority).</p>

<!-- more -->

<p>As any other data structure, we need at least the two basic operations: insert data and remove data. PQs also warrant an update priority operation. Here‚Äôs how we‚Äôll implement those.</p>

<div class="highlight"><pre><code class="language-c"><span class="k">typedef</span> <span class="k">struct</span> <span class="p">{</span>
      <span class="kt">void</span><span class="o">**</span> <span class="n">array</span><span class="p">;</span>
      <span class="kt">int</span> <span class="n">array_size</span><span class="p">;</span>
      <span class="kt">int</span> <span class="n">heap_size</span><span class="p">;</span>
      <span class="kt">int</span> <span class="n">order</span><span class="p">;</span>
      <span class="kt">int</span> <span class="p">(</span><span class="o">*</span><span class="n">cmp</span><span class="p">)</span> <span class="p">(</span><span class="kt">void</span><span class="o">*</span><span class="p">,</span> <span class="kt">void</span><span class="o">*</span><span class="p">);</span>
<span class="p">}</span> <span class="n">heap</span><span class="p">;</span></code></pre></div>

<p>First we have the heap structure. The binary tree is implemented as an array, using the following macros to get the child and parent indexes:</p>

<div class="highlight"><pre><code class="language-c"><span class="cp">#define PARENT(i) i&gt;&gt;1
#define LEFT(i) i&lt;&lt;1
#define RIGHT(i) (i&lt;&lt;1)+1</span></code></pre></div>

<p>heap_size is the actual number of elements in the heap, and array_size is the maximum heap size. Here‚Äôs the initialization code for a heap struct:</p>

<div class="highlight"><pre><code class="language-c"><span class="cm">/**
 *  @brief Create new heap data structure
 *
 *  @param [in] size    maximum heap size
 *  @param [in] ord     minheap: ORD_ASC, maxheap: ORD_DES
 *  @param [in] compare comparator
 *  @return Return_Description
 */</span>
<span class="n">heap</span><span class="o">*</span> <span class="nf">new_heap</span><span class="p">(</span><span class="kt">int</span> <span class="n">size</span><span class="p">,</span> <span class="kt">int</span> <span class="n">ord</span><span class="p">,</span> <span class="kt">int</span> <span class="p">(</span><span class="o">*</span><span class="n">compare</span><span class="p">)</span> <span class="p">(</span><span class="kt">void</span><span class="o">*</span><span class="p">,</span> <span class="kt">void</span><span class="o">*</span><span class="p">))</span>
<span class="p">{</span>
      <span class="n">heap</span><span class="o">*</span> <span class="n">h</span> <span class="o">=</span> <span class="n">malloc</span><span class="p">(</span><span class="k">sizeof</span><span class="p">(</span><span class="n">heap</span><span class="p">));</span>
      <span class="n">h</span><span class="o">-&gt;</span><span class="n">array</span> <span class="o">=</span> <span class="n">malloc</span><span class="p">(</span><span class="k">sizeof</span><span class="p">(</span><span class="kt">void</span><span class="o">*</span><span class="p">)</span><span class="o">*</span><span class="n">size</span><span class="o">+</span><span class="mi">1</span><span class="p">);</span>
      <span class="n">h</span><span class="o">-&gt;</span><span class="n">array_size</span> <span class="o">=</span> <span class="n">size</span><span class="o">+</span><span class="mi">1</span><span class="p">;</span>
      <span class="n">h</span><span class="o">-&gt;</span><span class="n">array</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>     <span class="c1">//very important!! baadf00d</span>
      <span class="n">h</span><span class="o">-&gt;</span><span class="n">heap_size</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
      <span class="n">h</span><span class="o">-&gt;</span><span class="n">cmp</span> <span class="o">=</span> <span class="n">compare</span><span class="p">;</span>
      <span class="n">h</span><span class="o">-&gt;</span><span class="n">order</span> <span class="o">=</span> <span class="n">ord</span><span class="p">;</span>
      <span class="k">return</span> <span class="n">h</span><span class="p">;</span>
<span class="p">}</span></code></pre></div>

<p>Because we won‚Äôt be using array index 0 (since both children would also be 0), we need to remember two things: increasing by 1 the request maximum heap size (and allocating accordingly) and always filling aray[0] with something we know (preferably NULL) so we don‚Äôt get bogus memory reads if we do something wrong.</p>

<p>To maintain the heap property, we must use the heapify subroutine. Heapify works as following: given an array index i such that array[i] may have a lower priority than its children (thus violating the heap property), ‚Äúfloat down‚Äù array[i] until it reaches the correct level, guaranteeing i is the root of a valid heap:</p>

<div class="highlight"><pre><code class="language-c"><span class="cm">/**
 *  @brief Heapifies subtree rooted at h-&gt;array[idx], assuming
 *  that its two subtree children are already heaps. This is done
 *  by "floating down" the value at idx, which may violate heap
 *  condition, until it reaches the appropriate depth.
 *
 *  @param [in] h   Parameter_Description
 *  @param [in] idx Parameter_Description
 */</span>
<span class="kt">void</span> <span class="nf">heapify</span><span class="p">(</span><span class="n">heap</span><span class="o">*</span> <span class="n">h</span><span class="p">,</span> <span class="kt">int</span> <span class="n">idx</span><span class="p">)</span>
<span class="p">{</span>
      <span class="kt">int</span> <span class="n">l</span> <span class="o">=</span> <span class="n">LEFT</span><span class="p">(</span><span class="n">idx</span><span class="p">);</span>
      <span class="kt">int</span> <span class="n">r</span> <span class="o">=</span> <span class="n">RIGHT</span><span class="p">(</span><span class="n">idx</span><span class="p">);</span>
      <span class="kt">int</span> <span class="n">largest</span> <span class="o">=</span> <span class="n">idx</span><span class="p">;</span>

      <span class="k">if</span> <span class="p">(</span><span class="n">h</span><span class="o">-&gt;</span><span class="n">order</span> <span class="o">==</span> <span class="n">ORD_ASC</span><span class="p">)</span>
      <span class="p">{</span>
            <span class="k">if</span> <span class="p">((</span><span class="n">l</span><span class="o">&lt;=</span><span class="n">h</span><span class="o">-&gt;</span><span class="n">heap_size</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="p">(</span><span class="n">h</span><span class="o">-&gt;</span><span class="n">cmp</span><span class="p">(</span><span class="n">h</span><span class="o">-&gt;</span><span class="n">array</span><span class="p">[</span><span class="n">l</span><span class="p">],</span> <span class="n">h</span><span class="o">-&gt;</span><span class="n">array</span><span class="p">[</span><span class="n">idx</span><span class="p">])</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">))</span> <span class="n">largest</span> <span class="o">=</span> <span class="n">l</span><span class="p">;</span>
            <span class="k">if</span> <span class="p">((</span><span class="n">r</span><span class="o">&lt;=</span><span class="n">h</span><span class="o">-&gt;</span><span class="n">heap_size</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="p">(</span><span class="n">h</span><span class="o">-&gt;</span><span class="n">cmp</span><span class="p">(</span><span class="n">h</span><span class="o">-&gt;</span><span class="n">array</span><span class="p">[</span><span class="n">r</span><span class="p">],</span> <span class="n">h</span><span class="o">-&gt;</span><span class="n">array</span><span class="p">[</span><span class="n">largest</span><span class="p">])</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">))</span> <span class="n">largest</span> <span class="o">=</span> <span class="n">r</span><span class="p">;</span>
      <span class="p">}</span>
      <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">h</span><span class="o">-&gt;</span><span class="n">order</span> <span class="o">==</span> <span class="n">ORD_DES</span><span class="p">)</span>
      <span class="p">{</span>
            <span class="k">if</span> <span class="p">((</span><span class="n">l</span><span class="o">&lt;=</span><span class="n">h</span><span class="o">-&gt;</span><span class="n">heap_size</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="p">(</span><span class="n">h</span><span class="o">-&gt;</span><span class="n">cmp</span><span class="p">(</span><span class="n">h</span><span class="o">-&gt;</span><span class="n">array</span><span class="p">[</span><span class="n">l</span><span class="p">],</span> <span class="n">h</span><span class="o">-&gt;</span><span class="n">array</span><span class="p">[</span><span class="n">idx</span><span class="p">])</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">))</span> <span class="n">largest</span> <span class="o">=</span> <span class="n">l</span><span class="p">;</span>
            <span class="k">if</span> <span class="p">((</span><span class="n">r</span><span class="o">&lt;=</span><span class="n">h</span><span class="o">-&gt;</span><span class="n">heap_size</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="p">(</span><span class="n">h</span><span class="o">-&gt;</span><span class="n">cmp</span><span class="p">(</span><span class="n">h</span><span class="o">-&gt;</span><span class="n">array</span><span class="p">[</span><span class="n">r</span><span class="p">],</span> <span class="n">h</span><span class="o">-&gt;</span><span class="n">array</span><span class="p">[</span><span class="n">largest</span><span class="p">])</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">))</span> <span class="n">largest</span> <span class="o">=</span> <span class="n">r</span><span class="p">;</span>       <span class="p">}</span>              <span class="k">if</span> <span class="p">(</span><span class="n">largest</span> <span class="o">!=</span> <span class="n">idx</span><span class="p">)</span>        <span class="p">{</span>             <span class="n">exch</span><span class="p">(</span><span class="o">&amp;</span><span class="n">h</span><span class="o">-&gt;</span><span class="n">array</span><span class="p">[</span><span class="n">idx</span><span class="p">],</span> <span class="o">&amp;</span><span class="n">h</span><span class="o">-&gt;</span><span class="n">array</span><span class="p">[</span><span class="n">largest</span><span class="p">]);</span>
            <span class="n">heapify</span><span class="p">(</span><span class="n">h</span><span class="p">,</span> <span class="n">largest</span><span class="p">);</span>
      <span class="p">}</span>
<span class="p">}</span></code></pre></div>

<p>The remaining operations are rather simple:</p>

<p>Pop removes array[1] (heap‚Äôs node with highest priority), replaces it with array[heapsize] and calls heapify at the heap root.</p>

<p>Push ‚Äúfloats up‚Äù the new value to be inserted starting at the bottom of the heap until it reaches the appropriate level.</p>

<p>Update (aka ‚Äúdecrease-key‚Äù or ‚Äúincrease-key‚Äù) changes the priority of a node and re-evaluates the heap so that it maintains heap property.</p>

<p>Full code can be found below and on my Github, at data_structures/heap.c. Runnable tests can be found in tests/test_heap.c</p>

<div class="highlight"><pre><code class="language-c"><span class="cm">/*
    File: heap.c

    Copyright (c) 2014 Leonardo Brito &lt;lbrito@gmail.com&gt;

    This software is free software; you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation; either version 2 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License along
    with this program; if not, write the Free Software Foundation, Inc., 51
    Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
*/</span>

<span class="cp">#include 
</span>
<span class="cp">#define PARENT(i) i&gt;&gt;1
#define LEFT(i) i&lt;&lt;1
#define RIGHT(i) (i&lt;&lt;1)+1
</span><span class="k">static</span> <span class="kr">inline</span> <span class="kt">void</span> <span class="nf">exch</span><span class="p">(</span><span class="kt">void</span><span class="o">**</span> <span class="n">a</span><span class="p">,</span> <span class="kt">void</span><span class="o">**</span> <span class="n">b</span><span class="p">)</span> <span class="p">{</span> <span class="kt">void</span><span class="o">*</span> <span class="n">p</span> <span class="o">=</span> <span class="o">*</span><span class="n">a</span><span class="p">;</span> <span class="o">*</span><span class="n">a</span> <span class="o">=</span> <span class="o">*</span><span class="n">b</span><span class="p">;</span> <span class="o">*</span><span class="n">b</span> <span class="o">=</span> <span class="n">p</span><span class="p">;</span> <span class="p">}</span>

<span class="k">typedef</span> <span class="k">struct</span> <span class="p">{</span>
      <span class="kt">void</span><span class="o">**</span> <span class="n">array</span><span class="p">;</span>
      <span class="kt">int</span> <span class="n">array_size</span><span class="p">;</span>
      <span class="kt">int</span> <span class="n">heap_size</span><span class="p">;</span>
      <span class="kt">int</span> <span class="n">order</span><span class="p">;</span>
      <span class="kt">int</span> <span class="p">(</span><span class="o">*</span><span class="n">cmp</span><span class="p">)</span> <span class="p">(</span><span class="kt">void</span><span class="o">*</span><span class="p">,</span> <span class="kt">void</span><span class="o">*</span><span class="p">);</span>
<span class="p">}</span> <span class="n">heap</span><span class="p">;</span>

<span class="cm">/**
 *  @brief Create new heap data structure
 *
 *  @param [in] size    maximum heap size
 *  @param [in] ord     minheap: ORD_ASC, maxheap: ORD_DES
 *  @param [in] compare comparator
 *  @return Return_Description
 */</span>
<span class="n">heap</span><span class="o">*</span> <span class="nf">new_heap</span><span class="p">(</span><span class="kt">int</span> <span class="n">size</span><span class="p">,</span> <span class="kt">int</span> <span class="n">ord</span><span class="p">,</span> <span class="kt">int</span> <span class="p">(</span><span class="o">*</span><span class="n">compare</span><span class="p">)</span> <span class="p">(</span><span class="kt">void</span><span class="o">*</span><span class="p">,</span> <span class="kt">void</span><span class="o">*</span><span class="p">))</span>
<span class="p">{</span>
      <span class="n">heap</span><span class="o">*</span> <span class="n">h</span> <span class="o">=</span> <span class="n">malloc</span><span class="p">(</span><span class="k">sizeof</span><span class="p">(</span><span class="n">heap</span><span class="p">));</span>
      <span class="n">h</span><span class="o">-&gt;</span><span class="n">array</span> <span class="o">=</span> <span class="n">malloc</span><span class="p">(</span><span class="k">sizeof</span><span class="p">(</span><span class="kt">void</span><span class="o">*</span><span class="p">)</span><span class="o">*</span><span class="n">size</span><span class="o">+</span><span class="mi">1</span><span class="p">);</span>
      <span class="n">h</span><span class="o">-&gt;</span><span class="n">array_size</span> <span class="o">=</span> <span class="n">size</span><span class="o">+</span><span class="mi">1</span><span class="p">;</span>
      <span class="n">h</span><span class="o">-&gt;</span><span class="n">array</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>     <span class="c1">//very important!! baadf00d</span>
      <span class="n">h</span><span class="o">-&gt;</span><span class="n">heap_size</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
      <span class="n">h</span><span class="o">-&gt;</span><span class="n">cmp</span> <span class="o">=</span> <span class="n">compare</span><span class="p">;</span>
      <span class="n">h</span><span class="o">-&gt;</span><span class="n">order</span> <span class="o">=</span> <span class="n">ord</span><span class="p">;</span>
      <span class="k">return</span> <span class="n">h</span><span class="p">;</span>
<span class="p">}</span>

<span class="cm">/**
 *  @brief Heapifies subtree rooted at h-&gt;array[idx], assuming
 *  that its two subtree children are already heaps. This is done
 *  by "floating down" the value at idx, which may violate heap
 *  condition, until it reaches the appropriate depth.
 *
 *  @param [in] h   Parameter_Description
 *  @param [in] idx Parameter_Description
 */</span>
<span class="kt">void</span> <span class="nf">heapify</span><span class="p">(</span><span class="n">heap</span><span class="o">*</span> <span class="n">h</span><span class="p">,</span> <span class="kt">int</span> <span class="n">idx</span><span class="p">)</span>
<span class="p">{</span>
      <span class="kt">int</span> <span class="n">l</span> <span class="o">=</span> <span class="n">LEFT</span><span class="p">(</span><span class="n">idx</span><span class="p">);</span>
      <span class="kt">int</span> <span class="n">r</span> <span class="o">=</span> <span class="n">RIGHT</span><span class="p">(</span><span class="n">idx</span><span class="p">);</span>
      <span class="kt">int</span> <span class="n">largest</span> <span class="o">=</span> <span class="n">idx</span><span class="p">;</span>

      <span class="k">if</span> <span class="p">(</span><span class="n">h</span><span class="o">-&gt;</span><span class="n">order</span> <span class="o">==</span> <span class="n">ORD_ASC</span><span class="p">)</span>
      <span class="p">{</span>
            <span class="k">if</span> <span class="p">((</span><span class="n">l</span><span class="o">&lt;=</span><span class="n">h</span><span class="o">-&gt;</span><span class="n">heap_size</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="p">(</span><span class="n">h</span><span class="o">-&gt;</span><span class="n">cmp</span><span class="p">(</span><span class="n">h</span><span class="o">-&gt;</span><span class="n">array</span><span class="p">[</span><span class="n">l</span><span class="p">],</span> <span class="n">h</span><span class="o">-&gt;</span><span class="n">array</span><span class="p">[</span><span class="n">idx</span><span class="p">])</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">))</span> <span class="n">largest</span> <span class="o">=</span> <span class="n">l</span><span class="p">;</span>
            <span class="k">if</span> <span class="p">((</span><span class="n">r</span><span class="o">&lt;=</span><span class="n">h</span><span class="o">-&gt;</span><span class="n">heap_size</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="p">(</span><span class="n">h</span><span class="o">-&gt;</span><span class="n">cmp</span><span class="p">(</span><span class="n">h</span><span class="o">-&gt;</span><span class="n">array</span><span class="p">[</span><span class="n">r</span><span class="p">],</span> <span class="n">h</span><span class="o">-&gt;</span><span class="n">array</span><span class="p">[</span><span class="n">largest</span><span class="p">])</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">))</span> <span class="n">largest</span> <span class="o">=</span> <span class="n">r</span><span class="p">;</span>
      <span class="p">}</span>
      <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">h</span><span class="o">-&gt;</span><span class="n">order</span> <span class="o">==</span> <span class="n">ORD_DES</span><span class="p">)</span>
      <span class="p">{</span>
            <span class="k">if</span> <span class="p">((</span><span class="n">l</span><span class="o">&lt;=</span><span class="n">h</span><span class="o">-&gt;</span><span class="n">heap_size</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="p">(</span><span class="n">h</span><span class="o">-&gt;</span><span class="n">cmp</span><span class="p">(</span><span class="n">h</span><span class="o">-&gt;</span><span class="n">array</span><span class="p">[</span><span class="n">l</span><span class="p">],</span> <span class="n">h</span><span class="o">-&gt;</span><span class="n">array</span><span class="p">[</span><span class="n">idx</span><span class="p">])</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">))</span> <span class="n">largest</span> <span class="o">=</span> <span class="n">l</span><span class="p">;</span>
            <span class="k">if</span> <span class="p">((</span><span class="n">r</span><span class="o">&lt;=</span><span class="n">h</span><span class="o">-&gt;</span><span class="n">heap_size</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="p">(</span><span class="n">h</span><span class="o">-&gt;</span><span class="n">cmp</span><span class="p">(</span><span class="n">h</span><span class="o">-&gt;</span><span class="n">array</span><span class="p">[</span><span class="n">r</span><span class="p">],</span> <span class="n">h</span><span class="o">-&gt;</span><span class="n">array</span><span class="p">[</span><span class="n">largest</span><span class="p">])</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">))</span> <span class="n">largest</span> <span class="o">=</span> <span class="n">r</span><span class="p">;</span>
      <span class="p">}</span>

      <span class="k">if</span> <span class="p">(</span><span class="n">largest</span> <span class="o">!=</span> <span class="n">idx</span><span class="p">)</span>
      <span class="p">{</span>
            <span class="n">exch</span><span class="p">(</span><span class="o">&amp;</span><span class="n">h</span><span class="o">-&gt;</span><span class="n">array</span><span class="p">[</span><span class="n">idx</span><span class="p">],</span> <span class="o">&amp;</span><span class="n">h</span><span class="o">-&gt;</span><span class="n">array</span><span class="p">[</span><span class="n">largest</span><span class="p">]);</span>
            <span class="n">heapify</span><span class="p">(</span><span class="n">h</span><span class="p">,</span> <span class="n">largest</span><span class="p">);</span>
      <span class="p">}</span>
<span class="p">}</span>

<span class="cm">/**
 *  @brief Builds a heap from an unsorted array (h-&gt;array)
 *
 *  @param [in] h
 */</span>
<span class="kt">void</span> <span class="nf">build_heap</span><span class="p">(</span><span class="n">heap</span><span class="o">*</span> <span class="n">h</span><span class="p">)</span>
<span class="p">{</span>
      <span class="kt">int</span> <span class="n">i</span><span class="p">;</span>
      <span class="k">for</span><span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="n">h</span><span class="o">-&gt;</span><span class="n">heap_size</span><span class="o">&gt;&gt;</span><span class="mi">1</span><span class="p">;</span> <span class="n">i</span><span class="o">&gt;</span><span class="mi">0</span><span class="p">;</span> <span class="n">i</span><span class="o">--</span><span class="p">)</span> <span class="n">heapify</span><span class="p">(</span><span class="n">h</span><span class="p">,</span> <span class="n">i</span><span class="p">);</span>
<span class="p">}</span>

<span class="cm">/**
 *  @brief Pops min/maxval from heap
 *
 *  @param [in] h
 *  @return pointer to min/maxval
 */</span>
<span class="kt">void</span><span class="o">*</span> <span class="nf">pop</span><span class="p">(</span><span class="n">heap</span><span class="o">*</span> <span class="n">h</span><span class="p">)</span>
<span class="p">{</span>
      <span class="k">if</span><span class="p">(</span><span class="n">h</span><span class="o">-&gt;</span><span class="n">heap_size</span><span class="o">&lt;</span><span class="mi">1</span><span class="p">)</span> <span class="k">return</span> <span class="nb">NULL</span><span class="p">;</span>
      <span class="kt">void</span><span class="o">*</span> <span class="n">max</span> <span class="o">=</span> <span class="n">h</span><span class="o">-&gt;</span><span class="n">array</span><span class="p">[</span><span class="mi">1</span><span class="p">];</span>
      <span class="n">h</span><span class="o">-&gt;</span><span class="n">array</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="n">h</span><span class="o">-&gt;</span><span class="n">array</span><span class="p">[</span><span class="n">h</span><span class="o">-&gt;</span><span class="n">heap_size</span><span class="o">--</span><span class="p">];</span>
      <span class="n">heapify</span><span class="p">(</span><span class="n">h</span><span class="p">,</span><span class="mi">1</span><span class="p">);</span>
      <span class="k">return</span> <span class="n">max</span><span class="p">;</span>
<span class="p">}</span>

<span class="kt">void</span><span class="o">*</span> <span class="nf">pop_at</span><span class="p">(</span><span class="n">heap</span><span class="o">*</span> <span class="n">h</span><span class="p">,</span> <span class="kt">int</span> <span class="n">pos</span><span class="p">)</span>
<span class="p">{</span>
      <span class="k">if</span><span class="p">(</span><span class="n">h</span><span class="o">-&gt;</span><span class="n">heap_size</span><span class="o">&lt;</span><span class="mi">1</span><span class="p">)</span> <span class="k">return</span> <span class="nb">NULL</span><span class="p">;</span>
      <span class="kt">void</span><span class="o">*</span> <span class="n">max</span> <span class="o">=</span> <span class="n">h</span><span class="o">-&gt;</span><span class="n">array</span><span class="p">[</span><span class="n">pos</span><span class="p">];</span>
      <span class="n">h</span><span class="o">-&gt;</span><span class="n">array</span><span class="p">[</span><span class="n">pos</span><span class="p">]</span> <span class="o">=</span> <span class="n">h</span><span class="o">-&gt;</span><span class="n">array</span><span class="p">[</span><span class="n">h</span><span class="o">-&gt;</span><span class="n">heap_size</span><span class="o">--</span><span class="p">];</span>
      <span class="n">heapify</span><span class="p">(</span><span class="n">h</span><span class="p">,</span><span class="n">pos</span><span class="p">);</span>
      <span class="k">return</span> <span class="n">max</span><span class="p">;</span>
<span class="p">}</span>



<span class="cm">/**
 *  @brief Pushes value onto heap
 *
 *  @param [in] h
 *  @param [in] k
 *  @return FALSE if heap is full, TRUE otherwise
 */</span>
<span class="kt">int</span> <span class="nf">push</span><span class="p">(</span><span class="n">heap</span><span class="o">*</span> <span class="n">h</span><span class="p">,</span> <span class="kt">void</span><span class="o">*</span> <span class="n">k</span><span class="p">)</span>
<span class="p">{</span>
      <span class="k">if</span> <span class="p">(</span><span class="n">k</span><span class="o">==</span><span class="nb">NULL</span><span class="p">)</span> <span class="k">return</span> <span class="n">FALSE</span><span class="p">;</span>
      <span class="k">if</span> <span class="p">(</span><span class="n">h</span><span class="o">-&gt;</span><span class="n">heap_size</span> <span class="o">==</span> <span class="n">h</span><span class="o">-&gt;</span><span class="n">array_size</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span> <span class="k">return</span> <span class="n">FALSE</span><span class="p">;</span>
      <span class="n">h</span><span class="o">-&gt;</span><span class="n">heap_size</span><span class="o">++</span><span class="p">;</span>

      <span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">h</span><span class="o">-&gt;</span><span class="n">heap_size</span><span class="p">;</span>

      <span class="k">if</span> <span class="p">(</span><span class="n">i</span><span class="o">&gt;</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">h</span><span class="o">-&gt;</span><span class="n">order</span> <span class="o">==</span> <span class="n">ORD_ASC</span><span class="p">)</span>
                  <span class="k">for</span> <span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="n">h</span><span class="o">-&gt;</span><span class="n">heap_size</span><span class="p">;</span> <span class="n">i</span><span class="o">&gt;</span><span class="mi">1</span> <span class="o">&amp;&amp;</span> <span class="n">h</span><span class="o">-&gt;</span><span class="n">cmp</span><span class="p">(</span><span class="n">h</span><span class="o">-&gt;</span><span class="n">array</span><span class="p">[</span><span class="n">PARENT</span><span class="p">(</span><span class="n">i</span><span class="p">)],</span> <span class="n">k</span><span class="p">)</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">=</span> <span class="n">PARENT</span><span class="p">(</span><span class="n">i</span><span class="p">))</span> <span class="n">h</span><span class="o">-&gt;</span><span class="n">array</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">h</span><span class="o">-&gt;</span><span class="n">array</span><span class="p">[</span><span class="n">PARENT</span><span class="p">(</span><span class="n">i</span><span class="p">)];</span>
            <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">h</span><span class="o">-&gt;</span><span class="n">order</span> <span class="o">==</span> <span class="n">ORD_DES</span><span class="p">)</span>
                  <span class="k">for</span> <span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="n">h</span><span class="o">-&gt;</span><span class="n">heap_size</span><span class="p">;</span> <span class="n">i</span><span class="o">&gt;</span><span class="mi">1</span> <span class="o">&amp;&amp;</span> <span class="n">h</span><span class="o">-&gt;</span><span class="n">cmp</span><span class="p">(</span><span class="n">h</span><span class="o">-&gt;</span><span class="n">array</span><span class="p">[</span><span class="n">PARENT</span><span class="p">(</span><span class="n">i</span><span class="p">)],</span> <span class="n">k</span><span class="p">)</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">=</span> <span class="n">PARENT</span><span class="p">(</span><span class="n">i</span><span class="p">))</span> <span class="n">h</span><span class="o">-&gt;</span><span class="n">array</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">h</span><span class="o">-&gt;</span><span class="n">array</span><span class="p">[</span><span class="n">PARENT</span><span class="p">(</span><span class="n">i</span><span class="p">)];</span>
      <span class="p">}</span>

      <span class="n">h</span><span class="o">-&gt;</span><span class="n">array</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">k</span><span class="p">;</span>

      <span class="k">return</span> <span class="n">TRUE</span><span class="p">;</span>
<span class="p">}</span>

<span class="cm">/**
 *  @brief Brief
 *
 *  @param [in] h      Parameter_Description
 *  @param [in] pos    Parameter_Description
 *  @param [in] newval Parameter_Description
 *  @return Return_Description
 */</span>
<span class="kt">void</span> <span class="nf">update</span><span class="p">(</span><span class="n">heap</span><span class="o">*</span> <span class="n">h</span><span class="p">,</span> <span class="kt">int</span> <span class="n">pos</span><span class="p">)</span>
<span class="p">{</span>
      <span class="n">push</span><span class="p">(</span><span class="n">h</span><span class="p">,</span> <span class="n">pop_at</span><span class="p">(</span><span class="n">h</span><span class="p">,</span> <span class="n">pos</span><span class="p">));</span>
<span class="p">}</span>


<span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;&lt;/</span><span class="n">div</span><span class="o">&gt;</span></code></pre></div>

    </article>
    <aside>Posted at: Mar 21, 2014</aside>
    <div class="post-footer">
      <a href="../../index.html">Back</a>
    </div>
  </div>

        <div class="footer">
          2020 Leonardo Brito
        </div>
      </div>

    </div>
  


</body></html>;
T;@t;@to;;;;	I"B/posts/2018-06-12-working-remotely-in-a-non-remote-company.md;
T{;{
;U;[I"d/home/carol/workspace/blog/content/posts/2018-06-12-working-remotely-in-a-non-remote-company.md;
TI"Z![](/assets/images/goiabada/1*mgVZOuAHmp9Ipm2asL0IQQ.jpg)

We're a small team here at Guava, and we've always considered ourselves _remote friendly._ Most of us work remotely every now and then pushed by varied _force majeure_ situations‚Äî be it the flu, the need to supervise renovation or construction work at home, flash floods near the office, receiving guests at home or any number of other situations. We've also had a few of us working remotely for a few days or weeks while traveling to or back from a conference, or when visiting relatives that live out of town. In other words, remote working has always been a very temporary and circumstantial thing among us.

We have a nice office (with hammocks!), excellent work equipment, great desk space, comfortable chairs, plenty of snacks and comfort food and an infinite supply of coffee. We‚Äôre also easygoing and overall pleasant people (well, most of us are) to work with several hours a day, and some of us are even mildly funny.

<!-- more -->

I bid adieu to my coworkers, the coffee machine, the nice desk and the hammocks and traveled abroad to try out being a remote worker (some prefer the term _digital nomad_ ‚Äî to me, it seems a bit preposterous to compare month-long stays in modern urban dwellings with electricity and wireless internet with the traditional nomadic lifestyle) for half a year. A few weeks before leaving, I read the interesting [Remote: Office Not Required](https://basecamp.com/books/remote), which I vividly recommend to anyone considering working remotely. Some of the challenges I faced during my time as a remote worker were foretold by the book, while others were a complete surprise. Here are a few of the things I learned firsthand about remote work:

## It takes time to¬†adjust.

Your mind takes some time to adjust to working remotely. In many ways, working remotely feels like a completely new job‚Ää‚Äî‚Ääeven if you've been in the same company and position for years.

Some people have more trouble with this than others, but everyone will take some time to adjust. The important lesson here‚Ää‚Äî‚Ääfor worker _and employer_ ‚Äî is to have patience. Steep as it might be, the learning curve of adapting to remoteness will eventually plateau out.

## It is easier when you're well acquainted with your¬†team.

Starting a new project‚Ää‚Äî‚Ääbe it a new job or just a new assignment involving different team members‚Ää‚Äî‚Äämay be daunting. Starting remote work already with good rapport with your coworkers helps tremendously, as you will feel more at ease to talk to people.

It is important to feel comfortable enough to let your team know if something is going wrong right away, for example, as opposed to keeping it to yourself and suffer silently. Good rapport between developers also means it will be easier to understand each other when discussing technical problems.

## **It is easier when you're not the only remote¬†person.**

Being "the remote guy" is a thing. People tend to forget people they don't see every day, and you have to be comfortable with the low profile that comes with working remotely.

Having other remote workers in your team helps a bit, creating that nice "we're all on the same boat" feeling.

## You need to be able to communicate very¬†well.

A huge part of working as a developer is being able to communicate well with other developers and with normal human beings. A programming genius that isn't able to explain what he's doing to his non-genius co-workers will likely not be a very good developer overall.

Language is one of man's great achievements as a species, and it carries the weight and complexity of thousands of years of mutation. Expressing yourself verbally is hard enough, but we also have a myriad of non-verbal communication cues that we unconsciously rely on to communicate with one another‚Ää‚Äî‚Ääwhich you won't have as a remote worker (at least most of the times).

Sure, you can occasionally call the HQ and video-chat with someone. But that is just not practical enough most of the times. As a remote worker, I find myself heavily relying on written communication with the rest of the team.

Every challenge brings a chance to learn something. Because of the challenges and limitations of working remotely, the experience helps you grow professionally in some ways:

*   Guidance from more experienced coworkers or bosses is much more rarefied, which force you to exercise self-teaching and pro-activity.
*   The need to communicate more often through asynchronous text-first chats helps you develop language skills (and patience).
*   Working away from the office and your coworkers makes you appreciate them more when eventually returning to the HQ.

Of course, there are many other benefits that come to mind when thinking about remote work, such [as increased productivity and financial savings](https://www.thriveglobal.com/stories/30386-a-2-year-stanford-study-shows-the-astonishing-productivity-boost-of-working-from-home), and there are already studies and books that got those covered. Which is not to say that remote work is some kind of panacea: it has fundamental disadvantages when compared with traditional work inside a brick-and-mortar office building, the most obvious and important being the lack of human contact with your fellow workers. The solitude and heavy reliance on written, asynchronous communication that often comes with remote work might not be your cup of tea.

Remote work is neither a universal solution nor something completely out of reach for the average developer. Although it won't be to everyone's taste, it is definitively available to everyone (or should be). This semester abroad taught me that it is plainly possible and viable for a developer in a small, non-remote (but remote-friendly) software company to work far away from the HQ, and both sides have a lot to gain from the experience. It is really a win-win scenario, and people should try it more often.

By [Leonardo Brito](https://medium.com/@lbrito) on [June 12, 2018](https://medium.com/p/ce9e39645f85).

[Canonical link](https://medium.com/@lbrito/working-remotely-in-a-non-remote-company-ce9e39645f85)

Exported from [Medium](https://medium.com) on May 1, 2019.
;
T;U;[0I"s<p><img src="/assets/images/goiabada/1*mgVZOuAHmp9Ipm2asL0IQQ.jpg" alt=""></p>

<p>We‚Äôre a small team here at Guava, and we‚Äôve always considered ourselves <em>remote friendly.</em> Most of us work remotely every now and then pushed by varied <em>force majeure</em> situations‚Äî be it the flu, the need to supervise renovation or construction work at home, flash floods near the office, receiving guests at home or any number of other situations. We‚Äôve also had a few of us working remotely for a few days or weeks while traveling to or back from a conference, or when visiting relatives that live out of town. In other words, remote working has always been a very temporary and circumstantial thing among us.</p>

<p>We have a nice office (with hammocks!), excellent work equipment, great desk space, comfortable chairs, plenty of snacks and comfort food and an infinite supply of coffee. We‚Äôre also easygoing and overall pleasant people (well, most of us are) to work with several hours a day, and some of us are even mildly funny.</p>

<!-- more -->

<p>I bid adieu to my coworkers, the coffee machine, the nice desk and the hammocks and traveled abroad to try out being a remote worker (some prefer the term <em>digital nomad</em> ‚Äî to me, it seems a bit preposterous to compare month-long stays in modern urban dwellings with electricity and wireless internet with the traditional nomadic lifestyle) for half a year. A few weeks before leaving, I read the interesting <a href="https://basecamp.com/books/remote">Remote: Office Not Required</a>, which I vividly recommend to anyone considering working remotely. Some of the challenges I faced during my time as a remote worker were foretold by the book, while others were a complete surprise. Here are a few of the things I learned firsthand about remote work:</p>

<h2 id="it-takes-time-toadjust">It takes time to¬†adjust.</h2>

<p>Your mind takes some time to adjust to working remotely. In many ways, working remotely feels like a completely new job‚Ää‚Äî‚Ääeven if you‚Äôve been in the same company and position for years.</p>

<p>Some people have more trouble with this than others, but everyone will take some time to adjust. The important lesson here‚Ää‚Äî‚Ääfor worker <em>and employer</em> ‚Äî is to have patience. Steep as it might be, the learning curve of adapting to remoteness will eventually plateau out.</p>

<h2 id="it-is-easier-when-youre-well-acquainted-with-yourteam">It is easier when you‚Äôre well acquainted with your¬†team.</h2>

<p>Starting a new project‚Ää‚Äî‚Ääbe it a new job or just a new assignment involving different team members‚Ää‚Äî‚Äämay be daunting. Starting remote work already with good rapport with your coworkers helps tremendously, as you will feel more at ease to talk to people.</p>

<p>It is important to feel comfortable enough to let your team know if something is going wrong right away, for example, as opposed to keeping it to yourself and suffer silently. Good rapport between developers also means it will be easier to understand each other when discussing technical problems.</p>

<h2 id="it-is-easier-when-youre-not-the-only-remoteperson"><strong>It is easier when you‚Äôre not the only remote¬†person.</strong></h2>

<p>Being ‚Äúthe remote guy‚Äù is a thing. People tend to forget people they don‚Äôt see every day, and you have to be comfortable with the low profile that comes with working remotely.</p>

<p>Having other remote workers in your team helps a bit, creating that nice ‚Äúwe‚Äôre all on the same boat‚Äù feeling.</p>

<h2 id="you-need-to-be-able-to-communicate-verywell">You need to be able to communicate very¬†well.</h2>

<p>A huge part of working as a developer is being able to communicate well with other developers and with normal human beings. A programming genius that isn‚Äôt able to explain what he‚Äôs doing to his non-genius co-workers will likely not be a very good developer overall.</p>

<p>Language is one of man‚Äôs great achievements as a species, and it carries the weight and complexity of thousands of years of mutation. Expressing yourself verbally is hard enough, but we also have a myriad of non-verbal communication cues that we unconsciously rely on to communicate with one another‚Ää‚Äî‚Ääwhich you won‚Äôt have as a remote worker (at least most of the times).</p>

<p>Sure, you can occasionally call the HQ and video-chat with someone. But that is just not practical enough most of the times. As a remote worker, I find myself heavily relying on written communication with the rest of the team.</p>

<p>Every challenge brings a chance to learn something. Because of the challenges and limitations of working remotely, the experience helps you grow professionally in some ways:</p>

<ul>
  <li>Guidance from more experienced coworkers or bosses is much more rarefied, which force you to exercise self-teaching and pro-activity.</li>
  <li>The need to communicate more often through asynchronous text-first chats helps you develop language skills (and patience).</li>
  <li>Working away from the office and your coworkers makes you appreciate them more when eventually returning to the HQ.</li>
</ul>

<p>Of course, there are many other benefits that come to mind when thinking about remote work, such <a href="https://www.thriveglobal.com/stories/30386-a-2-year-stanford-study-shows-the-astonishing-productivity-boost-of-working-from-home">as increased productivity and financial savings</a>, and there are already studies and books that got those covered. Which is not to say that remote work is some kind of panacea: it has fundamental disadvantages when compared with traditional work inside a brick-and-mortar office building, the most obvious and important being the lack of human contact with your fellow workers. The solitude and heavy reliance on written, asynchronous communication that often comes with remote work might not be your cup of tea.</p>

<p>Remote work is neither a universal solution nor something completely out of reach for the average developer. Although it won‚Äôt be to everyone‚Äôs taste, it is definitively available to everyone (or should be). This semester abroad taught me that it is plainly possible and viable for a developer in a small, non-remote (but remote-friendly) software company to work far away from the HQ, and both sides have a lot to gain from the experience. It is really a win-win scenario, and people should try it more often.</p>

<p>By <a href="https://medium.com/@lbrito">Leonardo Brito</a> on <a href="https://medium.com/p/ce9e39645f85">June 12, 2018</a>.</p>

<p><a href="https://medium.com/@lbrito/working-remotely-in-a-non-remote-company-ce9e39645f85">Canonical link</a></p>

<p>Exported from <a href="https://medium.com">Medium</a> on May 1, 2019.</p>
;
T;U;[0I"f"<!DOCTYPE html><html lang="en"><head>
    <meta charset="utf-8">
    <title>A Developer's Notebook - Working remotely in a non-remote company</title>
    <link rel="stylesheet" href="https://unpkg.com/purecss@1.0.1/build/pure-min.css" integrity="sha384-oAOxQR6DkCoMliIh8yFnu25d7Eq/PHS21PClpwjOTeU2jRSq11vu66rf90/cZr47" crossorigin="anonymous">
    <link rel="stylesheet" href="../../assets/stylesheet.css">
    <link rel="stylesheet" href="../../assets/highlight.css">

    <!-- you don't need to keep this, but it's cool for stats! -->
    <meta name="generator" content="Nanoc 4.11.9">
  </head>
  <body>
    <div id="layout">
      <div class="header">
        <h1>
          <a href="../../">A Developer's Notebook</a>
        </h1>
      </div>


      <div class="content">
        <nav class="pure-g">
          <div class="pure-u-2-3 links">
            <a href="../../index.html">Home</a> ¬∑
            <a href="../../tags.html">Tags</a> ¬∑
            <a href="../../years.html">Years</a> ¬∑
            <a href="../../about.html">About</a>
          </div>

          <div class="pure-u-1-3">
            <div class="contact">
              <span>
                <a href="https://github.com/lbrito1" download="">
                  <img src="../../assets/icons/github.svg" alt="Github icon">
                  </a>
              </span>
              <span>
                <a href="https://www.linkedin.com/in/leonardo-mendes-brito/">
                <img src="../../assets/icons/linkedin.svg" alt="LinkedIn icon">
                </a>
              </span>
            </div>
          </div>
        </nav>
        
  <div class="post-show">
    <h1>Working remotely in a non-remote company</h1>
    <article class="text">
      <p><img src="../../assets/images/goiabada/1*mgVZOuAHmp9Ipm2asL0IQQ.jpg" alt=""></p>

<p>We‚Äôre a small team here at Guava, and we‚Äôve always considered ourselves <em>remote friendly.</em> Most of us work remotely every now and then pushed by varied <em>force majeure</em> situations‚Äî be it the flu, the need to supervise renovation or construction work at home, flash floods near the office, receiving guests at home or any number of other situations. We‚Äôve also had a few of us working remotely for a few days or weeks while traveling to or back from a conference, or when visiting relatives that live out of town. In other words, remote working has always been a very temporary and circumstantial thing among us.</p>

<p>We have a nice office (with hammocks!), excellent work equipment, great desk space, comfortable chairs, plenty of snacks and comfort food and an infinite supply of coffee. We‚Äôre also easygoing and overall pleasant people (well, most of us are) to work with several hours a day, and some of us are even mildly funny.</p>

<!-- more -->

<p>I bid adieu to my coworkers, the coffee machine, the nice desk and the hammocks and traveled abroad to try out being a remote worker (some prefer the term <em>digital nomad</em> ‚Äî to me, it seems a bit preposterous to compare month-long stays in modern urban dwellings with electricity and wireless internet with the traditional nomadic lifestyle) for half a year. A few weeks before leaving, I read the interesting <a href="https://basecamp.com/books/remote">Remote: Office Not Required</a>, which I vividly recommend to anyone considering working remotely. Some of the challenges I faced during my time as a remote worker were foretold by the book, while others were a complete surprise. Here are a few of the things I learned firsthand about remote work:</p>

<h2 id="it-takes-time-toadjust">It takes time to&nbsp;adjust.</h2>

<p>Your mind takes some time to adjust to working remotely. In many ways, working remotely feels like a completely new job‚Ää‚Äî‚Ääeven if you‚Äôve been in the same company and position for years.</p>

<p>Some people have more trouble with this than others, but everyone will take some time to adjust. The important lesson here‚Ää‚Äî‚Ääfor worker <em>and employer</em> ‚Äî is to have patience. Steep as it might be, the learning curve of adapting to remoteness will eventually plateau out.</p>

<h2 id="it-is-easier-when-youre-well-acquainted-with-yourteam">It is easier when you‚Äôre well acquainted with your&nbsp;team.</h2>

<p>Starting a new project‚Ää‚Äî‚Ääbe it a new job or just a new assignment involving different team members‚Ää‚Äî‚Äämay be daunting. Starting remote work already with good rapport with your coworkers helps tremendously, as you will feel more at ease to talk to people.</p>

<p>It is important to feel comfortable enough to let your team know if something is going wrong right away, for example, as opposed to keeping it to yourself and suffer silently. Good rapport between developers also means it will be easier to understand each other when discussing technical problems.</p>

<h2 id="it-is-easier-when-youre-not-the-only-remoteperson"><strong>It is easier when you‚Äôre not the only remote&nbsp;person.</strong></h2>

<p>Being ‚Äúthe remote guy‚Äù is a thing. People tend to forget people they don‚Äôt see every day, and you have to be comfortable with the low profile that comes with working remotely.</p>

<p>Having other remote workers in your team helps a bit, creating that nice ‚Äúwe‚Äôre all on the same boat‚Äù feeling.</p>

<h2 id="you-need-to-be-able-to-communicate-verywell">You need to be able to communicate very&nbsp;well.</h2>

<p>A huge part of working as a developer is being able to communicate well with other developers and with normal human beings. A programming genius that isn‚Äôt able to explain what he‚Äôs doing to his non-genius co-workers will likely not be a very good developer overall.</p>

<p>Language is one of man‚Äôs great achievements as a species, and it carries the weight and complexity of thousands of years of mutation. Expressing yourself verbally is hard enough, but we also have a myriad of non-verbal communication cues that we unconsciously rely on to communicate with one another‚Ää‚Äî‚Ääwhich you won‚Äôt have as a remote worker (at least most of the times).</p>

<p>Sure, you can occasionally call the HQ and video-chat with someone. But that is just not practical enough most of the times. As a remote worker, I find myself heavily relying on written communication with the rest of the team.</p>

<p>Every challenge brings a chance to learn something. Because of the challenges and limitations of working remotely, the experience helps you grow professionally in some ways:</p>

<ul>
  <li>Guidance from more experienced coworkers or bosses is much more rarefied, which force you to exercise self-teaching and pro-activity.</li>
  <li>The need to communicate more often through asynchronous text-first chats helps you develop language skills (and patience).</li>
  <li>Working away from the office and your coworkers makes you appreciate them more when eventually returning to the HQ.</li>
</ul>

<p>Of course, there are many other benefits that come to mind when thinking about remote work, such <a href="https://www.thriveglobal.com/stories/30386-a-2-year-stanford-study-shows-the-astonishing-productivity-boost-of-working-from-home">as increased productivity and financial savings</a>, and there are already studies and books that got those covered. Which is not to say that remote work is some kind of panacea: it has fundamental disadvantages when compared with traditional work inside a brick-and-mortar office building, the most obvious and important being the lack of human contact with your fellow workers. The solitude and heavy reliance on written, asynchronous communication that often comes with remote work might not be your cup of tea.</p>

<p>Remote work is neither a universal solution nor something completely out of reach for the average developer. Although it won‚Äôt be to everyone‚Äôs taste, it is definitively available to everyone (or should be). This semester abroad taught me that it is plainly possible and viable for a developer in a small, non-remote (but remote-friendly) software company to work far away from the HQ, and both sides have a lot to gain from the experience. It is really a win-win scenario, and people should try it more often.</p>

<p>By <a href="https://medium.com/@lbrito">Leonardo Brito</a> on <a href="https://medium.com/p/ce9e39645f85">June 12, 2018</a>.</p>

<p><a href="https://medium.com/@lbrito/working-remotely-in-a-non-remote-company-ce9e39645f85">Canonical link</a></p>

<p>Exported from <a href="https://medium.com">Medium</a> on May 1, 2019.</p>

    </article>
    <aside>Posted at: Jun 12, 2018</aside>
    <div class="post-footer">
      <a href="../../index.html">Back</a>
    </div>
  </div>

        <div class="footer">
          2020 Leonardo Brito
        </div>
      </div>

    </div>
  


</body></html>;
T;@};@}o;;;;	I"'/posts/2019-08-21-creating-more.md;
T{;{
;U;[I"I/home/carol/workspace/blog/content/posts/2019-08-21-creating-more.md;
TI"0I began blogging in the now prehistoric late 2000s.

I've done a few blogs about different subjects (computer science, algorithms, web development, short stories and political ramblings). I've had blogs on Blogspot, Wordpress and, more recently, Medium.

Those platforms were (or are, I suppose) an easy way to spew your ideas over the Internet while also being nice and comfy for other people to actually read (this last point is important for the CSS-challenged such as yours truly). In other words, those services Got Shit Done‚Ñ¢.

<!-- more -->

Alas, as I opened my eyes to the wonders of web development I started noticing a few things. First, Wordpress is written in PHP, which is gross (just kidding). Second, you don't really control much: you can pick themes or whatever, but you won't have the full control you'd have by creating a website from scratch or nearly scratch. Third, and maybe a corollary to the previous point, that stuff is *bloated*. There's approximately 3 terabytes of mostly useless JavaScript, ads and all kind of crap I don't care about.

But most importantly, I understood the hidden costs of most "free" web services. You don't really own anything. You provide content, and Wordpress or Google or whoever package that content into a neat bundle and servce it to your audience together with whatever else (*cough, trackers*) they see fit.

That's one of the reasons that pushed me towards a less-walled-garden approach towards blogging. But there's a nother reason as well.

As [many others](https://code.divshot.com/geo-bootstrap/), I have fond memories of the late-90s/early-2000s Web 1.0 Internet. There is something warm and fuzzy about those beautifully terrible Geocities pages. They pierced the eyes of the viewer but were wondrous in a way. As I said, I'm not alone: Web 1.0 nostalgia is definitively [on the rise](https://gizmodo.com/the-great-web-1-0-revival-1651487835).

But why? What is not to like in our world of beautiful walled gardens? Surely it is better than those gross-looking Web 1.0 fan sites about some crappy GameBoy game, right? ...Right?


<%= render('/image.*', src: '/assets/images/fan_page_screenshot.png', alt: 'View of an old website about Pokemon', caption: 'We\'re soooo cooler than this in 2019.') %>

*Wrong.*

Well, in many ways the Internet has of course improved over time. It has useful things like search engines and Wikipedia, and convenient subscription-based entertainment like Netflix. It has a whole bunch of nice stuff I could spend hours blabbering about.

But it also has a lot of problems. At this point there are surely many PhD theses about most of them, so I won't bother. I'm just going to recommend one [New York Times article](https://www.nytimes.com/2019/08/11/world/americas/youtube-brazil.html) that explains how YouTube indirectly helped elect a buffoon that [makes high school-tier penis jokes](https://extra.globo.com/noticias/brasil/bolsonaro-faz-piada-com-oriental-tudo-pequenininho-ai-veja-video-rv1-1-23668287.html) as president of Brazil.

Now, the specific problem with today's Internet that I feel is most relevant regarding blogging is how we're gravitating towards all these "free" services all the time. Medium, for instance, is so *nice looking* that one doesn't even think of perhaps using something else. But what happens when *everyone* uses Medium? First: all the blogs look exactly the same, which is lame. Second, Medium gets all that content and traffic for itself, for free.

Of course, not everyone is skilled enough to build a personal blog from scratch. I am just barely able, as you can see from my lackluster front-end skills (I promise you I'm good on back-end things). So I'm definitively not dismissing the inclusiveness that services like Medium offer.

But as I searched for a way out of the walled gardens and fiddled with [Jekyll](https://jekyllrb.com/) for a while, I figured I might as well just [build something to call my own](https://tjcx.me/posts/consumption-distraction/).

## So I built this.

The goals were to create the simplest possible blogging system with as little fluff as possible. It should meet what I defined as basic blogging needs: list posts, show post, use tags, use images etc. And also not have 3 terabytes of JavaScript split in 90 requests just to show a fancy menu button.

So I started messing with Nanoc, an excellent Ruby library for static page generation, and came up with [this bad boy](https://github.com/lbrito1/sane-blog-builder).

I won't pretend these ideas are new. They aren't! I feel there's been an increasing amount of [Web 1.0 nostalgia](https://code.divshot.com/geo-bootstrap/) going on, and a big part of that is probably fueled by [similar sentiments](https://tjcx.me/posts/consumption-distraction/) as those I described. The [longing for simplicity](https://thebestmotherfucking.website/) in a world of trillions of new JS frameworks is also quite widespread these days.

This small project is nothing special. There are [much better projects](https://github.com/remko/blog-skeleton) [available for free](https://clarkdave.net/2012/02/building-a-static-blog-with-nanoc/) on the Internet done by people that actually know what they're doing with a CSS file. This here is just a tiny vase with some ugly flowers -- it would be ridiculous to compare it to the beautiful walled gardens of Medium or Wordpress. But, ugly as they are, they're **mine**!
;
T;U;[0I"6<p>I began blogging in the now prehistoric late 2000s.</p>

<p>I‚Äôve done a few blogs about different subjects (computer science, algorithms, web development, short stories and political ramblings). I‚Äôve had blogs on Blogspot, Wordpress and, more recently, Medium.</p>

<p>Those platforms were (or are, I suppose) an easy way to spew your ideas over the Internet while also being nice and comfy for other people to actually read (this last point is important for the CSS-challenged such as yours truly). In other words, those services Got Shit Done‚Ñ¢.</p>

<!-- more -->

<p>Alas, as I opened my eyes to the wonders of web development I started noticing a few things. First, Wordpress is written in PHP, which is gross (just kidding). Second, you don‚Äôt really control much: you can pick themes or whatever, but you won‚Äôt have the full control you‚Äôd have by creating a website from scratch or nearly scratch. Third, and maybe a corollary to the previous point, that stuff is <em>bloated</em>. There‚Äôs approximately 3 terabytes of mostly useless JavaScript, ads and all kind of crap I don‚Äôt care about.</p>

<p>But most importantly, I understood the hidden costs of most ‚Äúfree‚Äù web services. You don‚Äôt really own anything. You provide content, and Wordpress or Google or whoever package that content into a neat bundle and servce it to your audience together with whatever else (<em>cough, trackers</em>) they see fit.</p>

<p>That‚Äôs one of the reasons that pushed me towards a less-walled-garden approach towards blogging. But there‚Äôs a nother reason as well.</p>

<p>As <a href="https://code.divshot.com/geo-bootstrap/">many others</a>, I have fond memories of the late-90s/early-2000s Web 1.0 Internet. There is something warm and fuzzy about those beautifully terrible Geocities pages. They pierced the eyes of the viewer but were wondrous in a way. As I said, I‚Äôm not alone: Web 1.0 nostalgia is definitively <a href="https://gizmodo.com/the-great-web-1-0-revival-1651487835">on the rise</a>.</p>

<p>But why? What is not to like in our world of beautiful walled gardens? Surely it is better than those gross-looking Web 1.0 fan sites about some crappy GameBoy game, right? ‚Ä¶Right?</p>

<div class="image-box">
  <div>
    <a href="/assets/images/fan_page_screenshot.png" target="_blank">
      <img src="/assets/images/fan_page_screenshot.png" alt="View of an old website about Pokemon">
    </a>
  </div>
  <div class="image-caption">We're soooo cooler than this in 2019.</div>
</div>

<p><em>Wrong.</em></p>

<p>Well, in many ways the Internet has of course improved over time. It has useful things like search engines and Wikipedia, and convenient subscription-based entertainment like Netflix. It has a whole bunch of nice stuff I could spend hours blabbering about.</p>

<p>But it also has a lot of problems. At this point there are surely many PhD theses about most of them, so I won‚Äôt bother. I‚Äôm just going to recommend one <a href="https://www.nytimes.com/2019/08/11/world/americas/youtube-brazil.html">New York Times article</a> that explains how YouTube indirectly helped elect a buffoon that <a href="https://extra.globo.com/noticias/brasil/bolsonaro-faz-piada-com-oriental-tudo-pequenininho-ai-veja-video-rv1-1-23668287.html">makes high school-tier penis jokes</a> as president of Brazil.</p>

<p>Now, the specific problem with today‚Äôs Internet that I feel is most relevant regarding blogging is how we‚Äôre gravitating towards all these ‚Äúfree‚Äù services all the time. Medium, for instance, is so <em>nice looking</em> that one doesn‚Äôt even think of perhaps using something else. But what happens when <em>everyone</em> uses Medium? First: all the blogs look exactly the same, which is lame. Second, Medium gets all that content and traffic for itself, for free.</p>

<p>Of course, not everyone is skilled enough to build a personal blog from scratch. I am just barely able, as you can see from my lackluster front-end skills (I promise you I‚Äôm good on back-end things). So I‚Äôm definitively not dismissing the inclusiveness that services like Medium offer.</p>

<p>But as I searched for a way out of the walled gardens and fiddled with <a href="https://jekyllrb.com/">Jekyll</a> for a while, I figured I might as well just <a href="https://tjcx.me/posts/consumption-distraction/">build something to call my own</a>.</p>

<h2 id="so-i-built-this">So I built this.</h2>

<p>The goals were to create the simplest possible blogging system with as little fluff as possible. It should meet what I defined as basic blogging needs: list posts, show post, use tags, use images etc. And also not have 3 terabytes of JavaScript split in 90 requests just to show a fancy menu button.</p>

<p>So I started messing with Nanoc, an excellent Ruby library for static page generation, and came up with <a href="https://github.com/lbrito1/sane-blog-builder">this bad boy</a>.</p>

<p>I won‚Äôt pretend these ideas are new. They aren‚Äôt! I feel there‚Äôs been an increasing amount of <a href="https://code.divshot.com/geo-bootstrap/">Web 1.0 nostalgia</a> going on, and a big part of that is probably fueled by <a href="https://tjcx.me/posts/consumption-distraction/">similar sentiments</a> as those I described. The <a href="https://thebestmotherfucking.website/">longing for simplicity</a> in a world of trillions of new JS frameworks is also quite widespread these days.</p>

<p>This small project is nothing special. There are <a href="https://github.com/remko/blog-skeleton">much better projects</a> <a href="https://clarkdave.net/2012/02/building-a-static-blog-with-nanoc/">available for free</a> on the Internet done by people that actually know what they‚Äôre doing with a CSS file. This here is just a tiny vase with some ugly flowers ‚Äì it would be ridiculous to compare it to the beautiful walled gardens of Medium or Wordpress. But, ugly as they are, they‚Äôre <strong>mine</strong>!</p>
;
T;U;[0I"<!DOCTYPE html><html lang="en"><head>
    <meta charset="utf-8">
    <title>A Developer's Notebook - My attempt at creating more</title>
    <link rel="stylesheet" href="https://unpkg.com/purecss@1.0.1/build/pure-min.css" integrity="sha384-oAOxQR6DkCoMliIh8yFnu25d7Eq/PHS21PClpwjOTeU2jRSq11vu66rf90/cZr47" crossorigin="anonymous">
    <link rel="stylesheet" href="../../assets/stylesheet.css">
    <link rel="stylesheet" href="../../assets/highlight.css">

    <!-- you don't need to keep this, but it's cool for stats! -->
    <meta name="generator" content="Nanoc 4.11.9">
  </head>
  <body>
    <div id="layout">
      <div class="header">
        <h1>
          <a href="../../">A Developer's Notebook</a>
        </h1>
      </div>


      <div class="content">
        <nav class="pure-g">
          <div class="pure-u-2-3 links">
            <a href="../../index.html">Home</a> ¬∑
            <a href="../../tags.html">Tags</a> ¬∑
            <a href="../../years.html">Years</a> ¬∑
            <a href="../../about.html">About</a>
          </div>

          <div class="pure-u-1-3">
            <div class="contact">
              <span>
                <a href="https://github.com/lbrito1" download="">
                  <img src="../../assets/icons/github.svg" alt="Github icon">
                  </a>
              </span>
              <span>
                <a href="https://www.linkedin.com/in/leonardo-mendes-brito/">
                <img src="../../assets/icons/linkedin.svg" alt="LinkedIn icon">
                </a>
              </span>
            </div>
          </div>
        </nav>
        
  <div class="post-show">
    <h1>My attempt at creating more</h1>
    <article class="text">
      <p>I began blogging in the now prehistoric late 2000s.</p>

<p>I‚Äôve done a few blogs about different subjects (computer science, algorithms, web development, short stories and political ramblings). I‚Äôve had blogs on Blogspot, Wordpress and, more recently, Medium.</p>

<p>Those platforms were (or are, I suppose) an easy way to spew your ideas over the Internet while also being nice and comfy for other people to actually read (this last point is important for the CSS-challenged such as yours truly). In other words, those services Got Shit Done‚Ñ¢.</p>

<!-- more -->

<p>Alas, as I opened my eyes to the wonders of web development I started noticing a few things. First, Wordpress is written in PHP, which is gross (just kidding). Second, you don‚Äôt really control much: you can pick themes or whatever, but you won‚Äôt have the full control you‚Äôd have by creating a website from scratch or nearly scratch. Third, and maybe a corollary to the previous point, that stuff is <em>bloated</em>. There‚Äôs approximately 3 terabytes of mostly useless JavaScript, ads and all kind of crap I don‚Äôt care about.</p>

<p>But most importantly, I understood the hidden costs of most ‚Äúfree‚Äù web services. You don‚Äôt really own anything. You provide content, and Wordpress or Google or whoever package that content into a neat bundle and servce it to your audience together with whatever else (<em>cough, trackers</em>) they see fit.</p>

<p>That‚Äôs one of the reasons that pushed me towards a less-walled-garden approach towards blogging. But there‚Äôs a nother reason as well.</p>

<p>As <a href="https://code.divshot.com/geo-bootstrap/">many others</a>, I have fond memories of the late-90s/early-2000s Web 1.0 Internet. There is something warm and fuzzy about those beautifully terrible Geocities pages. They pierced the eyes of the viewer but were wondrous in a way. As I said, I‚Äôm not alone: Web 1.0 nostalgia is definitively <a href="https://gizmodo.com/the-great-web-1-0-revival-1651487835">on the rise</a>.</p>

<p>But why? What is not to like in our world of beautiful walled gardens? Surely it is better than those gross-looking Web 1.0 fan sites about some crappy GameBoy game, right? ‚Ä¶Right?</p>

<div class="image-box">
  <div>
    <a href="../../assets/images/fan_page_screenshot.png" target="_blank">
      <img src="../../assets/images/fan_page_screenshot.png" alt="View of an old website about Pokemon">
    </a>
  </div>
  <div class="image-caption">We're soooo cooler than this in 2019.</div>
</div>

<p><em>Wrong.</em></p>

<p>Well, in many ways the Internet has of course improved over time. It has useful things like search engines and Wikipedia, and convenient subscription-based entertainment like Netflix. It has a whole bunch of nice stuff I could spend hours blabbering about.</p>

<p>But it also has a lot of problems. At this point there are surely many PhD theses about most of them, so I won‚Äôt bother. I‚Äôm just going to recommend one <a href="https://www.nytimes.com/2019/08/11/world/americas/youtube-brazil.html">New York Times article</a> that explains how YouTube indirectly helped elect a buffoon that <a href="https://extra.globo.com/noticias/brasil/bolsonaro-faz-piada-com-oriental-tudo-pequenininho-ai-veja-video-rv1-1-23668287.html">makes high school-tier penis jokes</a> as president of Brazil.</p>

<p>Now, the specific problem with today‚Äôs Internet that I feel is most relevant regarding blogging is how we‚Äôre gravitating towards all these ‚Äúfree‚Äù services all the time. Medium, for instance, is so <em>nice looking</em> that one doesn‚Äôt even think of perhaps using something else. But what happens when <em>everyone</em> uses Medium? First: all the blogs look exactly the same, which is lame. Second, Medium gets all that content and traffic for itself, for free.</p>

<p>Of course, not everyone is skilled enough to build a personal blog from scratch. I am just barely able, as you can see from my lackluster front-end skills (I promise you I‚Äôm good on back-end things). So I‚Äôm definitively not dismissing the inclusiveness that services like Medium offer.</p>

<p>But as I searched for a way out of the walled gardens and fiddled with <a href="https://jekyllrb.com/">Jekyll</a> for a while, I figured I might as well just <a href="https://tjcx.me/posts/consumption-distraction/">build something to call my own</a>.</p>

<h2 id="so-i-built-this">So I built this.</h2>

<p>The goals were to create the simplest possible blogging system with as little fluff as possible. It should meet what I defined as basic blogging needs: list posts, show post, use tags, use images etc. And also not have 3 terabytes of JavaScript split in 90 requests just to show a fancy menu button.</p>

<p>So I started messing with Nanoc, an excellent Ruby library for static page generation, and came up with <a href="https://github.com/lbrito1/sane-blog-builder">this bad boy</a>.</p>

<p>I won‚Äôt pretend these ideas are new. They aren‚Äôt! I feel there‚Äôs been an increasing amount of <a href="https://code.divshot.com/geo-bootstrap/">Web 1.0 nostalgia</a> going on, and a big part of that is probably fueled by <a href="https://tjcx.me/posts/consumption-distraction/">similar sentiments</a> as those I described. The <a href="https://thebestmotherfucking.website/">longing for simplicity</a> in a world of trillions of new JS frameworks is also quite widespread these days.</p>

<p>This small project is nothing special. There are <a href="https://github.com/remko/blog-skeleton">much better projects</a> <a href="https://clarkdave.net/2012/02/building-a-static-blog-with-nanoc/">available for free</a> on the Internet done by people that actually know what they‚Äôre doing with a CSS file. This here is just a tiny vase with some ugly flowers ‚Äì it would be ridiculous to compare it to the beautiful walled gardens of Medium or Wordpress. But, ugly as they are, they‚Äôre <strong>mine</strong>!</p>

    </article>
    <aside>Posted at: Aug 29, 2019</aside>
    <div class="post-footer">
      <a href="../../index.html">Back</a>
    </div>
  </div>

        <div class="footer">
          2020 Leonardo Brito
        </div>
      </div>

    </div>
  


</body></html>;
T;@ã;@ão;;;;	I"B/posts/2018-03-05-the-5-stages-of-dealing-with-legacy-code.md;
T{;{
;U;[I"d/home/carol/workspace/blog/content/posts/2018-03-05-the-5-stages-of-dealing-with-legacy-code.md;
TI"Õ#Yes, this article will use the [5 stages of grief](https://en.wikipedia.org/wiki/K%C3%BCbler-Ross_model) as an analogy for something software development-related. There are at least a few thousand other articles with a similar motif (424,000 results for "grief stages software" according to [Google](https://www.google.es/search?q=grief+stages+software&oq=grief+stages+software)). But bear with me for the next 5 minutes and I promise you'll get something out of this‚Ää‚Äî‚Ääif nothing else, at least the smirk of those who read their past follies put on text by someone else.

I have been working on a rather big Rails project for the past year and half. The project is nearly 7 years old, and has an all-too-common successful-startup-bought-by-industry-giant background story. In a project with this kind of background, some things are bound to happen: many developers of many skill ranges have come and gone, many software fads (cough, Meteor, cough), and above all else _a lot_ of legacy code that is, well, let's put it nicely, _not so great_. None of this should be taken personally in any way‚Ää‚Äî‚Ääit is just natural for such things to occur in such projects.

<!-- more -->

These kinds of projects might be a bit unwelcoming and overwhelming to newcomers. In particular, the aforementioned _not so great_ legacy code might become a huge source of distress for the developer. Some degree of unpleasantness is probably unavoidable in any real-world software project, but choosing to deal with _not so great_ code in a productive, edifying way definitively helps to alleviate the potential nastinesses of working on legacy projects.

Let us begin our analogy. The backstory is that you, dear reader, are assigned to work on a monolithic web app which is company X's flagship product. It has been live for 5+ years and has thousands of customers. Three dozen developers have helped build the app over the years. The monolith uses a certain web framework since one of its earliest versions, and the team has haphazardly updated it to the latest stable version every once in a while. Leftovers are everywhere, and you have no clue if something is mission-critical code or just the remains of a failed, forgotten or otherwise removed feature or experiment. You are dumbstruck at the gigantic code-spaghetti and say to yourself:

## Nope, this can‚Äôt be right. I‚Äôm just going to ignore it and it‚Äôll go¬†away.

> This code is just so terrible, confusing or complex. I just can‚Äôt fathom any of it. It just can‚Äôt be right. It surely wasn't meant for a human being to understand. I'm going to ignore it for a while so it can go away and get replaced by something nice and shiny.

You're in **Denial**. Take all the time you want‚Ää‚Äî‚Ääby the end of the day, the same code will still remain committed. Instead of ignoring it, take a deep breath and spend a couple of hours reading and trying to understand it. This is easier said than done for many reasons: the domain of your software might be complex, and thus the code might be as well; the code might be excessively complex or over-engineered; your employer might not be so keen of waiting for you to grasp the intricacies of some small code section; you might feel bad for not delivering the same performance you had on the last project/feature, when you were right up there in the productivity plateau and so on. Alas, the problem remains: at some point you will have to grasp the meaning of that code, even though it is pretty terrible.

Time, patience and an understanding employer are the only things you need to get through. It also helps to have a senior coworker in this project that can guide you through the process. After some time you will begin to understand the codebase. You might start thinking that:

## I hate¬†this.

> Ugh, _now_ I get it. Now I can see how the code is badly written, so underoptimized, naive or otherwise **plain wrong**. What on Earth were they _thinking_? This statement is so non-idiomatic it seems like another programming language; this query is so unnecessarily slow that I could go for a walk while the DB toils away; this Javascript is so ugly it could be used as a your-mom joke;¬†‚Ä¶

**Anger** is what follows when you finally get just how bad the code really is. I don't know if everything happens for a reason, but I believe every line of code exists for a reason‚Ää‚Äî‚Ääbad code included. [Very rarely](https://softwareengineering.stackexchange.com/questions/7530/how-do-you-deal-with-intentionally-bad-code) it is the case that a developer knowingly chose to make a bad decision. More often:

The developer might have been inexperienced, tired or overworked. The idiom of your programming language might have changed. The specifications might have changed mid-development. The libraries that are mature and well-known today might have not even existed. So much could have happened that explains why the code is the way it is.

It is fine to try to understand the reason something is written the way it is, but try to resist the urge of blaming someone out of anger over the wretchedness of their code (you might find yourself in their shoes some day!). Once you decide not to `git blame`all the time, you might start avoiding the elephant in the room:

## I‚Äôm just going to write this new feature and everything will be¬†fine.

> I know the old code exists, but I'm just going to pretend it doesn't for a while. I don't want to deal with this right now. Besides, I don't even know where to start, or whether I should start at all‚Ä¶ is refactoring worth the trouble? Is it even possible?

If you have the luxury of picking your own assignments, then it might be tempting to do some **bargaining** and just ignore the bad legacy code for a while, promising to refactor some of it later‚Äî which is totally fine. At least for some time. But the problem never solves itself, and delaying improvements might have some nasty long term consequences. Once you start working around the limitations of bad code instead of addressing its problems, you are actually contributing to its evil legacy by creating more unwanted dependencies, more nonsensical interfaces, more unnecessarily complex methods, etc.

But you can't avoid the smelly code forever. One of these days, your boss will assign you to a certain issue‚Ä¶


## I've been assigned to solve this issue which relates to some nasty old code and I'm miserable.

> I can't believe I've been assigned to improve this legacy stuff‚Ää‚Äî‚ÄäI've successfully avoided it for months now! This just _sucks_.

You knew what was coming towards your plate for some time, but now that it's finally here, you're suddenly **depressed**. That's fine too, but don't fall into self-pity: having to deal with bad code might greatly benefit your knowledge as a software developer. Think of it as _having room for improvement._ Which nicely leads us to‚Ä¶

## Hmmm, maybe I can improve¬†things‚Ä¶

> Wait a minute, I think I know how to improve this‚Ä¶

This is the a-ha! moment. You **accept** the reality of legacy code, and instead of mulling over how bad it is, you realize that those columns‚Ää‚Äî‚Ääor tables‚Ää‚Äî‚Ääare useless, that those dependencies are no longer used, that there are many methods that are now superfluous, and so on. The tipping point here is when you gain enough knowledge of the codebase to start systematically questioning why the code is the way it is‚Ää‚Äî‚Ääand not just assuming that it is right, or that all of it is necessary.

This last stage of legacy code grief takes, of course, the most time to arrive. In my case it started arriving many months into the project, when I found out a few ways to optimize our spec suite which [resulted in a 41% speedup in CI execution](https://goiabada.blog/improving-spec-speed-in-a-huge-old-rails-app-8f3ab05a33f9). As time passes and I understand the project more deeply, new ideas of how to optimize or otherwise improve some part of it start popping up more naturally. Eventually you reach a point in which you can see bad code more as an opportunity to improve something (and maybe learn something new in the process) or even try out different solutions or technologies rather than a huge grief you have to deal with as a part of your day job.

## It's all part of the¬†process

Working on a legacy project might not be as exciting as building a shiny new software from scratch, but it has its own merits. Unlike working on something new, on a legacy project you will need to understand how _other people_ solved some problem‚Ää‚Äî‚Ääwhich includes understanding all the limitations they might have had at that time. It is also a humbling experience: the bright glow of hindsight exposes all the scars of bad programming and bad decisions made in the past, and if you're being honest with yourself you'll have no other option than to admit that _it could have been you_.

By [Leonardo Brito](https://medium.com/@lbrito) on [March 5, 2018](https://medium.com/p/6d578205beeb).

[Canonical link](https://medium.com/@lbrito/the-5-stages-of-dealing-with-legacy-code-6d578205beeb)

Exported from [Medium](https://medium.com) on May 1, 2019.
;
T;U;[0I"å'<p>Yes, this article will use the <a href="https://en.wikipedia.org/wiki/K%C3%BCbler-Ross_model">5 stages of grief</a> as an analogy for something software development-related. There are at least a few thousand other articles with a similar motif (424,000 results for ‚Äúgrief stages software‚Äù according to <a href="https://www.google.es/search?q=grief+stages+software&amp;oq=grief+stages+software">Google</a>). But bear with me for the next 5 minutes and I promise you‚Äôll get something out of this‚Ää‚Äî‚Ääif nothing else, at least the smirk of those who read their past follies put on text by someone else.</p>

<p>I have been working on a rather big Rails project for the past year and half. The project is nearly 7 years old, and has an all-too-common successful-startup-bought-by-industry-giant background story. In a project with this kind of background, some things are bound to happen: many developers of many skill ranges have come and gone, many software fads (cough, Meteor, cough), and above all else <em>a lot</em> of legacy code that is, well, let‚Äôs put it nicely, <em>not so great</em>. None of this should be taken personally in any way‚Ää‚Äî‚Ääit is just natural for such things to occur in such projects.</p>

<!-- more -->

<p>These kinds of projects might be a bit unwelcoming and overwhelming to newcomers. In particular, the aforementioned <em>not so great</em> legacy code might become a huge source of distress for the developer. Some degree of unpleasantness is probably unavoidable in any real-world software project, but choosing to deal with <em>not so great</em> code in a productive, edifying way definitively helps to alleviate the potential nastinesses of working on legacy projects.</p>

<p>Let us begin our analogy. The backstory is that you, dear reader, are assigned to work on a monolithic web app which is company X‚Äôs flagship product. It has been live for 5+ years and has thousands of customers. Three dozen developers have helped build the app over the years. The monolith uses a certain web framework since one of its earliest versions, and the team has haphazardly updated it to the latest stable version every once in a while. Leftovers are everywhere, and you have no clue if something is mission-critical code or just the remains of a failed, forgotten or otherwise removed feature or experiment. You are dumbstruck at the gigantic code-spaghetti and say to yourself:</p>

<h2 id="nope-this-cant-be-right-im-just-going-to-ignore-it-and-itll-goaway">Nope, this can‚Äôt be right. I‚Äôm just going to ignore it and it‚Äôll go¬†away.</h2>

<blockquote>
  <p>This code is just so terrible, confusing or complex. I just can‚Äôt fathom any of it. It just can‚Äôt be right. It surely wasn‚Äôt meant for a human being to understand. I‚Äôm going to ignore it for a while so it can go away and get replaced by something nice and shiny.</p>
</blockquote>

<p>You‚Äôre in <strong>Denial</strong>. Take all the time you want‚Ää‚Äî‚Ääby the end of the day, the same code will still remain committed. Instead of ignoring it, take a deep breath and spend a couple of hours reading and trying to understand it. This is easier said than done for many reasons: the domain of your software might be complex, and thus the code might be as well; the code might be excessively complex or over-engineered; your employer might not be so keen of waiting for you to grasp the intricacies of some small code section; you might feel bad for not delivering the same performance you had on the last project/feature, when you were right up there in the productivity plateau and so on. Alas, the problem remains: at some point you will have to grasp the meaning of that code, even though it is pretty terrible.</p>

<p>Time, patience and an understanding employer are the only things you need to get through. It also helps to have a senior coworker in this project that can guide you through the process. After some time you will begin to understand the codebase. You might start thinking that:</p>

<h2 id="i-hatethis">I hate¬†this.</h2>

<blockquote>
  <p>Ugh, <em>now</em> I get it. Now I can see how the code is badly written, so underoptimized, naive or otherwise <strong>plain wrong</strong>. What on Earth were they <em>thinking</em>? This statement is so non-idiomatic it seems like another programming language; this query is so unnecessarily slow that I could go for a walk while the DB toils away; this Javascript is so ugly it could be used as a your-mom joke;¬†‚Ä¶</p>
</blockquote>

<p><strong>Anger</strong> is what follows when you finally get just how bad the code really is. I don‚Äôt know if everything happens for a reason, but I believe every line of code exists for a reason‚Ää‚Äî‚Ääbad code included. <a href="https://softwareengineering.stackexchange.com/questions/7530/how-do-you-deal-with-intentionally-bad-code">Very rarely</a> it is the case that a developer knowingly chose to make a bad decision. More often:</p>

<p>The developer might have been inexperienced, tired or overworked. The idiom of your programming language might have changed. The specifications might have changed mid-development. The libraries that are mature and well-known today might have not even existed. So much could have happened that explains why the code is the way it is.</p>

<p>It is fine to try to understand the reason something is written the way it is, but try to resist the urge of blaming someone out of anger over the wretchedness of their code (you might find yourself in their shoes some day!). Once you decide not to <code>git blame</code>all the time, you might start avoiding the elephant in the room:</p>

<h2 id="im-just-going-to-write-this-new-feature-and-everything-will-befine">I‚Äôm just going to write this new feature and everything will be¬†fine.</h2>

<blockquote>
  <p>I know the old code exists, but I‚Äôm just going to pretend it doesn‚Äôt for a while. I don‚Äôt want to deal with this right now. Besides, I don‚Äôt even know where to start, or whether I should start at all‚Ä¶ is refactoring worth the trouble? Is it even possible?</p>
</blockquote>

<p>If you have the luxury of picking your own assignments, then it might be tempting to do some <strong>bargaining</strong> and just ignore the bad legacy code for a while, promising to refactor some of it later‚Äî which is totally fine. At least for some time. But the problem never solves itself, and delaying improvements might have some nasty long term consequences. Once you start working around the limitations of bad code instead of addressing its problems, you are actually contributing to its evil legacy by creating more unwanted dependencies, more nonsensical interfaces, more unnecessarily complex methods, etc.</p>

<p>But you can‚Äôt avoid the smelly code forever. One of these days, your boss will assign you to a certain issue‚Ä¶</p>

<h2 id="ive-been-assigned-to-solve-this-issue-which-relates-to-some-nasty-old-code-and-im-miserable">I‚Äôve been assigned to solve this issue which relates to some nasty old code and I‚Äôm miserable.</h2>

<blockquote>
  <p>I can‚Äôt believe I‚Äôve been assigned to improve this legacy stuff‚Ää‚Äî‚ÄäI‚Äôve successfully avoided it for months now! This just <em>sucks</em>.</p>
</blockquote>

<p>You knew what was coming towards your plate for some time, but now that it‚Äôs finally here, you‚Äôre suddenly <strong>depressed</strong>. That‚Äôs fine too, but don‚Äôt fall into self-pity: having to deal with bad code might greatly benefit your knowledge as a software developer. Think of it as <em>having room for improvement.</em> Which nicely leads us to‚Ä¶</p>

<h2 id="hmmm-maybe-i-can-improvethings">Hmmm, maybe I can improve¬†things‚Ä¶</h2>

<blockquote>
  <p>Wait a minute, I think I know how to improve this‚Ä¶</p>
</blockquote>

<p>This is the a-ha! moment. You <strong>accept</strong> the reality of legacy code, and instead of mulling over how bad it is, you realize that those columns‚Ää‚Äî‚Ääor tables‚Ää‚Äî‚Ääare useless, that those dependencies are no longer used, that there are many methods that are now superfluous, and so on. The tipping point here is when you gain enough knowledge of the codebase to start systematically questioning why the code is the way it is‚Ää‚Äî‚Ääand not just assuming that it is right, or that all of it is necessary.</p>

<p>This last stage of legacy code grief takes, of course, the most time to arrive. In my case it started arriving many months into the project, when I found out a few ways to optimize our spec suite which <a href="https://goiabada.blog/improving-spec-speed-in-a-huge-old-rails-app-8f3ab05a33f9">resulted in a 41% speedup in CI execution</a>. As time passes and I understand the project more deeply, new ideas of how to optimize or otherwise improve some part of it start popping up more naturally. Eventually you reach a point in which you can see bad code more as an opportunity to improve something (and maybe learn something new in the process) or even try out different solutions or technologies rather than a huge grief you have to deal with as a part of your day job.</p>

<h2 id="its-all-part-of-theprocess">It‚Äôs all part of the¬†process</h2>

<p>Working on a legacy project might not be as exciting as building a shiny new software from scratch, but it has its own merits. Unlike working on something new, on a legacy project you will need to understand how <em>other people</em> solved some problem‚Ää‚Äî‚Ääwhich includes understanding all the limitations they might have had at that time. It is also a humbling experience: the bright glow of hindsight exposes all the scars of bad programming and bad decisions made in the past, and if you‚Äôre being honest with yourself you‚Äôll have no other option than to admit that <em>it could have been you</em>.</p>

<p>By <a href="https://medium.com/@lbrito">Leonardo Brito</a> on <a href="https://medium.com/p/6d578205beeb">March 5, 2018</a>.</p>

<p><a href="https://medium.com/@lbrito/the-5-stages-of-dealing-with-legacy-code-6d578205beeb">Canonical link</a></p>

<p>Exported from <a href="https://medium.com">Medium</a> on May 1, 2019.</p>
;
T;U;[0I"Ç/<!DOCTYPE html><html lang="en"><head>
    <meta charset="utf-8">
    <title>A Developer's Notebook - The 5 stages of dealing with legacy code</title>
    <link rel="stylesheet" href="https://unpkg.com/purecss@1.0.1/build/pure-min.css" integrity="sha384-oAOxQR6DkCoMliIh8yFnu25d7Eq/PHS21PClpwjOTeU2jRSq11vu66rf90/cZr47" crossorigin="anonymous">
    <link rel="stylesheet" href="../../assets/stylesheet.css">
    <link rel="stylesheet" href="../../assets/highlight.css">

    <!-- you don't need to keep this, but it's cool for stats! -->
    <meta name="generator" content="Nanoc 4.11.9">
  </head>
  <body>
    <div id="layout">
      <div class="header">
        <h1>
          <a href="../../">A Developer's Notebook</a>
        </h1>
      </div>


      <div class="content">
        <nav class="pure-g">
          <div class="pure-u-2-3 links">
            <a href="../../index.html">Home</a> ¬∑
            <a href="../../tags.html">Tags</a> ¬∑
            <a href="../../years.html">Years</a> ¬∑
            <a href="../../about.html">About</a>
          </div>

          <div class="pure-u-1-3">
            <div class="contact">
              <span>
                <a href="https://github.com/lbrito1" download="">
                  <img src="../../assets/icons/github.svg" alt="Github icon">
                  </a>
              </span>
              <span>
                <a href="https://www.linkedin.com/in/leonardo-mendes-brito/">
                <img src="../../assets/icons/linkedin.svg" alt="LinkedIn icon">
                </a>
              </span>
            </div>
          </div>
        </nav>
        
  <div class="post-show">
    <h1>The 5 stages of dealing with legacy code</h1>
    <article class="text">
      <p>Yes, this article will use the <a href="https://en.wikipedia.org/wiki/K%C3%BCbler-Ross_model">5 stages of grief</a> as an analogy for something software development-related. There are at least a few thousand other articles with a similar motif (424,000 results for ‚Äúgrief stages software‚Äù according to <a href="https://www.google.es/search?q=grief+stages+software&amp;oq=grief+stages+software">Google</a>). But bear with me for the next 5 minutes and I promise you‚Äôll get something out of this‚Ää‚Äî‚Ääif nothing else, at least the smirk of those who read their past follies put on text by someone else.</p>

<p>I have been working on a rather big Rails project for the past year and half. The project is nearly 7 years old, and has an all-too-common successful-startup-bought-by-industry-giant background story. In a project with this kind of background, some things are bound to happen: many developers of many skill ranges have come and gone, many software fads (cough, Meteor, cough), and above all else <em>a lot</em> of legacy code that is, well, let‚Äôs put it nicely, <em>not so great</em>. None of this should be taken personally in any way‚Ää‚Äî‚Ääit is just natural for such things to occur in such projects.</p>

<!-- more -->

<p>These kinds of projects might be a bit unwelcoming and overwhelming to newcomers. In particular, the aforementioned <em>not so great</em> legacy code might become a huge source of distress for the developer. Some degree of unpleasantness is probably unavoidable in any real-world software project, but choosing to deal with <em>not so great</em> code in a productive, edifying way definitively helps to alleviate the potential nastinesses of working on legacy projects.</p>

<p>Let us begin our analogy. The backstory is that you, dear reader, are assigned to work on a monolithic web app which is company X‚Äôs flagship product. It has been live for 5+ years and has thousands of customers. Three dozen developers have helped build the app over the years. The monolith uses a certain web framework since one of its earliest versions, and the team has haphazardly updated it to the latest stable version every once in a while. Leftovers are everywhere, and you have no clue if something is mission-critical code or just the remains of a failed, forgotten or otherwise removed feature or experiment. You are dumbstruck at the gigantic code-spaghetti and say to yourself:</p>

<h2 id="nope-this-cant-be-right-im-just-going-to-ignore-it-and-itll-goaway">Nope, this can‚Äôt be right. I‚Äôm just going to ignore it and it‚Äôll go&nbsp;away.</h2>

<blockquote>
  <p>This code is just so terrible, confusing or complex. I just can‚Äôt fathom any of it. It just can‚Äôt be right. It surely wasn‚Äôt meant for a human being to understand. I‚Äôm going to ignore it for a while so it can go away and get replaced by something nice and shiny.</p>
</blockquote>

<p>You‚Äôre in <strong>Denial</strong>. Take all the time you want‚Ää‚Äî‚Ääby the end of the day, the same code will still remain committed. Instead of ignoring it, take a deep breath and spend a couple of hours reading and trying to understand it. This is easier said than done for many reasons: the domain of your software might be complex, and thus the code might be as well; the code might be excessively complex or over-engineered; your employer might not be so keen of waiting for you to grasp the intricacies of some small code section; you might feel bad for not delivering the same performance you had on the last project/feature, when you were right up there in the productivity plateau and so on. Alas, the problem remains: at some point you will have to grasp the meaning of that code, even though it is pretty terrible.</p>

<p>Time, patience and an understanding employer are the only things you need to get through. It also helps to have a senior coworker in this project that can guide you through the process. After some time you will begin to understand the codebase. You might start thinking that:</p>

<h2 id="i-hatethis">I hate&nbsp;this.</h2>

<blockquote>
  <p>Ugh, <em>now</em> I get it. Now I can see how the code is badly written, so underoptimized, naive or otherwise <strong>plain wrong</strong>. What on Earth were they <em>thinking</em>? This statement is so non-idiomatic it seems like another programming language; this query is so unnecessarily slow that I could go for a walk while the DB toils away; this Javascript is so ugly it could be used as a your-mom joke;&nbsp;‚Ä¶</p>
</blockquote>

<p><strong>Anger</strong> is what follows when you finally get just how bad the code really is. I don‚Äôt know if everything happens for a reason, but I believe every line of code exists for a reason‚Ää‚Äî‚Ääbad code included. <a href="https://softwareengineering.stackexchange.com/questions/7530/how-do-you-deal-with-intentionally-bad-code">Very rarely</a> it is the case that a developer knowingly chose to make a bad decision. More often:</p>

<p>The developer might have been inexperienced, tired or overworked. The idiom of your programming language might have changed. The specifications might have changed mid-development. The libraries that are mature and well-known today might have not even existed. So much could have happened that explains why the code is the way it is.</p>

<p>It is fine to try to understand the reason something is written the way it is, but try to resist the urge of blaming someone out of anger over the wretchedness of their code (you might find yourself in their shoes some day!). Once you decide not to <code>git blame</code>all the time, you might start avoiding the elephant in the room:</p>

<h2 id="im-just-going-to-write-this-new-feature-and-everything-will-befine">I‚Äôm just going to write this new feature and everything will be&nbsp;fine.</h2>

<blockquote>
  <p>I know the old code exists, but I‚Äôm just going to pretend it doesn‚Äôt for a while. I don‚Äôt want to deal with this right now. Besides, I don‚Äôt even know where to start, or whether I should start at all‚Ä¶ is refactoring worth the trouble? Is it even possible?</p>
</blockquote>

<p>If you have the luxury of picking your own assignments, then it might be tempting to do some <strong>bargaining</strong> and just ignore the bad legacy code for a while, promising to refactor some of it later‚Äî which is totally fine. At least for some time. But the problem never solves itself, and delaying improvements might have some nasty long term consequences. Once you start working around the limitations of bad code instead of addressing its problems, you are actually contributing to its evil legacy by creating more unwanted dependencies, more nonsensical interfaces, more unnecessarily complex methods, etc.</p>

<p>But you can‚Äôt avoid the smelly code forever. One of these days, your boss will assign you to a certain issue‚Ä¶</p>

<h2 id="ive-been-assigned-to-solve-this-issue-which-relates-to-some-nasty-old-code-and-im-miserable">I‚Äôve been assigned to solve this issue which relates to some nasty old code and I‚Äôm miserable.</h2>

<blockquote>
  <p>I can‚Äôt believe I‚Äôve been assigned to improve this legacy stuff‚Ää‚Äî‚ÄäI‚Äôve successfully avoided it for months now! This just <em>sucks</em>.</p>
</blockquote>

<p>You knew what was coming towards your plate for some time, but now that it‚Äôs finally here, you‚Äôre suddenly <strong>depressed</strong>. That‚Äôs fine too, but don‚Äôt fall into self-pity: having to deal with bad code might greatly benefit your knowledge as a software developer. Think of it as <em>having room for improvement.</em> Which nicely leads us to‚Ä¶</p>

<h2 id="hmmm-maybe-i-can-improvethings">Hmmm, maybe I can improve&nbsp;things‚Ä¶</h2>

<blockquote>
  <p>Wait a minute, I think I know how to improve this‚Ä¶</p>
</blockquote>

<p>This is the a-ha! moment. You <strong>accept</strong> the reality of legacy code, and instead of mulling over how bad it is, you realize that those columns‚Ää‚Äî‚Ääor tables‚Ää‚Äî‚Ääare useless, that those dependencies are no longer used, that there are many methods that are now superfluous, and so on. The tipping point here is when you gain enough knowledge of the codebase to start systematically questioning why the code is the way it is‚Ää‚Äî‚Ääand not just assuming that it is right, or that all of it is necessary.</p>

<p>This last stage of legacy code grief takes, of course, the most time to arrive. In my case it started arriving many months into the project, when I found out a few ways to optimize our spec suite which <a href="https://goiabada.blog/improving-spec-speed-in-a-huge-old-rails-app-8f3ab05a33f9">resulted in a 41% speedup in CI execution</a>. As time passes and I understand the project more deeply, new ideas of how to optimize or otherwise improve some part of it start popping up more naturally. Eventually you reach a point in which you can see bad code more as an opportunity to improve something (and maybe learn something new in the process) or even try out different solutions or technologies rather than a huge grief you have to deal with as a part of your day job.</p>

<h2 id="its-all-part-of-theprocess">It‚Äôs all part of the&nbsp;process</h2>

<p>Working on a legacy project might not be as exciting as building a shiny new software from scratch, but it has its own merits. Unlike working on something new, on a legacy project you will need to understand how <em>other people</em> solved some problem‚Ää‚Äî‚Ääwhich includes understanding all the limitations they might have had at that time. It is also a humbling experience: the bright glow of hindsight exposes all the scars of bad programming and bad decisions made in the past, and if you‚Äôre being honest with yourself you‚Äôll have no other option than to admit that <em>it could have been you</em>.</p>

<p>By <a href="https://medium.com/@lbrito">Leonardo Brito</a> on <a href="https://medium.com/p/6d578205beeb">March 5, 2018</a>.</p>

<p><a href="https://medium.com/@lbrito/the-5-stages-of-dealing-with-legacy-code-6d578205beeb">Canonical link</a></p>

<p>Exported from <a href="https://medium.com">Medium</a> on May 1, 2019.</p>

    </article>
    <aside>Posted at: Mar 05, 2018</aside>
    <div class="post-footer">
      <a href="../../index.html">Back</a>
    </div>
  </div>

        <div class="footer">
          2020 Leonardo Brito
        </div>
      </div>

    </div>
  


</body></html>;
T;@ô;@ôo;;;;	I"8/posts/2018-09-03-10-ways-not-to-do-a-big-deploy.md;
T{;{
;U;[I"Z/home/carol/workspace/blog/content/posts/2018-09-03-10-ways-not-to-do-a-big-deploy.md;
TI"õIdeally, deploys should be small, concise, easily revertible, fast and with a small or nil footprint on the database. However, no matter how awesome you are, sometimes that is just unattainable and you end up needing to deploy something that is just the opposite: big, messy, hard to revert, painfully slow and rubbing the DB the wrong way. If the deploy messes with a mission-critical part of your software, all the worse for you.

But there are actually many ways you can make those situations even worse. Here are a few bullet points you can follow to guarantee a nightmarish deploy complete with nasty side-effects that will haunt you and your coworkers for days to come.

<!-- more -->

## 1\. Don't make a¬†plan

Plans suck. They take time and effort, and don't add any new features to your software. Planning a deploy requires thinking carefully about what it should do and, more importantly, what it shouldn't do (but potentially could). A good deploy plan is a step-by-step happy path that is written clearly and concisely, followed by a list of everything nasty that can happen. Making a deploy plan is basically trying to cover as many blind spots as you can before pulling the trigger. But, of course, you and your team are code ninjas or master software crafters or whatever the hippest term is nowadays, and you don't need a plan! Just wing it. Press the button and solve every problem that might arise in an ad-hoc fashion. What could go wrong?

## 2\. Don't schedule¬†downtime

Downtime sucks: it usually is in odd hours, late in the night or early in the morning, when customers are fast asleep (and you would very much like to be as well). Why bother blocking public access and redirecting customers to a nice "scheduled maintenance page"? Why gift you and your team with peace of mind and a clear timeframe to work with if you can feel the rush of breaking stuff in production with live customers? Production debugging is the best kind of debugging! Confuse your customers with inconsistent states and leave them waiting while your team tries to fix those bugs that were definitively fixed last Friday night.

## 3\. Don't have a great log¬†system

Logs are for buggy software, you won't need them. Why spend time and possibly money with a great logging-as-a-service (LaaS) platform? Just have your whole team `ssh` into production and watch the log tails. Or, even better, use a terrible LaaS that is slow, unreliable and has a confusing user interface so everyone can get frustrated trying to find errors during the deploy.

## 4\. Don't have a bug¬†tracker

See above: just like logs, bug trackers are also lame. Your awesome PR won't have any bugs, now, will it? Regressions never happen under your watch. Also, who needs to track exceptions with a great, fast, reliable bug tracking platform when you have logs available? Aren't you hacker enough to `grep` every single exception that might be raised?

## 5\. Don't have a staging¬†server

Staging servers are a waste of resources, both time and money. What is the point of having a close-to-exact copy of your production servers, which by this point are radically different from your development environment? Sure, containerization already _kind of_ abstracts many of those differences, but (hopefully) you have network settings, 3rd-party APIs and other stuff that aren't the same in development, even with containers. So be bold and make the leap from development right to production!

## 6\. Don't check your env¬†vars

Your project only has like 80 different access tokens, API keys, DB credentials and cache store credentials spread over half a dozen YAMLs. Super easy to keep track of and super hard to mess up with your production, development and (hopefully) staging environments. Don't triple-check the variables that might have been changed in the deploy, and you'll secure a few hours of painful debugging in the near future.

## 7\. Don't guarantee data consistency post-deploy

In a previous step you were told already to make sure that customers can keep using your software mid-deploy, so we're halfway there already to guaranteeing poor data consistency. Make sure you haven't mapped out all the points your new code might touch the DB, particularly the DB structure itself. If anything goes wrong, just revert the commit and rollback‚Ää‚Äî‚Äädon't ever worry about becoming orphaned or inconsistent.

## 8\. Don't prepare for a late¬†rollback

If everything else fails‚Ä¶ wait, it won't! Some problems can surface during the deploy, sure, but we won't need to rollback _after_ it is done, right? Right? After everything is settled, and you made a plan (which you totally shouldn't, remember?) and followed it step-by-step, and all went well, you shouldn't need to rollback. But let's say it happens, and a few hours (or days) after the deploy you need to go back to the previous commit/tag/whatever you use. New data will have flowed which might need to be manually converted back to something manageable by the previous version of your software. Don't think about it, don't plan for it‚Ää‚Äî‚Ääit isn't likely to happen. And if it does, you will have a heck of a time working on oddball and edge cases late in the night. What is not to love?

## 9\. Don't communicate efficiently with your¬†team

You already know you should have terrible log and error tracking systems. Add insult to injury and don't talk to your coworkers in a quick, direct and clear way. Long pauses are great for dramatic effect, especially when your coworkers are waiting for a timely answer. Be vague about what you're doing. Hit the rollback button and "forget" to tell people about it. In general, just be as confusing and unavailable as possible.

Following all of the points above might lead to a "perfect storm" situation, and making sure you don't follow them will surely make things easier on you and your team. But even if you have great deploy practices in place, sometimes things just fall apart. There will always be blind spots, and it is in their nature to be more or less unpredictable. That is just the way things are with software development. Which leads us to our 10th and final point in this guide to terrible deploys:

## 10\. Don't be patient and understanding with your coworkers if everything falls¬†apart!

By [Leonardo Brito](https://medium.com/@lbrito) on [September 3, 2018](https://medium.com/p/f536d1ad9a5a).

[Canonical link](https://medium.com/@lbrito/10-ways-not-to-do-a-big-deploy-f536d1ad9a5a)

Exported from [Medium](https://medium.com) on May 1, 2019.
;
T;U;[0I"W<p>Ideally, deploys should be small, concise, easily revertible, fast and with a small or nil footprint on the database. However, no matter how awesome you are, sometimes that is just unattainable and you end up needing to deploy something that is just the opposite: big, messy, hard to revert, painfully slow and rubbing the DB the wrong way. If the deploy messes with a mission-critical part of your software, all the worse for you.</p>

<p>But there are actually many ways you can make those situations even worse. Here are a few bullet points you can follow to guarantee a nightmarish deploy complete with nasty side-effects that will haunt you and your coworkers for days to come.</p>

<!-- more -->

<h2 id="dont-make-aplan">1. Don‚Äôt make a¬†plan</h2>

<p>Plans suck. They take time and effort, and don‚Äôt add any new features to your software. Planning a deploy requires thinking carefully about what it should do and, more importantly, what it shouldn‚Äôt do (but potentially could). A good deploy plan is a step-by-step happy path that is written clearly and concisely, followed by a list of everything nasty that can happen. Making a deploy plan is basically trying to cover as many blind spots as you can before pulling the trigger. But, of course, you and your team are code ninjas or master software crafters or whatever the hippest term is nowadays, and you don‚Äôt need a plan! Just wing it. Press the button and solve every problem that might arise in an ad-hoc fashion. What could go wrong?</p>

<h2 id="dont-scheduledowntime">2. Don‚Äôt schedule¬†downtime</h2>

<p>Downtime sucks: it usually is in odd hours, late in the night or early in the morning, when customers are fast asleep (and you would very much like to be as well). Why bother blocking public access and redirecting customers to a nice ‚Äúscheduled maintenance page‚Äù? Why gift you and your team with peace of mind and a clear timeframe to work with if you can feel the rush of breaking stuff in production with live customers? Production debugging is the best kind of debugging! Confuse your customers with inconsistent states and leave them waiting while your team tries to fix those bugs that were definitively fixed last Friday night.</p>

<h2 id="dont-have-a-great-logsystem">3. Don‚Äôt have a great log¬†system</h2>

<p>Logs are for buggy software, you won‚Äôt need them. Why spend time and possibly money with a great logging-as-a-service (LaaS) platform? Just have your whole team <code>ssh</code> into production and watch the log tails. Or, even better, use a terrible LaaS that is slow, unreliable and has a confusing user interface so everyone can get frustrated trying to find errors during the deploy.</p>

<h2 id="dont-have-a-bugtracker">4. Don‚Äôt have a bug¬†tracker</h2>

<p>See above: just like logs, bug trackers are also lame. Your awesome PR won‚Äôt have any bugs, now, will it? Regressions never happen under your watch. Also, who needs to track exceptions with a great, fast, reliable bug tracking platform when you have logs available? Aren‚Äôt you hacker enough to <code>grep</code> every single exception that might be raised?</p>

<h2 id="dont-have-a-stagingserver">5. Don‚Äôt have a staging¬†server</h2>

<p>Staging servers are a waste of resources, both time and money. What is the point of having a close-to-exact copy of your production servers, which by this point are radically different from your development environment? Sure, containerization already <em>kind of</em> abstracts many of those differences, but (hopefully) you have network settings, 3rd-party APIs and other stuff that aren‚Äôt the same in development, even with containers. So be bold and make the leap from development right to production!</p>

<h2 id="dont-check-your-envvars">6. Don‚Äôt check your env¬†vars</h2>

<p>Your project only has like 80 different access tokens, API keys, DB credentials and cache store credentials spread over half a dozen YAMLs. Super easy to keep track of and super hard to mess up with your production, development and (hopefully) staging environments. Don‚Äôt triple-check the variables that might have been changed in the deploy, and you‚Äôll secure a few hours of painful debugging in the near future.</p>

<h2 id="dont-guarantee-data-consistency-post-deploy">7. Don‚Äôt guarantee data consistency post-deploy</h2>

<p>In a previous step you were told already to make sure that customers can keep using your software mid-deploy, so we‚Äôre halfway there already to guaranteeing poor data consistency. Make sure you haven‚Äôt mapped out all the points your new code might touch the DB, particularly the DB structure itself. If anything goes wrong, just revert the commit and rollback‚Ää‚Äî‚Äädon‚Äôt ever worry about becoming orphaned or inconsistent.</p>

<h2 id="dont-prepare-for-a-laterollback">8. Don‚Äôt prepare for a late¬†rollback</h2>

<p>If everything else fails‚Ä¶ wait, it won‚Äôt! Some problems can surface during the deploy, sure, but we won‚Äôt need to rollback <em>after</em> it is done, right? Right? After everything is settled, and you made a plan (which you totally shouldn‚Äôt, remember?) and followed it step-by-step, and all went well, you shouldn‚Äôt need to rollback. But let‚Äôs say it happens, and a few hours (or days) after the deploy you need to go back to the previous commit/tag/whatever you use. New data will have flowed which might need to be manually converted back to something manageable by the previous version of your software. Don‚Äôt think about it, don‚Äôt plan for it‚Ää‚Äî‚Ääit isn‚Äôt likely to happen. And if it does, you will have a heck of a time working on oddball and edge cases late in the night. What is not to love?</p>

<h2 id="dont-communicate-efficiently-with-yourteam">9. Don‚Äôt communicate efficiently with your¬†team</h2>

<p>You already know you should have terrible log and error tracking systems. Add insult to injury and don‚Äôt talk to your coworkers in a quick, direct and clear way. Long pauses are great for dramatic effect, especially when your coworkers are waiting for a timely answer. Be vague about what you‚Äôre doing. Hit the rollback button and ‚Äúforget‚Äù to tell people about it. In general, just be as confusing and unavailable as possible.</p>

<p>Following all of the points above might lead to a ‚Äúperfect storm‚Äù situation, and making sure you don‚Äôt follow them will surely make things easier on you and your team. But even if you have great deploy practices in place, sometimes things just fall apart. There will always be blind spots, and it is in their nature to be more or less unpredictable. That is just the way things are with software development. Which leads us to our 10th and final point in this guide to terrible deploys:</p>

<h2 id="dont-be-patient-and-understanding-with-your-coworkers-if-everything-fallsapart">10. Don‚Äôt be patient and understanding with your coworkers if everything falls¬†apart!</h2>

<p>By <a href="https://medium.com/@lbrito">Leonardo Brito</a> on <a href="https://medium.com/p/f536d1ad9a5a">September 3, 2018</a>.</p>

<p><a href="https://medium.com/@lbrito/10-ways-not-to-do-a-big-deploy-f536d1ad9a5a">Canonical link</a></p>

<p>Exported from <a href="https://medium.com">Medium</a> on May 1, 2019.</p>
;
T;U;[0I"E$<!DOCTYPE html><html lang="en"><head>
    <meta charset="utf-8">
    <title>A Developer's Notebook - 10 ways not to do a big deploy</title>
    <link rel="stylesheet" href="https://unpkg.com/purecss@1.0.1/build/pure-min.css" integrity="sha384-oAOxQR6DkCoMliIh8yFnu25d7Eq/PHS21PClpwjOTeU2jRSq11vu66rf90/cZr47" crossorigin="anonymous">
    <link rel="stylesheet" href="../../assets/stylesheet.css">
    <link rel="stylesheet" href="../../assets/highlight.css">

    <!-- you don't need to keep this, but it's cool for stats! -->
    <meta name="generator" content="Nanoc 4.11.9">
  </head>
  <body>
    <div id="layout">
      <div class="header">
        <h1>
          <a href="../../">A Developer's Notebook</a>
        </h1>
      </div>


      <div class="content">
        <nav class="pure-g">
          <div class="pure-u-2-3 links">
            <a href="../../index.html">Home</a> ¬∑
            <a href="../../tags.html">Tags</a> ¬∑
            <a href="../../years.html">Years</a> ¬∑
            <a href="../../about.html">About</a>
          </div>

          <div class="pure-u-1-3">
            <div class="contact">
              <span>
                <a href="https://github.com/lbrito1" download="">
                  <img src="../../assets/icons/github.svg" alt="Github icon">
                  </a>
              </span>
              <span>
                <a href="https://www.linkedin.com/in/leonardo-mendes-brito/">
                <img src="../../assets/icons/linkedin.svg" alt="LinkedIn icon">
                </a>
              </span>
            </div>
          </div>
        </nav>
        
  <div class="post-show">
    <h1>10 ways not to do a big deploy</h1>
    <article class="text">
      <p>Ideally, deploys should be small, concise, easily revertible, fast and with a small or nil footprint on the database. However, no matter how awesome you are, sometimes that is just unattainable and you end up needing to deploy something that is just the opposite: big, messy, hard to revert, painfully slow and rubbing the DB the wrong way. If the deploy messes with a mission-critical part of your software, all the worse for you.</p>

<p>But there are actually many ways you can make those situations even worse. Here are a few bullet points you can follow to guarantee a nightmarish deploy complete with nasty side-effects that will haunt you and your coworkers for days to come.</p>

<!-- more -->

<h2 id="dont-make-aplan">1. Don‚Äôt make a&nbsp;plan</h2>

<p>Plans suck. They take time and effort, and don‚Äôt add any new features to your software. Planning a deploy requires thinking carefully about what it should do and, more importantly, what it shouldn‚Äôt do (but potentially could). A good deploy plan is a step-by-step happy path that is written clearly and concisely, followed by a list of everything nasty that can happen. Making a deploy plan is basically trying to cover as many blind spots as you can before pulling the trigger. But, of course, you and your team are code ninjas or master software crafters or whatever the hippest term is nowadays, and you don‚Äôt need a plan! Just wing it. Press the button and solve every problem that might arise in an ad-hoc fashion. What could go wrong?</p>

<h2 id="dont-scheduledowntime">2. Don‚Äôt schedule&nbsp;downtime</h2>

<p>Downtime sucks: it usually is in odd hours, late in the night or early in the morning, when customers are fast asleep (and you would very much like to be as well). Why bother blocking public access and redirecting customers to a nice ‚Äúscheduled maintenance page‚Äù? Why gift you and your team with peace of mind and a clear timeframe to work with if you can feel the rush of breaking stuff in production with live customers? Production debugging is the best kind of debugging! Confuse your customers with inconsistent states and leave them waiting while your team tries to fix those bugs that were definitively fixed last Friday night.</p>

<h2 id="dont-have-a-great-logsystem">3. Don‚Äôt have a great log&nbsp;system</h2>

<p>Logs are for buggy software, you won‚Äôt need them. Why spend time and possibly money with a great logging-as-a-service (LaaS) platform? Just have your whole team <code>ssh</code> into production and watch the log tails. Or, even better, use a terrible LaaS that is slow, unreliable and has a confusing user interface so everyone can get frustrated trying to find errors during the deploy.</p>

<h2 id="dont-have-a-bugtracker">4. Don‚Äôt have a bug&nbsp;tracker</h2>

<p>See above: just like logs, bug trackers are also lame. Your awesome PR won‚Äôt have any bugs, now, will it? Regressions never happen under your watch. Also, who needs to track exceptions with a great, fast, reliable bug tracking platform when you have logs available? Aren‚Äôt you hacker enough to <code>grep</code> every single exception that might be raised?</p>

<h2 id="dont-have-a-stagingserver">5. Don‚Äôt have a staging&nbsp;server</h2>

<p>Staging servers are a waste of resources, both time and money. What is the point of having a close-to-exact copy of your production servers, which by this point are radically different from your development environment? Sure, containerization already <em>kind of</em> abstracts many of those differences, but (hopefully) you have network settings, 3rd-party APIs and other stuff that aren‚Äôt the same in development, even with containers. So be bold and make the leap from development right to production!</p>

<h2 id="dont-check-your-envvars">6. Don‚Äôt check your env&nbsp;vars</h2>

<p>Your project only has like 80 different access tokens, API keys, DB credentials and cache store credentials spread over half a dozen YAMLs. Super easy to keep track of and super hard to mess up with your production, development and (hopefully) staging environments. Don‚Äôt triple-check the variables that might have been changed in the deploy, and you‚Äôll secure a few hours of painful debugging in the near future.</p>

<h2 id="dont-guarantee-data-consistency-post-deploy">7. Don‚Äôt guarantee data consistency post-deploy</h2>

<p>In a previous step you were told already to make sure that customers can keep using your software mid-deploy, so we‚Äôre halfway there already to guaranteeing poor data consistency. Make sure you haven‚Äôt mapped out all the points your new code might touch the DB, particularly the DB structure itself. If anything goes wrong, just revert the commit and rollback‚Ää‚Äî‚Äädon‚Äôt ever worry about becoming orphaned or inconsistent.</p>

<h2 id="dont-prepare-for-a-laterollback">8. Don‚Äôt prepare for a late&nbsp;rollback</h2>

<p>If everything else fails‚Ä¶ wait, it won‚Äôt! Some problems can surface during the deploy, sure, but we won‚Äôt need to rollback <em>after</em> it is done, right? Right? After everything is settled, and you made a plan (which you totally shouldn‚Äôt, remember?) and followed it step-by-step, and all went well, you shouldn‚Äôt need to rollback. But let‚Äôs say it happens, and a few hours (or days) after the deploy you need to go back to the previous commit/tag/whatever you use. New data will have flowed which might need to be manually converted back to something manageable by the previous version of your software. Don‚Äôt think about it, don‚Äôt plan for it‚Ää‚Äî‚Ääit isn‚Äôt likely to happen. And if it does, you will have a heck of a time working on oddball and edge cases late in the night. What is not to love?</p>

<h2 id="dont-communicate-efficiently-with-yourteam">9. Don‚Äôt communicate efficiently with your&nbsp;team</h2>

<p>You already know you should have terrible log and error tracking systems. Add insult to injury and don‚Äôt talk to your coworkers in a quick, direct and clear way. Long pauses are great for dramatic effect, especially when your coworkers are waiting for a timely answer. Be vague about what you‚Äôre doing. Hit the rollback button and ‚Äúforget‚Äù to tell people about it. In general, just be as confusing and unavailable as possible.</p>

<p>Following all of the points above might lead to a ‚Äúperfect storm‚Äù situation, and making sure you don‚Äôt follow them will surely make things easier on you and your team. But even if you have great deploy practices in place, sometimes things just fall apart. There will always be blind spots, and it is in their nature to be more or less unpredictable. That is just the way things are with software development. Which leads us to our 10th and final point in this guide to terrible deploys:</p>

<h2 id="dont-be-patient-and-understanding-with-your-coworkers-if-everything-fallsapart">10. Don‚Äôt be patient and understanding with your coworkers if everything falls&nbsp;apart!</h2>

<p>By <a href="https://medium.com/@lbrito">Leonardo Brito</a> on <a href="https://medium.com/p/f536d1ad9a5a">September 3, 2018</a>.</p>

<p><a href="https://medium.com/@lbrito/10-ways-not-to-do-a-big-deploy-f536d1ad9a5a">Canonical link</a></p>

<p>Exported from <a href="https://medium.com">Medium</a> on May 1, 2019.</p>

    </article>
    <aside>Posted at: Sep 03, 2018</aside>
    <div class="post-footer">
      <a href="../../index.html">Back</a>
    </div>
  </div>

        <div class="footer">
          2020 Leonardo Brito
        </div>
      </div>

    </div>
  


</body></html>;
T;@ß;@ßo;;;;	I"0/posts/2014-04-21-trees-part-ii-avl-tree.md;
T{;{
;U;[I"R/home/carol/workspace/blog/content/posts/2014-04-21-trees-part-ii-avl-tree.md;
TI"˙AMasters classes started a few weeks ago, taking their¬†toll on my productivity here. Sorry about that!

So we (pardon the¬†[nosism](http://en.wikipedia.org/wiki/Nosism), but I think it sounds less egocentric¬†than writing "I" all the time) hinted at AVL trees back on our [Trees, Part I]({% link _posts/2014-03-31-trees-part-i.markdown %})¬†post. Specifically, we learned that:


<blockquote>a binary search tree (BST), provides O(h) time search, insert and delete operations (h is the tree height.</blockquote>


Linear time (O(h)) doesn't sound very good - if h is close to n, we'll have the same performance as a [linked list]({% link _posts/2014-02-14-3.markdown %}}).¬†What if there were a way to¬†bound the tree height¬†to some sub-linear factor? As it turns out, there are several ways to do so, and the general idea of somehow¬†keeping the tree height limited to a certain factor of the number of elements it holds is called height¬†**balancing**. Ergo we'll want to look into (height)¬†**balanced/self-balancing binary search trees **(BBST)**.¬†**

<div class="highlight"><pre><code class="language-bash">

                      Burger


                          M
                        .   .
                      .       .
                    .           .
                  .               .
                E .                 P .
              .     .                   .
            .         .                   .
          .             .                   .
      D .                 I                   Y
                        .
                      .
                    .
                  .
                F
</code></pre></div>



_AVL tree_


Since binary search trees have at most two children, the best tree height (i.e. smallest) we can achieve is log2 n (n being the number of elements in the tree). There are [several ](http://en.wikipedia.org/wiki/Self-balancing_binary_search_tree)self-balancing BSTs developed over the years. It seems that up there in the US college professors¬†tend to prefer the red-black tree when studying BBSTs, whilst over here AVL is preferred. In any case, AVL tree was¬†the first BBST ever devised, so we'll adopt it as our BBST model.

AVL trees (named after its two Soviet inventors Adelson-Velsky and Landis) use a series of **rotations** to keep the tree balanced. To keep track of when a certain subtree rooted at some node needs to be rotated, we maintain (or calculate) a¬†**balance factor** variable for each node, which is the difference between the node's left and right children's heights, i.e.:


balance_factor(n) = n.left_child.height - n.right_child.height




<!-- more -->


AVL trees allow balance factors of -1, 0 or +1. That means that for any given node, the difference between the heights of its left and right subtrees will be at most 1. [Doing the math](http://lcm.csa.iisc.ernet.in/dsa/node112.html) on that, it can be proven that AVL trees have at most height 1.44log n, which is pretty good sub-linear time.

So how we keep every node's balance factor between -1 and 1?¬†Suppose a node has +1 balance factor and we insert data on the node's left subtree in such a way that now the node has a balance factor of +2. If we could re-arrange the elements inside the node's child subtrees in a way that¬†the root node now had zero balance, that would solve our problem. If we did so for each node in the path between the inserted node and the tree root (which we call¬†**branch**), we would guarantee the AVL property.

This re-arrangement we talk of is called tree rotation. The goal¬†of a tree rotation is always the same: given an unbalanced (i.e. balance factor greater than 1 or smaller than -1) node n, re-arrange its children in a manner that preserves BST property and makes n balanced, ideally¬†with perfect (zero) balance.

Although rotation is always the same, to facilitate¬†implementation and learning¬†literature splits it in two groups: left (+2) and (-2) right rotation, each with two subgroups: left-left/left-right and right-right/right-left. Left and right rotation are symmetrical, so we only need to focus on one of them.

Suppose a node X with children Z (to the left) and D (right) has balance factor +2. Suppose that both Z and D are roots to subtrees that maintain AVL property, i.e. all of their nodes have -1, 0 or +1 balance factor.

Depending on Z's balance factor, we'll need to do a left-left or a left-right rotation.¬†Left-left (and its symmetrical right-right) rotations are the easiest, whilst in left-right rotations we first rotate the tree in a way that we can do a left-left rotation, so we end up doing two rotations to get a balanced tree.

There is no easier way to explain rotations than by drawing them. The following drawing can be found in the code, commented:

<div class="highlight"><pre><code class="language-bash">

  LEFT-RIGHT CASE        LEFT-LEFT CASE             BALANCED
  (Y bal = -1)            (Y bal = +1)

       +2                      +2                    (0)
          X                       X                      Z
         / \                     / \                    /  \
    -1  /   D               +1  /   D                  /    \
       Y            \          Z              \       Y      X
      / \        ----\        / \          ----\     / \    / \
     A   \       ----/       /   C         ----/    A   B  C   D
          Z         /       Y                 /
         / \               / \
        B   C             A   B


</code></pre></div>



Rotation may seem somewhat esoteric at first, but once you focus on what is going on with the main nodes (X,Y,Z)¬†all the rest unfolds naturally. In the left-left rotation, Z is the value between X and Y, so naturally we want to choose him as the new root, replacing X. By doing that, Y continues to be Z's left child, but X, which is greater than Z and was its parent before, now is its right child. The same logic applies to subchildren A through D. Once you understand the mechanism behind rotations, you won't even need to memorize anything.

Right-right and right-left rotations are symmetrical. You can find their graphics in the code comments.

As we mentioned before, rotations are all we need to maintain AVL property: each time we insert a node, we check for AVL violations (i.e. balance factor = +2 or -2) bottom-up starting at the inserted node and ending at the tree root. A correctly implemented AVL tree will never have balance factors greater than +2 or smaller than -2 even before rotations, so those are the only two cases you need to check for.

Here's an example of a left-right rotation:

<div class="highlight"><pre><code class="language-bash">

BEFORE INSERTING E

                    Burger





                        M
                      .   .
                    .       .
                  .           .
                .               .
              I                   P
            .
          .
        .
    D .



AFTER INSERTING I AND MAKING A LR ROTATION

                           Burger





                               M
                             .   .
                           .       .
                         .           .
                       .               .
                     E .                 P
                   .     .
                 .         .
               .             .
           D .                 I

</code></pre></div>



And here's a right-right rotation after inserting 'T':

<div class="highlight"><pre><code class="language-bash">

BEFORE
               Burger





                   I
                 .   .
               .       .
             .           .
           .               .
         G                   O .
                           .     .
                         .         .
                       .             .
                   N .                 R




AFTER
                        Burger





                            O
                          .   .
                        .       .
                      .           .
                    .               .
                  I .                 R .
                .     .                   .
              .         .                   .
            .             .                   .
        G .                 N                   T



</code></pre></div>

Compiling the code with _DEBUGGING and _VERBOSE defined renders a very comprehensive analysis of what's going on before, during and after each insert and rotation. If you're learing AVL it can be a very useful tool - just run the test several times and look at what rotations are being made, and how they work. Just look at the output.

I'm not going to bother with full code this time, given that the nature of rotations makes the code extremely obnoxious both to implement, debug and even look at, mainly because of all the pointer swapping business with C. In Java it would probably look much nicer.

Just so you have an idea, this is what a left rotation looks like:

<div class="highlight"><pre><code class="language-c">

// LEFT ROTATION
      if (bal == 2)
      {
            // LEFT-RIGHT
            if (n->left_child->bal == -1)
            {
                  DBG("LR ROTATION...");

                  x = n;
                  y = x->left_child;
                  z = y->right_child;

                  a = y->left_child;
                  b = z->left_child;
                  c = z->right_child;
                  d = x->right_child;

                  x->left_child = z;
                  z->parent = x;
                  z->left_child = y;
                  y->parent = z;
                  y->right_child = b;
                  if (b) b->parent = y;
            }
            // LEFT-LEFT

            DBG("LL ROTATION\n\n");

            x = n;
            z = x->left_child;
            y = z->left_child;

            DBG("XYZ = %c, %c, %c\n",
            *(int*)x->data,*(int*)y->data,*(int*)z->data);

            a = y->left_child;
            b = y->right_child;
            c = z->right_child;
            d = x->right_child;


            z->parent = x->parent;

            if (x->parent)
            {
                  if ((x->parent->left_child) && (x->parent->left_child == x))
                        z->parent->left_child = z;
                  else if ((x->parent->right_child) && (x->parent->right_child == x))
                        z->parent->right_child = z;
            }
            z->right_child = x;
            x->parent = z;
            x->left_child = c;
            if (c) c->parent = x;


            y->height =
                  (a&&b) ? fmax(a->height, b->height) :
                  a ? a->height :
                  b ? b->height : -1;
            y->height++;

            x->height =
                  (c&&d) ? fmax(c->height, d->height) :
                  c ? c->height :
                  d ? d->height : -1;
            x->height++;

            z->height = fmax(x->height, y->height);
            z->height++;

            return z;

      }

</code></pre></div>

Not nice at all!

We are, however, going to take a brief look at the rebalance function, which does the basic housekeeping after each insertion and¬†calls the appropriate rotation.

<div class="highlight"><pre><code class="language-c">


/**
 *  @brief Recalculate heights in all nodes
 *  affected by a insertion, i.e. every node
 *  in the branch traversed during insertion.
 *
 *  After recalculating lheight and rheight
 *  of a node, calculte balance (lh-rh) and
 *  call the apropriate rotation case if
 *  bal = -2 or +2. bal should always an
 *  element of the set {-2, -1, 0, 1, 2}.
 *
 *  Should be called after insertion.
 *
 *                ------------
 *                |   COST   |
 *                ------------
 *
 *  O(log n) worst case
 *
 *  Rebalance is called each time an insertion
 *  is done, and receives the inserted node
 *  as parameter. Of course, the inserted node
 *  is always a leaf (before the rotations).
 *
 *  In a balanced BST, the difference between
 *  any two leaves' depth (distance to tree root)
 *  is at most some constant k: in AVL trees, k
 *  is at most 1 - whenever k exceeds 1, we rotate
 *  the subtree.
 *
 *  Therefore the AVL tree is guaranteed to have
 *  height h = log2 n, where n is the number of
 *  elements currently in the tree. The loop in
 *  this function will repeat at most log2 n
 *  times, resulting in O(log n) worst case time.
 *
 *
 *  @param [in] bt   Parameter_Description
 *  @param [in] leaf Parameter_Description
 *  @return Return_Description
 */
void rebalance(binary_tree* bt, node* leaf)
{
      DBG("\n\nSTARTED CHECKING NODE %d (%c)\n=====================\n\n",
      *(int*)leaf->data,*(int*)leaf->data);

      int branch_h = 0;
      node* next = leaf;
      while (next)
      {
            DBG("\nnode in path %d (%c)\n-----------------\n",
            *(int*)next->data,*(int*)next->data);

            if (branch_h > next->height)
            {
                  next->height = branch_h;
                  DBG("Node %d new height: %d\n",*(int*)next->data, next->height);
            }


            if (next)
            {
                  int lh = 0;
                  if (next->left_child) lh = next->left_child->height+1;
                  int rh = 0;
                  if (next->right_child) rh = next->right_child->height+1;

                  next->bal = lh-rh;
                  DBG("Node %d (%c)\tlh=%d, rh=%d\tBAL = %d\n",
                  *(int*)next->data,*(int*)next->data,lh,rh,next->bal);
            }



            #ifdef _VERBOSE
            DBG("\n====================\nBefore rotate\n=============\n\n");
            clean_burger(burg);
            print_tree(burg,bt->root,0.5,0.1, 0);
            print_burger(burg);
            #endif

            node* new_subtree_root = rotate(next);
            if (new_subtree_root)
            {
                  next = new_subtree_root;
            }

            node* r = bt->root;
            while (r)
            {
                  bt->root = r;
                  DBG("R %d\t",*(int*)r->data);

                  r = r->parent;
            }

            #ifdef _VERBOSE
            if (new_subtree_root)
            {
            DBG("\n====================\nAfter rotate\n=============\n\n");
            clean_burger(burg);
            print_tree(burg,bt->root,0.5,0.1, 0);
            print_burger(burg);
            }
            #endif

            DBG("Finished checking node %d (%c), now checking " ,*(int*) next->data, *(int*) next->data);
            next = next->parent;
            if(next) DBG("\tnode %d (%c)\n" ,*(int*) next->data, *(int*) next->data);
            else DBG("(NULL - finished branch)\n");

            branch_h++;
      }
}
</code></pre></div>

The main while loop starts at the inserted node (leaf) and repeats until it reaches the tree root.¬†The most important thing done here is updating each node's height, which makes it possible to calculate node balance factor later. This is done in the first and second if, respectively. After the new balance factor is calculated, the node is passed to the rotate function, which decides based on its balance factor if it needs any of the four rotations. After the rotation, the tree root might have changed, so we make sure we keep the correct root (node* new_subtree_root and the subsequent while loop). Finally, if debugging is defined, we print the tree using [BurgerGFX]({% link _posts/2014-03-18-burgergfx-simple-2d-graphics.markdown %})¬†and increment the loop (i.e. next = next->parent and branch_height++).

You can see how this works by using the debug flags. For example, in the right-right rotation we showed above (inserting 'T' into the tree), here's the console output which shows us what's going on in the rebalance function:

<div class="highlight"><pre><code class="language-bash">
STARTED CHECKING NODE 84 (T)
=====================


node in path 84 (T)
-----------------
Node 84 (T)     lh=0, rh=0      BAL = 0

ROTATING NODE 84 (T)... R 73
Finished checking node 84 (T), now checking     node 82 (R)

node in path 82 (R)
-----------------
Node 82 new height: 1
Node 82 (R)     lh=0, rh=1      BAL = -1

ROTATING NODE 82 (R)... R 73
Finished checking node 82 (R), now checking     node 79 (O)

node in path 79 (O)
-----------------
Node 79 new height: 2
Node 79 (O)     lh=1, rh=2      BAL = -1

ROTATING NODE 79 (O)... R 73
Finished checking node 79 (O), now checking     node 73 (I)

node in path 73 (I)
-----------------
Node 73 new height: 3
Node 73 (I)     lh=1, rh=3      BAL = -2

ROTATING NODE 73 (I)... RR ROTATION

R 73    R 79
Finished checking node 79 (O), now checking (NULL - finished branch)
</code></pre></div>

You may have noticed we didn't mention deletion. Correct - I chose not to implement it. Full code can be found on github.


;
T;U;[0I"æü<p>Masters classes started a few weeks ago, taking their¬†toll on my productivity here. Sorry about that!</p>

<p>So we (pardon the¬†<a href="http://en.wikipedia.org/wiki/Nosism">nosism</a>, but I think it sounds less egocentric¬†than writing ‚ÄúI‚Äù all the time) hinted at AVL trees back on our <a href="%7B%%20link%20_posts/2014-03-31-trees-part-i.markdown%20%%7D">Trees, Part I</a>¬†post. Specifically, we learned that:</p>

<blockquote>a binary search tree (BST), provides O(h) time search, insert and delete operations (h is the tree height.</blockquote>

<p>Linear time (O(h)) doesn‚Äôt sound very good - if h is close to n, we‚Äôll have the same performance as a <a href="%7B%%20link%20_posts/2014-02-14-3.markdown%20%%7D%7D">linked list</a>.¬†What if there were a way to¬†bound the tree height¬†to some sub-linear factor? As it turns out, there are several ways to do so, and the general idea of somehow¬†keeping the tree height limited to a certain factor of the number of elements it holds is called height¬†<strong>balancing</strong>. Ergo we‚Äôll want to look into (height)¬†<strong>balanced/self-balancing binary search trees **(BBST)</strong>.¬†**</p>

<div class="highlight"><pre><code class="language-bash">                      Burger


                          M
                        <span class="nb">.</span>   <span class="nb">.</span>
                      <span class="nb">.</span>       <span class="nb">.</span>
                    <span class="nb">.</span>           <span class="nb">.</span>
                  <span class="nb">.</span>               <span class="nb">.</span>
                E <span class="nb">.</span>                 P <span class="nb">.</span>
              <span class="nb">.</span>     <span class="nb">.</span>                   <span class="nb">.</span>
            <span class="nb">.</span>         <span class="nb">.</span>                   <span class="nb">.</span>
          <span class="nb">.</span>             <span class="nb">.</span>                   <span class="nb">.</span>
      D <span class="nb">.</span>                 I                   Y
                        <span class="nb">.</span>
                      <span class="nb">.</span>
                    <span class="nb">.</span>
                  <span class="nb">.</span>
                F</code></pre></div>

<p><em>AVL tree</em></p>

<p>Since binary search trees have at most two children, the best tree height (i.e. smallest) we can achieve is log2 n (n being the number of elements in the tree). There are <a href="http://en.wikipedia.org/wiki/Self-balancing_binary_search_tree">several </a>self-balancing BSTs developed over the years. It seems that up there in the US college professors¬†tend to prefer the red-black tree when studying BBSTs, whilst over here AVL is preferred. In any case, AVL tree was¬†the first BBST ever devised, so we‚Äôll adopt it as our BBST model.</p>

<p>AVL trees (named after its two Soviet inventors Adelson-Velsky and Landis) use a series of <strong>rotations</strong> to keep the tree balanced. To keep track of when a certain subtree rooted at some node needs to be rotated, we maintain (or calculate) a¬†<strong>balance factor</strong> variable for each node, which is the difference between the node‚Äôs left and right children‚Äôs heights, i.e.:</p>

<p>balance_factor(n) = n.left_child.height - n.right_child.height</p>

<!-- more -->

<p>AVL trees allow balance factors of -1, 0 or +1. That means that for any given node, the difference between the heights of its left and right subtrees will be at most 1. <a href="http://lcm.csa.iisc.ernet.in/dsa/node112.html">Doing the math</a> on that, it can be proven that AVL trees have at most height 1.44log n, which is pretty good sub-linear time.</p>

<p>So how we keep every node‚Äôs balance factor between -1 and 1?¬†Suppose a node has +1 balance factor and we insert data on the node‚Äôs left subtree in such a way that now the node has a balance factor of +2. If we could re-arrange the elements inside the node‚Äôs child subtrees in a way that¬†the root node now had zero balance, that would solve our problem. If we did so for each node in the path between the inserted node and the tree root (which we call¬†<strong>branch</strong>), we would guarantee the AVL property.</p>

<p>This re-arrangement we talk of is called tree rotation. The goal¬†of a tree rotation is always the same: given an unbalanced (i.e. balance factor greater than 1 or smaller than -1) node n, re-arrange its children in a manner that preserves BST property and makes n balanced, ideally¬†with perfect (zero) balance.</p>

<p>Although rotation is always the same, to facilitate¬†implementation and learning¬†literature splits it in two groups: left (+2) and (-2) right rotation, each with two subgroups: left-left/left-right and right-right/right-left. Left and right rotation are symmetrical, so we only need to focus on one of them.</p>

<p>Suppose a node X with children Z (to the left) and D (right) has balance factor +2. Suppose that both Z and D are roots to subtrees that maintain AVL property, i.e. all of their nodes have -1, 0 or +1 balance factor.</p>

<p>Depending on Z‚Äôs balance factor, we‚Äôll need to do a left-left or a left-right rotation.¬†Left-left (and its symmetrical right-right) rotations are the easiest, whilst in left-right rotations we first rotate the tree in a way that we can do a left-left rotation, so we end up doing two rotations to get a balanced tree.</p>

<p>There is no easier way to explain rotations than by drawing them. The following drawing can be found in the code, commented:</p>

<div class="highlight"><pre><code class="language-bash">  LEFT-RIGHT CASE        LEFT-LEFT CASE             BALANCED
  <span class="o">(</span>Y bal <span class="o">=</span> <span class="nt">-1</span><span class="o">)</span>            <span class="o">(</span>Y bal <span class="o">=</span> +1<span class="o">)</span>

       +2                      +2                    <span class="o">(</span>0<span class="o">)</span>
          X                       X                      Z
         / <span class="se">\ </span>                    / <span class="se">\ </span>                   /  <span class="se">\</span>
    <span class="nt">-1</span>  /   D               +1  /   D                  /    <span class="se">\</span>
       Y            <span class="se">\ </span>         Z              <span class="se">\ </span>      Y      X
      / <span class="se">\ </span>       <span class="nt">----</span><span class="se">\ </span>       / <span class="se">\ </span>         <span class="nt">----</span><span class="se">\ </span>    / <span class="se">\ </span>   / <span class="se">\</span>
     A   <span class="se">\ </span>      <span class="nt">----</span>/       /   C         <span class="nt">----</span>/    A   B  C   D
          Z         /       Y                 /
         / <span class="se">\ </span>              / <span class="se">\</span>
        B   C             A   B</code></pre></div>

<p>Rotation may seem somewhat esoteric at first, but once you focus on what is going on with the main nodes (X,Y,Z)¬†all the rest unfolds naturally. In the left-left rotation, Z is the value between X and Y, so naturally we want to choose him as the new root, replacing X. By doing that, Y continues to be Z‚Äôs left child, but X, which is greater than Z and was its parent before, now is its right child. The same logic applies to subchildren A through D. Once you understand the mechanism behind rotations, you won‚Äôt even need to memorize anything.</p>

<p>Right-right and right-left rotations are symmetrical. You can find their graphics in the code comments.</p>

<p>As we mentioned before, rotations are all we need to maintain AVL property: each time we insert a node, we check for AVL violations (i.e. balance factor = +2 or -2) bottom-up starting at the inserted node and ending at the tree root. A correctly implemented AVL tree will never have balance factors greater than +2 or smaller than -2 even before rotations, so those are the only two cases you need to check for.</p>

<p>Here‚Äôs an example of a left-right rotation:</p>

<div class="highlight"><pre><code class="language-bash">BEFORE INSERTING E

                    Burger





                        M
                      <span class="nb">.</span>   <span class="nb">.</span>
                    <span class="nb">.</span>       <span class="nb">.</span>
                  <span class="nb">.</span>           <span class="nb">.</span>
                <span class="nb">.</span>               <span class="nb">.</span>
              I                   P
            <span class="nb">.</span>
          <span class="nb">.</span>
        <span class="nb">.</span>
    D <span class="nb">.</span>



AFTER INSERTING I AND MAKING A LR ROTATION

                           Burger





                               M
                             <span class="nb">.</span>   <span class="nb">.</span>
                           <span class="nb">.</span>       <span class="nb">.</span>
                         <span class="nb">.</span>           <span class="nb">.</span>
                       <span class="nb">.</span>               <span class="nb">.</span>
                     E <span class="nb">.</span>                 P
                   <span class="nb">.</span>     <span class="nb">.</span>
                 <span class="nb">.</span>         <span class="nb">.</span>
               <span class="nb">.</span>             <span class="nb">.</span>
           D <span class="nb">.</span>                 I</code></pre></div>

<p>And here‚Äôs a right-right rotation after inserting ‚ÄòT‚Äô:</p>

<div class="highlight"><pre><code class="language-bash">BEFORE
               Burger





                   I
                 <span class="nb">.</span>   <span class="nb">.</span>
               <span class="nb">.</span>       <span class="nb">.</span>
             <span class="nb">.</span>           <span class="nb">.</span>
           <span class="nb">.</span>               <span class="nb">.</span>
         G                   O <span class="nb">.</span>
                           <span class="nb">.</span>     <span class="nb">.</span>
                         <span class="nb">.</span>         <span class="nb">.</span>
                       <span class="nb">.</span>             <span class="nb">.</span>
                   N <span class="nb">.</span>                 R




AFTER
                        Burger





                            O
                          <span class="nb">.</span>   <span class="nb">.</span>
                        <span class="nb">.</span>       <span class="nb">.</span>
                      <span class="nb">.</span>           <span class="nb">.</span>
                    <span class="nb">.</span>               <span class="nb">.</span>
                  I <span class="nb">.</span>                 R <span class="nb">.</span>
                <span class="nb">.</span>     <span class="nb">.</span>                   <span class="nb">.</span>
              <span class="nb">.</span>         <span class="nb">.</span>                   <span class="nb">.</span>
            <span class="nb">.</span>             <span class="nb">.</span>                   <span class="nb">.</span>
        G <span class="nb">.</span>                 N                   T</code></pre></div>

<p>Compiling the code with _DEBUGGING and _VERBOSE defined renders a very comprehensive analysis of what‚Äôs going on before, during and after each insert and rotation. If you‚Äôre learing AVL it can be a very useful tool - just run the test several times and look at what rotations are being made, and how they work. Just look at the output.</p>

<p>I‚Äôm not going to bother with full code this time, given that the nature of rotations makes the code extremely obnoxious both to implement, debug and even look at, mainly because of all the pointer swapping business with C. In Java it would probably look much nicer.</p>

<p>Just so you have an idea, this is what a left rotation looks like:</p>

<div class="highlight"><pre><code class="language-c"><span class="c1">// LEFT ROTATION</span>
      <span class="k">if</span> <span class="p">(</span><span class="n">bal</span> <span class="o">==</span> <span class="mi">2</span><span class="p">)</span>
      <span class="p">{</span>
            <span class="c1">// LEFT-RIGHT</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">n</span><span class="o">-&gt;</span><span class="n">left_child</span><span class="o">-&gt;</span><span class="n">bal</span> <span class="o">==</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span>
            <span class="p">{</span>
                  <span class="n">DBG</span><span class="p">(</span><span class="s">"LR ROTATION..."</span><span class="p">);</span>

                  <span class="n">x</span> <span class="o">=</span> <span class="n">n</span><span class="p">;</span>
                  <span class="n">y</span> <span class="o">=</span> <span class="n">x</span><span class="o">-&gt;</span><span class="n">left_child</span><span class="p">;</span>
                  <span class="n">z</span> <span class="o">=</span> <span class="n">y</span><span class="o">-&gt;</span><span class="n">right_child</span><span class="p">;</span>

                  <span class="n">a</span> <span class="o">=</span> <span class="n">y</span><span class="o">-&gt;</span><span class="n">left_child</span><span class="p">;</span>
                  <span class="n">b</span> <span class="o">=</span> <span class="n">z</span><span class="o">-&gt;</span><span class="n">left_child</span><span class="p">;</span>
                  <span class="n">c</span> <span class="o">=</span> <span class="n">z</span><span class="o">-&gt;</span><span class="n">right_child</span><span class="p">;</span>
                  <span class="n">d</span> <span class="o">=</span> <span class="n">x</span><span class="o">-&gt;</span><span class="n">right_child</span><span class="p">;</span>

                  <span class="n">x</span><span class="o">-&gt;</span><span class="n">left_child</span> <span class="o">=</span> <span class="n">z</span><span class="p">;</span>
                  <span class="n">z</span><span class="o">-&gt;</span><span class="n">parent</span> <span class="o">=</span> <span class="n">x</span><span class="p">;</span>
                  <span class="n">z</span><span class="o">-&gt;</span><span class="n">left_child</span> <span class="o">=</span> <span class="n">y</span><span class="p">;</span>
                  <span class="n">y</span><span class="o">-&gt;</span><span class="n">parent</span> <span class="o">=</span> <span class="n">z</span><span class="p">;</span>
                  <span class="n">y</span><span class="o">-&gt;</span><span class="n">right_child</span> <span class="o">=</span> <span class="n">b</span><span class="p">;</span>
                  <span class="k">if</span> <span class="p">(</span><span class="n">b</span><span class="p">)</span> <span class="n">b</span><span class="o">-&gt;</span><span class="n">parent</span> <span class="o">=</span> <span class="n">y</span><span class="p">;</span>
            <span class="p">}</span>
            <span class="c1">// LEFT-LEFT</span>

            <span class="n">DBG</span><span class="p">(</span><span class="s">"LL ROTATION</span><span class="se">\n\n</span><span class="s">"</span><span class="p">);</span>

            <span class="n">x</span> <span class="o">=</span> <span class="n">n</span><span class="p">;</span>
            <span class="n">z</span> <span class="o">=</span> <span class="n">x</span><span class="o">-&gt;</span><span class="n">left_child</span><span class="p">;</span>
            <span class="n">y</span> <span class="o">=</span> <span class="n">z</span><span class="o">-&gt;</span><span class="n">left_child</span><span class="p">;</span>

            <span class="n">DBG</span><span class="p">(</span><span class="s">"XYZ = %c, %c, %c</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span>
            <span class="o">*</span><span class="p">(</span><span class="kt">int</span><span class="o">*</span><span class="p">)</span><span class="n">x</span><span class="o">-&gt;</span><span class="n">data</span><span class="p">,</span><span class="o">*</span><span class="p">(</span><span class="kt">int</span><span class="o">*</span><span class="p">)</span><span class="n">y</span><span class="o">-&gt;</span><span class="n">data</span><span class="p">,</span><span class="o">*</span><span class="p">(</span><span class="kt">int</span><span class="o">*</span><span class="p">)</span><span class="n">z</span><span class="o">-&gt;</span><span class="n">data</span><span class="p">);</span>

            <span class="n">a</span> <span class="o">=</span> <span class="n">y</span><span class="o">-&gt;</span><span class="n">left_child</span><span class="p">;</span>
            <span class="n">b</span> <span class="o">=</span> <span class="n">y</span><span class="o">-&gt;</span><span class="n">right_child</span><span class="p">;</span>
            <span class="n">c</span> <span class="o">=</span> <span class="n">z</span><span class="o">-&gt;</span><span class="n">right_child</span><span class="p">;</span>
            <span class="n">d</span> <span class="o">=</span> <span class="n">x</span><span class="o">-&gt;</span><span class="n">right_child</span><span class="p">;</span>


            <span class="n">z</span><span class="o">-&gt;</span><span class="n">parent</span> <span class="o">=</span> <span class="n">x</span><span class="o">-&gt;</span><span class="n">parent</span><span class="p">;</span>

            <span class="k">if</span> <span class="p">(</span><span class="n">x</span><span class="o">-&gt;</span><span class="n">parent</span><span class="p">)</span>
            <span class="p">{</span>
                  <span class="k">if</span> <span class="p">((</span><span class="n">x</span><span class="o">-&gt;</span><span class="n">parent</span><span class="o">-&gt;</span><span class="n">left_child</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="p">(</span><span class="n">x</span><span class="o">-&gt;</span><span class="n">parent</span><span class="o">-&gt;</span><span class="n">left_child</span> <span class="o">==</span> <span class="n">x</span><span class="p">))</span>
                        <span class="n">z</span><span class="o">-&gt;</span><span class="n">parent</span><span class="o">-&gt;</span><span class="n">left_child</span> <span class="o">=</span> <span class="n">z</span><span class="p">;</span>
                  <span class="k">else</span> <span class="k">if</span> <span class="p">((</span><span class="n">x</span><span class="o">-&gt;</span><span class="n">parent</span><span class="o">-&gt;</span><span class="n">right_child</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="p">(</span><span class="n">x</span><span class="o">-&gt;</span><span class="n">parent</span><span class="o">-&gt;</span><span class="n">right_child</span> <span class="o">==</span> <span class="n">x</span><span class="p">))</span>
                        <span class="n">z</span><span class="o">-&gt;</span><span class="n">parent</span><span class="o">-&gt;</span><span class="n">right_child</span> <span class="o">=</span> <span class="n">z</span><span class="p">;</span>
            <span class="p">}</span>
            <span class="n">z</span><span class="o">-&gt;</span><span class="n">right_child</span> <span class="o">=</span> <span class="n">x</span><span class="p">;</span>
            <span class="n">x</span><span class="o">-&gt;</span><span class="n">parent</span> <span class="o">=</span> <span class="n">z</span><span class="p">;</span>
            <span class="n">x</span><span class="o">-&gt;</span><span class="n">left_child</span> <span class="o">=</span> <span class="n">c</span><span class="p">;</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">c</span><span class="p">)</span> <span class="n">c</span><span class="o">-&gt;</span><span class="n">parent</span> <span class="o">=</span> <span class="n">x</span><span class="p">;</span>


            <span class="n">y</span><span class="o">-&gt;</span><span class="n">height</span> <span class="o">=</span>
                  <span class="p">(</span><span class="n">a</span><span class="o">&amp;&amp;</span><span class="n">b</span><span class="p">)</span> <span class="o">?</span> <span class="n">fmax</span><span class="p">(</span><span class="n">a</span><span class="o">-&gt;</span><span class="n">height</span><span class="p">,</span> <span class="n">b</span><span class="o">-&gt;</span><span class="n">height</span><span class="p">)</span> <span class="o">:</span>
                  <span class="n">a</span> <span class="o">?</span> <span class="n">a</span><span class="o">-&gt;</span><span class="n">height</span> <span class="o">:</span>
                  <span class="n">b</span> <span class="o">?</span> <span class="n">b</span><span class="o">-&gt;</span><span class="n">height</span> <span class="o">:</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
            <span class="n">y</span><span class="o">-&gt;</span><span class="n">height</span><span class="o">++</span><span class="p">;</span>

            <span class="n">x</span><span class="o">-&gt;</span><span class="n">height</span> <span class="o">=</span>
                  <span class="p">(</span><span class="n">c</span><span class="o">&amp;&amp;</span><span class="n">d</span><span class="p">)</span> <span class="o">?</span> <span class="n">fmax</span><span class="p">(</span><span class="n">c</span><span class="o">-&gt;</span><span class="n">height</span><span class="p">,</span> <span class="n">d</span><span class="o">-&gt;</span><span class="n">height</span><span class="p">)</span> <span class="o">:</span>
                  <span class="n">c</span> <span class="o">?</span> <span class="n">c</span><span class="o">-&gt;</span><span class="n">height</span> <span class="o">:</span>
                  <span class="n">d</span> <span class="o">?</span> <span class="n">d</span><span class="o">-&gt;</span><span class="n">height</span> <span class="o">:</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
            <span class="n">x</span><span class="o">-&gt;</span><span class="n">height</span><span class="o">++</span><span class="p">;</span>

            <span class="n">z</span><span class="o">-&gt;</span><span class="n">height</span> <span class="o">=</span> <span class="n">fmax</span><span class="p">(</span><span class="n">x</span><span class="o">-&gt;</span><span class="n">height</span><span class="p">,</span> <span class="n">y</span><span class="o">-&gt;</span><span class="n">height</span><span class="p">);</span>
            <span class="n">z</span><span class="o">-&gt;</span><span class="n">height</span><span class="o">++</span><span class="p">;</span>

            <span class="k">return</span> <span class="n">z</span><span class="p">;</span>

      <span class="p">}</span></code></pre></div>

<p>Not nice at all!</p>

<p>We are, however, going to take a brief look at the rebalance function, which does the basic housekeeping after each insertion and¬†calls the appropriate rotation.</p>

<div class="highlight"><pre><code class="language-c"><span class="cm">/**
 *  @brief Recalculate heights in all nodes
 *  affected by a insertion, i.e. every node
 *  in the branch traversed during insertion.
 *
 *  After recalculating lheight and rheight
 *  of a node, calculte balance (lh-rh) and
 *  call the apropriate rotation case if
 *  bal = -2 or +2. bal should always an
 *  element of the set {-2, -1, 0, 1, 2}.
 *
 *  Should be called after insertion.
 *
 *                ------------
 *                |   COST   |
 *                ------------
 *
 *  O(log n) worst case
 *
 *  Rebalance is called each time an insertion
 *  is done, and receives the inserted node
 *  as parameter. Of course, the inserted node
 *  is always a leaf (before the rotations).
 *
 *  In a balanced BST, the difference between
 *  any two leaves' depth (distance to tree root)
 *  is at most some constant k: in AVL trees, k
 *  is at most 1 - whenever k exceeds 1, we rotate
 *  the subtree.
 *
 *  Therefore the AVL tree is guaranteed to have
 *  height h = log2 n, where n is the number of
 *  elements currently in the tree. The loop in
 *  this function will repeat at most log2 n
 *  times, resulting in O(log n) worst case time.
 *
 *
 *  @param [in] bt   Parameter_Description
 *  @param [in] leaf Parameter_Description
 *  @return Return_Description
 */</span>
<span class="kt">void</span> <span class="nf">rebalance</span><span class="p">(</span><span class="n">binary_tree</span><span class="o">*</span> <span class="n">bt</span><span class="p">,</span> <span class="n">node</span><span class="o">*</span> <span class="n">leaf</span><span class="p">)</span>
<span class="p">{</span>
      <span class="n">DBG</span><span class="p">(</span><span class="s">"</span><span class="se">\n\n</span><span class="s">STARTED CHECKING NODE %d (%c)</span><span class="se">\n</span><span class="s">=====================</span><span class="se">\n\n</span><span class="s">"</span><span class="p">,</span>
      <span class="o">*</span><span class="p">(</span><span class="kt">int</span><span class="o">*</span><span class="p">)</span><span class="n">leaf</span><span class="o">-&gt;</span><span class="n">data</span><span class="p">,</span><span class="o">*</span><span class="p">(</span><span class="kt">int</span><span class="o">*</span><span class="p">)</span><span class="n">leaf</span><span class="o">-&gt;</span><span class="n">data</span><span class="p">);</span>

      <span class="kt">int</span> <span class="n">branch_h</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
      <span class="n">node</span><span class="o">*</span> <span class="n">next</span> <span class="o">=</span> <span class="n">leaf</span><span class="p">;</span>
      <span class="k">while</span> <span class="p">(</span><span class="n">next</span><span class="p">)</span>
      <span class="p">{</span>
            <span class="n">DBG</span><span class="p">(</span><span class="s">"</span><span class="se">\n</span><span class="s">node in path %d (%c)</span><span class="se">\n</span><span class="s">-----------------</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span>
            <span class="o">*</span><span class="p">(</span><span class="kt">int</span><span class="o">*</span><span class="p">)</span><span class="n">next</span><span class="o">-&gt;</span><span class="n">data</span><span class="p">,</span><span class="o">*</span><span class="p">(</span><span class="kt">int</span><span class="o">*</span><span class="p">)</span><span class="n">next</span><span class="o">-&gt;</span><span class="n">data</span><span class="p">);</span>

            <span class="k">if</span> <span class="p">(</span><span class="n">branch_h</span> <span class="o">&gt;</span> <span class="n">next</span><span class="o">-&gt;</span><span class="n">height</span><span class="p">)</span>
            <span class="p">{</span>
                  <span class="n">next</span><span class="o">-&gt;</span><span class="n">height</span> <span class="o">=</span> <span class="n">branch_h</span><span class="p">;</span>
                  <span class="n">DBG</span><span class="p">(</span><span class="s">"Node %d new height: %d</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span><span class="o">*</span><span class="p">(</span><span class="kt">int</span><span class="o">*</span><span class="p">)</span><span class="n">next</span><span class="o">-&gt;</span><span class="n">data</span><span class="p">,</span> <span class="n">next</span><span class="o">-&gt;</span><span class="n">height</span><span class="p">);</span>
            <span class="p">}</span>


            <span class="k">if</span> <span class="p">(</span><span class="n">next</span><span class="p">)</span>
            <span class="p">{</span>
                  <span class="kt">int</span> <span class="n">lh</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
                  <span class="k">if</span> <span class="p">(</span><span class="n">next</span><span class="o">-&gt;</span><span class="n">left_child</span><span class="p">)</span> <span class="n">lh</span> <span class="o">=</span> <span class="n">next</span><span class="o">-&gt;</span><span class="n">left_child</span><span class="o">-&gt;</span><span class="n">height</span><span class="o">+</span><span class="mi">1</span><span class="p">;</span>
                  <span class="kt">int</span> <span class="n">rh</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
                  <span class="k">if</span> <span class="p">(</span><span class="n">next</span><span class="o">-&gt;</span><span class="n">right_child</span><span class="p">)</span> <span class="n">rh</span> <span class="o">=</span> <span class="n">next</span><span class="o">-&gt;</span><span class="n">right_child</span><span class="o">-&gt;</span><span class="n">height</span><span class="o">+</span><span class="mi">1</span><span class="p">;</span>

                  <span class="n">next</span><span class="o">-&gt;</span><span class="n">bal</span> <span class="o">=</span> <span class="n">lh</span><span class="o">-</span><span class="n">rh</span><span class="p">;</span>
                  <span class="n">DBG</span><span class="p">(</span><span class="s">"Node %d (%c)</span><span class="se">\t</span><span class="s">lh=%d, rh=%d</span><span class="se">\t</span><span class="s">BAL = %d</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span>
                  <span class="o">*</span><span class="p">(</span><span class="kt">int</span><span class="o">*</span><span class="p">)</span><span class="n">next</span><span class="o">-&gt;</span><span class="n">data</span><span class="p">,</span><span class="o">*</span><span class="p">(</span><span class="kt">int</span><span class="o">*</span><span class="p">)</span><span class="n">next</span><span class="o">-&gt;</span><span class="n">data</span><span class="p">,</span><span class="n">lh</span><span class="p">,</span><span class="n">rh</span><span class="p">,</span><span class="n">next</span><span class="o">-&gt;</span><span class="n">bal</span><span class="p">);</span>
            <span class="p">}</span>



            <span class="cp">#ifdef _VERBOSE
</span>            <span class="n">DBG</span><span class="p">(</span><span class="s">"</span><span class="se">\n</span><span class="s">====================</span><span class="se">\n</span><span class="s">Before rotate</span><span class="se">\n</span><span class="s">=============</span><span class="se">\n\n</span><span class="s">"</span><span class="p">);</span>
            <span class="n">clean_burger</span><span class="p">(</span><span class="n">burg</span><span class="p">);</span>
            <span class="n">print_tree</span><span class="p">(</span><span class="n">burg</span><span class="p">,</span><span class="n">bt</span><span class="o">-&gt;</span><span class="n">root</span><span class="p">,</span><span class="mi">0</span><span class="p">.</span><span class="mi">5</span><span class="p">,</span><span class="mi">0</span><span class="p">.</span><span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
            <span class="n">print_burger</span><span class="p">(</span><span class="n">burg</span><span class="p">);</span>
            <span class="cp">#endif
</span>
            <span class="n">node</span><span class="o">*</span> <span class="n">new_subtree_root</span> <span class="o">=</span> <span class="n">rotate</span><span class="p">(</span><span class="n">next</span><span class="p">);</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">new_subtree_root</span><span class="p">)</span>
            <span class="p">{</span>
                  <span class="n">next</span> <span class="o">=</span> <span class="n">new_subtree_root</span><span class="p">;</span>
            <span class="p">}</span>

            <span class="n">node</span><span class="o">*</span> <span class="n">r</span> <span class="o">=</span> <span class="n">bt</span><span class="o">-&gt;</span><span class="n">root</span><span class="p">;</span>
            <span class="k">while</span> <span class="p">(</span><span class="n">r</span><span class="p">)</span>
            <span class="p">{</span>
                  <span class="n">bt</span><span class="o">-&gt;</span><span class="n">root</span> <span class="o">=</span> <span class="n">r</span><span class="p">;</span>
                  <span class="n">DBG</span><span class="p">(</span><span class="s">"R %d</span><span class="se">\t</span><span class="s">"</span><span class="p">,</span><span class="o">*</span><span class="p">(</span><span class="kt">int</span><span class="o">*</span><span class="p">)</span><span class="n">r</span><span class="o">-&gt;</span><span class="n">data</span><span class="p">);</span>

                  <span class="n">r</span> <span class="o">=</span> <span class="n">r</span><span class="o">-&gt;</span><span class="n">parent</span><span class="p">;</span>
            <span class="p">}</span>

            <span class="cp">#ifdef _VERBOSE
</span>            <span class="k">if</span> <span class="p">(</span><span class="n">new_subtree_root</span><span class="p">)</span>
            <span class="p">{</span>
            <span class="n">DBG</span><span class="p">(</span><span class="s">"</span><span class="se">\n</span><span class="s">====================</span><span class="se">\n</span><span class="s">After rotate</span><span class="se">\n</span><span class="s">=============</span><span class="se">\n\n</span><span class="s">"</span><span class="p">);</span>
            <span class="n">clean_burger</span><span class="p">(</span><span class="n">burg</span><span class="p">);</span>
            <span class="n">print_tree</span><span class="p">(</span><span class="n">burg</span><span class="p">,</span><span class="n">bt</span><span class="o">-&gt;</span><span class="n">root</span><span class="p">,</span><span class="mi">0</span><span class="p">.</span><span class="mi">5</span><span class="p">,</span><span class="mi">0</span><span class="p">.</span><span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
            <span class="n">print_burger</span><span class="p">(</span><span class="n">burg</span><span class="p">);</span>
            <span class="p">}</span>
            <span class="cp">#endif
</span>
            <span class="n">DBG</span><span class="p">(</span><span class="s">"Finished checking node %d (%c), now checking "</span> <span class="p">,</span><span class="o">*</span><span class="p">(</span><span class="kt">int</span><span class="o">*</span><span class="p">)</span> <span class="n">next</span><span class="o">-&gt;</span><span class="n">data</span><span class="p">,</span> <span class="o">*</span><span class="p">(</span><span class="kt">int</span><span class="o">*</span><span class="p">)</span> <span class="n">next</span><span class="o">-&gt;</span><span class="n">data</span><span class="p">);</span>
            <span class="n">next</span> <span class="o">=</span> <span class="n">next</span><span class="o">-&gt;</span><span class="n">parent</span><span class="p">;</span>
            <span class="k">if</span><span class="p">(</span><span class="n">next</span><span class="p">)</span> <span class="n">DBG</span><span class="p">(</span><span class="s">"</span><span class="se">\t</span><span class="s">node %d (%c)</span><span class="se">\n</span><span class="s">"</span> <span class="p">,</span><span class="o">*</span><span class="p">(</span><span class="kt">int</span><span class="o">*</span><span class="p">)</span> <span class="n">next</span><span class="o">-&gt;</span><span class="n">data</span><span class="p">,</span> <span class="o">*</span><span class="p">(</span><span class="kt">int</span><span class="o">*</span><span class="p">)</span> <span class="n">next</span><span class="o">-&gt;</span><span class="n">data</span><span class="p">);</span>
            <span class="k">else</span> <span class="n">DBG</span><span class="p">(</span><span class="s">"(NULL - finished branch)</span><span class="se">\n</span><span class="s">"</span><span class="p">);</span>

            <span class="n">branch_h</span><span class="o">++</span><span class="p">;</span>
      <span class="p">}</span>
<span class="p">}</span></code></pre></div>

<p>The main while loop starts at the inserted node (leaf) and repeats until it reaches the tree root.¬†The most important thing done here is updating each node‚Äôs height, which makes it possible to calculate node balance factor later. This is done in the first and second if, respectively. After the new balance factor is calculated, the node is passed to the rotate function, which decides based on its balance factor if it needs any of the four rotations. After the rotation, the tree root might have changed, so we make sure we keep the correct root (node* new_subtree_root and the subsequent while loop). Finally, if debugging is defined, we print the tree using <a href="%7B%%20link%20_posts/2014-03-18-burgergfx-simple-2d-graphics.markdown%20%%7D">BurgerGFX</a>¬†and increment the loop (i.e. next = next-&gt;parent and branch_height++).</p>

<p>You can see how this works by using the debug flags. For example, in the right-right rotation we showed above (inserting ‚ÄòT‚Äô into the tree), here‚Äôs the console output which shows us what‚Äôs going on in the rebalance function:</p>

<div class="highlight"><pre><code class="language-bash">STARTED CHECKING NODE 84 <span class="o">(</span>T<span class="o">)</span>
<span class="o">=====================</span>


node <span class="k">in </span>path 84 <span class="o">(</span>T<span class="o">)</span>
<span class="nt">-----------------</span>
Node 84 <span class="o">(</span>T<span class="o">)</span>     <span class="nv">lh</span><span class="o">=</span>0, <span class="nv">rh</span><span class="o">=</span>0      BAL <span class="o">=</span> 0

ROTATING NODE 84 <span class="o">(</span>T<span class="o">)</span>... R 73
Finished checking node 84 <span class="o">(</span>T<span class="o">)</span>, now checking     node 82 <span class="o">(</span>R<span class="o">)</span>

node <span class="k">in </span>path 82 <span class="o">(</span>R<span class="o">)</span>
<span class="nt">-----------------</span>
Node 82 new height: 1
Node 82 <span class="o">(</span>R<span class="o">)</span>     <span class="nv">lh</span><span class="o">=</span>0, <span class="nv">rh</span><span class="o">=</span>1      BAL <span class="o">=</span> <span class="nt">-1</span>

ROTATING NODE 82 <span class="o">(</span>R<span class="o">)</span>... R 73
Finished checking node 82 <span class="o">(</span>R<span class="o">)</span>, now checking     node 79 <span class="o">(</span>O<span class="o">)</span>

node <span class="k">in </span>path 79 <span class="o">(</span>O<span class="o">)</span>
<span class="nt">-----------------</span>
Node 79 new height: 2
Node 79 <span class="o">(</span>O<span class="o">)</span>     <span class="nv">lh</span><span class="o">=</span>1, <span class="nv">rh</span><span class="o">=</span>2      BAL <span class="o">=</span> <span class="nt">-1</span>

ROTATING NODE 79 <span class="o">(</span>O<span class="o">)</span>... R 73
Finished checking node 79 <span class="o">(</span>O<span class="o">)</span>, now checking     node 73 <span class="o">(</span>I<span class="o">)</span>

node <span class="k">in </span>path 73 <span class="o">(</span>I<span class="o">)</span>
<span class="nt">-----------------</span>
Node 73 new height: 3
Node 73 <span class="o">(</span>I<span class="o">)</span>     <span class="nv">lh</span><span class="o">=</span>1, <span class="nv">rh</span><span class="o">=</span>3      BAL <span class="o">=</span> <span class="nt">-2</span>

ROTATING NODE 73 <span class="o">(</span>I<span class="o">)</span>... RR ROTATION

R 73    R 79
Finished checking node 79 <span class="o">(</span>O<span class="o">)</span>, now checking <span class="o">(</span>NULL - finished branch<span class="o">)</span></code></pre></div>

<p>You may have noticed we didn‚Äôt mention deletion. Correct - I chose not to implement it. Full code can be found on github.</p>

;
T;U;[0I"‰ß<!DOCTYPE html><html lang="en"><head>
    <meta charset="utf-8">
    <title>A Developer's Notebook - Trees, Part II: AVL Tree</title>
    <link rel="stylesheet" href="https://unpkg.com/purecss@1.0.1/build/pure-min.css" integrity="sha384-oAOxQR6DkCoMliIh8yFnu25d7Eq/PHS21PClpwjOTeU2jRSq11vu66rf90/cZr47" crossorigin="anonymous">
    <link rel="stylesheet" href="../../assets/stylesheet.css">
    <link rel="stylesheet" href="../../assets/highlight.css">

    <!-- you don't need to keep this, but it's cool for stats! -->
    <meta name="generator" content="Nanoc 4.11.9">
  </head>
  <body>
    <div id="layout">
      <div class="header">
        <h1>
          <a href="../../">A Developer's Notebook</a>
        </h1>
      </div>


      <div class="content">
        <nav class="pure-g">
          <div class="pure-u-2-3 links">
            <a href="../../index.html">Home</a> ¬∑
            <a href="../../tags.html">Tags</a> ¬∑
            <a href="../../years.html">Years</a> ¬∑
            <a href="../../about.html">About</a>
          </div>

          <div class="pure-u-1-3">
            <div class="contact">
              <span>
                <a href="https://github.com/lbrito1" download="">
                  <img src="../../assets/icons/github.svg" alt="Github icon">
                  </a>
              </span>
              <span>
                <a href="https://www.linkedin.com/in/leonardo-mendes-brito/">
                <img src="../../assets/icons/linkedin.svg" alt="LinkedIn icon">
                </a>
              </span>
            </div>
          </div>
        </nav>
        
  <div class="post-show">
    <h1>Trees, Part II: AVL Tree</h1>
    <article class="text">
      <p>Masters classes started a few weeks ago, taking their&nbsp;toll on my productivity here. Sorry about that!</p>

<p>So we (pardon the&nbsp;<a href="http://en.wikipedia.org/wiki/Nosism">nosism</a>, but I think it sounds less egocentric&nbsp;than writing ‚ÄúI‚Äù all the time) hinted at AVL trees back on our <a href="%7B%%20link%20_posts/2014-03-31-trees-part-i.markdown%20%%7D">Trees, Part I</a>&nbsp;post. Specifically, we learned that:</p>

<blockquote>a binary search tree (BST), provides O(h) time search, insert and delete operations (h is the tree height.</blockquote>

<p>Linear time (O(h)) doesn‚Äôt sound very good - if h is close to n, we‚Äôll have the same performance as a <a href="%7B%%20link%20_posts/2014-02-14-3.markdown%20%%7D%7D">linked list</a>.&nbsp;What if there were a way to&nbsp;bound the tree height&nbsp;to some sub-linear factor? As it turns out, there are several ways to do so, and the general idea of somehow&nbsp;keeping the tree height limited to a certain factor of the number of elements it holds is called height&nbsp;<strong>balancing</strong>. Ergo we‚Äôll want to look into (height)&nbsp;<strong>balanced/self-balancing binary search trees **(BBST)</strong>.&nbsp;**</p>

<div class="highlight"><pre><code class="language-bash">                      Burger


                          M
                        <span class="nb">.</span>   <span class="nb">.</span>
                      <span class="nb">.</span>       <span class="nb">.</span>
                    <span class="nb">.</span>           <span class="nb">.</span>
                  <span class="nb">.</span>               <span class="nb">.</span>
                E <span class="nb">.</span>                 P <span class="nb">.</span>
              <span class="nb">.</span>     <span class="nb">.</span>                   <span class="nb">.</span>
            <span class="nb">.</span>         <span class="nb">.</span>                   <span class="nb">.</span>
          <span class="nb">.</span>             <span class="nb">.</span>                   <span class="nb">.</span>
      D <span class="nb">.</span>                 I                   Y
                        <span class="nb">.</span>
                      <span class="nb">.</span>
                    <span class="nb">.</span>
                  <span class="nb">.</span>
                F</code></pre></div>

<p><em>AVL tree</em></p>

<p>Since binary search trees have at most two children, the best tree height (i.e. smallest) we can achieve is log2 n (n being the number of elements in the tree). There are <a href="http://en.wikipedia.org/wiki/Self-balancing_binary_search_tree">several </a>self-balancing BSTs developed over the years. It seems that up there in the US college professors&nbsp;tend to prefer the red-black tree when studying BBSTs, whilst over here AVL is preferred. In any case, AVL tree was&nbsp;the first BBST ever devised, so we‚Äôll adopt it as our BBST model.</p>

<p>AVL trees (named after its two Soviet inventors Adelson-Velsky and Landis) use a series of <strong>rotations</strong> to keep the tree balanced. To keep track of when a certain subtree rooted at some node needs to be rotated, we maintain (or calculate) a&nbsp;<strong>balance factor</strong> variable for each node, which is the difference between the node‚Äôs left and right children‚Äôs heights, i.e.:</p>

<p>balance_factor(n) = n.left_child.height - n.right_child.height</p>

<!-- more -->

<p>AVL trees allow balance factors of -1, 0 or +1. That means that for any given node, the difference between the heights of its left and right subtrees will be at most 1. <a href="http://lcm.csa.iisc.ernet.in/dsa/node112.html">Doing the math</a> on that, it can be proven that AVL trees have at most height 1.44log n, which is pretty good sub-linear time.</p>

<p>So how we keep every node‚Äôs balance factor between -1 and 1?&nbsp;Suppose a node has +1 balance factor and we insert data on the node‚Äôs left subtree in such a way that now the node has a balance factor of +2. If we could re-arrange the elements inside the node‚Äôs child subtrees in a way that&nbsp;the root node now had zero balance, that would solve our problem. If we did so for each node in the path between the inserted node and the tree root (which we call&nbsp;<strong>branch</strong>), we would guarantee the AVL property.</p>

<p>This re-arrangement we talk of is called tree rotation. The goal&nbsp;of a tree rotation is always the same: given an unbalanced (i.e. balance factor greater than 1 or smaller than -1) node n, re-arrange its children in a manner that preserves BST property and makes n balanced, ideally&nbsp;with perfect (zero) balance.</p>

<p>Although rotation is always the same, to facilitate&nbsp;implementation and learning&nbsp;literature splits it in two groups: left (+2) and (-2) right rotation, each with two subgroups: left-left/left-right and right-right/right-left. Left and right rotation are symmetrical, so we only need to focus on one of them.</p>

<p>Suppose a node X with children Z (to the left) and D (right) has balance factor +2. Suppose that both Z and D are roots to subtrees that maintain AVL property, i.e. all of their nodes have -1, 0 or +1 balance factor.</p>

<p>Depending on Z‚Äôs balance factor, we‚Äôll need to do a left-left or a left-right rotation.&nbsp;Left-left (and its symmetrical right-right) rotations are the easiest, whilst in left-right rotations we first rotate the tree in a way that we can do a left-left rotation, so we end up doing two rotations to get a balanced tree.</p>

<p>There is no easier way to explain rotations than by drawing them. The following drawing can be found in the code, commented:</p>

<div class="highlight"><pre><code class="language-bash">  LEFT-RIGHT CASE        LEFT-LEFT CASE             BALANCED
  <span class="o">(</span>Y bal <span class="o">=</span> <span class="nt">-1</span><span class="o">)</span>            <span class="o">(</span>Y bal <span class="o">=</span> +1<span class="o">)</span>

       +2                      +2                    <span class="o">(</span>0<span class="o">)</span>
          X                       X                      Z
         / <span class="se">\ </span>                    / <span class="se">\ </span>                   /  <span class="se">\</span>
    <span class="nt">-1</span>  /   D               +1  /   D                  /    <span class="se">\</span>
       Y            <span class="se">\ </span>         Z              <span class="se">\ </span>      Y      X
      / <span class="se">\ </span>       <span class="nt">----</span><span class="se">\ </span>       / <span class="se">\ </span>         <span class="nt">----</span><span class="se">\ </span>    / <span class="se">\ </span>   / <span class="se">\</span>
     A   <span class="se">\ </span>      <span class="nt">----</span>/       /   C         <span class="nt">----</span>/    A   B  C   D
          Z         /       Y                 /
         / <span class="se">\ </span>              / <span class="se">\</span>
        B   C             A   B</code></pre></div>

<p>Rotation may seem somewhat esoteric at first, but once you focus on what is going on with the main nodes (X,Y,Z)&nbsp;all the rest unfolds naturally. In the left-left rotation, Z is the value between X and Y, so naturally we want to choose him as the new root, replacing X. By doing that, Y continues to be Z‚Äôs left child, but X, which is greater than Z and was its parent before, now is its right child. The same logic applies to subchildren A through D. Once you understand the mechanism behind rotations, you won‚Äôt even need to memorize anything.</p>

<p>Right-right and right-left rotations are symmetrical. You can find their graphics in the code comments.</p>

<p>As we mentioned before, rotations are all we need to maintain AVL property: each time we insert a node, we check for AVL violations (i.e. balance factor = +2 or -2) bottom-up starting at the inserted node and ending at the tree root. A correctly implemented AVL tree will never have balance factors greater than +2 or smaller than -2 even before rotations, so those are the only two cases you need to check for.</p>

<p>Here‚Äôs an example of a left-right rotation:</p>

<div class="highlight"><pre><code class="language-bash">BEFORE INSERTING E

                    Burger





                        M
                      <span class="nb">.</span>   <span class="nb">.</span>
                    <span class="nb">.</span>       <span class="nb">.</span>
                  <span class="nb">.</span>           <span class="nb">.</span>
                <span class="nb">.</span>               <span class="nb">.</span>
              I                   P
            <span class="nb">.</span>
          <span class="nb">.</span>
        <span class="nb">.</span>
    D <span class="nb">.</span>



AFTER INSERTING I AND MAKING A LR ROTATION

                           Burger





                               M
                             <span class="nb">.</span>   <span class="nb">.</span>
                           <span class="nb">.</span>       <span class="nb">.</span>
                         <span class="nb">.</span>           <span class="nb">.</span>
                       <span class="nb">.</span>               <span class="nb">.</span>
                     E <span class="nb">.</span>                 P
                   <span class="nb">.</span>     <span class="nb">.</span>
                 <span class="nb">.</span>         <span class="nb">.</span>
               <span class="nb">.</span>             <span class="nb">.</span>
           D <span class="nb">.</span>                 I</code></pre></div>

<p>And here‚Äôs a right-right rotation after inserting ‚ÄòT‚Äô:</p>

<div class="highlight"><pre><code class="language-bash">BEFORE
               Burger





                   I
                 <span class="nb">.</span>   <span class="nb">.</span>
               <span class="nb">.</span>       <span class="nb">.</span>
             <span class="nb">.</span>           <span class="nb">.</span>
           <span class="nb">.</span>               <span class="nb">.</span>
         G                   O <span class="nb">.</span>
                           <span class="nb">.</span>     <span class="nb">.</span>
                         <span class="nb">.</span>         <span class="nb">.</span>
                       <span class="nb">.</span>             <span class="nb">.</span>
                   N <span class="nb">.</span>                 R




AFTER
                        Burger





                            O
                          <span class="nb">.</span>   <span class="nb">.</span>
                        <span class="nb">.</span>       <span class="nb">.</span>
                      <span class="nb">.</span>           <span class="nb">.</span>
                    <span class="nb">.</span>               <span class="nb">.</span>
                  I <span class="nb">.</span>                 R <span class="nb">.</span>
                <span class="nb">.</span>     <span class="nb">.</span>                   <span class="nb">.</span>
              <span class="nb">.</span>         <span class="nb">.</span>                   <span class="nb">.</span>
            <span class="nb">.</span>             <span class="nb">.</span>                   <span class="nb">.</span>
        G <span class="nb">.</span>                 N                   T</code></pre></div>

<p>Compiling the code with _DEBUGGING and _VERBOSE defined renders a very comprehensive analysis of what‚Äôs going on before, during and after each insert and rotation. If you‚Äôre learing AVL it can be a very useful tool - just run the test several times and look at what rotations are being made, and how they work. Just look at the output.</p>

<p>I‚Äôm not going to bother with full code this time, given that the nature of rotations makes the code extremely obnoxious both to implement, debug and even look at, mainly because of all the pointer swapping business with C. In Java it would probably look much nicer.</p>

<p>Just so you have an idea, this is what a left rotation looks like:</p>

<div class="highlight"><pre><code class="language-c"><span class="c1">// LEFT ROTATION</span>
      <span class="k">if</span> <span class="p">(</span><span class="n">bal</span> <span class="o">==</span> <span class="mi">2</span><span class="p">)</span>
      <span class="p">{</span>
            <span class="c1">// LEFT-RIGHT</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">n</span><span class="o">-&gt;</span><span class="n">left_child</span><span class="o">-&gt;</span><span class="n">bal</span> <span class="o">==</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span>
            <span class="p">{</span>
                  <span class="n">DBG</span><span class="p">(</span><span class="s">"LR ROTATION..."</span><span class="p">);</span>

                  <span class="n">x</span> <span class="o">=</span> <span class="n">n</span><span class="p">;</span>
                  <span class="n">y</span> <span class="o">=</span> <span class="n">x</span><span class="o">-&gt;</span><span class="n">left_child</span><span class="p">;</span>
                  <span class="n">z</span> <span class="o">=</span> <span class="n">y</span><span class="o">-&gt;</span><span class="n">right_child</span><span class="p">;</span>

                  <span class="n">a</span> <span class="o">=</span> <span class="n">y</span><span class="o">-&gt;</span><span class="n">left_child</span><span class="p">;</span>
                  <span class="n">b</span> <span class="o">=</span> <span class="n">z</span><span class="o">-&gt;</span><span class="n">left_child</span><span class="p">;</span>
                  <span class="n">c</span> <span class="o">=</span> <span class="n">z</span><span class="o">-&gt;</span><span class="n">right_child</span><span class="p">;</span>
                  <span class="n">d</span> <span class="o">=</span> <span class="n">x</span><span class="o">-&gt;</span><span class="n">right_child</span><span class="p">;</span>

                  <span class="n">x</span><span class="o">-&gt;</span><span class="n">left_child</span> <span class="o">=</span> <span class="n">z</span><span class="p">;</span>
                  <span class="n">z</span><span class="o">-&gt;</span><span class="n">parent</span> <span class="o">=</span> <span class="n">x</span><span class="p">;</span>
                  <span class="n">z</span><span class="o">-&gt;</span><span class="n">left_child</span> <span class="o">=</span> <span class="n">y</span><span class="p">;</span>
                  <span class="n">y</span><span class="o">-&gt;</span><span class="n">parent</span> <span class="o">=</span> <span class="n">z</span><span class="p">;</span>
                  <span class="n">y</span><span class="o">-&gt;</span><span class="n">right_child</span> <span class="o">=</span> <span class="n">b</span><span class="p">;</span>
                  <span class="k">if</span> <span class="p">(</span><span class="n">b</span><span class="p">)</span> <span class="n">b</span><span class="o">-&gt;</span><span class="n">parent</span> <span class="o">=</span> <span class="n">y</span><span class="p">;</span>
            <span class="p">}</span>
            <span class="c1">// LEFT-LEFT</span>

            <span class="n">DBG</span><span class="p">(</span><span class="s">"LL ROTATION</span><span class="se">\n\n</span><span class="s">"</span><span class="p">);</span>

            <span class="n">x</span> <span class="o">=</span> <span class="n">n</span><span class="p">;</span>
            <span class="n">z</span> <span class="o">=</span> <span class="n">x</span><span class="o">-&gt;</span><span class="n">left_child</span><span class="p">;</span>
            <span class="n">y</span> <span class="o">=</span> <span class="n">z</span><span class="o">-&gt;</span><span class="n">left_child</span><span class="p">;</span>

            <span class="n">DBG</span><span class="p">(</span><span class="s">"XYZ = %c, %c, %c</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span>
            <span class="o">*</span><span class="p">(</span><span class="kt">int</span><span class="o">*</span><span class="p">)</span><span class="n">x</span><span class="o">-&gt;</span><span class="n">data</span><span class="p">,</span><span class="o">*</span><span class="p">(</span><span class="kt">int</span><span class="o">*</span><span class="p">)</span><span class="n">y</span><span class="o">-&gt;</span><span class="n">data</span><span class="p">,</span><span class="o">*</span><span class="p">(</span><span class="kt">int</span><span class="o">*</span><span class="p">)</span><span class="n">z</span><span class="o">-&gt;</span><span class="n">data</span><span class="p">);</span>

            <span class="n">a</span> <span class="o">=</span> <span class="n">y</span><span class="o">-&gt;</span><span class="n">left_child</span><span class="p">;</span>
            <span class="n">b</span> <span class="o">=</span> <span class="n">y</span><span class="o">-&gt;</span><span class="n">right_child</span><span class="p">;</span>
            <span class="n">c</span> <span class="o">=</span> <span class="n">z</span><span class="o">-&gt;</span><span class="n">right_child</span><span class="p">;</span>
            <span class="n">d</span> <span class="o">=</span> <span class="n">x</span><span class="o">-&gt;</span><span class="n">right_child</span><span class="p">;</span>


            <span class="n">z</span><span class="o">-&gt;</span><span class="n">parent</span> <span class="o">=</span> <span class="n">x</span><span class="o">-&gt;</span><span class="n">parent</span><span class="p">;</span>

            <span class="k">if</span> <span class="p">(</span><span class="n">x</span><span class="o">-&gt;</span><span class="n">parent</span><span class="p">)</span>
            <span class="p">{</span>
                  <span class="k">if</span> <span class="p">((</span><span class="n">x</span><span class="o">-&gt;</span><span class="n">parent</span><span class="o">-&gt;</span><span class="n">left_child</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="p">(</span><span class="n">x</span><span class="o">-&gt;</span><span class="n">parent</span><span class="o">-&gt;</span><span class="n">left_child</span> <span class="o">==</span> <span class="n">x</span><span class="p">))</span>
                        <span class="n">z</span><span class="o">-&gt;</span><span class="n">parent</span><span class="o">-&gt;</span><span class="n">left_child</span> <span class="o">=</span> <span class="n">z</span><span class="p">;</span>
                  <span class="k">else</span> <span class="k">if</span> <span class="p">((</span><span class="n">x</span><span class="o">-&gt;</span><span class="n">parent</span><span class="o">-&gt;</span><span class="n">right_child</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="p">(</span><span class="n">x</span><span class="o">-&gt;</span><span class="n">parent</span><span class="o">-&gt;</span><span class="n">right_child</span> <span class="o">==</span> <span class="n">x</span><span class="p">))</span>
                        <span class="n">z</span><span class="o">-&gt;</span><span class="n">parent</span><span class="o">-&gt;</span><span class="n">right_child</span> <span class="o">=</span> <span class="n">z</span><span class="p">;</span>
            <span class="p">}</span>
            <span class="n">z</span><span class="o">-&gt;</span><span class="n">right_child</span> <span class="o">=</span> <span class="n">x</span><span class="p">;</span>
            <span class="n">x</span><span class="o">-&gt;</span><span class="n">parent</span> <span class="o">=</span> <span class="n">z</span><span class="p">;</span>
            <span class="n">x</span><span class="o">-&gt;</span><span class="n">left_child</span> <span class="o">=</span> <span class="n">c</span><span class="p">;</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">c</span><span class="p">)</span> <span class="n">c</span><span class="o">-&gt;</span><span class="n">parent</span> <span class="o">=</span> <span class="n">x</span><span class="p">;</span>


            <span class="n">y</span><span class="o">-&gt;</span><span class="n">height</span> <span class="o">=</span>
                  <span class="p">(</span><span class="n">a</span><span class="o">&amp;&amp;</span><span class="n">b</span><span class="p">)</span> <span class="o">?</span> <span class="n">fmax</span><span class="p">(</span><span class="n">a</span><span class="o">-&gt;</span><span class="n">height</span><span class="p">,</span> <span class="n">b</span><span class="o">-&gt;</span><span class="n">height</span><span class="p">)</span> <span class="o">:</span>
                  <span class="n">a</span> <span class="o">?</span> <span class="n">a</span><span class="o">-&gt;</span><span class="n">height</span> <span class="o">:</span>
                  <span class="n">b</span> <span class="o">?</span> <span class="n">b</span><span class="o">-&gt;</span><span class="n">height</span> <span class="o">:</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
            <span class="n">y</span><span class="o">-&gt;</span><span class="n">height</span><span class="o">++</span><span class="p">;</span>

            <span class="n">x</span><span class="o">-&gt;</span><span class="n">height</span> <span class="o">=</span>
                  <span class="p">(</span><span class="n">c</span><span class="o">&amp;&amp;</span><span class="n">d</span><span class="p">)</span> <span class="o">?</span> <span class="n">fmax</span><span class="p">(</span><span class="n">c</span><span class="o">-&gt;</span><span class="n">height</span><span class="p">,</span> <span class="n">d</span><span class="o">-&gt;</span><span class="n">height</span><span class="p">)</span> <span class="o">:</span>
                  <span class="n">c</span> <span class="o">?</span> <span class="n">c</span><span class="o">-&gt;</span><span class="n">height</span> <span class="o">:</span>
                  <span class="n">d</span> <span class="o">?</span> <span class="n">d</span><span class="o">-&gt;</span><span class="n">height</span> <span class="o">:</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
            <span class="n">x</span><span class="o">-&gt;</span><span class="n">height</span><span class="o">++</span><span class="p">;</span>

            <span class="n">z</span><span class="o">-&gt;</span><span class="n">height</span> <span class="o">=</span> <span class="n">fmax</span><span class="p">(</span><span class="n">x</span><span class="o">-&gt;</span><span class="n">height</span><span class="p">,</span> <span class="n">y</span><span class="o">-&gt;</span><span class="n">height</span><span class="p">);</span>
            <span class="n">z</span><span class="o">-&gt;</span><span class="n">height</span><span class="o">++</span><span class="p">;</span>

            <span class="k">return</span> <span class="n">z</span><span class="p">;</span>

      <span class="p">}</span></code></pre></div>

<p>Not nice at all!</p>

<p>We are, however, going to take a brief look at the rebalance function, which does the basic housekeeping after each insertion and&nbsp;calls the appropriate rotation.</p>

<div class="highlight"><pre><code class="language-c"><span class="cm">/**
 *  @brief Recalculate heights in all nodes
 *  affected by a insertion, i.e. every node
 *  in the branch traversed during insertion.
 *
 *  After recalculating lheight and rheight
 *  of a node, calculte balance (lh-rh) and
 *  call the apropriate rotation case if
 *  bal = -2 or +2. bal should always an
 *  element of the set {-2, -1, 0, 1, 2}.
 *
 *  Should be called after insertion.
 *
 *                ------------
 *                |   COST   |
 *                ------------
 *
 *  O(log n) worst case
 *
 *  Rebalance is called each time an insertion
 *  is done, and receives the inserted node
 *  as parameter. Of course, the inserted node
 *  is always a leaf (before the rotations).
 *
 *  In a balanced BST, the difference between
 *  any two leaves' depth (distance to tree root)
 *  is at most some constant k: in AVL trees, k
 *  is at most 1 - whenever k exceeds 1, we rotate
 *  the subtree.
 *
 *  Therefore the AVL tree is guaranteed to have
 *  height h = log2 n, where n is the number of
 *  elements currently in the tree. The loop in
 *  this function will repeat at most log2 n
 *  times, resulting in O(log n) worst case time.
 *
 *
 *  @param [in] bt   Parameter_Description
 *  @param [in] leaf Parameter_Description
 *  @return Return_Description
 */</span>
<span class="kt">void</span> <span class="nf">rebalance</span><span class="p">(</span><span class="n">binary_tree</span><span class="o">*</span> <span class="n">bt</span><span class="p">,</span> <span class="n">node</span><span class="o">*</span> <span class="n">leaf</span><span class="p">)</span>
<span class="p">{</span>
      <span class="n">DBG</span><span class="p">(</span><span class="s">"</span><span class="se">\n\n</span><span class="s">STARTED CHECKING NODE %d (%c)</span><span class="se">\n</span><span class="s">=====================</span><span class="se">\n\n</span><span class="s">"</span><span class="p">,</span>
      <span class="o">*</span><span class="p">(</span><span class="kt">int</span><span class="o">*</span><span class="p">)</span><span class="n">leaf</span><span class="o">-&gt;</span><span class="n">data</span><span class="p">,</span><span class="o">*</span><span class="p">(</span><span class="kt">int</span><span class="o">*</span><span class="p">)</span><span class="n">leaf</span><span class="o">-&gt;</span><span class="n">data</span><span class="p">);</span>

      <span class="kt">int</span> <span class="n">branch_h</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
      <span class="n">node</span><span class="o">*</span> <span class="n">next</span> <span class="o">=</span> <span class="n">leaf</span><span class="p">;</span>
      <span class="k">while</span> <span class="p">(</span><span class="n">next</span><span class="p">)</span>
      <span class="p">{</span>
            <span class="n">DBG</span><span class="p">(</span><span class="s">"</span><span class="se">\n</span><span class="s">node in path %d (%c)</span><span class="se">\n</span><span class="s">-----------------</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span>
            <span class="o">*</span><span class="p">(</span><span class="kt">int</span><span class="o">*</span><span class="p">)</span><span class="n">next</span><span class="o">-&gt;</span><span class="n">data</span><span class="p">,</span><span class="o">*</span><span class="p">(</span><span class="kt">int</span><span class="o">*</span><span class="p">)</span><span class="n">next</span><span class="o">-&gt;</span><span class="n">data</span><span class="p">);</span>

            <span class="k">if</span> <span class="p">(</span><span class="n">branch_h</span> <span class="o">&gt;</span> <span class="n">next</span><span class="o">-&gt;</span><span class="n">height</span><span class="p">)</span>
            <span class="p">{</span>
                  <span class="n">next</span><span class="o">-&gt;</span><span class="n">height</span> <span class="o">=</span> <span class="n">branch_h</span><span class="p">;</span>
                  <span class="n">DBG</span><span class="p">(</span><span class="s">"Node %d new height: %d</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span><span class="o">*</span><span class="p">(</span><span class="kt">int</span><span class="o">*</span><span class="p">)</span><span class="n">next</span><span class="o">-&gt;</span><span class="n">data</span><span class="p">,</span> <span class="n">next</span><span class="o">-&gt;</span><span class="n">height</span><span class="p">);</span>
            <span class="p">}</span>


            <span class="k">if</span> <span class="p">(</span><span class="n">next</span><span class="p">)</span>
            <span class="p">{</span>
                  <span class="kt">int</span> <span class="n">lh</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
                  <span class="k">if</span> <span class="p">(</span><span class="n">next</span><span class="o">-&gt;</span><span class="n">left_child</span><span class="p">)</span> <span class="n">lh</span> <span class="o">=</span> <span class="n">next</span><span class="o">-&gt;</span><span class="n">left_child</span><span class="o">-&gt;</span><span class="n">height</span><span class="o">+</span><span class="mi">1</span><span class="p">;</span>
                  <span class="kt">int</span> <span class="n">rh</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
                  <span class="k">if</span> <span class="p">(</span><span class="n">next</span><span class="o">-&gt;</span><span class="n">right_child</span><span class="p">)</span> <span class="n">rh</span> <span class="o">=</span> <span class="n">next</span><span class="o">-&gt;</span><span class="n">right_child</span><span class="o">-&gt;</span><span class="n">height</span><span class="o">+</span><span class="mi">1</span><span class="p">;</span>

                  <span class="n">next</span><span class="o">-&gt;</span><span class="n">bal</span> <span class="o">=</span> <span class="n">lh</span><span class="o">-</span><span class="n">rh</span><span class="p">;</span>
                  <span class="n">DBG</span><span class="p">(</span><span class="s">"Node %d (%c)</span><span class="se">\t</span><span class="s">lh=%d, rh=%d</span><span class="se">\t</span><span class="s">BAL = %d</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span>
                  <span class="o">*</span><span class="p">(</span><span class="kt">int</span><span class="o">*</span><span class="p">)</span><span class="n">next</span><span class="o">-&gt;</span><span class="n">data</span><span class="p">,</span><span class="o">*</span><span class="p">(</span><span class="kt">int</span><span class="o">*</span><span class="p">)</span><span class="n">next</span><span class="o">-&gt;</span><span class="n">data</span><span class="p">,</span><span class="n">lh</span><span class="p">,</span><span class="n">rh</span><span class="p">,</span><span class="n">next</span><span class="o">-&gt;</span><span class="n">bal</span><span class="p">);</span>
            <span class="p">}</span>



            <span class="cp">#ifdef _VERBOSE
</span>            <span class="n">DBG</span><span class="p">(</span><span class="s">"</span><span class="se">\n</span><span class="s">====================</span><span class="se">\n</span><span class="s">Before rotate</span><span class="se">\n</span><span class="s">=============</span><span class="se">\n\n</span><span class="s">"</span><span class="p">);</span>
            <span class="n">clean_burger</span><span class="p">(</span><span class="n">burg</span><span class="p">);</span>
            <span class="n">print_tree</span><span class="p">(</span><span class="n">burg</span><span class="p">,</span><span class="n">bt</span><span class="o">-&gt;</span><span class="n">root</span><span class="p">,</span><span class="mi">0</span><span class="p">.</span><span class="mi">5</span><span class="p">,</span><span class="mi">0</span><span class="p">.</span><span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
            <span class="n">print_burger</span><span class="p">(</span><span class="n">burg</span><span class="p">);</span>
            <span class="cp">#endif
</span>
            <span class="n">node</span><span class="o">*</span> <span class="n">new_subtree_root</span> <span class="o">=</span> <span class="n">rotate</span><span class="p">(</span><span class="n">next</span><span class="p">);</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">new_subtree_root</span><span class="p">)</span>
            <span class="p">{</span>
                  <span class="n">next</span> <span class="o">=</span> <span class="n">new_subtree_root</span><span class="p">;</span>
            <span class="p">}</span>

            <span class="n">node</span><span class="o">*</span> <span class="n">r</span> <span class="o">=</span> <span class="n">bt</span><span class="o">-&gt;</span><span class="n">root</span><span class="p">;</span>
            <span class="k">while</span> <span class="p">(</span><span class="n">r</span><span class="p">)</span>
            <span class="p">{</span>
                  <span class="n">bt</span><span class="o">-&gt;</span><span class="n">root</span> <span class="o">=</span> <span class="n">r</span><span class="p">;</span>
                  <span class="n">DBG</span><span class="p">(</span><span class="s">"R %d</span><span class="se">\t</span><span class="s">"</span><span class="p">,</span><span class="o">*</span><span class="p">(</span><span class="kt">int</span><span class="o">*</span><span class="p">)</span><span class="n">r</span><span class="o">-&gt;</span><span class="n">data</span><span class="p">);</span>

                  <span class="n">r</span> <span class="o">=</span> <span class="n">r</span><span class="o">-&gt;</span><span class="n">parent</span><span class="p">;</span>
            <span class="p">}</span>

            <span class="cp">#ifdef _VERBOSE
</span>            <span class="k">if</span> <span class="p">(</span><span class="n">new_subtree_root</span><span class="p">)</span>
            <span class="p">{</span>
            <span class="n">DBG</span><span class="p">(</span><span class="s">"</span><span class="se">\n</span><span class="s">====================</span><span class="se">\n</span><span class="s">After rotate</span><span class="se">\n</span><span class="s">=============</span><span class="se">\n\n</span><span class="s">"</span><span class="p">);</span>
            <span class="n">clean_burger</span><span class="p">(</span><span class="n">burg</span><span class="p">);</span>
            <span class="n">print_tree</span><span class="p">(</span><span class="n">burg</span><span class="p">,</span><span class="n">bt</span><span class="o">-&gt;</span><span class="n">root</span><span class="p">,</span><span class="mi">0</span><span class="p">.</span><span class="mi">5</span><span class="p">,</span><span class="mi">0</span><span class="p">.</span><span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
            <span class="n">print_burger</span><span class="p">(</span><span class="n">burg</span><span class="p">);</span>
            <span class="p">}</span>
            <span class="cp">#endif
</span>
            <span class="n">DBG</span><span class="p">(</span><span class="s">"Finished checking node %d (%c), now checking "</span> <span class="p">,</span><span class="o">*</span><span class="p">(</span><span class="kt">int</span><span class="o">*</span><span class="p">)</span> <span class="n">next</span><span class="o">-&gt;</span><span class="n">data</span><span class="p">,</span> <span class="o">*</span><span class="p">(</span><span class="kt">int</span><span class="o">*</span><span class="p">)</span> <span class="n">next</span><span class="o">-&gt;</span><span class="n">data</span><span class="p">);</span>
            <span class="n">next</span> <span class="o">=</span> <span class="n">next</span><span class="o">-&gt;</span><span class="n">parent</span><span class="p">;</span>
            <span class="k">if</span><span class="p">(</span><span class="n">next</span><span class="p">)</span> <span class="n">DBG</span><span class="p">(</span><span class="s">"</span><span class="se">\t</span><span class="s">node %d (%c)</span><span class="se">\n</span><span class="s">"</span> <span class="p">,</span><span class="o">*</span><span class="p">(</span><span class="kt">int</span><span class="o">*</span><span class="p">)</span> <span class="n">next</span><span class="o">-&gt;</span><span class="n">data</span><span class="p">,</span> <span class="o">*</span><span class="p">(</span><span class="kt">int</span><span class="o">*</span><span class="p">)</span> <span class="n">next</span><span class="o">-&gt;</span><span class="n">data</span><span class="p">);</span>
            <span class="k">else</span> <span class="n">DBG</span><span class="p">(</span><span class="s">"(NULL - finished branch)</span><span class="se">\n</span><span class="s">"</span><span class="p">);</span>

            <span class="n">branch_h</span><span class="o">++</span><span class="p">;</span>
      <span class="p">}</span>
<span class="p">}</span></code></pre></div>

<p>The main while loop starts at the inserted node (leaf) and repeats until it reaches the tree root.&nbsp;The most important thing done here is updating each node‚Äôs height, which makes it possible to calculate node balance factor later. This is done in the first and second if, respectively. After the new balance factor is calculated, the node is passed to the rotate function, which decides based on its balance factor if it needs any of the four rotations. After the rotation, the tree root might have changed, so we make sure we keep the correct root (node* new_subtree_root and the subsequent while loop). Finally, if debugging is defined, we print the tree using <a href="%7B%%20link%20_posts/2014-03-18-burgergfx-simple-2d-graphics.markdown%20%%7D">BurgerGFX</a>&nbsp;and increment the loop (i.e. next = next-&gt;parent and branch_height++).</p>

<p>You can see how this works by using the debug flags. For example, in the right-right rotation we showed above (inserting ‚ÄòT‚Äô into the tree), here‚Äôs the console output which shows us what‚Äôs going on in the rebalance function:</p>

<div class="highlight"><pre><code class="language-bash">STARTED CHECKING NODE 84 <span class="o">(</span>T<span class="o">)</span>
<span class="o">=====================</span>


node <span class="k">in </span>path 84 <span class="o">(</span>T<span class="o">)</span>
<span class="nt">-----------------</span>
Node 84 <span class="o">(</span>T<span class="o">)</span>     <span class="nv">lh</span><span class="o">=</span>0, <span class="nv">rh</span><span class="o">=</span>0      BAL <span class="o">=</span> 0

ROTATING NODE 84 <span class="o">(</span>T<span class="o">)</span>... R 73
Finished checking node 84 <span class="o">(</span>T<span class="o">)</span>, now checking     node 82 <span class="o">(</span>R<span class="o">)</span>

node <span class="k">in </span>path 82 <span class="o">(</span>R<span class="o">)</span>
<span class="nt">-----------------</span>
Node 82 new height: 1
Node 82 <span class="o">(</span>R<span class="o">)</span>     <span class="nv">lh</span><span class="o">=</span>0, <span class="nv">rh</span><span class="o">=</span>1      BAL <span class="o">=</span> <span class="nt">-1</span>

ROTATING NODE 82 <span class="o">(</span>R<span class="o">)</span>... R 73
Finished checking node 82 <span class="o">(</span>R<span class="o">)</span>, now checking     node 79 <span class="o">(</span>O<span class="o">)</span>

node <span class="k">in </span>path 79 <span class="o">(</span>O<span class="o">)</span>
<span class="nt">-----------------</span>
Node 79 new height: 2
Node 79 <span class="o">(</span>O<span class="o">)</span>     <span class="nv">lh</span><span class="o">=</span>1, <span class="nv">rh</span><span class="o">=</span>2      BAL <span class="o">=</span> <span class="nt">-1</span>

ROTATING NODE 79 <span class="o">(</span>O<span class="o">)</span>... R 73
Finished checking node 79 <span class="o">(</span>O<span class="o">)</span>, now checking     node 73 <span class="o">(</span>I<span class="o">)</span>

node <span class="k">in </span>path 73 <span class="o">(</span>I<span class="o">)</span>
<span class="nt">-----------------</span>
Node 73 new height: 3
Node 73 <span class="o">(</span>I<span class="o">)</span>     <span class="nv">lh</span><span class="o">=</span>1, <span class="nv">rh</span><span class="o">=</span>3      BAL <span class="o">=</span> <span class="nt">-2</span>

ROTATING NODE 73 <span class="o">(</span>I<span class="o">)</span>... RR ROTATION

R 73    R 79
Finished checking node 79 <span class="o">(</span>O<span class="o">)</span>, now checking <span class="o">(</span>NULL - finished branch<span class="o">)</span></code></pre></div>

<p>You may have noticed we didn‚Äôt mention deletion. Correct - I chose not to implement it. Full code can be found on github.</p>


    </article>
    <aside>Posted at: Apr 21, 2014</aside>
    <div class="post-footer">
      <a href="../../index.html">Back</a>
    </div>
  </div>

        <div class="footer">
          2020 Leonardo Brito
        </div>
      </div>

    </div>
  


</body></html>;
T;@µ;@µo;;;;	I"7/posts/2015-10-01-trees-part-iii-red-black-tree.md;
T{;{
;U;[I"Y/home/carol/workspace/blog/content/posts/2015-10-01-trees-part-iii-red-black-tree.md;
TI"êIn our last installment on trees, we studied and implemented the [AVL tree]({% link _posts/2014-04-21-trees-part-ii-avl-tree.markdown %}). The AVL tree is one of many [self-balancing binary search trees](https://en.wikipedia.org/wiki/Self-balancing_binary_search_tree), a special kind of BST that enforces sub-linear operation costs by maintaining tree height close to the theoretical minimum of $latex log_{2}(n)$. This is usually done by what is called _tree rotation_, which is basically moving around tree nodes (and updating some special node properties).

As you can see in the Wikipedia page¬π, AVL trees guarantee that the tree height is strictly less than $latex \approx 1.44~log_{2}(n)$, while Red-black trees have a slightly worse threshold of $latex \approx 2~log_{2}(n)$; thus, AVL trees will provide significantly better search times than Red-black trees. However, while AVL trees may need to do $latex O(log(n))$ rotations after each insertion, Red-black trees must do at most 2 rotations per insertion. So either one may be your tree of choice depending on the application: if search time is critical but data doesn't get updated too often, an AVL tree will perform better; whereas a Red-black tree will perform better in scenarios where data is constantly being changed.

Self-balancing BSTs add some kind of property to tree nodes that make way for tree balancing: with AVL trees, it was the "balance factor". With Red-black trees, a "color" property is added to each node. This leads us to the **Red-black tree properties**:

1. Every node is either red or black
2. Every leaf is black
3. If a node is red, then both its children are black
4. Every path from a node to any of its descendant leafs contains the same number of black nodes

<!-- more -->

These four properties are sufficient to enforce that tree height is always less than $latex \approx 2~log_{2}(n)$. These properties are maintained by applying tree rotations (which are very similar to the ones performed in AVL trees) and by swapping node colors. The concept of Red-black trees is deceivingly simple, whilst implementation can become complicated, even more so in C, our language of choice for this kind of stuff.

Unlike AVL trees, Red-black trees have only two of rotations, left and right, depicted in the figure below:

[![red_black_tree_rotation](/assets/images/codedeposit/2015/10/red_black_tree_rotation1.png?w=625)](/assets/images/codedeposit/2015/10/red_black_tree_rotation1.png)

As you may have figured, these rotations can potentially violate rules 3 and 4, so after each rotation we'll have to check the resulting subtree nodes' colors for violations. Let's see some examples before going through the code:

[![red_black_right_rotate](/assets/images/codedeposit/2015/10/red_black_right_rotate.png)](/assets/images/codedeposit/2015/10/red_black_right_rotate.png)

Here we have a Red-black tree rooted on node **W** (which is black). We then add **M** to the tree. Since M < P < W, it is added as a left child of P. All new nodes are red¬≤, so rule 3 is violated (P is red and has a red child, M); thus, a right-rotate is performed on W (on our diagram, Y = W, X = P, alpha = M and the rest are null pointers). For convenience, the tree root is always painted black after each insertion (to avoid violation of rule 3). Let's see another example, now with left rotation:

[![red_black_left_rotate](/assets/images/codedeposit/2015/10/red_black_left_rotate.png)](/assets/images/codedeposit/2015/10/red_black_left_rotate.png)

Node **U** is inserted as a right child of S, violating rule 3 again, and the subtree K < S < U is left-rotated. However, even after rotation rule 3 is still violated, since S and U are both red. Rule 4 is violated as well: since K is black and U is red, S has paths with different amounts of black nodes (2 on the left and 1 on the right - remember than null leafs count as black nodes). This is fixed by swapping K and S's colors ('Case 3 R' as seen in the terminal).

When inserting a new node in a Red-black tree, there are in total 6 situations where rotations and color changes are needed, but half are symmetric. Here is the insertion pseudocode identifying the 3 cases:

<div class="highlight"><pre><code class="language-bash">
def red_black_insert(value, tree)
  node n = tree.bst_insert(value)
  n.set_red
  while ((tree.root != n) && parent(n).is_red)
    if grandfather(n).left == parent(n)
      if grandfather(n).right.is_red     # Case 1
        parent(n).set_black
        grandfather(n).right.set_black
        grandfather(n).set_red
        n = grandfather(n)
      else
        if n == parent(n).right          # Case 2
          n = parent(n)
          left_rotate(n)
        parent(n).set_black              # Case 3
        grandfather(n).set_red
        right_rotate(n)
    elif grandfather(n).right == parent(n)
      // Symmetric cases
  tree.root.set_black
</code></pre></div>

As usual, source code in C can be found in our [Github repo](https://github.com/lbrito1/cstuff). Simple testing is provided [here](https://github.com/lbrito1/cstuff/blob/master/tests/rb_test.c) (renders the tree in colored ASCII as seen in this post). Only insertion is implemented for now (as is the case with AVL); hopefully I'll implement deletion in the future.

## Notes

1 https://en.wikipedia.org/wiki/AVL_tree#Comparison_to_other_structures

2 This choice may seem arbitrary, but definitively helps us to not violate rule 4, which is potentially more complicated to enforce than rule 3.
;
T;U;[0I"<p>In our last installment on trees, we studied and implemented the <a href="%7B%%20link%20_posts/2014-04-21-trees-part-ii-avl-tree.markdown%20%%7D">AVL tree</a>. The AVL tree is one of many <a href="https://en.wikipedia.org/wiki/Self-balancing_binary_search_tree">self-balancing binary search trees</a>, a special kind of BST that enforces sub-linear operation costs by maintaining tree height close to the theoretical minimum of $latex log_{2}(n)$. This is usually done by what is called <em>tree rotation</em>, which is basically moving around tree nodes (and updating some special node properties).</p>

<p>As you can see in the Wikipedia page¬π, AVL trees guarantee that the tree height is strictly less than $latex \approx 1.44~log_{2}(n)$, while Red-black trees have a slightly worse threshold of $latex \approx 2~log_{2}(n)$; thus, AVL trees will provide significantly better search times than Red-black trees. However, while AVL trees may need to do $latex O(log(n))$ rotations after each insertion, Red-black trees must do at most 2 rotations per insertion. So either one may be your tree of choice depending on the application: if search time is critical but data doesn‚Äôt get updated too often, an AVL tree will perform better; whereas a Red-black tree will perform better in scenarios where data is constantly being changed.</p>

<p>Self-balancing BSTs add some kind of property to tree nodes that make way for tree balancing: with AVL trees, it was the ‚Äúbalance factor‚Äù. With Red-black trees, a ‚Äúcolor‚Äù property is added to each node. This leads us to the <strong>Red-black tree properties</strong>:</p>

<ol>
  <li>Every node is either red or black</li>
  <li>Every leaf is black</li>
  <li>If a node is red, then both its children are black</li>
  <li>Every path from a node to any of its descendant leafs contains the same number of black nodes</li>
</ol>

<!-- more -->

<p>These four properties are sufficient to enforce that tree height is always less than $latex \approx 2~log_{2}(n)$. These properties are maintained by applying tree rotations (which are very similar to the ones performed in AVL trees) and by swapping node colors. The concept of Red-black trees is deceivingly simple, whilst implementation can become complicated, even more so in C, our language of choice for this kind of stuff.</p>

<p>Unlike AVL trees, Red-black trees have only two of rotations, left and right, depicted in the figure below:</p>

<p><a href="/assets/images/codedeposit/2015/10/red_black_tree_rotation1.png"><img src="/assets/images/codedeposit/2015/10/red_black_tree_rotation1.png?w=625" alt="red_black_tree_rotation"></a></p>

<p>As you may have figured, these rotations can potentially violate rules 3 and 4, so after each rotation we‚Äôll have to check the resulting subtree nodes‚Äô colors for violations. Let‚Äôs see some examples before going through the code:</p>

<p><a href="/assets/images/codedeposit/2015/10/red_black_right_rotate.png"><img src="/assets/images/codedeposit/2015/10/red_black_right_rotate.png" alt="red_black_right_rotate"></a></p>

<p>Here we have a Red-black tree rooted on node <strong>W</strong> (which is black). We then add <strong>M</strong> to the tree. Since M &lt; P &lt; W, it is added as a left child of P. All new nodes are red¬≤, so rule 3 is violated (P is red and has a red child, M); thus, a right-rotate is performed on W (on our diagram, Y = W, X = P, alpha = M and the rest are null pointers). For convenience, the tree root is always painted black after each insertion (to avoid violation of rule 3). Let‚Äôs see another example, now with left rotation:</p>

<p><a href="/assets/images/codedeposit/2015/10/red_black_left_rotate.png"><img src="/assets/images/codedeposit/2015/10/red_black_left_rotate.png" alt="red_black_left_rotate"></a></p>

<p>Node <strong>U</strong> is inserted as a right child of S, violating rule 3 again, and the subtree K &lt; S &lt; U is left-rotated. However, even after rotation rule 3 is still violated, since S and U are both red. Rule 4 is violated as well: since K is black and U is red, S has paths with different amounts of black nodes (2 on the left and 1 on the right - remember than null leafs count as black nodes). This is fixed by swapping K and S‚Äôs colors (‚ÄòCase 3 R‚Äô as seen in the terminal).</p>

<p>When inserting a new node in a Red-black tree, there are in total 6 situations where rotations and color changes are needed, but half are symmetric. Here is the insertion pseudocode identifying the 3 cases:</p>

<div class="highlight"><pre><code class="language-bash">def red_black_insert<span class="o">(</span>value, tree<span class="o">)</span>
  node n <span class="o">=</span> tree.bst_insert<span class="o">(</span>value<span class="o">)</span>
  n.set_red
  <span class="k">while</span> <span class="o">((</span>tree.root <span class="o">!=</span> n<span class="o">)</span> <span class="o">&amp;&amp;</span> parent<span class="o">(</span>n<span class="o">)</span>.is_red<span class="o">)</span>
    <span class="k">if </span>grandfather<span class="o">(</span>n<span class="o">)</span>.left <span class="o">==</span> parent<span class="o">(</span>n<span class="o">)</span>
      <span class="k">if </span>grandfather<span class="o">(</span>n<span class="o">)</span>.right.is_red     <span class="c"># Case 1</span>
        parent<span class="o">(</span>n<span class="o">)</span>.set_black
        grandfather<span class="o">(</span>n<span class="o">)</span>.right.set_black
        grandfather<span class="o">(</span>n<span class="o">)</span>.set_red
        n <span class="o">=</span> grandfather<span class="o">(</span>n<span class="o">)</span>
      <span class="k">else
        if </span>n <span class="o">==</span> parent<span class="o">(</span>n<span class="o">)</span>.right          <span class="c"># Case 2</span>
          n <span class="o">=</span> parent<span class="o">(</span>n<span class="o">)</span>
          left_rotate<span class="o">(</span>n<span class="o">)</span>
        parent<span class="o">(</span>n<span class="o">)</span>.set_black              <span class="c"># Case 3</span>
        grandfather<span class="o">(</span>n<span class="o">)</span>.set_red
        right_rotate<span class="o">(</span>n<span class="o">)</span>
    <span class="k">elif </span>grandfather<span class="o">(</span>n<span class="o">)</span>.right <span class="o">==</span> parent<span class="o">(</span>n<span class="o">)</span>
      // Symmetric cases
  tree.root.set_black</code></pre></div>

<p>As usual, source code in C can be found in our <a href="https://github.com/lbrito1/cstuff">Github repo</a>. Simple testing is provided <a href="https://github.com/lbrito1/cstuff/blob/master/tests/rb_test.c">here</a> (renders the tree in colored ASCII as seen in this post). Only insertion is implemented for now (as is the case with AVL); hopefully I‚Äôll implement deletion in the future.</p>

<h2 id="notes">Notes</h2>

<p>1 https://en.wikipedia.org/wiki/AVL_tree#Comparison_to_other_structures</p>

<p>2 This choice may seem arbitrary, but definitively helps us to not violate rule 4, which is potentially more complicated to enforce than rule 3.</p>
;
T;U;[0I"˙#<!DOCTYPE html><html lang="en"><head>
    <meta charset="utf-8">
    <title>A Developer's Notebook - Trees, part III - Red-black tree</title>
    <link rel="stylesheet" href="https://unpkg.com/purecss@1.0.1/build/pure-min.css" integrity="sha384-oAOxQR6DkCoMliIh8yFnu25d7Eq/PHS21PClpwjOTeU2jRSq11vu66rf90/cZr47" crossorigin="anonymous">
    <link rel="stylesheet" href="../../assets/stylesheet.css">
    <link rel="stylesheet" href="../../assets/highlight.css">

    <!-- you don't need to keep this, but it's cool for stats! -->
    <meta name="generator" content="Nanoc 4.11.9">
  </head>
  <body>
    <div id="layout">
      <div class="header">
        <h1>
          <a href="../../">A Developer's Notebook</a>
        </h1>
      </div>


      <div class="content">
        <nav class="pure-g">
          <div class="pure-u-2-3 links">
            <a href="../../index.html">Home</a> ¬∑
            <a href="../../tags.html">Tags</a> ¬∑
            <a href="../../years.html">Years</a> ¬∑
            <a href="../../about.html">About</a>
          </div>

          <div class="pure-u-1-3">
            <div class="contact">
              <span>
                <a href="https://github.com/lbrito1" download="">
                  <img src="../../assets/icons/github.svg" alt="Github icon">
                  </a>
              </span>
              <span>
                <a href="https://www.linkedin.com/in/leonardo-mendes-brito/">
                <img src="../../assets/icons/linkedin.svg" alt="LinkedIn icon">
                </a>
              </span>
            </div>
          </div>
        </nav>
        
  <div class="post-show">
    <h1>Trees, part III - Red-black tree</h1>
    <article class="text">
      <p>In our last installment on trees, we studied and implemented the <a href="%7B%%20link%20_posts/2014-04-21-trees-part-ii-avl-tree.markdown%20%%7D">AVL tree</a>. The AVL tree is one of many <a href="https://en.wikipedia.org/wiki/Self-balancing_binary_search_tree">self-balancing binary search trees</a>, a special kind of BST that enforces sub-linear operation costs by maintaining tree height close to the theoretical minimum of $latex log_{2}(n)$. This is usually done by what is called <em>tree rotation</em>, which is basically moving around tree nodes (and updating some special node properties).</p>

<p>As you can see in the Wikipedia page¬π, AVL trees guarantee that the tree height is strictly less than $latex \approx 1.44~log_{2}(n)$, while Red-black trees have a slightly worse threshold of $latex \approx 2~log_{2}(n)$; thus, AVL trees will provide significantly better search times than Red-black trees. However, while AVL trees may need to do $latex O(log(n))$ rotations after each insertion, Red-black trees must do at most 2 rotations per insertion. So either one may be your tree of choice depending on the application: if search time is critical but data doesn‚Äôt get updated too often, an AVL tree will perform better; whereas a Red-black tree will perform better in scenarios where data is constantly being changed.</p>

<p>Self-balancing BSTs add some kind of property to tree nodes that make way for tree balancing: with AVL trees, it was the ‚Äúbalance factor‚Äù. With Red-black trees, a ‚Äúcolor‚Äù property is added to each node. This leads us to the <strong>Red-black tree properties</strong>:</p>

<ol>
  <li>Every node is either red or black</li>
  <li>Every leaf is black</li>
  <li>If a node is red, then both its children are black</li>
  <li>Every path from a node to any of its descendant leafs contains the same number of black nodes</li>
</ol>

<!-- more -->

<p>These four properties are sufficient to enforce that tree height is always less than $latex \approx 2~log_{2}(n)$. These properties are maintained by applying tree rotations (which are very similar to the ones performed in AVL trees) and by swapping node colors. The concept of Red-black trees is deceivingly simple, whilst implementation can become complicated, even more so in C, our language of choice for this kind of stuff.</p>

<p>Unlike AVL trees, Red-black trees have only two of rotations, left and right, depicted in the figure below:</p>

<p><a href="../../assets/images/codedeposit/2015/10/red_black_tree_rotation1.png"><img src="../../assets/images/codedeposit/2015/10/red_black_tree_rotation1.png?w=625" alt="red_black_tree_rotation"></a></p>

<p>As you may have figured, these rotations can potentially violate rules 3 and 4, so after each rotation we‚Äôll have to check the resulting subtree nodes‚Äô colors for violations. Let‚Äôs see some examples before going through the code:</p>

<p><a href="../../assets/images/codedeposit/2015/10/red_black_right_rotate.png"><img src="../../assets/images/codedeposit/2015/10/red_black_right_rotate.png" alt="red_black_right_rotate"></a></p>

<p>Here we have a Red-black tree rooted on node <strong>W</strong> (which is black). We then add <strong>M</strong> to the tree. Since M &lt; P &lt; W, it is added as a left child of P. All new nodes are red¬≤, so rule 3 is violated (P is red and has a red child, M); thus, a right-rotate is performed on W (on our diagram, Y = W, X = P, alpha = M and the rest are null pointers). For convenience, the tree root is always painted black after each insertion (to avoid violation of rule 3). Let‚Äôs see another example, now with left rotation:</p>

<p><a href="../../assets/images/codedeposit/2015/10/red_black_left_rotate.png"><img src="../../assets/images/codedeposit/2015/10/red_black_left_rotate.png" alt="red_black_left_rotate"></a></p>

<p>Node <strong>U</strong> is inserted as a right child of S, violating rule 3 again, and the subtree K &lt; S &lt; U is left-rotated. However, even after rotation rule 3 is still violated, since S and U are both red. Rule 4 is violated as well: since K is black and U is red, S has paths with different amounts of black nodes (2 on the left and 1 on the right - remember than null leafs count as black nodes). This is fixed by swapping K and S‚Äôs colors (‚ÄòCase 3 R‚Äô as seen in the terminal).</p>

<p>When inserting a new node in a Red-black tree, there are in total 6 situations where rotations and color changes are needed, but half are symmetric. Here is the insertion pseudocode identifying the 3 cases:</p>

<div class="highlight"><pre><code class="language-bash">def red_black_insert<span class="o">(</span>value, tree<span class="o">)</span>
  node n <span class="o">=</span> tree.bst_insert<span class="o">(</span>value<span class="o">)</span>
  n.set_red
  <span class="k">while</span> <span class="o">((</span>tree.root <span class="o">!=</span> n<span class="o">)</span> <span class="o">&amp;&amp;</span> parent<span class="o">(</span>n<span class="o">)</span>.is_red<span class="o">)</span>
    <span class="k">if </span>grandfather<span class="o">(</span>n<span class="o">)</span>.left <span class="o">==</span> parent<span class="o">(</span>n<span class="o">)</span>
      <span class="k">if </span>grandfather<span class="o">(</span>n<span class="o">)</span>.right.is_red     <span class="c"># Case 1</span>
        parent<span class="o">(</span>n<span class="o">)</span>.set_black
        grandfather<span class="o">(</span>n<span class="o">)</span>.right.set_black
        grandfather<span class="o">(</span>n<span class="o">)</span>.set_red
        n <span class="o">=</span> grandfather<span class="o">(</span>n<span class="o">)</span>
      <span class="k">else
        if </span>n <span class="o">==</span> parent<span class="o">(</span>n<span class="o">)</span>.right          <span class="c"># Case 2</span>
          n <span class="o">=</span> parent<span class="o">(</span>n<span class="o">)</span>
          left_rotate<span class="o">(</span>n<span class="o">)</span>
        parent<span class="o">(</span>n<span class="o">)</span>.set_black              <span class="c"># Case 3</span>
        grandfather<span class="o">(</span>n<span class="o">)</span>.set_red
        right_rotate<span class="o">(</span>n<span class="o">)</span>
    <span class="k">elif </span>grandfather<span class="o">(</span>n<span class="o">)</span>.right <span class="o">==</span> parent<span class="o">(</span>n<span class="o">)</span>
      // Symmetric cases
  tree.root.set_black</code></pre></div>

<p>As usual, source code in C can be found in our <a href="https://github.com/lbrito1/cstuff">Github repo</a>. Simple testing is provided <a href="https://github.com/lbrito1/cstuff/blob/master/tests/rb_test.c">here</a> (renders the tree in colored ASCII as seen in this post). Only insertion is implemented for now (as is the case with AVL); hopefully I‚Äôll implement deletion in the future.</p>

<h2 id="notes">Notes</h2>

<p>1 https://en.wikipedia.org/wiki/AVL_tree#Comparison_to_other_structures</p>

<p>2 This choice may seem arbitrary, but definitively helps us to not violate rule 4, which is potentially more complicated to enforce than rule 3.</p>

    </article>
    <aside>Posted at: Oct 01, 2015</aside>
    <div class="post-footer">
      <a href="../../index.html">Back</a>
    </div>
  </div>

        <div class="footer">
          2020 Leonardo Brito
        </div>
      </div>

    </div>
  


</body></html>;
T;@√;@√o;;;;	I"Y/posts/2015-10-28-building-a-shared-library-in-c-and-using-it-in-a-python-program.md;
T{;{
;U;[I"{/home/carol/workspace/blog/content/posts/2015-10-28-building-a-shared-library-in-c-and-using-it-in-a-python-program.md;
TI"ú[![pathfinding](/assets/images/codedeposit/2015/10/pathfinding.png?w=660)](/assets/images/codedeposit/2015/10/pathfinding.png)

Figure 1

How do old-time languages such as C, Fortran and others survive in a world with Python, Ruby and so on?

There is¬†plenty¬†legacy code still around which need maintaining, of course. And there are (will always be?) a few specific applications where low level is needed. But¬†one of the great things with software is building upon old stuff using new tools, which brings us to our topic today: building a shared library containing some of our C stuff and using it in nice and comfy Python. Figure 1 shows an example of what we can achieve by using graphical tools available in Python to improve our existing code's text-based output. More on that later on.

For our purposes, we consider shared libraries as a collection of compiled objects condensed into a single file, which may then be called by other software. This is, of course, a simplification. A longer discussion about shared and static libraries can be found in [1].

<!-- more -->

In this post, we will define a Python wrapper for the [linked list](https://codedeposit.wordpress.com/2014/02/14/3/) data structure we coded a couple of years ago. This is an interesting use case, by the way: writing wrappers for a shared library coded in a lower-level programming language may have several advantages. You could decide to scrap the C code and implement everything from scratch in the higher-level language, but then you're throwing away precious time spent implementing and testing in the lower-level language. The lower-level library may also offer significantly better performance than a native implementation in the higher-level language. Also, as we will see, writing a wrapper is actually exceedingly simple, as is building the shared library itself.

The process of compiling all our algorithms and data structures into shared libraries was actually didactic, because it enforced some good practices. Our project's structure is now much more organized and sane; makefiles were written; (many) bugs were found, memory leaks were unveiled and fixed. Overall, our code was improved.

Here's an example makefile that compiles one of our shared libraries, data_structures:

<div class="highlight"><pre><code class="language-make">
CFLAGS=-fPIC -DPYLIB
LDFLAGS=-shared -Wl,-soname,data_structures
PYDEP=-I/usr/include/python2.7 -lpython2.7
SRCS:=$(wildcard src/*.c)

../shared/data_structures.so:
	gcc $(SRCS) $(LDFLAGS) $(PYDEP) $(CFLAGS) $< -o $@
</code></pre></div>

**-fPIC** stands for position independent code. In short, compiled code will use a global offset table to reference addresses, which allows multiple processes to share the same code. See [2] and [3] for some nice discussions and explanations about PIC and why it is needed in this context. **-Wl** says that the next option should be passed as an argument to the linker. The option in this case is **-soname,data_structures**, which defines the shared object's name (hence _soname_) as the string "data_structures".

Now let's define the Python interface. Let's start by __init__.py, where we'll load the shared libraries:

<div class="highlight"><pre><code class="language-python">
import ctypes as ct
from pdb import set_trace as bp
libutil = ct.CDLL('shared/utils.so')
libdata = ct.CDLL('shared/data_structures.so')
libsort = ct.CDLL('shared/sorting.so')
__all__ = ['ct', 'bp', 'libutil', 'libdata', 'libsort']
</code></pre></div>

[ctypes](https://docs.python.org/2/library/ctypes.html) is the native way of loading shared libraries in Python. As the official doc states: "ctypes is a foreign function library for Python. It provides C compatible data types, and allows calling functions in DLLs or shared libraries. It can be used to wrap these libraries in pure Python."

All functions present in the **data_structures** library will be available in the Python object **libdata**. Now here's the linked list wrapper:

<div class="highlight"><pre><code class="language-python">
from cdepo import *

def intref(value):
	return ct.byref(ct.c_int(value))

class LinkedList():
	def __init__(self):
		self.ll = libdata.new_list(libutil.compare_integer, ct.sizeof(ct.c_int))

	def add(self, value):
		libdata.add_ll(self.ll, intref(value))

	def add_many(self, values):
		for v in values: self.add(v)

	def contains(self, value):
		return libdata.search_ll(self.ll, intref(value))

	def delete(self, value):
		libdata.delete_ll(self.ll, intref(value))

	def __str__(self):
		libdata.print_ll(self.ll)
		return ""

	def free(self):
		libdata.delete_linked_list(self.ll)</code></pre></div>

And here's a simple test that shows how we can use the Python class which uses our C functions underneath:

<div class="highlight"><pre><code class="language-python">
from cdepo.data_structures.linked_list import *

print "Creating list"
clist = LinkedList()
print str(clist)

print "Adding 3 and 5"
clist.add(3)
clist.add(5)
print str(clist)

print "Adding 10, 20 and 30"
clist.add_many([10,20,30])
print str(clist)

print "Deleting 5"
clist.delete(5)
print str(clist)

print "Deleting 3 (list head)"
clist.delete(3)
print str(clist)

print "Deleting 30 (list tail)"
clist.delete(30)
print str(clist)

print "Deleting the remaining elements (list should be empty)"
clist.delete(10)
clist.delete(20)
print str(clist)
</code></pre></div>

[Here's](https://gist.github.com/lbrito1/a1d0a1e60c126792d598) the output.

In our little example we only used the same functionalities we already had in C. However, one of the great advantages of accessing a library with another language is using tools that are specific to that language. As an example, let's use Matplotlib to render some images that improve our [pathfinding]({% link _posts/2014-04-06-shortest-path-part-i-dijkstras-algorithm.markdown %}) visualization. We built Python wrappers for the necessary functions (Graph-related and Dijkstra's algorithm) in the same fashion as we did with Linked List. Here's the resulting script:

<div class="highlight"><pre><code class="language-python">
import matplotlib.pyplot as plt
from cdepo.data_structures.graph import *

dim = 32

g = matrix_graph(dim)
put_rect(g, 0,3,30,5)
put_rect(g, 2,10,32,13)
put_rect(g, 10,15,12,32)

start = 0
finish = (dim**2)-2
dists = g.pathfind(start, finish)

plt.imshow(g.bgfx_mat(), interpolation='nearest', cmap='Oranges')
plt.show()

plt.imshow(g.dist_mat(dists), interpolation='nearest', cmap='gist_rainbow')
plt.show()

</code></pre></div>

:-------------------------:|:-------------------------:
[![figure_1](/assets/images/codedeposit/2015/10/figure_1.png?w=300)](/assets/images/codedeposit/2015/10/figure_1.png) | [![figure_2](/assets/images/codedeposit/2015/10/figure_2.png?w=300)](/assets/images/codedeposit/2015/10/figure_2.png)


Figure 2

Figure 2's left picture shows the shortest path (using Dijkstra's algorithm) between the two highlighted vertices. The brown rectangles represent "walls", i.e. high-cost vertices. Right picture shows the distances to the starting node of each vertex. Obviously a great improvement over [simple text-based output]({% link _posts/2014-03-18-burgergfx-simple-2d-graphics.markdown %}) which we use within C (the picture at the beginning of this post illustrates the difference).

Bottom line, compiling your stuff into shared libraries is a great way of reusing code and breathing a whole new life into it.

As always, all the code used in this post is on [Github](https://github.com/lbrito1/cstuff).

## Bibliography

[1] Beazley, David M.¬†et al., [The inside story on shared libraries and dynamic loading](http://cseweb.ucsd.edu/~gbournou/CSE131/the_inside_story_on_shared_libraries_and_dynamic_loading.pdf)

[2] [Position Independent Code and x86-64 libraries ](https://www.technovelty.org/c/position-independent-code-and-x86-64-libraries.html)

[3] http://stackoverflow.com/questions/7216244/why-is-fpic-absolutely-necessary-on-64-and-not-on-32bit-platforms

[4] [http://www.akkadia.org/drepper/dsohowto.pdf](http://www.akkadia.org/drepper/dsohowto.pdf)
;
T;U;[0I"ßJ<p><a href="/assets/images/codedeposit/2015/10/pathfinding.png"><img src="/assets/images/codedeposit/2015/10/pathfinding.png?w=660" alt="pathfinding"></a></p>

<p>Figure 1</p>

<p>How do old-time languages such as C, Fortran and others survive in a world with Python, Ruby and so on?</p>

<p>There is¬†plenty¬†legacy code still around which need maintaining, of course. And there are (will always be?) a few specific applications where low level is needed. But¬†one of the great things with software is building upon old stuff using new tools, which brings us to our topic today: building a shared library containing some of our C stuff and using it in nice and comfy Python. Figure 1 shows an example of what we can achieve by using graphical tools available in Python to improve our existing code‚Äôs text-based output. More on that later on.</p>

<p>For our purposes, we consider shared libraries as a collection of compiled objects condensed into a single file, which may then be called by other software. This is, of course, a simplification. A longer discussion about shared and static libraries can be found in [1].</p>

<!-- more -->

<p>In this post, we will define a Python wrapper for the <a href="https://codedeposit.wordpress.com/2014/02/14/3/">linked list</a> data structure we coded a couple of years ago. This is an interesting use case, by the way: writing wrappers for a shared library coded in a lower-level programming language may have several advantages. You could decide to scrap the C code and implement everything from scratch in the higher-level language, but then you‚Äôre throwing away precious time spent implementing and testing in the lower-level language. The lower-level library may also offer significantly better performance than a native implementation in the higher-level language. Also, as we will see, writing a wrapper is actually exceedingly simple, as is building the shared library itself.</p>

<p>The process of compiling all our algorithms and data structures into shared libraries was actually didactic, because it enforced some good practices. Our project‚Äôs structure is now much more organized and sane; makefiles were written; (many) bugs were found, memory leaks were unveiled and fixed. Overall, our code was improved.</p>

<p>Here‚Äôs an example makefile that compiles one of our shared libraries, data_structures:</p>

<div class="highlight"><pre><code class="language-make"><span class="nv">CFLAGS</span><span class="o">=</span><span class="nt">-fPIC</span> <span class="nt">-DPYLIB</span>
<span class="nv">LDFLAGS</span><span class="o">=</span><span class="nt">-shared</span> <span class="nt">-Wl</span>,-soname,data_structures
<span class="nv">PYDEP</span><span class="o">=</span><span class="nt">-I</span>/usr/include/python2.7 <span class="nt">-lpython2</span>.7
<span class="nv">SRCS</span><span class="o">:=</span><span class="nf">$(</span><span class="nb">wildcard</span> src/<span class="k">*</span>.c<span class="nf">)</span>

<span class="nl">../shared/data_structures.so</span><span class="o">:</span>
	gcc <span class="nv">$(SRCS)</span> <span class="nv">$(LDFLAGS)</span> <span class="nv">$(PYDEP)</span> <span class="nv">$(CFLAGS)</span> <span class="nv">$&lt;</span> <span class="nt">-o</span> <span class="nv">$@</span></code></pre></div>

<p><strong>-fPIC</strong> stands for position independent code. In short, compiled code will use a global offset table to reference addresses, which allows multiple processes to share the same code. See [2] and [3] for some nice discussions and explanations about PIC and why it is needed in this context. <strong>-Wl</strong> says that the next option should be passed as an argument to the linker. The option in this case is <strong>-soname,data_structures</strong>, which defines the shared object‚Äôs name (hence <em>soname</em>) as the string ‚Äúdata_structures‚Äù.</p>

<p>Now let‚Äôs define the Python interface. Let‚Äôs start by <strong>init</strong>.py, where we‚Äôll load the shared libraries:</p>

<div class="highlight"><pre><code class="language-python"><span class="kn">import</span> <span class="nn">ctypes</span> <span class="k">as</span> <span class="n">ct</span>
<span class="kn">from</span> <span class="nn">pdb</span> <span class="kn">import</span> <span class="n">set_trace</span> <span class="k">as</span> <span class="n">bp</span>
<span class="n">libutil</span> <span class="o">=</span> <span class="n">ct</span><span class="o">.</span><span class="n">CDLL</span><span class="p">(</span><span class="s">'shared/utils.so'</span><span class="p">)</span>
<span class="n">libdata</span> <span class="o">=</span> <span class="n">ct</span><span class="o">.</span><span class="n">CDLL</span><span class="p">(</span><span class="s">'shared/data_structures.so'</span><span class="p">)</span>
<span class="n">libsort</span> <span class="o">=</span> <span class="n">ct</span><span class="o">.</span><span class="n">CDLL</span><span class="p">(</span><span class="s">'shared/sorting.so'</span><span class="p">)</span>
<span class="n">__all__</span> <span class="o">=</span> <span class="p">[</span><span class="s">'ct'</span><span class="p">,</span> <span class="s">'bp'</span><span class="p">,</span> <span class="s">'libutil'</span><span class="p">,</span> <span class="s">'libdata'</span><span class="p">,</span> <span class="s">'libsort'</span><span class="p">]</span></code></pre></div>

<p><a href="https://docs.python.org/2/library/ctypes.html">ctypes</a> is the native way of loading shared libraries in Python. As the official doc states: ‚Äúctypes is a foreign function library for Python. It provides C compatible data types, and allows calling functions in DLLs or shared libraries. It can be used to wrap these libraries in pure Python.‚Äù</p>

<p>All functions present in the <strong>data_structures</strong> library will be available in the Python object <strong>libdata</strong>. Now here‚Äôs the linked list wrapper:</p>

<div class="highlight"><pre><code class="language-python"><span class="kn">from</span> <span class="nn">cdepo</span> <span class="kn">import</span> <span class="o">*</span>

<span class="k">def</span> <span class="nf">intref</span><span class="p">(</span><span class="n">value</span><span class="p">):</span>
	<span class="k">return</span> <span class="n">ct</span><span class="o">.</span><span class="n">byref</span><span class="p">(</span><span class="n">ct</span><span class="o">.</span><span class="n">c_int</span><span class="p">(</span><span class="n">value</span><span class="p">))</span>

<span class="k">class</span> <span class="nc">LinkedList</span><span class="p">():</span>
	<span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
		<span class="bp">self</span><span class="o">.</span><span class="n">ll</span> <span class="o">=</span> <span class="n">libdata</span><span class="o">.</span><span class="n">new_list</span><span class="p">(</span><span class="n">libutil</span><span class="o">.</span><span class="n">compare_integer</span><span class="p">,</span> <span class="n">ct</span><span class="o">.</span><span class="n">sizeof</span><span class="p">(</span><span class="n">ct</span><span class="o">.</span><span class="n">c_int</span><span class="p">))</span>

	<span class="k">def</span> <span class="nf">add</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">value</span><span class="p">):</span>
		<span class="n">libdata</span><span class="o">.</span><span class="n">add_ll</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">ll</span><span class="p">,</span> <span class="n">intref</span><span class="p">(</span><span class="n">value</span><span class="p">))</span>

	<span class="k">def</span> <span class="nf">add_many</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">values</span><span class="p">):</span>
		<span class="k">for</span> <span class="n">v</span> <span class="ow">in</span> <span class="n">values</span><span class="p">:</span> <span class="bp">self</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="n">v</span><span class="p">)</span>

	<span class="k">def</span> <span class="nf">contains</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">value</span><span class="p">):</span>
		<span class="k">return</span> <span class="n">libdata</span><span class="o">.</span><span class="n">search_ll</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">ll</span><span class="p">,</span> <span class="n">intref</span><span class="p">(</span><span class="n">value</span><span class="p">))</span>

	<span class="k">def</span> <span class="nf">delete</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">value</span><span class="p">):</span>
		<span class="n">libdata</span><span class="o">.</span><span class="n">delete_ll</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">ll</span><span class="p">,</span> <span class="n">intref</span><span class="p">(</span><span class="n">value</span><span class="p">))</span>

	<span class="k">def</span> <span class="nf">__str__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
		<span class="n">libdata</span><span class="o">.</span><span class="n">print_ll</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">ll</span><span class="p">)</span>
		<span class="k">return</span> <span class="s">""</span>

	<span class="k">def</span> <span class="nf">free</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
		<span class="n">libdata</span><span class="o">.</span><span class="n">delete_linked_list</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">ll</span><span class="p">)</span></code></pre></div>

<p>And here‚Äôs a simple test that shows how we can use the Python class which uses our C functions underneath:</p>

<div class="highlight"><pre><code class="language-python"><span class="kn">from</span> <span class="nn">cdepo.data_structures.linked_list</span> <span class="kn">import</span> <span class="o">*</span>

<span class="k">print</span> <span class="s">"Creating list"</span>
<span class="n">clist</span> <span class="o">=</span> <span class="n">LinkedList</span><span class="p">()</span>
<span class="k">print</span> <span class="nb">str</span><span class="p">(</span><span class="n">clist</span><span class="p">)</span>

<span class="k">print</span> <span class="s">"Adding 3 and 5"</span>
<span class="n">clist</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span>
<span class="n">clist</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="mi">5</span><span class="p">)</span>
<span class="k">print</span> <span class="nb">str</span><span class="p">(</span><span class="n">clist</span><span class="p">)</span>

<span class="k">print</span> <span class="s">"Adding 10, 20 and 30"</span>
<span class="n">clist</span><span class="o">.</span><span class="n">add_many</span><span class="p">([</span><span class="mi">10</span><span class="p">,</span><span class="mi">20</span><span class="p">,</span><span class="mi">30</span><span class="p">])</span>
<span class="k">print</span> <span class="nb">str</span><span class="p">(</span><span class="n">clist</span><span class="p">)</span>

<span class="k">print</span> <span class="s">"Deleting 5"</span>
<span class="n">clist</span><span class="o">.</span><span class="n">delete</span><span class="p">(</span><span class="mi">5</span><span class="p">)</span>
<span class="k">print</span> <span class="nb">str</span><span class="p">(</span><span class="n">clist</span><span class="p">)</span>

<span class="k">print</span> <span class="s">"Deleting 3 (list head)"</span>
<span class="n">clist</span><span class="o">.</span><span class="n">delete</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span>
<span class="k">print</span> <span class="nb">str</span><span class="p">(</span><span class="n">clist</span><span class="p">)</span>

<span class="k">print</span> <span class="s">"Deleting 30 (list tail)"</span>
<span class="n">clist</span><span class="o">.</span><span class="n">delete</span><span class="p">(</span><span class="mi">30</span><span class="p">)</span>
<span class="k">print</span> <span class="nb">str</span><span class="p">(</span><span class="n">clist</span><span class="p">)</span>

<span class="k">print</span> <span class="s">"Deleting the remaining elements (list should be empty)"</span>
<span class="n">clist</span><span class="o">.</span><span class="n">delete</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span>
<span class="n">clist</span><span class="o">.</span><span class="n">delete</span><span class="p">(</span><span class="mi">20</span><span class="p">)</span>
<span class="k">print</span> <span class="nb">str</span><span class="p">(</span><span class="n">clist</span><span class="p">)</span></code></pre></div>

<p><a href="https://gist.github.com/lbrito1/a1d0a1e60c126792d598">Here‚Äôs</a> the output.</p>

<p>In our little example we only used the same functionalities we already had in C. However, one of the great advantages of accessing a library with another language is using tools that are specific to that language. As an example, let‚Äôs use Matplotlib to render some images that improve our <a href="%7B%%20link%20_posts/2014-04-06-shortest-path-part-i-dijkstras-algorithm.markdown%20%%7D">pathfinding</a> visualization. We built Python wrappers for the necessary functions (Graph-related and Dijkstra‚Äôs algorithm) in the same fashion as we did with Linked List. Here‚Äôs the resulting script:</p>

<div class="highlight"><pre><code class="language-python"><span class="kn">import</span> <span class="nn">matplotlib.pyplot</span> <span class="k">as</span> <span class="n">plt</span>
<span class="kn">from</span> <span class="nn">cdepo.data_structures.graph</span> <span class="kn">import</span> <span class="o">*</span>

<span class="n">dim</span> <span class="o">=</span> <span class="mi">32</span>

<span class="n">g</span> <span class="o">=</span> <span class="n">matrix_graph</span><span class="p">(</span><span class="n">dim</span><span class="p">)</span>
<span class="n">put_rect</span><span class="p">(</span><span class="n">g</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">30</span><span class="p">,</span><span class="mi">5</span><span class="p">)</span>
<span class="n">put_rect</span><span class="p">(</span><span class="n">g</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span><span class="mi">10</span><span class="p">,</span><span class="mi">32</span><span class="p">,</span><span class="mi">13</span><span class="p">)</span>
<span class="n">put_rect</span><span class="p">(</span><span class="n">g</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span><span class="mi">15</span><span class="p">,</span><span class="mi">12</span><span class="p">,</span><span class="mi">32</span><span class="p">)</span>

<span class="n">start</span> <span class="o">=</span> <span class="mi">0</span>
<span class="n">finish</span> <span class="o">=</span> <span class="p">(</span><span class="n">dim</span><span class="o">**</span><span class="mi">2</span><span class="p">)</span><span class="o">-</span><span class="mi">2</span>
<span class="n">dists</span> <span class="o">=</span> <span class="n">g</span><span class="o">.</span><span class="n">pathfind</span><span class="p">(</span><span class="n">start</span><span class="p">,</span> <span class="n">finish</span><span class="p">)</span>

<span class="n">plt</span><span class="o">.</span><span class="n">imshow</span><span class="p">(</span><span class="n">g</span><span class="o">.</span><span class="n">bgfx_mat</span><span class="p">(),</span> <span class="n">interpolation</span><span class="o">=</span><span class="s">'nearest'</span><span class="p">,</span> <span class="n">cmap</span><span class="o">=</span><span class="s">'Oranges'</span><span class="p">)</span>
<span class="n">plt</span><span class="o">.</span><span class="n">show</span><span class="p">()</span>

<span class="n">plt</span><span class="o">.</span><span class="n">imshow</span><span class="p">(</span><span class="n">g</span><span class="o">.</span><span class="n">dist_mat</span><span class="p">(</span><span class="n">dists</span><span class="p">),</span> <span class="n">interpolation</span><span class="o">=</span><span class="s">'nearest'</span><span class="p">,</span> <span class="n">cmap</span><span class="o">=</span><span class="s">'gist_rainbow'</span><span class="p">)</span>
<span class="n">plt</span><span class="o">.</span><span class="n">show</span><span class="p">()</span></code></pre></div>

<table>
  <tbody>
    <tr>
      <td><a href="/assets/images/codedeposit/2015/10/figure_1.png"><img src="/assets/images/codedeposit/2015/10/figure_1.png?w=300" alt="figure_1"></a></td>
      <td><a href="/assets/images/codedeposit/2015/10/figure_2.png"><img src="/assets/images/codedeposit/2015/10/figure_2.png?w=300" alt="figure_2"></a></td>
    </tr>
  </tbody>
</table>

<p>Figure 2</p>

<p>Figure 2‚Äôs left picture shows the shortest path (using Dijkstra‚Äôs algorithm) between the two highlighted vertices. The brown rectangles represent ‚Äúwalls‚Äù, i.e. high-cost vertices. Right picture shows the distances to the starting node of each vertex. Obviously a great improvement over <a href="%7B%%20link%20_posts/2014-03-18-burgergfx-simple-2d-graphics.markdown%20%%7D">simple text-based output</a> which we use within C (the picture at the beginning of this post illustrates the difference).</p>

<p>Bottom line, compiling your stuff into shared libraries is a great way of reusing code and breathing a whole new life into it.</p>

<p>As always, all the code used in this post is on <a href="https://github.com/lbrito1/cstuff">Github</a>.</p>

<h2 id="bibliography">Bibliography</h2>

<p>[1] Beazley, David M.¬†et al., <a href="http://cseweb.ucsd.edu/~gbournou/CSE131/the_inside_story_on_shared_libraries_and_dynamic_loading.pdf">The inside story on shared libraries and dynamic loading</a></p>

<p>[2] <a href="https://www.technovelty.org/c/position-independent-code-and-x86-64-libraries.html">Position Independent Code and x86-64 libraries </a></p>

<p>[3] http://stackoverflow.com/questions/7216244/why-is-fpic-absolutely-necessary-on-64-and-not-on-32bit-platforms</p>

<p>[4] <a href="http://www.akkadia.org/drepper/dsohowto.pdf">http://www.akkadia.org/drepper/dsohowto.pdf</a></p>
;
T;U;[0I"·R<!DOCTYPE html><html lang="en"><head>
    <meta charset="utf-8">
    <title>A Developer's Notebook - Building a shared library in C and using it in a Python program</title>
    <link rel="stylesheet" href="https://unpkg.com/purecss@1.0.1/build/pure-min.css" integrity="sha384-oAOxQR6DkCoMliIh8yFnu25d7Eq/PHS21PClpwjOTeU2jRSq11vu66rf90/cZr47" crossorigin="anonymous">
    <link rel="stylesheet" href="../../assets/stylesheet.css">
    <link rel="stylesheet" href="../../assets/highlight.css">

    <!-- you don't need to keep this, but it's cool for stats! -->
    <meta name="generator" content="Nanoc 4.11.9">
  </head>
  <body>
    <div id="layout">
      <div class="header">
        <h1>
          <a href="../../">A Developer's Notebook</a>
        </h1>
      </div>


      <div class="content">
        <nav class="pure-g">
          <div class="pure-u-2-3 links">
            <a href="../../index.html">Home</a> ¬∑
            <a href="../../tags.html">Tags</a> ¬∑
            <a href="../../years.html">Years</a> ¬∑
            <a href="../../about.html">About</a>
          </div>

          <div class="pure-u-1-3">
            <div class="contact">
              <span>
                <a href="https://github.com/lbrito1" download="">
                  <img src="../../assets/icons/github.svg" alt="Github icon">
                  </a>
              </span>
              <span>
                <a href="https://www.linkedin.com/in/leonardo-mendes-brito/">
                <img src="../../assets/icons/linkedin.svg" alt="LinkedIn icon">
                </a>
              </span>
            </div>
          </div>
        </nav>
        
  <div class="post-show">
    <h1>Building a shared library in C and using it in a Python program</h1>
    <article class="text">
      <p><a href="../../assets/images/codedeposit/2015/10/pathfinding.png"><img src="../../assets/images/codedeposit/2015/10/pathfinding.png?w=660" alt="pathfinding"></a></p>

<p>Figure 1</p>

<p>How do old-time languages such as C, Fortran and others survive in a world with Python, Ruby and so on?</p>

<p>There is&nbsp;plenty&nbsp;legacy code still around which need maintaining, of course. And there are (will always be?) a few specific applications where low level is needed. But&nbsp;one of the great things with software is building upon old stuff using new tools, which brings us to our topic today: building a shared library containing some of our C stuff and using it in nice and comfy Python. Figure 1 shows an example of what we can achieve by using graphical tools available in Python to improve our existing code‚Äôs text-based output. More on that later on.</p>

<p>For our purposes, we consider shared libraries as a collection of compiled objects condensed into a single file, which may then be called by other software. This is, of course, a simplification. A longer discussion about shared and static libraries can be found in [1].</p>

<!-- more -->

<p>In this post, we will define a Python wrapper for the <a href="https://codedeposit.wordpress.com/2014/02/14/3/">linked list</a> data structure we coded a couple of years ago. This is an interesting use case, by the way: writing wrappers for a shared library coded in a lower-level programming language may have several advantages. You could decide to scrap the C code and implement everything from scratch in the higher-level language, but then you‚Äôre throwing away precious time spent implementing and testing in the lower-level language. The lower-level library may also offer significantly better performance than a native implementation in the higher-level language. Also, as we will see, writing a wrapper is actually exceedingly simple, as is building the shared library itself.</p>

<p>The process of compiling all our algorithms and data structures into shared libraries was actually didactic, because it enforced some good practices. Our project‚Äôs structure is now much more organized and sane; makefiles were written; (many) bugs were found, memory leaks were unveiled and fixed. Overall, our code was improved.</p>

<p>Here‚Äôs an example makefile that compiles one of our shared libraries, data_structures:</p>

<div class="highlight"><pre><code class="language-make"><span class="nv">CFLAGS</span><span class="o">=</span><span class="nt">-fPIC</span> <span class="nt">-DPYLIB</span>
<span class="nv">LDFLAGS</span><span class="o">=</span><span class="nt">-shared</span> <span class="nt">-Wl</span>,-soname,data_structures
<span class="nv">PYDEP</span><span class="o">=</span><span class="nt">-I</span>/usr/include/python2.7 <span class="nt">-lpython2</span>.7
<span class="nv">SRCS</span><span class="o">:=</span><span class="nf">$(</span><span class="nb">wildcard</span> src/<span class="k">*</span>.c<span class="nf">)</span>

<span class="nl">../shared/data_structures.so</span><span class="o">:</span>
	gcc <span class="nv">$(SRCS)</span> <span class="nv">$(LDFLAGS)</span> <span class="nv">$(PYDEP)</span> <span class="nv">$(CFLAGS)</span> <span class="nv">$&lt;</span> <span class="nt">-o</span> <span class="nv">$@</span></code></pre></div>

<p><strong>-fPIC</strong> stands for position independent code. In short, compiled code will use a global offset table to reference addresses, which allows multiple processes to share the same code. See [2] and [3] for some nice discussions and explanations about PIC and why it is needed in this context. <strong>-Wl</strong> says that the next option should be passed as an argument to the linker. The option in this case is <strong>-soname,data_structures</strong>, which defines the shared object‚Äôs name (hence <em>soname</em>) as the string ‚Äúdata_structures‚Äù.</p>

<p>Now let‚Äôs define the Python interface. Let‚Äôs start by <strong>init</strong>.py, where we‚Äôll load the shared libraries:</p>

<div class="highlight"><pre><code class="language-python"><span class="kn">import</span> <span class="nn">ctypes</span> <span class="k">as</span> <span class="n">ct</span>
<span class="kn">from</span> <span class="nn">pdb</span> <span class="kn">import</span> <span class="n">set_trace</span> <span class="k">as</span> <span class="n">bp</span>
<span class="n">libutil</span> <span class="o">=</span> <span class="n">ct</span><span class="o">.</span><span class="n">CDLL</span><span class="p">(</span><span class="s">'shared/utils.so'</span><span class="p">)</span>
<span class="n">libdata</span> <span class="o">=</span> <span class="n">ct</span><span class="o">.</span><span class="n">CDLL</span><span class="p">(</span><span class="s">'shared/data_structures.so'</span><span class="p">)</span>
<span class="n">libsort</span> <span class="o">=</span> <span class="n">ct</span><span class="o">.</span><span class="n">CDLL</span><span class="p">(</span><span class="s">'shared/sorting.so'</span><span class="p">)</span>
<span class="n">__all__</span> <span class="o">=</span> <span class="p">[</span><span class="s">'ct'</span><span class="p">,</span> <span class="s">'bp'</span><span class="p">,</span> <span class="s">'libutil'</span><span class="p">,</span> <span class="s">'libdata'</span><span class="p">,</span> <span class="s">'libsort'</span><span class="p">]</span></code></pre></div>

<p><a href="https://docs.python.org/2/library/ctypes.html">ctypes</a> is the native way of loading shared libraries in Python. As the official doc states: ‚Äúctypes is a foreign function library for Python. It provides C compatible data types, and allows calling functions in DLLs or shared libraries. It can be used to wrap these libraries in pure Python.‚Äù</p>

<p>All functions present in the <strong>data_structures</strong> library will be available in the Python object <strong>libdata</strong>. Now here‚Äôs the linked list wrapper:</p>

<div class="highlight"><pre><code class="language-python"><span class="kn">from</span> <span class="nn">cdepo</span> <span class="kn">import</span> <span class="o">*</span>

<span class="k">def</span> <span class="nf">intref</span><span class="p">(</span><span class="n">value</span><span class="p">):</span>
	<span class="k">return</span> <span class="n">ct</span><span class="o">.</span><span class="n">byref</span><span class="p">(</span><span class="n">ct</span><span class="o">.</span><span class="n">c_int</span><span class="p">(</span><span class="n">value</span><span class="p">))</span>

<span class="k">class</span> <span class="nc">LinkedList</span><span class="p">():</span>
	<span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
		<span class="bp">self</span><span class="o">.</span><span class="n">ll</span> <span class="o">=</span> <span class="n">libdata</span><span class="o">.</span><span class="n">new_list</span><span class="p">(</span><span class="n">libutil</span><span class="o">.</span><span class="n">compare_integer</span><span class="p">,</span> <span class="n">ct</span><span class="o">.</span><span class="n">sizeof</span><span class="p">(</span><span class="n">ct</span><span class="o">.</span><span class="n">c_int</span><span class="p">))</span>

	<span class="k">def</span> <span class="nf">add</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">value</span><span class="p">):</span>
		<span class="n">libdata</span><span class="o">.</span><span class="n">add_ll</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">ll</span><span class="p">,</span> <span class="n">intref</span><span class="p">(</span><span class="n">value</span><span class="p">))</span>

	<span class="k">def</span> <span class="nf">add_many</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">values</span><span class="p">):</span>
		<span class="k">for</span> <span class="n">v</span> <span class="ow">in</span> <span class="n">values</span><span class="p">:</span> <span class="bp">self</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="n">v</span><span class="p">)</span>

	<span class="k">def</span> <span class="nf">contains</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">value</span><span class="p">):</span>
		<span class="k">return</span> <span class="n">libdata</span><span class="o">.</span><span class="n">search_ll</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">ll</span><span class="p">,</span> <span class="n">intref</span><span class="p">(</span><span class="n">value</span><span class="p">))</span>

	<span class="k">def</span> <span class="nf">delete</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">value</span><span class="p">):</span>
		<span class="n">libdata</span><span class="o">.</span><span class="n">delete_ll</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">ll</span><span class="p">,</span> <span class="n">intref</span><span class="p">(</span><span class="n">value</span><span class="p">))</span>

	<span class="k">def</span> <span class="nf">__str__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
		<span class="n">libdata</span><span class="o">.</span><span class="n">print_ll</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">ll</span><span class="p">)</span>
		<span class="k">return</span> <span class="s">""</span>

	<span class="k">def</span> <span class="nf">free</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
		<span class="n">libdata</span><span class="o">.</span><span class="n">delete_linked_list</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">ll</span><span class="p">)</span></code></pre></div>

<p>And here‚Äôs a simple test that shows how we can use the Python class which uses our C functions underneath:</p>

<div class="highlight"><pre><code class="language-python"><span class="kn">from</span> <span class="nn">cdepo.data_structures.linked_list</span> <span class="kn">import</span> <span class="o">*</span>

<span class="k">print</span> <span class="s">"Creating list"</span>
<span class="n">clist</span> <span class="o">=</span> <span class="n">LinkedList</span><span class="p">()</span>
<span class="k">print</span> <span class="nb">str</span><span class="p">(</span><span class="n">clist</span><span class="p">)</span>

<span class="k">print</span> <span class="s">"Adding 3 and 5"</span>
<span class="n">clist</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span>
<span class="n">clist</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="mi">5</span><span class="p">)</span>
<span class="k">print</span> <span class="nb">str</span><span class="p">(</span><span class="n">clist</span><span class="p">)</span>

<span class="k">print</span> <span class="s">"Adding 10, 20 and 30"</span>
<span class="n">clist</span><span class="o">.</span><span class="n">add_many</span><span class="p">([</span><span class="mi">10</span><span class="p">,</span><span class="mi">20</span><span class="p">,</span><span class="mi">30</span><span class="p">])</span>
<span class="k">print</span> <span class="nb">str</span><span class="p">(</span><span class="n">clist</span><span class="p">)</span>

<span class="k">print</span> <span class="s">"Deleting 5"</span>
<span class="n">clist</span><span class="o">.</span><span class="n">delete</span><span class="p">(</span><span class="mi">5</span><span class="p">)</span>
<span class="k">print</span> <span class="nb">str</span><span class="p">(</span><span class="n">clist</span><span class="p">)</span>

<span class="k">print</span> <span class="s">"Deleting 3 (list head)"</span>
<span class="n">clist</span><span class="o">.</span><span class="n">delete</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span>
<span class="k">print</span> <span class="nb">str</span><span class="p">(</span><span class="n">clist</span><span class="p">)</span>

<span class="k">print</span> <span class="s">"Deleting 30 (list tail)"</span>
<span class="n">clist</span><span class="o">.</span><span class="n">delete</span><span class="p">(</span><span class="mi">30</span><span class="p">)</span>
<span class="k">print</span> <span class="nb">str</span><span class="p">(</span><span class="n">clist</span><span class="p">)</span>

<span class="k">print</span> <span class="s">"Deleting the remaining elements (list should be empty)"</span>
<span class="n">clist</span><span class="o">.</span><span class="n">delete</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span>
<span class="n">clist</span><span class="o">.</span><span class="n">delete</span><span class="p">(</span><span class="mi">20</span><span class="p">)</span>
<span class="k">print</span> <span class="nb">str</span><span class="p">(</span><span class="n">clist</span><span class="p">)</span></code></pre></div>

<p><a href="https://gist.github.com/lbrito1/a1d0a1e60c126792d598">Here‚Äôs</a> the output.</p>

<p>In our little example we only used the same functionalities we already had in C. However, one of the great advantages of accessing a library with another language is using tools that are specific to that language. As an example, let‚Äôs use Matplotlib to render some images that improve our <a href="%7B%%20link%20_posts/2014-04-06-shortest-path-part-i-dijkstras-algorithm.markdown%20%%7D">pathfinding</a> visualization. We built Python wrappers for the necessary functions (Graph-related and Dijkstra‚Äôs algorithm) in the same fashion as we did with Linked List. Here‚Äôs the resulting script:</p>

<div class="highlight"><pre><code class="language-python"><span class="kn">import</span> <span class="nn">matplotlib.pyplot</span> <span class="k">as</span> <span class="n">plt</span>
<span class="kn">from</span> <span class="nn">cdepo.data_structures.graph</span> <span class="kn">import</span> <span class="o">*</span>

<span class="n">dim</span> <span class="o">=</span> <span class="mi">32</span>

<span class="n">g</span> <span class="o">=</span> <span class="n">matrix_graph</span><span class="p">(</span><span class="n">dim</span><span class="p">)</span>
<span class="n">put_rect</span><span class="p">(</span><span class="n">g</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">30</span><span class="p">,</span><span class="mi">5</span><span class="p">)</span>
<span class="n">put_rect</span><span class="p">(</span><span class="n">g</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span><span class="mi">10</span><span class="p">,</span><span class="mi">32</span><span class="p">,</span><span class="mi">13</span><span class="p">)</span>
<span class="n">put_rect</span><span class="p">(</span><span class="n">g</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span><span class="mi">15</span><span class="p">,</span><span class="mi">12</span><span class="p">,</span><span class="mi">32</span><span class="p">)</span>

<span class="n">start</span> <span class="o">=</span> <span class="mi">0</span>
<span class="n">finish</span> <span class="o">=</span> <span class="p">(</span><span class="n">dim</span><span class="o">**</span><span class="mi">2</span><span class="p">)</span><span class="o">-</span><span class="mi">2</span>
<span class="n">dists</span> <span class="o">=</span> <span class="n">g</span><span class="o">.</span><span class="n">pathfind</span><span class="p">(</span><span class="n">start</span><span class="p">,</span> <span class="n">finish</span><span class="p">)</span>

<span class="n">plt</span><span class="o">.</span><span class="n">imshow</span><span class="p">(</span><span class="n">g</span><span class="o">.</span><span class="n">bgfx_mat</span><span class="p">(),</span> <span class="n">interpolation</span><span class="o">=</span><span class="s">'nearest'</span><span class="p">,</span> <span class="n">cmap</span><span class="o">=</span><span class="s">'Oranges'</span><span class="p">)</span>
<span class="n">plt</span><span class="o">.</span><span class="n">show</span><span class="p">()</span>

<span class="n">plt</span><span class="o">.</span><span class="n">imshow</span><span class="p">(</span><span class="n">g</span><span class="o">.</span><span class="n">dist_mat</span><span class="p">(</span><span class="n">dists</span><span class="p">),</span> <span class="n">interpolation</span><span class="o">=</span><span class="s">'nearest'</span><span class="p">,</span> <span class="n">cmap</span><span class="o">=</span><span class="s">'gist_rainbow'</span><span class="p">)</span>
<span class="n">plt</span><span class="o">.</span><span class="n">show</span><span class="p">()</span></code></pre></div>

<table>
  <tbody>
    <tr>
      <td><a href="../../assets/images/codedeposit/2015/10/figure_1.png"><img src="../../assets/images/codedeposit/2015/10/figure_1.png?w=300" alt="figure_1"></a></td>
      <td><a href="../../assets/images/codedeposit/2015/10/figure_2.png"><img src="../../assets/images/codedeposit/2015/10/figure_2.png?w=300" alt="figure_2"></a></td>
    </tr>
  </tbody>
</table>

<p>Figure 2</p>

<p>Figure 2‚Äôs left picture shows the shortest path (using Dijkstra‚Äôs algorithm) between the two highlighted vertices. The brown rectangles represent ‚Äúwalls‚Äù, i.e. high-cost vertices. Right picture shows the distances to the starting node of each vertex. Obviously a great improvement over <a href="%7B%%20link%20_posts/2014-03-18-burgergfx-simple-2d-graphics.markdown%20%%7D">simple text-based output</a> which we use within C (the picture at the beginning of this post illustrates the difference).</p>

<p>Bottom line, compiling your stuff into shared libraries is a great way of reusing code and breathing a whole new life into it.</p>

<p>As always, all the code used in this post is on <a href="https://github.com/lbrito1/cstuff">Github</a>.</p>

<h2 id="bibliography">Bibliography</h2>

<p>[1] Beazley, David M.&nbsp;et al., <a href="http://cseweb.ucsd.edu/~gbournou/CSE131/the_inside_story_on_shared_libraries_and_dynamic_loading.pdf">The inside story on shared libraries and dynamic loading</a></p>

<p>[2] <a href="https://www.technovelty.org/c/position-independent-code-and-x86-64-libraries.html">Position Independent Code and x86-64 libraries </a></p>

<p>[3] http://stackoverflow.com/questions/7216244/why-is-fpic-absolutely-necessary-on-64-and-not-on-32bit-platforms</p>

<p>[4] <a href="http://www.akkadia.org/drepper/dsohowto.pdf">http://www.akkadia.org/drepper/dsohowto.pdf</a></p>

    </article>
    <aside>Posted at: Oct 28, 2015</aside>
    <div class="post-footer">
      <a href="../../index.html">Back</a>
    </div>
  </div>

        <div class="footer">
          2020 Leonardo Brito
        </div>
      </div>

    </div>
  


</body></html>;
T;@—;@—o;;;;	I"/posts/2014-03-23-graph.md;
T{;{
;U;[I"A/home/carol/workspace/blog/content/posts/2014-03-23-graph.md;
TI"eMathematically, a graph is a set of vertices and edges, thus a graph `G` is usually written as `G(V,E)`. Besides linking vertices in the graph, edges can also carry a specific value which may be interpreted as cost, weight, distance etc.

[![graph viewed with BurgerGFX](/assets/images/codedeposit/2014/03/graph1.jpg)](/assets/images/codedeposit/2014/03/graph1.jpg)

In computer science, we're interested in the (abstract) data structure used to implement the graph mathematical concept. Let's first discuss the basic elements in a graph - vertices and edges:

<div class="highlight"><pre><code class="language-c">

typedef struct vertex
{
 unsigned long id;
 int status;
 double x,y;
 void* data;
} vertex;

</code></pre></div>

Vertices should be able to hold any kind of data, so we'll just throw in a void pointer for that. Other than that we have an id, status (marked or unmarked - more on that later) and 2D coordinates so we can draw the vertices somewhere.

<div class="highlight"><pre><code class="language-c">

typedef struct edge
{
 vertex* from, *to;
 int cost;
} edge;

</code></pre></div>

Edges consist of just pointers to the vertices they link and an optional value used as weight, distance, cost etc. Strictly speaking we could use a void pointer for that value as well, as long as we also defined a comparison function. But let's save the hassle and just use an integer instead - most algorithms will be fine with that.

<!-- more -->

Those two structs together with their allocation and compare functions comprise the basic code we need to start building a graph. Full code can be found in `graphs/graph_ve.c`.

Now that we have a way to represent edges and vertices, we need a convenient way to represent the graph itself. Namely, we need to be able to quickly and conveniently identify, add and remove vertices and edges. There are two traditional approaches to do that, each with its own appropriate usages: adjacency matrix and adjacency list.

Adjacency matrices use a matrix to represent edges (and possibly the edge's value), e.g. if graph `G` has `v` vertices, matrix `E(v x v)` represents `G`'s edges, each matrix element representing if the edge exists and if so what value it has. This is a fast and straightforward approach to representing edges, but the fixed n¬≤ space requirement is very bad if we have a sparse graph, which unfortunately is often the case.

Adjacency lists on the other hand use lists to represent edges. Each vertex has it's own list holding pointers to all of its neighbors. In its simplest form, a graph `G(V,E)` will have an `|V|` sized array with lists containing only integers (corresponding to the vertex id) -- `adj_list[a]` would contain the ids to every neighbor of vertex `v` with `id=a`. We're using linked lists with our edge struct.

Adding and identifying vertices is trivial: vertex `v` with `id=i` is located at `vertices[i]`. Adding edges is also trivial (adding `edge*` to the linked list). If we have an undirected graph, we add 2 edges instead, one at `adj_list[vertex_from]` and one at `adj_list[vertex_to]`.

Testing code can be found in the test folder together with some drawing functions that print the graph with our BurgerGFX utility.

<div class="highlight"><pre><code class="language-c">

/*
 File: al_graph.c

Dependencies: linked_list.c, graph_ve.c

This is a graph implementation with adjacency lists.

 A graph with nv vertices will have nv (readable) adjacency lists,
 located at the adj_list array (double pointer to linked list).

 adj_list[idx] contains all edges originating from vertex v with
 v->id = idx. If G is an undirected graph, adding an edge from
 vertex vf to vertex vt will add equivalent edges to the both lists,
 i.e. adj_list[vf->id] and adj_list[vt->id].

 Copyright (c) 2014 Leonardo Brito <lbrito@gmail.com>

This software is free software; you can redistribute it and/or modify
 it under the terms of the GNU General Public License as published by
 the Free Software Foundation; either version 2 of the License, or
 (at your option) any later version.

 This program is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 GNU General Public License for more details.

 You should have received a copy of the GNU General Public License along
 with this program; if not, write the Free Software Foundation, Inc., 51
 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
*/

#define DIRECTED 0
#define UNDIRECTED 1
#include "graph_ve.c"
#include "../data_structures/linked_list.c"

typedef struct graph
{
 vertex** vertices;
 int directed;
 unsigned long max_vertices;
 unsigned long n_edges;
 unsigned long nv;
 linked_list** adj_list;
 void (*printvert) (void*);
} graph;

typedef struct edge_iter
{
 graph* g;
 vertex* origin;
 element* head;
 int idx, length;
} edge_iter;

/**
 * @brief
 *
 * @param [in] n_vertices max n vertices
 * @param [in] directed DIRECTED or UNDIRECTED graph
 * @return
 */
graph* new_graph(int n_vertices, int directed)
{
 graph* g_p = malloc(sizeof(graph));
 g_p->directed = directed;
 g_p->max_vertices = n_vertices;
 g_p->vertices = malloc(sizeof(vertex*)*g_p->max_vertices);
 g_p->nv = 0;
 g_p->n_edges = 0;
 g_p->adj_list = malloc(sizeof(linked_list*)*g_p->max_vertices);
 int i=0;
 for (;i<g_p->max_vertices;i++) g_p->adj_list[i] = new_list(compare_e);
 return g_p;
}

/**
 * @brief Edge iterator: all neighbors of vertex 'from'
 *
 * @param [in] g
 * @param [in] from
 * @return
 */
edge_iter* new_edge_it(graph* g, vertex* from)
{
 edge_iter* it = malloc(sizeof(edge_iter));
 it->g = g;
 it->origin = from;
 it->head = g->adj_list[from->id]->head->next;
 it->idx = 0;
 it->length = g->adj_list[from->id]->size;
 return it;
}

/**
 * @brief Next edge in list
 *
 * @param [in] it
 * @return
 */
edge* next_edge(edge_iter* it)
{
 if (++it->idx < it->length)
 {
 edge* e = (edge*) it->head->data;
 it->head = it->head->next;
 return e;
 }
 else return NULL;
}

/**
 * @brief Get edge from adjacency list
 *
 * @param [in] g
 * @param [in] from
 * @param [in] to
 * @return
 */
edge* get_edge(graph* g, int from, int to)
{
 element* e = g->adj_list[from]->head;
 while ((e=e->next) != NULL) if (((((edge*) e->data)->to)->id) == to) return ((edge*) e->data);
 return NULL;
}

/**
 * @brief Get vertex from array @idx
 *
 * @param [in] g
 * @param [in] idx
 * @return
 */
vertex* get_vertex(graph* g, int idx)
{
 if (idx>g->nv) return NULL;
 return g->vertices[idx];
}

/**
 * @brief Add vertex to graph
 *
 * @param [in] g
 * @param [in] data vertex data
 * @return created vertex
 */
vertex* add_vertex(graph* g, void* data)
{
 vertex* v;
 int pos = g->nv;
 if (pos < g->max_vertices)
 {
 v = (g->vertices[pos] = new_vertex(pos, data));
 add((g->adj_list[pos]), NULL); //prepare adjlist
 g->nv++;
 }
 else return NULL;

 return v;
}

/**
 * @brief Add edge to graph
 *
 * @param [in] g
 * @param [in] vf
 * @param [in] vt
 * @param [in] cost
 * @return
 */
void add_edge(graph* g, vertex* vf, vertex* vt, int cost)
{
 add((g->adj_list[vf->id]), new_edge(vf,vt,cost));
 if (g->directed == UNDIRECTED) add((g->adj_list[vt->id]), new_edge(vt,vf,cost));
}

/**
 * @brief Get number of vertices in graph
 *
 * @param [in] g
 * @return
 */
int get_nv(graph* g)
{
 return g->nv;
}

/**
 * @brief Visit vertex @idx
 *
 * @param [in] g
 * @param [in] idx
 * @return
 */
int visit_vert(graph* g, int idx)
{
 return visit(g->vertices[idx]);
}

</code></pre></div>
;
T;U;[0I"8X<p>Mathematically, a graph is a set of vertices and edges, thus a graph <code>G</code> is usually written as <code>G(V,E)</code>. Besides linking vertices in the graph, edges can also carry a specific value which may be interpreted as cost, weight, distance etc.</p>

<p><a href="/assets/images/codedeposit/2014/03/graph1.jpg"><img src="/assets/images/codedeposit/2014/03/graph1.jpg" alt="graph viewed with BurgerGFX"></a></p>

<p>In computer science, we‚Äôre interested in the (abstract) data structure used to implement the graph mathematical concept. Let‚Äôs first discuss the basic elements in a graph - vertices and edges:</p>

<div class="highlight"><pre><code class="language-c"><span class="k">typedef</span> <span class="k">struct</span> <span class="n">vertex</span>
<span class="p">{</span>
 <span class="kt">unsigned</span> <span class="kt">long</span> <span class="n">id</span><span class="p">;</span>
 <span class="kt">int</span> <span class="n">status</span><span class="p">;</span>
 <span class="kt">double</span> <span class="n">x</span><span class="p">,</span><span class="n">y</span><span class="p">;</span>
 <span class="kt">void</span><span class="o">*</span> <span class="n">data</span><span class="p">;</span>
<span class="p">}</span> <span class="n">vertex</span><span class="p">;</span></code></pre></div>

<p>Vertices should be able to hold any kind of data, so we‚Äôll just throw in a void pointer for that. Other than that we have an id, status (marked or unmarked - more on that later) and 2D coordinates so we can draw the vertices somewhere.</p>

<div class="highlight"><pre><code class="language-c"><span class="k">typedef</span> <span class="k">struct</span> <span class="n">edge</span>
<span class="p">{</span>
 <span class="n">vertex</span><span class="o">*</span> <span class="n">from</span><span class="p">,</span> <span class="o">*</span><span class="n">to</span><span class="p">;</span>
 <span class="kt">int</span> <span class="n">cost</span><span class="p">;</span>
<span class="p">}</span> <span class="n">edge</span><span class="p">;</span></code></pre></div>

<p>Edges consist of just pointers to the vertices they link and an optional value used as weight, distance, cost etc. Strictly speaking we could use a void pointer for that value as well, as long as we also defined a comparison function. But let‚Äôs save the hassle and just use an integer instead - most algorithms will be fine with that.</p>

<!-- more -->

<p>Those two structs together with their allocation and compare functions comprise the basic code we need to start building a graph. Full code can be found in <code>graphs/graph_ve.c</code>.</p>

<p>Now that we have a way to represent edges and vertices, we need a convenient way to represent the graph itself. Namely, we need to be able to quickly and conveniently identify, add and remove vertices and edges. There are two traditional approaches to do that, each with its own appropriate usages: adjacency matrix and adjacency list.</p>

<p>Adjacency matrices use a matrix to represent edges (and possibly the edge‚Äôs value), e.g. if graph <code>G</code> has <code>v</code> vertices, matrix <code>E(v x v)</code> represents <code>G</code>‚Äôs edges, each matrix element representing if the edge exists and if so what value it has. This is a fast and straightforward approach to representing edges, but the fixed n¬≤ space requirement is very bad if we have a sparse graph, which unfortunately is often the case.</p>

<p>Adjacency lists on the other hand use lists to represent edges. Each vertex has it‚Äôs own list holding pointers to all of its neighbors. In its simplest form, a graph <code>G(V,E)</code> will have an <code>|V|</code> sized array with lists containing only integers (corresponding to the vertex id) ‚Äì <code>adj_list[a]</code> would contain the ids to every neighbor of vertex <code>v</code> with <code>id=a</code>. We‚Äôre using linked lists with our edge struct.</p>

<p>Adding and identifying vertices is trivial: vertex <code>v</code> with <code>id=i</code> is located at <code>vertices[i]</code>. Adding edges is also trivial (adding <code>edge*</code> to the linked list). If we have an undirected graph, we add 2 edges instead, one at <code>adj_list[vertex_from]</code> and one at <code>adj_list[vertex_to]</code>.</p>

<p>Testing code can be found in the test folder together with some drawing functions that print the graph with our BurgerGFX utility.</p>

<div class="highlight"><pre><code class="language-c"><span class="cm">/*
 File: al_graph.c

Dependencies: linked_list.c, graph_ve.c

This is a graph implementation with adjacency lists.

 A graph with nv vertices will have nv (readable) adjacency lists,
 located at the adj_list array (double pointer to linked list).

 adj_list[idx] contains all edges originating from vertex v with
 v-&gt;id = idx. If G is an undirected graph, adding an edge from
 vertex vf to vertex vt will add equivalent edges to the both lists,
 i.e. adj_list[vf-&gt;id] and adj_list[vt-&gt;id].

 Copyright (c) 2014 Leonardo Brito &lt;lbrito@gmail.com&gt;

This software is free software; you can redistribute it and/or modify
 it under the terms of the GNU General Public License as published by
 the Free Software Foundation; either version 2 of the License, or
 (at your option) any later version.

 This program is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 GNU General Public License for more details.

 You should have received a copy of the GNU General Public License along
 with this program; if not, write the Free Software Foundation, Inc., 51
 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
*/</span>

<span class="cp">#define DIRECTED 0
#define UNDIRECTED 1
#include "graph_ve.c"
#include "../data_structures/linked_list.c"
</span>
<span class="k">typedef</span> <span class="k">struct</span> <span class="n">graph</span>
<span class="p">{</span>
 <span class="n">vertex</span><span class="o">**</span> <span class="n">vertices</span><span class="p">;</span>
 <span class="kt">int</span> <span class="n">directed</span><span class="p">;</span>
 <span class="kt">unsigned</span> <span class="kt">long</span> <span class="n">max_vertices</span><span class="p">;</span>
 <span class="kt">unsigned</span> <span class="kt">long</span> <span class="n">n_edges</span><span class="p">;</span>
 <span class="kt">unsigned</span> <span class="kt">long</span> <span class="n">nv</span><span class="p">;</span>
 <span class="n">linked_list</span><span class="o">**</span> <span class="n">adj_list</span><span class="p">;</span>
 <span class="kt">void</span> <span class="p">(</span><span class="o">*</span><span class="n">printvert</span><span class="p">)</span> <span class="p">(</span><span class="kt">void</span><span class="o">*</span><span class="p">);</span>
<span class="p">}</span> <span class="n">graph</span><span class="p">;</span>

<span class="k">typedef</span> <span class="k">struct</span> <span class="n">edge_iter</span>
<span class="p">{</span>
 <span class="n">graph</span><span class="o">*</span> <span class="n">g</span><span class="p">;</span>
 <span class="n">vertex</span><span class="o">*</span> <span class="n">origin</span><span class="p">;</span>
 <span class="n">element</span><span class="o">*</span> <span class="n">head</span><span class="p">;</span>
 <span class="kt">int</span> <span class="n">idx</span><span class="p">,</span> <span class="n">length</span><span class="p">;</span>
<span class="p">}</span> <span class="n">edge_iter</span><span class="p">;</span>

<span class="cm">/**
 * @brief
 *
 * @param [in] n_vertices max n vertices
 * @param [in] directed DIRECTED or UNDIRECTED graph
 * @return
 */</span>
<span class="n">graph</span><span class="o">*</span> <span class="nf">new_graph</span><span class="p">(</span><span class="kt">int</span> <span class="n">n_vertices</span><span class="p">,</span> <span class="kt">int</span> <span class="n">directed</span><span class="p">)</span>
<span class="p">{</span>
 <span class="n">graph</span><span class="o">*</span> <span class="n">g_p</span> <span class="o">=</span> <span class="n">malloc</span><span class="p">(</span><span class="k">sizeof</span><span class="p">(</span><span class="n">graph</span><span class="p">));</span>
 <span class="n">g_p</span><span class="o">-&gt;</span><span class="n">directed</span> <span class="o">=</span> <span class="n">directed</span><span class="p">;</span>
 <span class="n">g_p</span><span class="o">-&gt;</span><span class="n">max_vertices</span> <span class="o">=</span> <span class="n">n_vertices</span><span class="p">;</span>
 <span class="n">g_p</span><span class="o">-&gt;</span><span class="n">vertices</span> <span class="o">=</span> <span class="n">malloc</span><span class="p">(</span><span class="k">sizeof</span><span class="p">(</span><span class="n">vertex</span><span class="o">*</span><span class="p">)</span><span class="o">*</span><span class="n">g_p</span><span class="o">-&gt;</span><span class="n">max_vertices</span><span class="p">);</span>
 <span class="n">g_p</span><span class="o">-&gt;</span><span class="n">nv</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
 <span class="n">g_p</span><span class="o">-&gt;</span><span class="n">n_edges</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
 <span class="n">g_p</span><span class="o">-&gt;</span><span class="n">adj_list</span> <span class="o">=</span> <span class="n">malloc</span><span class="p">(</span><span class="k">sizeof</span><span class="p">(</span><span class="n">linked_list</span><span class="o">*</span><span class="p">)</span><span class="o">*</span><span class="n">g_p</span><span class="o">-&gt;</span><span class="n">max_vertices</span><span class="p">);</span>
 <span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span>
 <span class="k">for</span> <span class="p">(;</span><span class="n">imax_vertices</span><span class="p">;</span><span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="n">g_p</span><span class="o">-&gt;</span><span class="n">adj_list</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">new_list</span><span class="p">(</span><span class="n">compare_e</span><span class="p">);</span>
 <span class="k">return</span> <span class="n">g_p</span><span class="p">;</span>
<span class="p">}</span>

<span class="cm">/**
 * @brief Edge iterator: all neighbors of vertex 'from'
 *
 * @param [in] g
 * @param [in] from
 * @return
 */</span>
<span class="n">edge_iter</span><span class="o">*</span> <span class="nf">new_edge_it</span><span class="p">(</span><span class="n">graph</span><span class="o">*</span> <span class="n">g</span><span class="p">,</span> <span class="n">vertex</span><span class="o">*</span> <span class="n">from</span><span class="p">)</span>
<span class="p">{</span>
 <span class="n">edge_iter</span><span class="o">*</span> <span class="n">it</span> <span class="o">=</span> <span class="n">malloc</span><span class="p">(</span><span class="k">sizeof</span><span class="p">(</span><span class="n">edge_iter</span><span class="p">));</span>
 <span class="n">it</span><span class="o">-&gt;</span><span class="n">g</span> <span class="o">=</span> <span class="n">g</span><span class="p">;</span>
 <span class="n">it</span><span class="o">-&gt;</span><span class="n">origin</span> <span class="o">=</span> <span class="n">from</span><span class="p">;</span>
 <span class="n">it</span><span class="o">-&gt;</span><span class="n">head</span> <span class="o">=</span> <span class="n">g</span><span class="o">-&gt;</span><span class="n">adj_list</span><span class="p">[</span><span class="n">from</span><span class="o">-&gt;</span><span class="n">id</span><span class="p">]</span><span class="o">-&gt;</span><span class="n">head</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">;</span>
 <span class="n">it</span><span class="o">-&gt;</span><span class="n">idx</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
 <span class="n">it</span><span class="o">-&gt;</span><span class="n">length</span> <span class="o">=</span> <span class="n">g</span><span class="o">-&gt;</span><span class="n">adj_list</span><span class="p">[</span><span class="n">from</span><span class="o">-&gt;</span><span class="n">id</span><span class="p">]</span><span class="o">-&gt;</span><span class="n">size</span><span class="p">;</span>
 <span class="k">return</span> <span class="n">it</span><span class="p">;</span>
<span class="p">}</span>

<span class="cm">/**
 * @brief Next edge in list
 *
 * @param [in] it
 * @return
 */</span>
<span class="n">edge</span><span class="o">*</span> <span class="nf">next_edge</span><span class="p">(</span><span class="n">edge_iter</span><span class="o">*</span> <span class="n">it</span><span class="p">)</span>
<span class="p">{</span>
 <span class="k">if</span> <span class="p">(</span><span class="o">++</span><span class="n">it</span><span class="o">-&gt;</span><span class="n">idx</span> <span class="o">&lt;</span> <span class="n">it</span><span class="o">-&gt;</span><span class="n">length</span><span class="p">)</span>
 <span class="p">{</span>
 <span class="n">edge</span><span class="o">*</span> <span class="n">e</span> <span class="o">=</span> <span class="p">(</span><span class="n">edge</span><span class="o">*</span><span class="p">)</span> <span class="n">it</span><span class="o">-&gt;</span><span class="n">head</span><span class="o">-&gt;</span><span class="n">data</span><span class="p">;</span>
 <span class="n">it</span><span class="o">-&gt;</span><span class="n">head</span> <span class="o">=</span> <span class="n">it</span><span class="o">-&gt;</span><span class="n">head</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">;</span>
 <span class="k">return</span> <span class="n">e</span><span class="p">;</span>
 <span class="p">}</span>
 <span class="k">else</span> <span class="k">return</span> <span class="nb">NULL</span><span class="p">;</span>
<span class="p">}</span>

<span class="cm">/**
 * @brief Get edge from adjacency list
 *
 * @param [in] g
 * @param [in] from
 * @param [in] to
 * @return
 */</span>
<span class="n">edge</span><span class="o">*</span> <span class="nf">get_edge</span><span class="p">(</span><span class="n">graph</span><span class="o">*</span> <span class="n">g</span><span class="p">,</span> <span class="kt">int</span> <span class="n">from</span><span class="p">,</span> <span class="kt">int</span> <span class="n">to</span><span class="p">)</span>
<span class="p">{</span>
 <span class="n">element</span><span class="o">*</span> <span class="n">e</span> <span class="o">=</span> <span class="n">g</span><span class="o">-&gt;</span><span class="n">adj_list</span><span class="p">[</span><span class="n">from</span><span class="p">]</span><span class="o">-&gt;</span><span class="n">head</span><span class="p">;</span>
 <span class="k">while</span> <span class="p">((</span><span class="n">e</span><span class="o">=</span><span class="n">e</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">)</span> <span class="o">!=</span> <span class="nb">NULL</span><span class="p">)</span> <span class="k">if</span> <span class="p">(((((</span><span class="n">edge</span><span class="o">*</span><span class="p">)</span> <span class="n">e</span><span class="o">-&gt;</span><span class="n">data</span><span class="p">)</span><span class="o">-&gt;</span><span class="n">to</span><span class="p">)</span><span class="o">-&gt;</span><span class="n">id</span><span class="p">)</span> <span class="o">==</span> <span class="n">to</span><span class="p">)</span> <span class="k">return</span> <span class="p">((</span><span class="n">edge</span><span class="o">*</span><span class="p">)</span> <span class="n">e</span><span class="o">-&gt;</span><span class="n">data</span><span class="p">);</span>
 <span class="k">return</span> <span class="nb">NULL</span><span class="p">;</span>
<span class="p">}</span>

<span class="cm">/**
 * @brief Get vertex from array @idx
 *
 * @param [in] g
 * @param [in] idx
 * @return
 */</span>
<span class="n">vertex</span><span class="o">*</span> <span class="nf">get_vertex</span><span class="p">(</span><span class="n">graph</span><span class="o">*</span> <span class="n">g</span><span class="p">,</span> <span class="kt">int</span> <span class="n">idx</span><span class="p">)</span>
<span class="p">{</span>
 <span class="k">if</span> <span class="p">(</span><span class="n">idx</span><span class="o">&gt;</span><span class="n">g</span><span class="o">-&gt;</span><span class="n">nv</span><span class="p">)</span> <span class="k">return</span> <span class="nb">NULL</span><span class="p">;</span>
 <span class="k">return</span> <span class="n">g</span><span class="o">-&gt;</span><span class="n">vertices</span><span class="p">[</span><span class="n">idx</span><span class="p">];</span>
<span class="p">}</span>

<span class="cm">/**
 * @brief Add vertex to graph
 *
 * @param [in] g
 * @param [in] data vertex data
 * @return created vertex
 */</span>
<span class="n">vertex</span><span class="o">*</span> <span class="nf">add_vertex</span><span class="p">(</span><span class="n">graph</span><span class="o">*</span> <span class="n">g</span><span class="p">,</span> <span class="kt">void</span><span class="o">*</span> <span class="n">data</span><span class="p">)</span>
<span class="p">{</span>
 <span class="n">vertex</span><span class="o">*</span> <span class="n">v</span><span class="p">;</span>
 <span class="kt">int</span> <span class="n">pos</span> <span class="o">=</span> <span class="n">g</span><span class="o">-&gt;</span><span class="n">nv</span><span class="p">;</span>
 <span class="k">if</span> <span class="p">(</span><span class="n">pos</span> <span class="o">&lt;</span> <span class="n">g</span><span class="o">-&gt;</span><span class="n">max_vertices</span><span class="p">)</span>
 <span class="p">{</span>
 <span class="n">v</span> <span class="o">=</span> <span class="p">(</span><span class="n">g</span><span class="o">-&gt;</span><span class="n">vertices</span><span class="p">[</span><span class="n">pos</span><span class="p">]</span> <span class="o">=</span> <span class="n">new_vertex</span><span class="p">(</span><span class="n">pos</span><span class="p">,</span> <span class="n">data</span><span class="p">));</span>
 <span class="n">add</span><span class="p">((</span><span class="n">g</span><span class="o">-&gt;</span><span class="n">adj_list</span><span class="p">[</span><span class="n">pos</span><span class="p">]),</span> <span class="nb">NULL</span><span class="p">);</span> <span class="c1">//prepare adjlist</span>
 <span class="n">g</span><span class="o">-&gt;</span><span class="n">nv</span><span class="o">++</span><span class="p">;</span>
 <span class="p">}</span>
 <span class="k">else</span> <span class="k">return</span> <span class="nb">NULL</span><span class="p">;</span>

 <span class="k">return</span> <span class="n">v</span><span class="p">;</span>
<span class="p">}</span>

<span class="cm">/**
 * @brief Add edge to graph
 *
 * @param [in] g
 * @param [in] vf
 * @param [in] vt
 * @param [in] cost
 * @return
 */</span>
<span class="kt">void</span> <span class="nf">add_edge</span><span class="p">(</span><span class="n">graph</span><span class="o">*</span> <span class="n">g</span><span class="p">,</span> <span class="n">vertex</span><span class="o">*</span> <span class="n">vf</span><span class="p">,</span> <span class="n">vertex</span><span class="o">*</span> <span class="n">vt</span><span class="p">,</span> <span class="kt">int</span> <span class="n">cost</span><span class="p">)</span>
<span class="p">{</span>
 <span class="n">add</span><span class="p">((</span><span class="n">g</span><span class="o">-&gt;</span><span class="n">adj_list</span><span class="p">[</span><span class="n">vf</span><span class="o">-&gt;</span><span class="n">id</span><span class="p">]),</span> <span class="n">new_edge</span><span class="p">(</span><span class="n">vf</span><span class="p">,</span><span class="n">vt</span><span class="p">,</span><span class="n">cost</span><span class="p">));</span>
 <span class="k">if</span> <span class="p">(</span><span class="n">g</span><span class="o">-&gt;</span><span class="n">directed</span> <span class="o">==</span> <span class="n">UNDIRECTED</span><span class="p">)</span> <span class="n">add</span><span class="p">((</span><span class="n">g</span><span class="o">-&gt;</span><span class="n">adj_list</span><span class="p">[</span><span class="n">vt</span><span class="o">-&gt;</span><span class="n">id</span><span class="p">]),</span> <span class="n">new_edge</span><span class="p">(</span><span class="n">vt</span><span class="p">,</span><span class="n">vf</span><span class="p">,</span><span class="n">cost</span><span class="p">));</span>
<span class="p">}</span>

<span class="cm">/**
 * @brief Get number of vertices in graph
 *
 * @param [in] g
 * @return
 */</span>
<span class="kt">int</span> <span class="nf">get_nv</span><span class="p">(</span><span class="n">graph</span><span class="o">*</span> <span class="n">g</span><span class="p">)</span>
<span class="p">{</span>
 <span class="k">return</span> <span class="n">g</span><span class="o">-&gt;</span><span class="n">nv</span><span class="p">;</span>
<span class="p">}</span>

<span class="cm">/**
 * @brief Visit vertex @idx
 *
 * @param [in] g
 * @param [in] idx
 * @return
 */</span>
<span class="kt">int</span> <span class="nf">visit_vert</span><span class="p">(</span><span class="n">graph</span><span class="o">*</span> <span class="n">g</span><span class="p">,</span> <span class="kt">int</span> <span class="n">idx</span><span class="p">)</span>
<span class="p">{</span>
 <span class="k">return</span> <span class="n">visit</span><span class="p">(</span><span class="n">g</span><span class="o">-&gt;</span><span class="n">vertices</span><span class="p">[</span><span class="n">idx</span><span class="p">]);</span>
<span class="p">}</span>

<span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;&lt;/</span><span class="n">div</span><span class="o">&gt;</span></code></pre></div>
;
T;U;[0I"⁄_<!DOCTYPE html><html lang="en"><head>
    <meta charset="utf-8">
    <title>A Developer's Notebook - Graph</title>
    <link rel="stylesheet" href="https://unpkg.com/purecss@1.0.1/build/pure-min.css" integrity="sha384-oAOxQR6DkCoMliIh8yFnu25d7Eq/PHS21PClpwjOTeU2jRSq11vu66rf90/cZr47" crossorigin="anonymous">
    <link rel="stylesheet" href="../../assets/stylesheet.css">
    <link rel="stylesheet" href="../../assets/highlight.css">

    <!-- you don't need to keep this, but it's cool for stats! -->
    <meta name="generator" content="Nanoc 4.11.9">
  </head>
  <body>
    <div id="layout">
      <div class="header">
        <h1>
          <a href="../../">A Developer's Notebook</a>
        </h1>
      </div>


      <div class="content">
        <nav class="pure-g">
          <div class="pure-u-2-3 links">
            <a href="../../index.html">Home</a> ¬∑
            <a href="../../tags.html">Tags</a> ¬∑
            <a href="../../years.html">Years</a> ¬∑
            <a href="../../about.html">About</a>
          </div>

          <div class="pure-u-1-3">
            <div class="contact">
              <span>
                <a href="https://github.com/lbrito1" download="">
                  <img src="../../assets/icons/github.svg" alt="Github icon">
                  </a>
              </span>
              <span>
                <a href="https://www.linkedin.com/in/leonardo-mendes-brito/">
                <img src="../../assets/icons/linkedin.svg" alt="LinkedIn icon">
                </a>
              </span>
            </div>
          </div>
        </nav>
        
  <div class="post-show">
    <h1>Graph</h1>
    <article class="text">
      <p>Mathematically, a graph is a set of vertices and edges, thus a graph <code>G</code> is usually written as <code>G(V,E)</code>. Besides linking vertices in the graph, edges can also carry a specific value which may be interpreted as cost, weight, distance etc.</p>

<p><a href="../../assets/images/codedeposit/2014/03/graph1.jpg"><img src="../../assets/images/codedeposit/2014/03/graph1.jpg" alt="graph viewed with BurgerGFX"></a></p>

<p>In computer science, we‚Äôre interested in the (abstract) data structure used to implement the graph mathematical concept. Let‚Äôs first discuss the basic elements in a graph - vertices and edges:</p>

<div class="highlight"><pre><code class="language-c"><span class="k">typedef</span> <span class="k">struct</span> <span class="n">vertex</span>
<span class="p">{</span>
 <span class="kt">unsigned</span> <span class="kt">long</span> <span class="n">id</span><span class="p">;</span>
 <span class="kt">int</span> <span class="n">status</span><span class="p">;</span>
 <span class="kt">double</span> <span class="n">x</span><span class="p">,</span><span class="n">y</span><span class="p">;</span>
 <span class="kt">void</span><span class="o">*</span> <span class="n">data</span><span class="p">;</span>
<span class="p">}</span> <span class="n">vertex</span><span class="p">;</span></code></pre></div>

<p>Vertices should be able to hold any kind of data, so we‚Äôll just throw in a void pointer for that. Other than that we have an id, status (marked or unmarked - more on that later) and 2D coordinates so we can draw the vertices somewhere.</p>

<div class="highlight"><pre><code class="language-c"><span class="k">typedef</span> <span class="k">struct</span> <span class="n">edge</span>
<span class="p">{</span>
 <span class="n">vertex</span><span class="o">*</span> <span class="n">from</span><span class="p">,</span> <span class="o">*</span><span class="n">to</span><span class="p">;</span>
 <span class="kt">int</span> <span class="n">cost</span><span class="p">;</span>
<span class="p">}</span> <span class="n">edge</span><span class="p">;</span></code></pre></div>

<p>Edges consist of just pointers to the vertices they link and an optional value used as weight, distance, cost etc. Strictly speaking we could use a void pointer for that value as well, as long as we also defined a comparison function. But let‚Äôs save the hassle and just use an integer instead - most algorithms will be fine with that.</p>

<!-- more -->

<p>Those two structs together with their allocation and compare functions comprise the basic code we need to start building a graph. Full code can be found in <code>graphs/graph_ve.c</code>.</p>

<p>Now that we have a way to represent edges and vertices, we need a convenient way to represent the graph itself. Namely, we need to be able to quickly and conveniently identify, add and remove vertices and edges. There are two traditional approaches to do that, each with its own appropriate usages: adjacency matrix and adjacency list.</p>

<p>Adjacency matrices use a matrix to represent edges (and possibly the edge‚Äôs value), e.g. if graph <code>G</code> has <code>v</code> vertices, matrix <code>E(v x v)</code> represents <code>G</code>‚Äôs edges, each matrix element representing if the edge exists and if so what value it has. This is a fast and straightforward approach to representing edges, but the fixed n¬≤ space requirement is very bad if we have a sparse graph, which unfortunately is often the case.</p>

<p>Adjacency lists on the other hand use lists to represent edges. Each vertex has it‚Äôs own list holding pointers to all of its neighbors. In its simplest form, a graph <code>G(V,E)</code> will have an <code>|V|</code> sized array with lists containing only integers (corresponding to the vertex id) ‚Äì <code>adj_list[a]</code> would contain the ids to every neighbor of vertex <code>v</code> with <code>id=a</code>. We‚Äôre using linked lists with our edge struct.</p>

<p>Adding and identifying vertices is trivial: vertex <code>v</code> with <code>id=i</code> is located at <code>vertices[i]</code>. Adding edges is also trivial (adding <code>edge*</code> to the linked list). If we have an undirected graph, we add 2 edges instead, one at <code>adj_list[vertex_from]</code> and one at <code>adj_list[vertex_to]</code>.</p>

<p>Testing code can be found in the test folder together with some drawing functions that print the graph with our BurgerGFX utility.</p>

<div class="highlight"><pre><code class="language-c"><span class="cm">/*
 File: al_graph.c

Dependencies: linked_list.c, graph_ve.c

This is a graph implementation with adjacency lists.

 A graph with nv vertices will have nv (readable) adjacency lists,
 located at the adj_list array (double pointer to linked list).

 adj_list[idx] contains all edges originating from vertex v with
 v-&gt;id = idx. If G is an undirected graph, adding an edge from
 vertex vf to vertex vt will add equivalent edges to the both lists,
 i.e. adj_list[vf-&gt;id] and adj_list[vt-&gt;id].

 Copyright (c) 2014 Leonardo Brito &lt;lbrito@gmail.com&gt;

This software is free software; you can redistribute it and/or modify
 it under the terms of the GNU General Public License as published by
 the Free Software Foundation; either version 2 of the License, or
 (at your option) any later version.

 This program is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 GNU General Public License for more details.

 You should have received a copy of the GNU General Public License along
 with this program; if not, write the Free Software Foundation, Inc., 51
 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
*/</span>

<span class="cp">#define DIRECTED 0
#define UNDIRECTED 1
#include "graph_ve.c"
#include "../data_structures/linked_list.c"
</span>
<span class="k">typedef</span> <span class="k">struct</span> <span class="n">graph</span>
<span class="p">{</span>
 <span class="n">vertex</span><span class="o">**</span> <span class="n">vertices</span><span class="p">;</span>
 <span class="kt">int</span> <span class="n">directed</span><span class="p">;</span>
 <span class="kt">unsigned</span> <span class="kt">long</span> <span class="n">max_vertices</span><span class="p">;</span>
 <span class="kt">unsigned</span> <span class="kt">long</span> <span class="n">n_edges</span><span class="p">;</span>
 <span class="kt">unsigned</span> <span class="kt">long</span> <span class="n">nv</span><span class="p">;</span>
 <span class="n">linked_list</span><span class="o">**</span> <span class="n">adj_list</span><span class="p">;</span>
 <span class="kt">void</span> <span class="p">(</span><span class="o">*</span><span class="n">printvert</span><span class="p">)</span> <span class="p">(</span><span class="kt">void</span><span class="o">*</span><span class="p">);</span>
<span class="p">}</span> <span class="n">graph</span><span class="p">;</span>

<span class="k">typedef</span> <span class="k">struct</span> <span class="n">edge_iter</span>
<span class="p">{</span>
 <span class="n">graph</span><span class="o">*</span> <span class="n">g</span><span class="p">;</span>
 <span class="n">vertex</span><span class="o">*</span> <span class="n">origin</span><span class="p">;</span>
 <span class="n">element</span><span class="o">*</span> <span class="n">head</span><span class="p">;</span>
 <span class="kt">int</span> <span class="n">idx</span><span class="p">,</span> <span class="n">length</span><span class="p">;</span>
<span class="p">}</span> <span class="n">edge_iter</span><span class="p">;</span>

<span class="cm">/**
 * @brief
 *
 * @param [in] n_vertices max n vertices
 * @param [in] directed DIRECTED or UNDIRECTED graph
 * @return
 */</span>
<span class="n">graph</span><span class="o">*</span> <span class="nf">new_graph</span><span class="p">(</span><span class="kt">int</span> <span class="n">n_vertices</span><span class="p">,</span> <span class="kt">int</span> <span class="n">directed</span><span class="p">)</span>
<span class="p">{</span>
 <span class="n">graph</span><span class="o">*</span> <span class="n">g_p</span> <span class="o">=</span> <span class="n">malloc</span><span class="p">(</span><span class="k">sizeof</span><span class="p">(</span><span class="n">graph</span><span class="p">));</span>
 <span class="n">g_p</span><span class="o">-&gt;</span><span class="n">directed</span> <span class="o">=</span> <span class="n">directed</span><span class="p">;</span>
 <span class="n">g_p</span><span class="o">-&gt;</span><span class="n">max_vertices</span> <span class="o">=</span> <span class="n">n_vertices</span><span class="p">;</span>
 <span class="n">g_p</span><span class="o">-&gt;</span><span class="n">vertices</span> <span class="o">=</span> <span class="n">malloc</span><span class="p">(</span><span class="k">sizeof</span><span class="p">(</span><span class="n">vertex</span><span class="o">*</span><span class="p">)</span><span class="o">*</span><span class="n">g_p</span><span class="o">-&gt;</span><span class="n">max_vertices</span><span class="p">);</span>
 <span class="n">g_p</span><span class="o">-&gt;</span><span class="n">nv</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
 <span class="n">g_p</span><span class="o">-&gt;</span><span class="n">n_edges</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
 <span class="n">g_p</span><span class="o">-&gt;</span><span class="n">adj_list</span> <span class="o">=</span> <span class="n">malloc</span><span class="p">(</span><span class="k">sizeof</span><span class="p">(</span><span class="n">linked_list</span><span class="o">*</span><span class="p">)</span><span class="o">*</span><span class="n">g_p</span><span class="o">-&gt;</span><span class="n">max_vertices</span><span class="p">);</span>
 <span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span>
 <span class="k">for</span> <span class="p">(;</span><span class="n">imax_vertices</span><span class="p">;</span><span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="n">g_p</span><span class="o">-&gt;</span><span class="n">adj_list</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">new_list</span><span class="p">(</span><span class="n">compare_e</span><span class="p">);</span>
 <span class="k">return</span> <span class="n">g_p</span><span class="p">;</span>
<span class="p">}</span>

<span class="cm">/**
 * @brief Edge iterator: all neighbors of vertex 'from'
 *
 * @param [in] g
 * @param [in] from
 * @return
 */</span>
<span class="n">edge_iter</span><span class="o">*</span> <span class="nf">new_edge_it</span><span class="p">(</span><span class="n">graph</span><span class="o">*</span> <span class="n">g</span><span class="p">,</span> <span class="n">vertex</span><span class="o">*</span> <span class="n">from</span><span class="p">)</span>
<span class="p">{</span>
 <span class="n">edge_iter</span><span class="o">*</span> <span class="n">it</span> <span class="o">=</span> <span class="n">malloc</span><span class="p">(</span><span class="k">sizeof</span><span class="p">(</span><span class="n">edge_iter</span><span class="p">));</span>
 <span class="n">it</span><span class="o">-&gt;</span><span class="n">g</span> <span class="o">=</span> <span class="n">g</span><span class="p">;</span>
 <span class="n">it</span><span class="o">-&gt;</span><span class="n">origin</span> <span class="o">=</span> <span class="n">from</span><span class="p">;</span>
 <span class="n">it</span><span class="o">-&gt;</span><span class="n">head</span> <span class="o">=</span> <span class="n">g</span><span class="o">-&gt;</span><span class="n">adj_list</span><span class="p">[</span><span class="n">from</span><span class="o">-&gt;</span><span class="n">id</span><span class="p">]</span><span class="o">-&gt;</span><span class="n">head</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">;</span>
 <span class="n">it</span><span class="o">-&gt;</span><span class="n">idx</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
 <span class="n">it</span><span class="o">-&gt;</span><span class="n">length</span> <span class="o">=</span> <span class="n">g</span><span class="o">-&gt;</span><span class="n">adj_list</span><span class="p">[</span><span class="n">from</span><span class="o">-&gt;</span><span class="n">id</span><span class="p">]</span><span class="o">-&gt;</span><span class="n">size</span><span class="p">;</span>
 <span class="k">return</span> <span class="n">it</span><span class="p">;</span>
<span class="p">}</span>

<span class="cm">/**
 * @brief Next edge in list
 *
 * @param [in] it
 * @return
 */</span>
<span class="n">edge</span><span class="o">*</span> <span class="nf">next_edge</span><span class="p">(</span><span class="n">edge_iter</span><span class="o">*</span> <span class="n">it</span><span class="p">)</span>
<span class="p">{</span>
 <span class="k">if</span> <span class="p">(</span><span class="o">++</span><span class="n">it</span><span class="o">-&gt;</span><span class="n">idx</span> <span class="o">&lt;</span> <span class="n">it</span><span class="o">-&gt;</span><span class="n">length</span><span class="p">)</span>
 <span class="p">{</span>
 <span class="n">edge</span><span class="o">*</span> <span class="n">e</span> <span class="o">=</span> <span class="p">(</span><span class="n">edge</span><span class="o">*</span><span class="p">)</span> <span class="n">it</span><span class="o">-&gt;</span><span class="n">head</span><span class="o">-&gt;</span><span class="n">data</span><span class="p">;</span>
 <span class="n">it</span><span class="o">-&gt;</span><span class="n">head</span> <span class="o">=</span> <span class="n">it</span><span class="o">-&gt;</span><span class="n">head</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">;</span>
 <span class="k">return</span> <span class="n">e</span><span class="p">;</span>
 <span class="p">}</span>
 <span class="k">else</span> <span class="k">return</span> <span class="nb">NULL</span><span class="p">;</span>
<span class="p">}</span>

<span class="cm">/**
 * @brief Get edge from adjacency list
 *
 * @param [in] g
 * @param [in] from
 * @param [in] to
 * @return
 */</span>
<span class="n">edge</span><span class="o">*</span> <span class="nf">get_edge</span><span class="p">(</span><span class="n">graph</span><span class="o">*</span> <span class="n">g</span><span class="p">,</span> <span class="kt">int</span> <span class="n">from</span><span class="p">,</span> <span class="kt">int</span> <span class="n">to</span><span class="p">)</span>
<span class="p">{</span>
 <span class="n">element</span><span class="o">*</span> <span class="n">e</span> <span class="o">=</span> <span class="n">g</span><span class="o">-&gt;</span><span class="n">adj_list</span><span class="p">[</span><span class="n">from</span><span class="p">]</span><span class="o">-&gt;</span><span class="n">head</span><span class="p">;</span>
 <span class="k">while</span> <span class="p">((</span><span class="n">e</span><span class="o">=</span><span class="n">e</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">)</span> <span class="o">!=</span> <span class="nb">NULL</span><span class="p">)</span> <span class="k">if</span> <span class="p">(((((</span><span class="n">edge</span><span class="o">*</span><span class="p">)</span> <span class="n">e</span><span class="o">-&gt;</span><span class="n">data</span><span class="p">)</span><span class="o">-&gt;</span><span class="n">to</span><span class="p">)</span><span class="o">-&gt;</span><span class="n">id</span><span class="p">)</span> <span class="o">==</span> <span class="n">to</span><span class="p">)</span> <span class="k">return</span> <span class="p">((</span><span class="n">edge</span><span class="o">*</span><span class="p">)</span> <span class="n">e</span><span class="o">-&gt;</span><span class="n">data</span><span class="p">);</span>
 <span class="k">return</span> <span class="nb">NULL</span><span class="p">;</span>
<span class="p">}</span>

<span class="cm">/**
 * @brief Get vertex from array @idx
 *
 * @param [in] g
 * @param [in] idx
 * @return
 */</span>
<span class="n">vertex</span><span class="o">*</span> <span class="nf">get_vertex</span><span class="p">(</span><span class="n">graph</span><span class="o">*</span> <span class="n">g</span><span class="p">,</span> <span class="kt">int</span> <span class="n">idx</span><span class="p">)</span>
<span class="p">{</span>
 <span class="k">if</span> <span class="p">(</span><span class="n">idx</span><span class="o">&gt;</span><span class="n">g</span><span class="o">-&gt;</span><span class="n">nv</span><span class="p">)</span> <span class="k">return</span> <span class="nb">NULL</span><span class="p">;</span>
 <span class="k">return</span> <span class="n">g</span><span class="o">-&gt;</span><span class="n">vertices</span><span class="p">[</span><span class="n">idx</span><span class="p">];</span>
<span class="p">}</span>

<span class="cm">/**
 * @brief Add vertex to graph
 *
 * @param [in] g
 * @param [in] data vertex data
 * @return created vertex
 */</span>
<span class="n">vertex</span><span class="o">*</span> <span class="nf">add_vertex</span><span class="p">(</span><span class="n">graph</span><span class="o">*</span> <span class="n">g</span><span class="p">,</span> <span class="kt">void</span><span class="o">*</span> <span class="n">data</span><span class="p">)</span>
<span class="p">{</span>
 <span class="n">vertex</span><span class="o">*</span> <span class="n">v</span><span class="p">;</span>
 <span class="kt">int</span> <span class="n">pos</span> <span class="o">=</span> <span class="n">g</span><span class="o">-&gt;</span><span class="n">nv</span><span class="p">;</span>
 <span class="k">if</span> <span class="p">(</span><span class="n">pos</span> <span class="o">&lt;</span> <span class="n">g</span><span class="o">-&gt;</span><span class="n">max_vertices</span><span class="p">)</span>
 <span class="p">{</span>
 <span class="n">v</span> <span class="o">=</span> <span class="p">(</span><span class="n">g</span><span class="o">-&gt;</span><span class="n">vertices</span><span class="p">[</span><span class="n">pos</span><span class="p">]</span> <span class="o">=</span> <span class="n">new_vertex</span><span class="p">(</span><span class="n">pos</span><span class="p">,</span> <span class="n">data</span><span class="p">));</span>
 <span class="n">add</span><span class="p">((</span><span class="n">g</span><span class="o">-&gt;</span><span class="n">adj_list</span><span class="p">[</span><span class="n">pos</span><span class="p">]),</span> <span class="nb">NULL</span><span class="p">);</span> <span class="c1">//prepare adjlist</span>
 <span class="n">g</span><span class="o">-&gt;</span><span class="n">nv</span><span class="o">++</span><span class="p">;</span>
 <span class="p">}</span>
 <span class="k">else</span> <span class="k">return</span> <span class="nb">NULL</span><span class="p">;</span>

 <span class="k">return</span> <span class="n">v</span><span class="p">;</span>
<span class="p">}</span>

<span class="cm">/**
 * @brief Add edge to graph
 *
 * @param [in] g
 * @param [in] vf
 * @param [in] vt
 * @param [in] cost
 * @return
 */</span>
<span class="kt">void</span> <span class="nf">add_edge</span><span class="p">(</span><span class="n">graph</span><span class="o">*</span> <span class="n">g</span><span class="p">,</span> <span class="n">vertex</span><span class="o">*</span> <span class="n">vf</span><span class="p">,</span> <span class="n">vertex</span><span class="o">*</span> <span class="n">vt</span><span class="p">,</span> <span class="kt">int</span> <span class="n">cost</span><span class="p">)</span>
<span class="p">{</span>
 <span class="n">add</span><span class="p">((</span><span class="n">g</span><span class="o">-&gt;</span><span class="n">adj_list</span><span class="p">[</span><span class="n">vf</span><span class="o">-&gt;</span><span class="n">id</span><span class="p">]),</span> <span class="n">new_edge</span><span class="p">(</span><span class="n">vf</span><span class="p">,</span><span class="n">vt</span><span class="p">,</span><span class="n">cost</span><span class="p">));</span>
 <span class="k">if</span> <span class="p">(</span><span class="n">g</span><span class="o">-&gt;</span><span class="n">directed</span> <span class="o">==</span> <span class="n">UNDIRECTED</span><span class="p">)</span> <span class="n">add</span><span class="p">((</span><span class="n">g</span><span class="o">-&gt;</span><span class="n">adj_list</span><span class="p">[</span><span class="n">vt</span><span class="o">-&gt;</span><span class="n">id</span><span class="p">]),</span> <span class="n">new_edge</span><span class="p">(</span><span class="n">vt</span><span class="p">,</span><span class="n">vf</span><span class="p">,</span><span class="n">cost</span><span class="p">));</span>
<span class="p">}</span>

<span class="cm">/**
 * @brief Get number of vertices in graph
 *
 * @param [in] g
 * @return
 */</span>
<span class="kt">int</span> <span class="nf">get_nv</span><span class="p">(</span><span class="n">graph</span><span class="o">*</span> <span class="n">g</span><span class="p">)</span>
<span class="p">{</span>
 <span class="k">return</span> <span class="n">g</span><span class="o">-&gt;</span><span class="n">nv</span><span class="p">;</span>
<span class="p">}</span>

<span class="cm">/**
 * @brief Visit vertex @idx
 *
 * @param [in] g
 * @param [in] idx
 * @return
 */</span>
<span class="kt">int</span> <span class="nf">visit_vert</span><span class="p">(</span><span class="n">graph</span><span class="o">*</span> <span class="n">g</span><span class="p">,</span> <span class="kt">int</span> <span class="n">idx</span><span class="p">)</span>
<span class="p">{</span>
 <span class="k">return</span> <span class="n">visit</span><span class="p">(</span><span class="n">g</span><span class="o">-&gt;</span><span class="n">vertices</span><span class="p">[</span><span class="n">idx</span><span class="p">]);</span>
<span class="p">}</span>

<span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;&lt;/</span><span class="n">div</span><span class="o">&gt;</span></code></pre></div>

    </article>
    <aside>Posted at: Mar 23, 2014</aside>
    <div class="post-footer">
      <a href="../../index.html">Back</a>
    </div>
  </div>

        <div class="footer">
          2020 Leonardo Brito
        </div>
      </div>

    </div>
  


</body></html>;
T;@ﬂ;@ﬂo;;;;	I"3/posts/2017-03-20-dont-obsess-over-code-dry.md;
T{;{
;U;[I"U/home/carol/workspace/blog/content/posts/2017-03-20-dont-obsess-over-code-dry.md;
TI"E"Being clever is a good thing for a developer. Ingenuity allows us to write software that solves complex real-world problems. However, ‚Äúclever‚Äù _code_ is not always a good thing. In many cases‚Ää‚Äî‚ÄäI dare say in _most_ cases‚Ää‚Äî‚Ääit is a very bad thing. I consciously try to avoid writing code that might be seen as ‚Äúclever‚Äù. The smart thing to do is trying hard not to be smart (yes, very [1984](http://literarydevices.net/war-is-peace/)).

Developers tend to see themselves (quite indulgently) as smart people. Not many people understand what we do, and society sees a developer as a kind of modern wizard, writing unreadable magic spells in a small metal box. In reality, though, we are not half as smart as we think: for instance, if you are a developer, you are certainly familiar with the frustration of trying to understand some cryptic piece of code that seemed perfectly reasonable and straightforward when you wrote it a couple of months earlier.

<!-- more -->

It is a given that any programmer will have to deal with the frustration of trying to understand complex code countless times throughout their career. Of course, there are genuine reasons to write complex code: sometimes there are strict hardware limitations, such as in the early ages of electronic computers, and sometimes the problem‚Äôs domain itself is inherently complex. However, if you‚Äôre reading this, you‚Äôre probably not [living in the 1940s and working on a hydrogen bomb](https://en.wikipedia.org/wiki/ENIAC#Role_in_the_hydrogen_bomb), and it‚Äôs more likely you‚Äôre working on some kind of web app using a dynamic programming language and a helpful framework, so you can probably take advantage of that and keep things simple.

Why, then, do we insist in writing unnecessarily complex and cryptic code when we don‚Äôt absolutely need to? As it turns out, there are many reasons (although very few of them are good): to impress your boss and coworkers, to feel smart or proud of yourself, to challenge yourself, or just out of boredom. Those are all very real reasons why people deliberately write complex code. But people also write complex code unintentionally, and while actually trying their best to do the opposite: this is what happens when a programmer misinterprets genuine programming guidelines and good practices.

A good example of this is the [Don‚Äôt Repeat Yourself (DRY)](https://en.wikipedia.org/wiki/Don%27t_repeat_yourself) guideline, repeated as a mantra in some Computer Science classes and in the industry. As humans, we have the gift and tendency towards recognizing patterns‚Ää‚Äî‚Ääit is what allows us to recognize a familiar face, appreciate music and understand languages, just to name a few examples. We also recognize patterns in source code, which we refactor following the DRY principle.

The thing about pattern recognition, though, is that humans are very good at it‚Ää‚Äî‚Ääsometimes _too good_. This can easily lead to the overuse of an otherwise perfectly healthy programming guideline. Psychology has a term for pattern recognition overuse/misuse: [apophenia](https://en.wikipedia.org/wiki/Apophenia). It is what happens when you see a pattern that doesn‚Äôt really exist, like a gambler ‚Äúidentifying‚Äù patterns in lottery tickets or a programmer ‚Äúidentifying‚Äù patterns in source code which aren‚Äôt really there.

The original definition of DRY, from Hunt and Thomas‚Äô _The Pragmatic Programmer_, states:

> ‚ÄúEvery piece of knowledge must have a single, unambiguous, authoritative representation within a¬†system.‚Äù

A _piece_ of knowledge hints at a well-defined knowledge _unit_, which may vary in size depending on the specifics of your code. When a programmer sees a pattern in sections of code that do not belong to a common pattern‚Ää‚Äî‚Ääthat is, are not within the same _piece of knowledge_ -, and still decides to refactor those sections by extracting them into a common piece of code, then _different_ _pieces_ of knowledge are being mashed together, and thus are DRY is not being applied at all.

Let‚Äôs use an example to illustrate a misuse of DRY. Suppose you‚Äôre working on a car dealership software. The dealership sells and services a single car model, offering 3 scheduled maintenances at 10, 30 and 50 thousand miles:

<div class="highlight"><pre><code class="language-ruby">
# Example 1
class Car
  include Checkups

  def maintenance_10k
    check_break_fluid
    check_battery_terminals
    check_engine_oil
  end

  def maintenance_30k
    check_break_fluid
    check_battery_terminals
    check_engine_oil
    check_spare_wheel
  end

  def maintenance_50k
    check_break_fluid
    check_battery_terminals
    check_engine_oil
    check_spare_wheel
    check_gearbox
  end
end
</code></pre></div>

At a first glance, you may be tempted to DRY the code by extracting the three methods which are called in all maintenances: `check_break_fluid`, `check_battery_terminals` and `check_engine_oil`. The resulting code is more concise:

<div class="highlight"><pre><code class="language-ruby">
# Example 2
class Car
  include Checkups

  def maintenance_10k
    basic_maintenance
  end

  def maintenance_30k
    basic_maintenance
    check_spare_wheel
  end

  def maintenance_50k
    basic_maintenance
    check_spare_wheel
    check_gearbox
  end

  private

  def basic_maintenance
    check_break_fluid
    check_battery_terminals
    check_engine_oil
  end
end
</code></pre></div>

DRYing produces this new basic\_maintenance method. It is not very descriptive: while `maintenance_*` methods convey exactly what it they are expected to do (i.e. ‚Äúperform a 10, 30 or 50 thousand miles maintenance‚Äù), `basic_maintenance` is kind of an arbitrary name we made up that could mean anything. It is an abstract creation that exists only for our convenience and does not represent anything in the real world.

Let‚Äôs imagine a very simple change in the requirements: suppose we no longer need to check the break fluid on the 10 thousand miles checkup. Now we must decide between removing `check_break_fluid`from `basic_maintenance` and adding the check only to the 30k and 50k maintenances, thus reducing `basic_maintenance`'s effectiveness at avoiding repetition, or eliminating the method altogether and going back to how things were in Example #1.

Although Example #1 has more repetitions than Example #2, it is arguably more readable and descriptive. It is also less likely to break if there are changes in the requirements like we just described. Bear in mind that this is a very simple example: all the methods do is call other methods that don‚Äôt take any parameters; there is no argument passing, no state changes, no transformations, etc. A more complex example would increase even further the abstractness and complexity of DRYing the code.

A little repetition is preferable to a code that was DRYed incorrectly or excessively. If the abstraction resulting from DRY refactoring is more painful to understand than the alternative (going through a few repeated code sections), then the programmer was probably suffering of apophenia, seeing code patterns that did not exist‚Ää‚Äî‚Ääand thus not applying DRY correctly. Sandi Metz [summarizes this very clearly](https://www.sandimetz.com/blog/2016/1/20/the-wrong-abstraction) in her 2014 RailsConf talk:

> _‚ÄúPrefer duplication over the wrong abstraction.‚Äù_

With that said, there is another acronym that complements DRY: [DAMP](https://codeshelter.wordpress.com/2011/04/07/dry-and-damp-principles-when-developing-and-unit-testing/). DAMP means _descriptive and meaningful phrases_. Although directed mostly at tests, the general principle of acknowledging the value of descriptiveness applies to all sorts of code_:_ good code is not too repetitious, but is also not too abstract and generic. Sometimes there is no general case to be abstracted, there are just a couple of concrete, specific cases which you should treat as concrete, specific cases.

The purpose of DRY, DAMP and all the other fancy programming principles is to guide us towards crafting better code. If the result of DRYing something is a code that is more complex and less maintainable, then we have defeated the purpose of DRY. Programming principles are not laws of nature that will guarantee better code, which means that they are not universally applicable. More than knowing how to cleverly refactor and DRY a code, it is important to know _when_ something should be DRYed and when it should be left alone.

By [Leonardo Brito](https://medium.com/@lbrito) on [March 20, 2017](https://medium.com/p/e9ecc5224ff).

[Canonical link](https://medium.com/@lbrito/dont-obsess-over-code-dryness-e9ecc5224ff)

Exported from [Medium](https://medium.com) on May 1, 2019.
;
T;U;[0I"&)<p>Being clever is a good thing for a developer. Ingenuity allows us to write software that solves complex real-world problems. However, ‚Äúclever‚Äù <em>code</em> is not always a good thing. In many cases‚Ää‚Äî‚ÄäI dare say in <em>most</em> cases‚Ää‚Äî‚Ääit is a very bad thing. I consciously try to avoid writing code that might be seen as ‚Äúclever‚Äù. The smart thing to do is trying hard not to be smart (yes, very <a href="http://literarydevices.net/war-is-peace/">1984</a>).</p>

<p>Developers tend to see themselves (quite indulgently) as smart people. Not many people understand what we do, and society sees a developer as a kind of modern wizard, writing unreadable magic spells in a small metal box. In reality, though, we are not half as smart as we think: for instance, if you are a developer, you are certainly familiar with the frustration of trying to understand some cryptic piece of code that seemed perfectly reasonable and straightforward when you wrote it a couple of months earlier.</p>

<!-- more -->

<p>It is a given that any programmer will have to deal with the frustration of trying to understand complex code countless times throughout their career. Of course, there are genuine reasons to write complex code: sometimes there are strict hardware limitations, such as in the early ages of electronic computers, and sometimes the problem‚Äôs domain itself is inherently complex. However, if you‚Äôre reading this, you‚Äôre probably not <a href="https://en.wikipedia.org/wiki/ENIAC#Role_in_the_hydrogen_bomb">living in the 1940s and working on a hydrogen bomb</a>, and it‚Äôs more likely you‚Äôre working on some kind of web app using a dynamic programming language and a helpful framework, so you can probably take advantage of that and keep things simple.</p>

<p>Why, then, do we insist in writing unnecessarily complex and cryptic code when we don‚Äôt absolutely need to? As it turns out, there are many reasons (although very few of them are good): to impress your boss and coworkers, to feel smart or proud of yourself, to challenge yourself, or just out of boredom. Those are all very real reasons why people deliberately write complex code. But people also write complex code unintentionally, and while actually trying their best to do the opposite: this is what happens when a programmer misinterprets genuine programming guidelines and good practices.</p>

<p>A good example of this is the <a href="https://en.wikipedia.org/wiki/Don%27t_repeat_yourself">Don‚Äôt Repeat Yourself (DRY)</a> guideline, repeated as a mantra in some Computer Science classes and in the industry. As humans, we have the gift and tendency towards recognizing patterns‚Ää‚Äî‚Ääit is what allows us to recognize a familiar face, appreciate music and understand languages, just to name a few examples. We also recognize patterns in source code, which we refactor following the DRY principle.</p>

<p>The thing about pattern recognition, though, is that humans are very good at it‚Ää‚Äî‚Ääsometimes <em>too good</em>. This can easily lead to the overuse of an otherwise perfectly healthy programming guideline. Psychology has a term for pattern recognition overuse/misuse: <a href="https://en.wikipedia.org/wiki/Apophenia">apophenia</a>. It is what happens when you see a pattern that doesn‚Äôt really exist, like a gambler ‚Äúidentifying‚Äù patterns in lottery tickets or a programmer ‚Äúidentifying‚Äù patterns in source code which aren‚Äôt really there.</p>

<p>The original definition of DRY, from Hunt and Thomas‚Äô <em>The Pragmatic Programmer</em>, states:</p>

<blockquote>
  <p>‚ÄúEvery piece of knowledge must have a single, unambiguous, authoritative representation within a¬†system.‚Äù</p>
</blockquote>

<p>A <em>piece</em> of knowledge hints at a well-defined knowledge <em>unit</em>, which may vary in size depending on the specifics of your code. When a programmer sees a pattern in sections of code that do not belong to a common pattern‚Ää‚Äî‚Ääthat is, are not within the same <em>piece of knowledge</em> -, and still decides to refactor those sections by extracting them into a common piece of code, then <em>different</em> <em>pieces</em> of knowledge are being mashed together, and thus are DRY is not being applied at all.</p>

<p>Let‚Äôs use an example to illustrate a misuse of DRY. Suppose you‚Äôre working on a car dealership software. The dealership sells and services a single car model, offering 3 scheduled maintenances at 10, 30 and 50 thousand miles:</p>

<div class="highlight"><pre><code class="language-ruby"><span class="c1"># Example 1</span>
<span class="k">class</span> <span class="nc">Car</span>
  <span class="kp">include</span> <span class="no">Checkups</span>

  <span class="k">def</span> <span class="nf">maintenance_10k</span>
    <span class="n">check_break_fluid</span>
    <span class="n">check_battery_terminals</span>
    <span class="n">check_engine_oil</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">maintenance_30k</span>
    <span class="n">check_break_fluid</span>
    <span class="n">check_battery_terminals</span>
    <span class="n">check_engine_oil</span>
    <span class="n">check_spare_wheel</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">maintenance_50k</span>
    <span class="n">check_break_fluid</span>
    <span class="n">check_battery_terminals</span>
    <span class="n">check_engine_oil</span>
    <span class="n">check_spare_wheel</span>
    <span class="n">check_gearbox</span>
  <span class="k">end</span>
<span class="k">end</span></code></pre></div>

<p>At a first glance, you may be tempted to DRY the code by extracting the three methods which are called in all maintenances: <code>check_break_fluid</code>, <code>check_battery_terminals</code> and <code>check_engine_oil</code>. The resulting code is more concise:</p>

<div class="highlight"><pre><code class="language-ruby"><span class="c1"># Example 2</span>
<span class="k">class</span> <span class="nc">Car</span>
  <span class="kp">include</span> <span class="no">Checkups</span>

  <span class="k">def</span> <span class="nf">maintenance_10k</span>
    <span class="n">basic_maintenance</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">maintenance_30k</span>
    <span class="n">basic_maintenance</span>
    <span class="n">check_spare_wheel</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">maintenance_50k</span>
    <span class="n">basic_maintenance</span>
    <span class="n">check_spare_wheel</span>
    <span class="n">check_gearbox</span>
  <span class="k">end</span>

  <span class="kp">private</span>

  <span class="k">def</span> <span class="nf">basic_maintenance</span>
    <span class="n">check_break_fluid</span>
    <span class="n">check_battery_terminals</span>
    <span class="n">check_engine_oil</span>
  <span class="k">end</span>
<span class="k">end</span></code></pre></div>

<p>DRYing produces this new basic_maintenance method. It is not very descriptive: while <code>maintenance_*</code> methods convey exactly what it they are expected to do (i.e. ‚Äúperform a 10, 30 or 50 thousand miles maintenance‚Äù), <code>basic_maintenance</code> is kind of an arbitrary name we made up that could mean anything. It is an abstract creation that exists only for our convenience and does not represent anything in the real world.</p>

<p>Let‚Äôs imagine a very simple change in the requirements: suppose we no longer need to check the break fluid on the 10 thousand miles checkup. Now we must decide between removing <code>check_break_fluid</code>from <code>basic_maintenance</code> and adding the check only to the 30k and 50k maintenances, thus reducing <code>basic_maintenance</code>‚Äôs effectiveness at avoiding repetition, or eliminating the method altogether and going back to how things were in Example #1.</p>

<p>Although Example #1 has more repetitions than Example #2, it is arguably more readable and descriptive. It is also less likely to break if there are changes in the requirements like we just described. Bear in mind that this is a very simple example: all the methods do is call other methods that don‚Äôt take any parameters; there is no argument passing, no state changes, no transformations, etc. A more complex example would increase even further the abstractness and complexity of DRYing the code.</p>

<p>A little repetition is preferable to a code that was DRYed incorrectly or excessively. If the abstraction resulting from DRY refactoring is more painful to understand than the alternative (going through a few repeated code sections), then the programmer was probably suffering of apophenia, seeing code patterns that did not exist‚Ää‚Äî‚Ääand thus not applying DRY correctly. Sandi Metz <a href="https://www.sandimetz.com/blog/2016/1/20/the-wrong-abstraction">summarizes this very clearly</a> in her 2014 RailsConf talk:</p>

<blockquote>
  <p><em>‚ÄúPrefer duplication over the wrong abstraction.‚Äù</em></p>
</blockquote>

<p>With that said, there is another acronym that complements DRY: <a href="https://codeshelter.wordpress.com/2011/04/07/dry-and-damp-principles-when-developing-and-unit-testing/">DAMP</a>. DAMP means <em>descriptive and meaningful phrases</em>. Although directed mostly at tests, the general principle of acknowledging the value of descriptiveness applies to all sorts of code_:_ good code is not too repetitious, but is also not too abstract and generic. Sometimes there is no general case to be abstracted, there are just a couple of concrete, specific cases which you should treat as concrete, specific cases.</p>

<p>The purpose of DRY, DAMP and all the other fancy programming principles is to guide us towards crafting better code. If the result of DRYing something is a code that is more complex and less maintainable, then we have defeated the purpose of DRY. Programming principles are not laws of nature that will guarantee better code, which means that they are not universally applicable. More than knowing how to cleverly refactor and DRY a code, it is important to know <em>when</em> something should be DRYed and when it should be left alone.</p>

<p>By <a href="https://medium.com/@lbrito">Leonardo Brito</a> on <a href="https://medium.com/p/e9ecc5224ff">March 20, 2017</a>.</p>

<p><a href="https://medium.com/@lbrito/dont-obsess-over-code-dryness-e9ecc5224ff">Canonical link</a></p>

<p>Exported from <a href="https://medium.com">Medium</a> on May 1, 2019.</p>
;
T;U;[0I"Ù0<!DOCTYPE html><html lang="en"><head>
    <meta charset="utf-8">
    <title>A Developer's Notebook - Don't obsess over code DRYness</title>
    <link rel="stylesheet" href="https://unpkg.com/purecss@1.0.1/build/pure-min.css" integrity="sha384-oAOxQR6DkCoMliIh8yFnu25d7Eq/PHS21PClpwjOTeU2jRSq11vu66rf90/cZr47" crossorigin="anonymous">
    <link rel="stylesheet" href="../../assets/stylesheet.css">
    <link rel="stylesheet" href="../../assets/highlight.css">

    <!-- you don't need to keep this, but it's cool for stats! -->
    <meta name="generator" content="Nanoc 4.11.9">
  </head>
  <body>
    <div id="layout">
      <div class="header">
        <h1>
          <a href="../../">A Developer's Notebook</a>
        </h1>
      </div>


      <div class="content">
        <nav class="pure-g">
          <div class="pure-u-2-3 links">
            <a href="../../index.html">Home</a> ¬∑
            <a href="../../tags.html">Tags</a> ¬∑
            <a href="../../years.html">Years</a> ¬∑
            <a href="../../about.html">About</a>
          </div>

          <div class="pure-u-1-3">
            <div class="contact">
              <span>
                <a href="https://github.com/lbrito1" download="">
                  <img src="../../assets/icons/github.svg" alt="Github icon">
                  </a>
              </span>
              <span>
                <a href="https://www.linkedin.com/in/leonardo-mendes-brito/">
                <img src="../../assets/icons/linkedin.svg" alt="LinkedIn icon">
                </a>
              </span>
            </div>
          </div>
        </nav>
        
  <div class="post-show">
    <h1>Don't obsess over code DRYness</h1>
    <article class="text">
      <p>Being clever is a good thing for a developer. Ingenuity allows us to write software that solves complex real-world problems. However, ‚Äúclever‚Äù <em>code</em> is not always a good thing. In many cases‚Ää‚Äî‚ÄäI dare say in <em>most</em> cases‚Ää‚Äî‚Ääit is a very bad thing. I consciously try to avoid writing code that might be seen as ‚Äúclever‚Äù. The smart thing to do is trying hard not to be smart (yes, very <a href="http://literarydevices.net/war-is-peace/">1984</a>).</p>

<p>Developers tend to see themselves (quite indulgently) as smart people. Not many people understand what we do, and society sees a developer as a kind of modern wizard, writing unreadable magic spells in a small metal box. In reality, though, we are not half as smart as we think: for instance, if you are a developer, you are certainly familiar with the frustration of trying to understand some cryptic piece of code that seemed perfectly reasonable and straightforward when you wrote it a couple of months earlier.</p>

<!-- more -->

<p>It is a given that any programmer will have to deal with the frustration of trying to understand complex code countless times throughout their career. Of course, there are genuine reasons to write complex code: sometimes there are strict hardware limitations, such as in the early ages of electronic computers, and sometimes the problem‚Äôs domain itself is inherently complex. However, if you‚Äôre reading this, you‚Äôre probably not <a href="https://en.wikipedia.org/wiki/ENIAC#Role_in_the_hydrogen_bomb">living in the 1940s and working on a hydrogen bomb</a>, and it‚Äôs more likely you‚Äôre working on some kind of web app using a dynamic programming language and a helpful framework, so you can probably take advantage of that and keep things simple.</p>

<p>Why, then, do we insist in writing unnecessarily complex and cryptic code when we don‚Äôt absolutely need to? As it turns out, there are many reasons (although very few of them are good): to impress your boss and coworkers, to feel smart or proud of yourself, to challenge yourself, or just out of boredom. Those are all very real reasons why people deliberately write complex code. But people also write complex code unintentionally, and while actually trying their best to do the opposite: this is what happens when a programmer misinterprets genuine programming guidelines and good practices.</p>

<p>A good example of this is the <a href="https://en.wikipedia.org/wiki/Don%27t_repeat_yourself">Don‚Äôt Repeat Yourself (DRY)</a> guideline, repeated as a mantra in some Computer Science classes and in the industry. As humans, we have the gift and tendency towards recognizing patterns‚Ää‚Äî‚Ääit is what allows us to recognize a familiar face, appreciate music and understand languages, just to name a few examples. We also recognize patterns in source code, which we refactor following the DRY principle.</p>

<p>The thing about pattern recognition, though, is that humans are very good at it‚Ää‚Äî‚Ääsometimes <em>too good</em>. This can easily lead to the overuse of an otherwise perfectly healthy programming guideline. Psychology has a term for pattern recognition overuse/misuse: <a href="https://en.wikipedia.org/wiki/Apophenia">apophenia</a>. It is what happens when you see a pattern that doesn‚Äôt really exist, like a gambler ‚Äúidentifying‚Äù patterns in lottery tickets or a programmer ‚Äúidentifying‚Äù patterns in source code which aren‚Äôt really there.</p>

<p>The original definition of DRY, from Hunt and Thomas‚Äô <em>The Pragmatic Programmer</em>, states:</p>

<blockquote>
  <p>‚ÄúEvery piece of knowledge must have a single, unambiguous, authoritative representation within a&nbsp;system.‚Äù</p>
</blockquote>

<p>A <em>piece</em> of knowledge hints at a well-defined knowledge <em>unit</em>, which may vary in size depending on the specifics of your code. When a programmer sees a pattern in sections of code that do not belong to a common pattern‚Ää‚Äî‚Ääthat is, are not within the same <em>piece of knowledge</em> -, and still decides to refactor those sections by extracting them into a common piece of code, then <em>different</em> <em>pieces</em> of knowledge are being mashed together, and thus are DRY is not being applied at all.</p>

<p>Let‚Äôs use an example to illustrate a misuse of DRY. Suppose you‚Äôre working on a car dealership software. The dealership sells and services a single car model, offering 3 scheduled maintenances at 10, 30 and 50 thousand miles:</p>

<div class="highlight"><pre><code class="language-ruby"><span class="c1"># Example 1</span>
<span class="k">class</span> <span class="nc">Car</span>
  <span class="kp">include</span> <span class="no">Checkups</span>

  <span class="k">def</span> <span class="nf">maintenance_10k</span>
    <span class="n">check_break_fluid</span>
    <span class="n">check_battery_terminals</span>
    <span class="n">check_engine_oil</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">maintenance_30k</span>
    <span class="n">check_break_fluid</span>
    <span class="n">check_battery_terminals</span>
    <span class="n">check_engine_oil</span>
    <span class="n">check_spare_wheel</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">maintenance_50k</span>
    <span class="n">check_break_fluid</span>
    <span class="n">check_battery_terminals</span>
    <span class="n">check_engine_oil</span>
    <span class="n">check_spare_wheel</span>
    <span class="n">check_gearbox</span>
  <span class="k">end</span>
<span class="k">end</span></code></pre></div>

<p>At a first glance, you may be tempted to DRY the code by extracting the three methods which are called in all maintenances: <code>check_break_fluid</code>, <code>check_battery_terminals</code> and <code>check_engine_oil</code>. The resulting code is more concise:</p>

<div class="highlight"><pre><code class="language-ruby"><span class="c1"># Example 2</span>
<span class="k">class</span> <span class="nc">Car</span>
  <span class="kp">include</span> <span class="no">Checkups</span>

  <span class="k">def</span> <span class="nf">maintenance_10k</span>
    <span class="n">basic_maintenance</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">maintenance_30k</span>
    <span class="n">basic_maintenance</span>
    <span class="n">check_spare_wheel</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">maintenance_50k</span>
    <span class="n">basic_maintenance</span>
    <span class="n">check_spare_wheel</span>
    <span class="n">check_gearbox</span>
  <span class="k">end</span>

  <span class="kp">private</span>

  <span class="k">def</span> <span class="nf">basic_maintenance</span>
    <span class="n">check_break_fluid</span>
    <span class="n">check_battery_terminals</span>
    <span class="n">check_engine_oil</span>
  <span class="k">end</span>
<span class="k">end</span></code></pre></div>

<p>DRYing produces this new basic_maintenance method. It is not very descriptive: while <code>maintenance_*</code> methods convey exactly what it they are expected to do (i.e. ‚Äúperform a 10, 30 or 50 thousand miles maintenance‚Äù), <code>basic_maintenance</code> is kind of an arbitrary name we made up that could mean anything. It is an abstract creation that exists only for our convenience and does not represent anything in the real world.</p>

<p>Let‚Äôs imagine a very simple change in the requirements: suppose we no longer need to check the break fluid on the 10 thousand miles checkup. Now we must decide between removing <code>check_break_fluid</code>from <code>basic_maintenance</code> and adding the check only to the 30k and 50k maintenances, thus reducing <code>basic_maintenance</code>‚Äôs effectiveness at avoiding repetition, or eliminating the method altogether and going back to how things were in Example #1.</p>

<p>Although Example #1 has more repetitions than Example #2, it is arguably more readable and descriptive. It is also less likely to break if there are changes in the requirements like we just described. Bear in mind that this is a very simple example: all the methods do is call other methods that don‚Äôt take any parameters; there is no argument passing, no state changes, no transformations, etc. A more complex example would increase even further the abstractness and complexity of DRYing the code.</p>

<p>A little repetition is preferable to a code that was DRYed incorrectly or excessively. If the abstraction resulting from DRY refactoring is more painful to understand than the alternative (going through a few repeated code sections), then the programmer was probably suffering of apophenia, seeing code patterns that did not exist‚Ää‚Äî‚Ääand thus not applying DRY correctly. Sandi Metz <a href="https://www.sandimetz.com/blog/2016/1/20/the-wrong-abstraction">summarizes this very clearly</a> in her 2014 RailsConf talk:</p>

<blockquote>
  <p><em>‚ÄúPrefer duplication over the wrong abstraction.‚Äù</em></p>
</blockquote>

<p>With that said, there is another acronym that complements DRY: <a href="https://codeshelter.wordpress.com/2011/04/07/dry-and-damp-principles-when-developing-and-unit-testing/">DAMP</a>. DAMP means <em>descriptive and meaningful phrases</em>. Although directed mostly at tests, the general principle of acknowledging the value of descriptiveness applies to all sorts of code_:_ good code is not too repetitious, but is also not too abstract and generic. Sometimes there is no general case to be abstracted, there are just a couple of concrete, specific cases which you should treat as concrete, specific cases.</p>

<p>The purpose of DRY, DAMP and all the other fancy programming principles is to guide us towards crafting better code. If the result of DRYing something is a code that is more complex and less maintainable, then we have defeated the purpose of DRY. Programming principles are not laws of nature that will guarantee better code, which means that they are not universally applicable. More than knowing how to cleverly refactor and DRY a code, it is important to know <em>when</em> something should be DRYed and when it should be left alone.</p>

<p>By <a href="https://medium.com/@lbrito">Leonardo Brito</a> on <a href="https://medium.com/p/e9ecc5224ff">March 20, 2017</a>.</p>

<p><a href="https://medium.com/@lbrito/dont-obsess-over-code-dryness-e9ecc5224ff">Canonical link</a></p>

<p>Exported from <a href="https://medium.com">Medium</a> on May 1, 2019.</p>

    </article>
    <aside>Posted at: Mar 20, 2017</aside>
    <div class="post-footer">
      <a href="../../index.html">Back</a>
    </div>
  </div>

        <div class="footer">
          2020 Leonardo Brito
        </div>
      </div>

    </div>
  


</body></html>;
T;@Ì;@Ìo;;;;	I",/posts/2014-03-18-doubly-linked-list.md;
T{;{
;U;[I"N/home/carol/workspace/blog/content/posts/2014-03-18-doubly-linked-list.md;
TI"‰A doubly linked list is like our previously implemented Linked List, but instead of only having pointers to the next element, it also has pointers to the _previous _element:

[![610px-Doubly-linked-list.svg](/assets/images/codedeposit/2014/03/610px-doubly-linked-list-svg.png)](/assets/images/codedeposit/2014/03/610px-doubly-linked-list-svg.png)

This property makes the doubly linked list very useful as a base for other data structures such as the stack: having a previous pointer means we can quickly (O(1)) remove objects from the list's tail, which would be impossible with a linked list.

We won't discuss implementation since it so similar to a linked list. If anything implementation is even simpler than a linked list because of the previous pointer access.

<!-- more -->

Full source code with printable tests follows below, and can also be found at out github.

<div class="highlight"><pre><code class="language-c">
/*
    File: doubly_linked_list.c

    Copyright (c) 2014 Leonardo Brito <lbrito@gmail.com>

    This software is free software; you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation; either version 2 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License along
    with this program; if not, write the Free Software Foundation, Inc., 51
    Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
*/

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "comparators.c"

#if !defined _TEST_SIZE_LIST && defined _DEBUGGING
#define _TEST_SIZE_LIST 10
#endif

#define TRUE 1
#define FALSE 0

typedef struct d_element
{
      void *data;
      struct d_element *next, *prev;
} d_element;

typedef struct d_linked_list
{
      d_element *head;
      d_element *tail;
      unsigned size;
      int (*cmp) (void*, void*);
} d_linked_list;

/**
 *  @brief create a new doubly linked list
 *
 *  @param [in] comparator
 *  @return
 */
d_linked_list *new_list(int (*comparator) (void*, void*))
{
      d_linked_list *l = malloc(sizeof(d_linked_list));
      l->size = 0;
      l->cmp = comparator;
      return l;
}

/**
 *  @brief create a new d_element
 *
 *  @param [in] data
 *  @return
 */
d_element *new_d_element(void *data)
{
      d_element *e = (d_element*) malloc(sizeof(d_element));
      e->data = data;
      e->next = NULL;
      e->prev = NULL;
      return e;
}

/**
 *  @brief add data to list
 *
 *  @param [in] list
 *  @param [in] data
 */
void add(d_linked_list *list, void *data)
{
      if (list->size == 0)
      {
            list->head = new_d_element(data);
            list->tail = list->head;
      }
      else
      {
            d_element *toadd = new_d_element(data);
            list->tail->next = toadd;
            toadd->prev = list->tail;
            list->tail = toadd;
      }
      ++list->size;
}

/**
 *  @brief search for data in list
 *
 *  @param [in] list
 *  @param [in] data
 *  @return searched element
 */
d_element *search(d_linked_list *list, void *data)
{
      d_element *e = list->head;
      do
      {
            if (list->cmp(data, e->data) == 0) return e;
      } while ((e = e->next) != NULL);
      return NULL;
}

/**
 *  @brief delete data from list
 *
 *  @param [in] list
 *  @param [in] data
 *  @return TRUE if data was found & deleted, FALSE otherwise
 */
int delete(d_linked_list *list, void *data)
{
      d_element *searched = search(list, data);
      if (searched)
      {
            int ishead = !list->cmp(searched->data, list->head->data);
            if (!ishead)
            {
                  if (searched != NULL)
                  {
                        searched->next->prev = searched->prev;
                        searched->prev->next = searched->next;
                  }
                  else
                  {
                        list->head = NULL;      // LAST ELEMENT IN LIST
                        list->tail = NULL;
                  }
            }
            else
            {
                  if (list->head->next != NULL)
                  {
                        list->head = list->head->next;
                        list->head->prev = NULL;
                  }
                  else
                  {
                        list->head = NULL;      // LAST ELEMENT IN LIST
                        list->tail = NULL;
                  }
            }
            free(searched->data);
            free(searched);
            --list->size;
            return TRUE;
      }
      else return FALSE;
}

#ifdef _DEBUGGING

d_linked_list *build_list()
{
      d_linked_list *list = new_list(compare_string);
      char *basetext = "I'm d_element number ";
      int i=1;
      for (;i<_TEST_SIZE_LIST;i++)
      {
            char *text1 = malloc(sizeof(char)*(strlen(basetext)+10));
            strcpy(text1, basetext);
            char numb[10];
            sprintf(numb, "%d", i);
            strcat(text1, numb);
            add(list, text1);
      }

      return list;
}

void print_list(d_linked_list *list)
{
      if (list->size == 0)
      {
            printf("\nList empty.");
      }
      else
      {
            printf("\n==============");
            d_element *e = list->head;
            int i = 0;
            do
            {
                  printf("\nList [%d]:\t%s",i++,(char*)e->data);
            } while ((e = e->next) != NULL);
            printf("\n==============\n");
      }
}

void test_delete(d_linked_list *list, int eln)
{
      char data[20];
      sprintf(data, "I'm d_element number %d", eln);
      if (delete(list, data)) printf("\nSuccessfully deleted d_element #%d, %d elems in list",eln,list->size);
      else printf("\nElem #%d not found",eln);
}

void test_add(d_linked_list *list, int eln)
{
      char *data = malloc(sizeof(char)*50);
      sprintf(data, "I'm NEW d_element number %d", eln);
      add(list, data);
      printf("\nSuccessfully added NEW d_element #%d, %d elems in list",eln,list->size);
}

int main()
{
      d_linked_list *list = build_list();

      print_list(list);
      test_delete(list, 1);
      test_delete(list, 2);
      test_delete(list, 7);
      test_delete(list, 3);
      test_delete(list, 4);
      test_delete(list, 5);
      test_add(list, 13);
      test_delete(list, 6);
      test_delete(list, 8);
      test_delete(list, 9);
      print_list(list);
      test_add(list, 1337);
      print_list(list);
      test_delete(list, 2);
      test_add(list, 98);
      print_list(list);

      return 0;
}

#endif
</code></pre></div>
;
T;U;[0I"Lh<p>A doubly linked list is like our previously implemented Linked List, but instead of only having pointers to the next element, it also has pointers to the _previous _element:</p>

<p><a href="/assets/images/codedeposit/2014/03/610px-doubly-linked-list-svg.png"><img src="/assets/images/codedeposit/2014/03/610px-doubly-linked-list-svg.png" alt="610px-Doubly-linked-list.svg"></a></p>

<p>This property makes the doubly linked list very useful as a base for other data structures such as the stack: having a previous pointer means we can quickly (O(1)) remove objects from the list‚Äôs tail, which would be impossible with a linked list.</p>

<p>We won‚Äôt discuss implementation since it so similar to a linked list. If anything implementation is even simpler than a linked list because of the previous pointer access.</p>

<!-- more -->

<p>Full source code with printable tests follows below, and can also be found at out github.</p>

<div class="highlight"><pre><code class="language-c"><span class="cm">/*
    File: doubly_linked_list.c

    Copyright (c) 2014 Leonardo Brito &lt;lbrito@gmail.com&gt;

    This software is free software; you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation; either version 2 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License along
    with this program; if not, write the Free Software Foundation, Inc., 51
    Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
*/</span>

<span class="cp">#include 
#include 
#include 
#include "comparators.c"
</span>
<span class="cp">#if !defined _TEST_SIZE_LIST &amp;&amp; defined _DEBUGGING
#define _TEST_SIZE_LIST 10
#endif
</span>
<span class="cp">#define TRUE 1
#define FALSE 0
</span>
<span class="k">typedef</span> <span class="k">struct</span> <span class="n">d_element</span>
<span class="p">{</span>
      <span class="kt">void</span> <span class="o">*</span><span class="n">data</span><span class="p">;</span>
      <span class="k">struct</span> <span class="n">d_element</span> <span class="o">*</span><span class="n">next</span><span class="p">,</span> <span class="o">*</span><span class="n">prev</span><span class="p">;</span>
<span class="p">}</span> <span class="n">d_element</span><span class="p">;</span>

<span class="k">typedef</span> <span class="k">struct</span> <span class="n">d_linked_list</span>
<span class="p">{</span>
      <span class="n">d_element</span> <span class="o">*</span><span class="n">head</span><span class="p">;</span>
      <span class="n">d_element</span> <span class="o">*</span><span class="n">tail</span><span class="p">;</span>
      <span class="kt">unsigned</span> <span class="n">size</span><span class="p">;</span>
      <span class="kt">int</span> <span class="p">(</span><span class="o">*</span><span class="n">cmp</span><span class="p">)</span> <span class="p">(</span><span class="kt">void</span><span class="o">*</span><span class="p">,</span> <span class="kt">void</span><span class="o">*</span><span class="p">);</span>
<span class="p">}</span> <span class="n">d_linked_list</span><span class="p">;</span>

<span class="cm">/**
 *  @brief create a new doubly linked list
 *
 *  @param [in] comparator
 *  @return
 */</span>
<span class="n">d_linked_list</span> <span class="o">*</span><span class="nf">new_list</span><span class="p">(</span><span class="kt">int</span> <span class="p">(</span><span class="o">*</span><span class="n">comparator</span><span class="p">)</span> <span class="p">(</span><span class="kt">void</span><span class="o">*</span><span class="p">,</span> <span class="kt">void</span><span class="o">*</span><span class="p">))</span>
<span class="p">{</span>
      <span class="n">d_linked_list</span> <span class="o">*</span><span class="n">l</span> <span class="o">=</span> <span class="n">malloc</span><span class="p">(</span><span class="k">sizeof</span><span class="p">(</span><span class="n">d_linked_list</span><span class="p">));</span>
      <span class="n">l</span><span class="o">-&gt;</span><span class="n">size</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
      <span class="n">l</span><span class="o">-&gt;</span><span class="n">cmp</span> <span class="o">=</span> <span class="n">comparator</span><span class="p">;</span>
      <span class="k">return</span> <span class="n">l</span><span class="p">;</span>
<span class="p">}</span>

<span class="cm">/**
 *  @brief create a new d_element
 *
 *  @param [in] data
 *  @return
 */</span>
<span class="n">d_element</span> <span class="o">*</span><span class="nf">new_d_element</span><span class="p">(</span><span class="kt">void</span> <span class="o">*</span><span class="n">data</span><span class="p">)</span>
<span class="p">{</span>
      <span class="n">d_element</span> <span class="o">*</span><span class="n">e</span> <span class="o">=</span> <span class="p">(</span><span class="n">d_element</span><span class="o">*</span><span class="p">)</span> <span class="n">malloc</span><span class="p">(</span><span class="k">sizeof</span><span class="p">(</span><span class="n">d_element</span><span class="p">));</span>
      <span class="n">e</span><span class="o">-&gt;</span><span class="n">data</span> <span class="o">=</span> <span class="n">data</span><span class="p">;</span>
      <span class="n">e</span><span class="o">-&gt;</span><span class="n">next</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
      <span class="n">e</span><span class="o">-&gt;</span><span class="n">prev</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
      <span class="k">return</span> <span class="n">e</span><span class="p">;</span>
<span class="p">}</span>

<span class="cm">/**
 *  @brief add data to list
 *
 *  @param [in] list
 *  @param [in] data
 */</span>
<span class="kt">void</span> <span class="nf">add</span><span class="p">(</span><span class="n">d_linked_list</span> <span class="o">*</span><span class="n">list</span><span class="p">,</span> <span class="kt">void</span> <span class="o">*</span><span class="n">data</span><span class="p">)</span>
<span class="p">{</span>
      <span class="k">if</span> <span class="p">(</span><span class="n">list</span><span class="o">-&gt;</span><span class="n">size</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span>
      <span class="p">{</span>
            <span class="n">list</span><span class="o">-&gt;</span><span class="n">head</span> <span class="o">=</span> <span class="n">new_d_element</span><span class="p">(</span><span class="n">data</span><span class="p">);</span>
            <span class="n">list</span><span class="o">-&gt;</span><span class="n">tail</span> <span class="o">=</span> <span class="n">list</span><span class="o">-&gt;</span><span class="n">head</span><span class="p">;</span>
      <span class="p">}</span>
      <span class="k">else</span>
      <span class="p">{</span>
            <span class="n">d_element</span> <span class="o">*</span><span class="n">toadd</span> <span class="o">=</span> <span class="n">new_d_element</span><span class="p">(</span><span class="n">data</span><span class="p">);</span>
            <span class="n">list</span><span class="o">-&gt;</span><span class="n">tail</span><span class="o">-&gt;</span><span class="n">next</span> <span class="o">=</span> <span class="n">toadd</span><span class="p">;</span>
            <span class="n">toadd</span><span class="o">-&gt;</span><span class="n">prev</span> <span class="o">=</span> <span class="n">list</span><span class="o">-&gt;</span><span class="n">tail</span><span class="p">;</span>
            <span class="n">list</span><span class="o">-&gt;</span><span class="n">tail</span> <span class="o">=</span> <span class="n">toadd</span><span class="p">;</span>
      <span class="p">}</span>
      <span class="o">++</span><span class="n">list</span><span class="o">-&gt;</span><span class="n">size</span><span class="p">;</span>
<span class="p">}</span>

<span class="cm">/**
 *  @brief search for data in list
 *
 *  @param [in] list
 *  @param [in] data
 *  @return searched element
 */</span>
<span class="n">d_element</span> <span class="o">*</span><span class="nf">search</span><span class="p">(</span><span class="n">d_linked_list</span> <span class="o">*</span><span class="n">list</span><span class="p">,</span> <span class="kt">void</span> <span class="o">*</span><span class="n">data</span><span class="p">)</span>
<span class="p">{</span>
      <span class="n">d_element</span> <span class="o">*</span><span class="n">e</span> <span class="o">=</span> <span class="n">list</span><span class="o">-&gt;</span><span class="n">head</span><span class="p">;</span>
      <span class="k">do</span>
      <span class="p">{</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">list</span><span class="o">-&gt;</span><span class="n">cmp</span><span class="p">(</span><span class="n">data</span><span class="p">,</span> <span class="n">e</span><span class="o">-&gt;</span><span class="n">data</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="k">return</span> <span class="n">e</span><span class="p">;</span>
      <span class="p">}</span> <span class="k">while</span> <span class="p">((</span><span class="n">e</span> <span class="o">=</span> <span class="n">e</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">)</span> <span class="o">!=</span> <span class="nb">NULL</span><span class="p">);</span>
      <span class="k">return</span> <span class="nb">NULL</span><span class="p">;</span>
<span class="p">}</span>

<span class="cm">/**
 *  @brief delete data from list
 *
 *  @param [in] list
 *  @param [in] data
 *  @return TRUE if data was found &amp; deleted, FALSE otherwise
 */</span>
<span class="kt">int</span> <span class="nf">delete</span><span class="p">(</span><span class="n">d_linked_list</span> <span class="o">*</span><span class="n">list</span><span class="p">,</span> <span class="kt">void</span> <span class="o">*</span><span class="n">data</span><span class="p">)</span>
<span class="p">{</span>
      <span class="n">d_element</span> <span class="o">*</span><span class="n">searched</span> <span class="o">=</span> <span class="n">search</span><span class="p">(</span><span class="n">list</span><span class="p">,</span> <span class="n">data</span><span class="p">);</span>
      <span class="k">if</span> <span class="p">(</span><span class="n">searched</span><span class="p">)</span>
      <span class="p">{</span>
            <span class="kt">int</span> <span class="n">ishead</span> <span class="o">=</span> <span class="o">!</span><span class="n">list</span><span class="o">-&gt;</span><span class="n">cmp</span><span class="p">(</span><span class="n">searched</span><span class="o">-&gt;</span><span class="n">data</span><span class="p">,</span> <span class="n">list</span><span class="o">-&gt;</span><span class="n">head</span><span class="o">-&gt;</span><span class="n">data</span><span class="p">);</span>
            <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">ishead</span><span class="p">)</span>
            <span class="p">{</span>
                  <span class="k">if</span> <span class="p">(</span><span class="n">searched</span> <span class="o">!=</span> <span class="nb">NULL</span><span class="p">)</span>
                  <span class="p">{</span>
                        <span class="n">searched</span><span class="o">-&gt;</span><span class="n">next</span><span class="o">-&gt;</span><span class="n">prev</span> <span class="o">=</span> <span class="n">searched</span><span class="o">-&gt;</span><span class="n">prev</span><span class="p">;</span>
                        <span class="n">searched</span><span class="o">-&gt;</span><span class="n">prev</span><span class="o">-&gt;</span><span class="n">next</span> <span class="o">=</span> <span class="n">searched</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">;</span>
                  <span class="p">}</span>
                  <span class="k">else</span>
                  <span class="p">{</span>
                        <span class="n">list</span><span class="o">-&gt;</span><span class="n">head</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>      <span class="c1">// LAST ELEMENT IN LIST</span>
                        <span class="n">list</span><span class="o">-&gt;</span><span class="n">tail</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
                  <span class="p">}</span>
            <span class="p">}</span>
            <span class="k">else</span>
            <span class="p">{</span>
                  <span class="k">if</span> <span class="p">(</span><span class="n">list</span><span class="o">-&gt;</span><span class="n">head</span><span class="o">-&gt;</span><span class="n">next</span> <span class="o">!=</span> <span class="nb">NULL</span><span class="p">)</span>
                  <span class="p">{</span>
                        <span class="n">list</span><span class="o">-&gt;</span><span class="n">head</span> <span class="o">=</span> <span class="n">list</span><span class="o">-&gt;</span><span class="n">head</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">;</span>
                        <span class="n">list</span><span class="o">-&gt;</span><span class="n">head</span><span class="o">-&gt;</span><span class="n">prev</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
                  <span class="p">}</span>
                  <span class="k">else</span>
                  <span class="p">{</span>
                        <span class="n">list</span><span class="o">-&gt;</span><span class="n">head</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>      <span class="c1">// LAST ELEMENT IN LIST</span>
                        <span class="n">list</span><span class="o">-&gt;</span><span class="n">tail</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
                  <span class="p">}</span>
            <span class="p">}</span>
            <span class="n">free</span><span class="p">(</span><span class="n">searched</span><span class="o">-&gt;</span><span class="n">data</span><span class="p">);</span>
            <span class="n">free</span><span class="p">(</span><span class="n">searched</span><span class="p">);</span>
            <span class="o">--</span><span class="n">list</span><span class="o">-&gt;</span><span class="n">size</span><span class="p">;</span>
            <span class="k">return</span> <span class="n">TRUE</span><span class="p">;</span>
      <span class="p">}</span>
      <span class="k">else</span> <span class="k">return</span> <span class="n">FALSE</span><span class="p">;</span>
<span class="p">}</span>

<span class="cp">#ifdef _DEBUGGING
</span>
<span class="n">d_linked_list</span> <span class="o">*</span><span class="nf">build_list</span><span class="p">()</span>
<span class="p">{</span>
      <span class="n">d_linked_list</span> <span class="o">*</span><span class="n">list</span> <span class="o">=</span> <span class="n">new_list</span><span class="p">(</span><span class="n">compare_string</span><span class="p">);</span>
      <span class="kt">char</span> <span class="o">*</span><span class="n">basetext</span> <span class="o">=</span> <span class="s">"I'm d_element number "</span><span class="p">;</span>
      <span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span>
      <span class="k">for</span> <span class="p">(;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">_TEST_SIZE_LIST</span><span class="p">;</span><span class="n">i</span><span class="o">++</span><span class="p">)</span>
      <span class="p">{</span>
            <span class="kt">char</span> <span class="o">*</span><span class="n">text1</span> <span class="o">=</span> <span class="n">malloc</span><span class="p">(</span><span class="k">sizeof</span><span class="p">(</span><span class="kt">char</span><span class="p">)</span><span class="o">*</span><span class="p">(</span><span class="n">strlen</span><span class="p">(</span><span class="n">basetext</span><span class="p">)</span><span class="o">+</span><span class="mi">10</span><span class="p">));</span>
            <span class="n">strcpy</span><span class="p">(</span><span class="n">text1</span><span class="p">,</span> <span class="n">basetext</span><span class="p">);</span>
            <span class="kt">char</span> <span class="n">numb</span><span class="p">[</span><span class="mi">10</span><span class="p">];</span>
            <span class="n">sprintf</span><span class="p">(</span><span class="n">numb</span><span class="p">,</span> <span class="s">"%d"</span><span class="p">,</span> <span class="n">i</span><span class="p">);</span>
            <span class="n">strcat</span><span class="p">(</span><span class="n">text1</span><span class="p">,</span> <span class="n">numb</span><span class="p">);</span>
            <span class="n">add</span><span class="p">(</span><span class="n">list</span><span class="p">,</span> <span class="n">text1</span><span class="p">);</span>
      <span class="p">}</span>

      <span class="k">return</span> <span class="n">list</span><span class="p">;</span>
<span class="p">}</span>

<span class="kt">void</span> <span class="nf">print_list</span><span class="p">(</span><span class="n">d_linked_list</span> <span class="o">*</span><span class="n">list</span><span class="p">)</span>
<span class="p">{</span>
      <span class="k">if</span> <span class="p">(</span><span class="n">list</span><span class="o">-&gt;</span><span class="n">size</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span>
      <span class="p">{</span>
            <span class="n">printf</span><span class="p">(</span><span class="s">"</span><span class="se">\n</span><span class="s">List empty."</span><span class="p">);</span>
      <span class="p">}</span>
      <span class="k">else</span>
      <span class="p">{</span>
            <span class="n">printf</span><span class="p">(</span><span class="s">"</span><span class="se">\n</span><span class="s">=============="</span><span class="p">);</span>
            <span class="n">d_element</span> <span class="o">*</span><span class="n">e</span> <span class="o">=</span> <span class="n">list</span><span class="o">-&gt;</span><span class="n">head</span><span class="p">;</span>
            <span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
            <span class="k">do</span>
            <span class="p">{</span>
                  <span class="n">printf</span><span class="p">(</span><span class="s">"</span><span class="se">\n</span><span class="s">List [%d]:</span><span class="se">\t</span><span class="s">%s"</span><span class="p">,</span><span class="n">i</span><span class="o">++</span><span class="p">,(</span><span class="kt">char</span><span class="o">*</span><span class="p">)</span><span class="n">e</span><span class="o">-&gt;</span><span class="n">data</span><span class="p">);</span>
            <span class="p">}</span> <span class="k">while</span> <span class="p">((</span><span class="n">e</span> <span class="o">=</span> <span class="n">e</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">)</span> <span class="o">!=</span> <span class="nb">NULL</span><span class="p">);</span>
            <span class="n">printf</span><span class="p">(</span><span class="s">"</span><span class="se">\n</span><span class="s">==============</span><span class="se">\n</span><span class="s">"</span><span class="p">);</span>
      <span class="p">}</span>
<span class="p">}</span>

<span class="kt">void</span> <span class="nf">test_delete</span><span class="p">(</span><span class="n">d_linked_list</span> <span class="o">*</span><span class="n">list</span><span class="p">,</span> <span class="kt">int</span> <span class="n">eln</span><span class="p">)</span>
<span class="p">{</span>
      <span class="kt">char</span> <span class="n">data</span><span class="p">[</span><span class="mi">20</span><span class="p">];</span>
      <span class="n">sprintf</span><span class="p">(</span><span class="n">data</span><span class="p">,</span> <span class="s">"I'm d_element number %d"</span><span class="p">,</span> <span class="n">eln</span><span class="p">);</span>
      <span class="k">if</span> <span class="p">(</span><span class="n">delete</span><span class="p">(</span><span class="n">list</span><span class="p">,</span> <span class="n">data</span><span class="p">))</span> <span class="n">printf</span><span class="p">(</span><span class="s">"</span><span class="se">\n</span><span class="s">Successfully deleted d_element #%d, %d elems in list"</span><span class="p">,</span><span class="n">eln</span><span class="p">,</span><span class="n">list</span><span class="o">-&gt;</span><span class="n">size</span><span class="p">);</span>
      <span class="k">else</span> <span class="n">printf</span><span class="p">(</span><span class="s">"</span><span class="se">\n</span><span class="s">Elem #%d not found"</span><span class="p">,</span><span class="n">eln</span><span class="p">);</span>
<span class="p">}</span>

<span class="kt">void</span> <span class="nf">test_add</span><span class="p">(</span><span class="n">d_linked_list</span> <span class="o">*</span><span class="n">list</span><span class="p">,</span> <span class="kt">int</span> <span class="n">eln</span><span class="p">)</span>
<span class="p">{</span>
      <span class="kt">char</span> <span class="o">*</span><span class="n">data</span> <span class="o">=</span> <span class="n">malloc</span><span class="p">(</span><span class="k">sizeof</span><span class="p">(</span><span class="kt">char</span><span class="p">)</span><span class="o">*</span><span class="mi">50</span><span class="p">);</span>
      <span class="n">sprintf</span><span class="p">(</span><span class="n">data</span><span class="p">,</span> <span class="s">"I'm NEW d_element number %d"</span><span class="p">,</span> <span class="n">eln</span><span class="p">);</span>
      <span class="n">add</span><span class="p">(</span><span class="n">list</span><span class="p">,</span> <span class="n">data</span><span class="p">);</span>
      <span class="n">printf</span><span class="p">(</span><span class="s">"</span><span class="se">\n</span><span class="s">Successfully added NEW d_element #%d, %d elems in list"</span><span class="p">,</span><span class="n">eln</span><span class="p">,</span><span class="n">list</span><span class="o">-&gt;</span><span class="n">size</span><span class="p">);</span>
<span class="p">}</span>

<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
<span class="p">{</span>
      <span class="n">d_linked_list</span> <span class="o">*</span><span class="n">list</span> <span class="o">=</span> <span class="n">build_list</span><span class="p">();</span>

      <span class="n">print_list</span><span class="p">(</span><span class="n">list</span><span class="p">);</span>
      <span class="n">test_delete</span><span class="p">(</span><span class="n">list</span><span class="p">,</span> <span class="mi">1</span><span class="p">);</span>
      <span class="n">test_delete</span><span class="p">(</span><span class="n">list</span><span class="p">,</span> <span class="mi">2</span><span class="p">);</span>
      <span class="n">test_delete</span><span class="p">(</span><span class="n">list</span><span class="p">,</span> <span class="mi">7</span><span class="p">);</span>
      <span class="n">test_delete</span><span class="p">(</span><span class="n">list</span><span class="p">,</span> <span class="mi">3</span><span class="p">);</span>
      <span class="n">test_delete</span><span class="p">(</span><span class="n">list</span><span class="p">,</span> <span class="mi">4</span><span class="p">);</span>
      <span class="n">test_delete</span><span class="p">(</span><span class="n">list</span><span class="p">,</span> <span class="mi">5</span><span class="p">);</span>
      <span class="n">test_add</span><span class="p">(</span><span class="n">list</span><span class="p">,</span> <span class="mi">13</span><span class="p">);</span>
      <span class="n">test_delete</span><span class="p">(</span><span class="n">list</span><span class="p">,</span> <span class="mi">6</span><span class="p">);</span>
      <span class="n">test_delete</span><span class="p">(</span><span class="n">list</span><span class="p">,</span> <span class="mi">8</span><span class="p">);</span>
      <span class="n">test_delete</span><span class="p">(</span><span class="n">list</span><span class="p">,</span> <span class="mi">9</span><span class="p">);</span>
      <span class="n">print_list</span><span class="p">(</span><span class="n">list</span><span class="p">);</span>
      <span class="n">test_add</span><span class="p">(</span><span class="n">list</span><span class="p">,</span> <span class="mi">1337</span><span class="p">);</span>
      <span class="n">print_list</span><span class="p">(</span><span class="n">list</span><span class="p">);</span>
      <span class="n">test_delete</span><span class="p">(</span><span class="n">list</span><span class="p">,</span> <span class="mi">2</span><span class="p">);</span>
      <span class="n">test_add</span><span class="p">(</span><span class="n">list</span><span class="p">,</span> <span class="mi">98</span><span class="p">);</span>
      <span class="n">print_list</span><span class="p">(</span><span class="n">list</span><span class="p">);</span>

      <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>

<span class="cp">#endif
</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;&lt;/</span><span class="n">div</span><span class="o">&gt;</span></code></pre></div>
;
T;U;[0I"p<!DOCTYPE html><html lang="en"><head>
    <meta charset="utf-8">
    <title>A Developer's Notebook - Doubly linked list</title>
    <link rel="stylesheet" href="https://unpkg.com/purecss@1.0.1/build/pure-min.css" integrity="sha384-oAOxQR6DkCoMliIh8yFnu25d7Eq/PHS21PClpwjOTeU2jRSq11vu66rf90/cZr47" crossorigin="anonymous">
    <link rel="stylesheet" href="../../assets/stylesheet.css">
    <link rel="stylesheet" href="../../assets/highlight.css">

    <!-- you don't need to keep this, but it's cool for stats! -->
    <meta name="generator" content="Nanoc 4.11.9">
  </head>
  <body>
    <div id="layout">
      <div class="header">
        <h1>
          <a href="../../">A Developer's Notebook</a>
        </h1>
      </div>


      <div class="content">
        <nav class="pure-g">
          <div class="pure-u-2-3 links">
            <a href="../../index.html">Home</a> ¬∑
            <a href="../../tags.html">Tags</a> ¬∑
            <a href="../../years.html">Years</a> ¬∑
            <a href="../../about.html">About</a>
          </div>

          <div class="pure-u-1-3">
            <div class="contact">
              <span>
                <a href="https://github.com/lbrito1" download="">
                  <img src="../../assets/icons/github.svg" alt="Github icon">
                  </a>
              </span>
              <span>
                <a href="https://www.linkedin.com/in/leonardo-mendes-brito/">
                <img src="../../assets/icons/linkedin.svg" alt="LinkedIn icon">
                </a>
              </span>
            </div>
          </div>
        </nav>
        
  <div class="post-show">
    <h1>Doubly linked list</h1>
    <article class="text">
      <p>A doubly linked list is like our previously implemented Linked List, but instead of only having pointers to the next element, it also has pointers to the _previous _element:</p>

<p><a href="../../assets/images/codedeposit/2014/03/610px-doubly-linked-list-svg.png"><img src="../../assets/images/codedeposit/2014/03/610px-doubly-linked-list-svg.png" alt="610px-Doubly-linked-list.svg"></a></p>

<p>This property makes the doubly linked list very useful as a base for other data structures such as the stack: having a previous pointer means we can quickly (O(1)) remove objects from the list‚Äôs tail, which would be impossible with a linked list.</p>

<p>We won‚Äôt discuss implementation since it so similar to a linked list. If anything implementation is even simpler than a linked list because of the previous pointer access.</p>

<!-- more -->

<p>Full source code with printable tests follows below, and can also be found at out github.</p>

<div class="highlight"><pre><code class="language-c"><span class="cm">/*
    File: doubly_linked_list.c

    Copyright (c) 2014 Leonardo Brito &lt;lbrito@gmail.com&gt;

    This software is free software; you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation; either version 2 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License along
    with this program; if not, write the Free Software Foundation, Inc., 51
    Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
*/</span>

<span class="cp">#include 
#include 
#include 
#include "comparators.c"
</span>
<span class="cp">#if !defined _TEST_SIZE_LIST &amp;&amp; defined _DEBUGGING
#define _TEST_SIZE_LIST 10
#endif
</span>
<span class="cp">#define TRUE 1
#define FALSE 0
</span>
<span class="k">typedef</span> <span class="k">struct</span> <span class="n">d_element</span>
<span class="p">{</span>
      <span class="kt">void</span> <span class="o">*</span><span class="n">data</span><span class="p">;</span>
      <span class="k">struct</span> <span class="n">d_element</span> <span class="o">*</span><span class="n">next</span><span class="p">,</span> <span class="o">*</span><span class="n">prev</span><span class="p">;</span>
<span class="p">}</span> <span class="n">d_element</span><span class="p">;</span>

<span class="k">typedef</span> <span class="k">struct</span> <span class="n">d_linked_list</span>
<span class="p">{</span>
      <span class="n">d_element</span> <span class="o">*</span><span class="n">head</span><span class="p">;</span>
      <span class="n">d_element</span> <span class="o">*</span><span class="n">tail</span><span class="p">;</span>
      <span class="kt">unsigned</span> <span class="n">size</span><span class="p">;</span>
      <span class="kt">int</span> <span class="p">(</span><span class="o">*</span><span class="n">cmp</span><span class="p">)</span> <span class="p">(</span><span class="kt">void</span><span class="o">*</span><span class="p">,</span> <span class="kt">void</span><span class="o">*</span><span class="p">);</span>
<span class="p">}</span> <span class="n">d_linked_list</span><span class="p">;</span>

<span class="cm">/**
 *  @brief create a new doubly linked list
 *
 *  @param [in] comparator
 *  @return
 */</span>
<span class="n">d_linked_list</span> <span class="o">*</span><span class="nf">new_list</span><span class="p">(</span><span class="kt">int</span> <span class="p">(</span><span class="o">*</span><span class="n">comparator</span><span class="p">)</span> <span class="p">(</span><span class="kt">void</span><span class="o">*</span><span class="p">,</span> <span class="kt">void</span><span class="o">*</span><span class="p">))</span>
<span class="p">{</span>
      <span class="n">d_linked_list</span> <span class="o">*</span><span class="n">l</span> <span class="o">=</span> <span class="n">malloc</span><span class="p">(</span><span class="k">sizeof</span><span class="p">(</span><span class="n">d_linked_list</span><span class="p">));</span>
      <span class="n">l</span><span class="o">-&gt;</span><span class="n">size</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
      <span class="n">l</span><span class="o">-&gt;</span><span class="n">cmp</span> <span class="o">=</span> <span class="n">comparator</span><span class="p">;</span>
      <span class="k">return</span> <span class="n">l</span><span class="p">;</span>
<span class="p">}</span>

<span class="cm">/**
 *  @brief create a new d_element
 *
 *  @param [in] data
 *  @return
 */</span>
<span class="n">d_element</span> <span class="o">*</span><span class="nf">new_d_element</span><span class="p">(</span><span class="kt">void</span> <span class="o">*</span><span class="n">data</span><span class="p">)</span>
<span class="p">{</span>
      <span class="n">d_element</span> <span class="o">*</span><span class="n">e</span> <span class="o">=</span> <span class="p">(</span><span class="n">d_element</span><span class="o">*</span><span class="p">)</span> <span class="n">malloc</span><span class="p">(</span><span class="k">sizeof</span><span class="p">(</span><span class="n">d_element</span><span class="p">));</span>
      <span class="n">e</span><span class="o">-&gt;</span><span class="n">data</span> <span class="o">=</span> <span class="n">data</span><span class="p">;</span>
      <span class="n">e</span><span class="o">-&gt;</span><span class="n">next</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
      <span class="n">e</span><span class="o">-&gt;</span><span class="n">prev</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
      <span class="k">return</span> <span class="n">e</span><span class="p">;</span>
<span class="p">}</span>

<span class="cm">/**
 *  @brief add data to list
 *
 *  @param [in] list
 *  @param [in] data
 */</span>
<span class="kt">void</span> <span class="nf">add</span><span class="p">(</span><span class="n">d_linked_list</span> <span class="o">*</span><span class="n">list</span><span class="p">,</span> <span class="kt">void</span> <span class="o">*</span><span class="n">data</span><span class="p">)</span>
<span class="p">{</span>
      <span class="k">if</span> <span class="p">(</span><span class="n">list</span><span class="o">-&gt;</span><span class="n">size</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span>
      <span class="p">{</span>
            <span class="n">list</span><span class="o">-&gt;</span><span class="n">head</span> <span class="o">=</span> <span class="n">new_d_element</span><span class="p">(</span><span class="n">data</span><span class="p">);</span>
            <span class="n">list</span><span class="o">-&gt;</span><span class="n">tail</span> <span class="o">=</span> <span class="n">list</span><span class="o">-&gt;</span><span class="n">head</span><span class="p">;</span>
      <span class="p">}</span>
      <span class="k">else</span>
      <span class="p">{</span>
            <span class="n">d_element</span> <span class="o">*</span><span class="n">toadd</span> <span class="o">=</span> <span class="n">new_d_element</span><span class="p">(</span><span class="n">data</span><span class="p">);</span>
            <span class="n">list</span><span class="o">-&gt;</span><span class="n">tail</span><span class="o">-&gt;</span><span class="n">next</span> <span class="o">=</span> <span class="n">toadd</span><span class="p">;</span>
            <span class="n">toadd</span><span class="o">-&gt;</span><span class="n">prev</span> <span class="o">=</span> <span class="n">list</span><span class="o">-&gt;</span><span class="n">tail</span><span class="p">;</span>
            <span class="n">list</span><span class="o">-&gt;</span><span class="n">tail</span> <span class="o">=</span> <span class="n">toadd</span><span class="p">;</span>
      <span class="p">}</span>
      <span class="o">++</span><span class="n">list</span><span class="o">-&gt;</span><span class="n">size</span><span class="p">;</span>
<span class="p">}</span>

<span class="cm">/**
 *  @brief search for data in list
 *
 *  @param [in] list
 *  @param [in] data
 *  @return searched element
 */</span>
<span class="n">d_element</span> <span class="o">*</span><span class="nf">search</span><span class="p">(</span><span class="n">d_linked_list</span> <span class="o">*</span><span class="n">list</span><span class="p">,</span> <span class="kt">void</span> <span class="o">*</span><span class="n">data</span><span class="p">)</span>
<span class="p">{</span>
      <span class="n">d_element</span> <span class="o">*</span><span class="n">e</span> <span class="o">=</span> <span class="n">list</span><span class="o">-&gt;</span><span class="n">head</span><span class="p">;</span>
      <span class="k">do</span>
      <span class="p">{</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">list</span><span class="o">-&gt;</span><span class="n">cmp</span><span class="p">(</span><span class="n">data</span><span class="p">,</span> <span class="n">e</span><span class="o">-&gt;</span><span class="n">data</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="k">return</span> <span class="n">e</span><span class="p">;</span>
      <span class="p">}</span> <span class="k">while</span> <span class="p">((</span><span class="n">e</span> <span class="o">=</span> <span class="n">e</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">)</span> <span class="o">!=</span> <span class="nb">NULL</span><span class="p">);</span>
      <span class="k">return</span> <span class="nb">NULL</span><span class="p">;</span>
<span class="p">}</span>

<span class="cm">/**
 *  @brief delete data from list
 *
 *  @param [in] list
 *  @param [in] data
 *  @return TRUE if data was found &amp; deleted, FALSE otherwise
 */</span>
<span class="kt">int</span> <span class="nf">delete</span><span class="p">(</span><span class="n">d_linked_list</span> <span class="o">*</span><span class="n">list</span><span class="p">,</span> <span class="kt">void</span> <span class="o">*</span><span class="n">data</span><span class="p">)</span>
<span class="p">{</span>
      <span class="n">d_element</span> <span class="o">*</span><span class="n">searched</span> <span class="o">=</span> <span class="n">search</span><span class="p">(</span><span class="n">list</span><span class="p">,</span> <span class="n">data</span><span class="p">);</span>
      <span class="k">if</span> <span class="p">(</span><span class="n">searched</span><span class="p">)</span>
      <span class="p">{</span>
            <span class="kt">int</span> <span class="n">ishead</span> <span class="o">=</span> <span class="o">!</span><span class="n">list</span><span class="o">-&gt;</span><span class="n">cmp</span><span class="p">(</span><span class="n">searched</span><span class="o">-&gt;</span><span class="n">data</span><span class="p">,</span> <span class="n">list</span><span class="o">-&gt;</span><span class="n">head</span><span class="o">-&gt;</span><span class="n">data</span><span class="p">);</span>
            <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">ishead</span><span class="p">)</span>
            <span class="p">{</span>
                  <span class="k">if</span> <span class="p">(</span><span class="n">searched</span> <span class="o">!=</span> <span class="nb">NULL</span><span class="p">)</span>
                  <span class="p">{</span>
                        <span class="n">searched</span><span class="o">-&gt;</span><span class="n">next</span><span class="o">-&gt;</span><span class="n">prev</span> <span class="o">=</span> <span class="n">searched</span><span class="o">-&gt;</span><span class="n">prev</span><span class="p">;</span>
                        <span class="n">searched</span><span class="o">-&gt;</span><span class="n">prev</span><span class="o">-&gt;</span><span class="n">next</span> <span class="o">=</span> <span class="n">searched</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">;</span>
                  <span class="p">}</span>
                  <span class="k">else</span>
                  <span class="p">{</span>
                        <span class="n">list</span><span class="o">-&gt;</span><span class="n">head</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>      <span class="c1">// LAST ELEMENT IN LIST</span>
                        <span class="n">list</span><span class="o">-&gt;</span><span class="n">tail</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
                  <span class="p">}</span>
            <span class="p">}</span>
            <span class="k">else</span>
            <span class="p">{</span>
                  <span class="k">if</span> <span class="p">(</span><span class="n">list</span><span class="o">-&gt;</span><span class="n">head</span><span class="o">-&gt;</span><span class="n">next</span> <span class="o">!=</span> <span class="nb">NULL</span><span class="p">)</span>
                  <span class="p">{</span>
                        <span class="n">list</span><span class="o">-&gt;</span><span class="n">head</span> <span class="o">=</span> <span class="n">list</span><span class="o">-&gt;</span><span class="n">head</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">;</span>
                        <span class="n">list</span><span class="o">-&gt;</span><span class="n">head</span><span class="o">-&gt;</span><span class="n">prev</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
                  <span class="p">}</span>
                  <span class="k">else</span>
                  <span class="p">{</span>
                        <span class="n">list</span><span class="o">-&gt;</span><span class="n">head</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>      <span class="c1">// LAST ELEMENT IN LIST</span>
                        <span class="n">list</span><span class="o">-&gt;</span><span class="n">tail</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
                  <span class="p">}</span>
            <span class="p">}</span>
            <span class="n">free</span><span class="p">(</span><span class="n">searched</span><span class="o">-&gt;</span><span class="n">data</span><span class="p">);</span>
            <span class="n">free</span><span class="p">(</span><span class="n">searched</span><span class="p">);</span>
            <span class="o">--</span><span class="n">list</span><span class="o">-&gt;</span><span class="n">size</span><span class="p">;</span>
            <span class="k">return</span> <span class="n">TRUE</span><span class="p">;</span>
      <span class="p">}</span>
      <span class="k">else</span> <span class="k">return</span> <span class="n">FALSE</span><span class="p">;</span>
<span class="p">}</span>

<span class="cp">#ifdef _DEBUGGING
</span>
<span class="n">d_linked_list</span> <span class="o">*</span><span class="nf">build_list</span><span class="p">()</span>
<span class="p">{</span>
      <span class="n">d_linked_list</span> <span class="o">*</span><span class="n">list</span> <span class="o">=</span> <span class="n">new_list</span><span class="p">(</span><span class="n">compare_string</span><span class="p">);</span>
      <span class="kt">char</span> <span class="o">*</span><span class="n">basetext</span> <span class="o">=</span> <span class="s">"I'm d_element number "</span><span class="p">;</span>
      <span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span>
      <span class="k">for</span> <span class="p">(;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">_TEST_SIZE_LIST</span><span class="p">;</span><span class="n">i</span><span class="o">++</span><span class="p">)</span>
      <span class="p">{</span>
            <span class="kt">char</span> <span class="o">*</span><span class="n">text1</span> <span class="o">=</span> <span class="n">malloc</span><span class="p">(</span><span class="k">sizeof</span><span class="p">(</span><span class="kt">char</span><span class="p">)</span><span class="o">*</span><span class="p">(</span><span class="n">strlen</span><span class="p">(</span><span class="n">basetext</span><span class="p">)</span><span class="o">+</span><span class="mi">10</span><span class="p">));</span>
            <span class="n">strcpy</span><span class="p">(</span><span class="n">text1</span><span class="p">,</span> <span class="n">basetext</span><span class="p">);</span>
            <span class="kt">char</span> <span class="n">numb</span><span class="p">[</span><span class="mi">10</span><span class="p">];</span>
            <span class="n">sprintf</span><span class="p">(</span><span class="n">numb</span><span class="p">,</span> <span class="s">"%d"</span><span class="p">,</span> <span class="n">i</span><span class="p">);</span>
            <span class="n">strcat</span><span class="p">(</span><span class="n">text1</span><span class="p">,</span> <span class="n">numb</span><span class="p">);</span>
            <span class="n">add</span><span class="p">(</span><span class="n">list</span><span class="p">,</span> <span class="n">text1</span><span class="p">);</span>
      <span class="p">}</span>

      <span class="k">return</span> <span class="n">list</span><span class="p">;</span>
<span class="p">}</span>

<span class="kt">void</span> <span class="nf">print_list</span><span class="p">(</span><span class="n">d_linked_list</span> <span class="o">*</span><span class="n">list</span><span class="p">)</span>
<span class="p">{</span>
      <span class="k">if</span> <span class="p">(</span><span class="n">list</span><span class="o">-&gt;</span><span class="n">size</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span>
      <span class="p">{</span>
            <span class="n">printf</span><span class="p">(</span><span class="s">"</span><span class="se">\n</span><span class="s">List empty."</span><span class="p">);</span>
      <span class="p">}</span>
      <span class="k">else</span>
      <span class="p">{</span>
            <span class="n">printf</span><span class="p">(</span><span class="s">"</span><span class="se">\n</span><span class="s">=============="</span><span class="p">);</span>
            <span class="n">d_element</span> <span class="o">*</span><span class="n">e</span> <span class="o">=</span> <span class="n">list</span><span class="o">-&gt;</span><span class="n">head</span><span class="p">;</span>
            <span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
            <span class="k">do</span>
            <span class="p">{</span>
                  <span class="n">printf</span><span class="p">(</span><span class="s">"</span><span class="se">\n</span><span class="s">List [%d]:</span><span class="se">\t</span><span class="s">%s"</span><span class="p">,</span><span class="n">i</span><span class="o">++</span><span class="p">,(</span><span class="kt">char</span><span class="o">*</span><span class="p">)</span><span class="n">e</span><span class="o">-&gt;</span><span class="n">data</span><span class="p">);</span>
            <span class="p">}</span> <span class="k">while</span> <span class="p">((</span><span class="n">e</span> <span class="o">=</span> <span class="n">e</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">)</span> <span class="o">!=</span> <span class="nb">NULL</span><span class="p">);</span>
            <span class="n">printf</span><span class="p">(</span><span class="s">"</span><span class="se">\n</span><span class="s">==============</span><span class="se">\n</span><span class="s">"</span><span class="p">);</span>
      <span class="p">}</span>
<span class="p">}</span>

<span class="kt">void</span> <span class="nf">test_delete</span><span class="p">(</span><span class="n">d_linked_list</span> <span class="o">*</span><span class="n">list</span><span class="p">,</span> <span class="kt">int</span> <span class="n">eln</span><span class="p">)</span>
<span class="p">{</span>
      <span class="kt">char</span> <span class="n">data</span><span class="p">[</span><span class="mi">20</span><span class="p">];</span>
      <span class="n">sprintf</span><span class="p">(</span><span class="n">data</span><span class="p">,</span> <span class="s">"I'm d_element number %d"</span><span class="p">,</span> <span class="n">eln</span><span class="p">);</span>
      <span class="k">if</span> <span class="p">(</span><span class="n">delete</span><span class="p">(</span><span class="n">list</span><span class="p">,</span> <span class="n">data</span><span class="p">))</span> <span class="n">printf</span><span class="p">(</span><span class="s">"</span><span class="se">\n</span><span class="s">Successfully deleted d_element #%d, %d elems in list"</span><span class="p">,</span><span class="n">eln</span><span class="p">,</span><span class="n">list</span><span class="o">-&gt;</span><span class="n">size</span><span class="p">);</span>
      <span class="k">else</span> <span class="n">printf</span><span class="p">(</span><span class="s">"</span><span class="se">\n</span><span class="s">Elem #%d not found"</span><span class="p">,</span><span class="n">eln</span><span class="p">);</span>
<span class="p">}</span>

<span class="kt">void</span> <span class="nf">test_add</span><span class="p">(</span><span class="n">d_linked_list</span> <span class="o">*</span><span class="n">list</span><span class="p">,</span> <span class="kt">int</span> <span class="n">eln</span><span class="p">)</span>
<span class="p">{</span>
      <span class="kt">char</span> <span class="o">*</span><span class="n">data</span> <span class="o">=</span> <span class="n">malloc</span><span class="p">(</span><span class="k">sizeof</span><span class="p">(</span><span class="kt">char</span><span class="p">)</span><span class="o">*</span><span class="mi">50</span><span class="p">);</span>
      <span class="n">sprintf</span><span class="p">(</span><span class="n">data</span><span class="p">,</span> <span class="s">"I'm NEW d_element number %d"</span><span class="p">,</span> <span class="n">eln</span><span class="p">);</span>
      <span class="n">add</span><span class="p">(</span><span class="n">list</span><span class="p">,</span> <span class="n">data</span><span class="p">);</span>
      <span class="n">printf</span><span class="p">(</span><span class="s">"</span><span class="se">\n</span><span class="s">Successfully added NEW d_element #%d, %d elems in list"</span><span class="p">,</span><span class="n">eln</span><span class="p">,</span><span class="n">list</span><span class="o">-&gt;</span><span class="n">size</span><span class="p">);</span>
<span class="p">}</span>

<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
<span class="p">{</span>
      <span class="n">d_linked_list</span> <span class="o">*</span><span class="n">list</span> <span class="o">=</span> <span class="n">build_list</span><span class="p">();</span>

      <span class="n">print_list</span><span class="p">(</span><span class="n">list</span><span class="p">);</span>
      <span class="n">test_delete</span><span class="p">(</span><span class="n">list</span><span class="p">,</span> <span class="mi">1</span><span class="p">);</span>
      <span class="n">test_delete</span><span class="p">(</span><span class="n">list</span><span class="p">,</span> <span class="mi">2</span><span class="p">);</span>
      <span class="n">test_delete</span><span class="p">(</span><span class="n">list</span><span class="p">,</span> <span class="mi">7</span><span class="p">);</span>
      <span class="n">test_delete</span><span class="p">(</span><span class="n">list</span><span class="p">,</span> <span class="mi">3</span><span class="p">);</span>
      <span class="n">test_delete</span><span class="p">(</span><span class="n">list</span><span class="p">,</span> <span class="mi">4</span><span class="p">);</span>
      <span class="n">test_delete</span><span class="p">(</span><span class="n">list</span><span class="p">,</span> <span class="mi">5</span><span class="p">);</span>
      <span class="n">test_add</span><span class="p">(</span><span class="n">list</span><span class="p">,</span> <span class="mi">13</span><span class="p">);</span>
      <span class="n">test_delete</span><span class="p">(</span><span class="n">list</span><span class="p">,</span> <span class="mi">6</span><span class="p">);</span>
      <span class="n">test_delete</span><span class="p">(</span><span class="n">list</span><span class="p">,</span> <span class="mi">8</span><span class="p">);</span>
      <span class="n">test_delete</span><span class="p">(</span><span class="n">list</span><span class="p">,</span> <span class="mi">9</span><span class="p">);</span>
      <span class="n">print_list</span><span class="p">(</span><span class="n">list</span><span class="p">);</span>
      <span class="n">test_add</span><span class="p">(</span><span class="n">list</span><span class="p">,</span> <span class="mi">1337</span><span class="p">);</span>
      <span class="n">print_list</span><span class="p">(</span><span class="n">list</span><span class="p">);</span>
      <span class="n">test_delete</span><span class="p">(</span><span class="n">list</span><span class="p">,</span> <span class="mi">2</span><span class="p">);</span>
      <span class="n">test_add</span><span class="p">(</span><span class="n">list</span><span class="p">,</span> <span class="mi">98</span><span class="p">);</span>
      <span class="n">print_list</span><span class="p">(</span><span class="n">list</span><span class="p">);</span>

      <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>

<span class="cp">#endif
</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;&lt;/</span><span class="n">div</span><span class="o">&gt;</span></code></pre></div>

    </article>
    <aside>Posted at: Mar 18, 2014</aside>
    <div class="post-footer">
      <a href="../../index.html">Back</a>
    </div>
  </div>

        <div class="footer">
          2020 Leonardo Brito
        </div>
      </div>

    </div>
  


</body></html>;
T;@˚;@˚o;;;;	I"R/posts/2017-06-19-how-a-Unix-CLI-tool-made-me-care-about-software-feedback.md;
T{;{
;U;[I"t/home/carol/workspace/blog/content/posts/2017-06-19-how-a-Unix-CLI-tool-made-me-care-about-software-feedback.md;
TI"ZProviding feedback is one of the most important parts of any software. Unfortunately, more often than not we tend to downplay or ignore the very simple yet crucial task of letting the user know what is going on. In this article I'll use a short cautionary tale of how the lack of proper user feedback (and some laziness, I admit) almost cost me an entire HDD with years of personal data.

<!-- more -->

It was late at night and I was trying to clean up an SD card with some vacation photos. However, a silly media-detection Ubuntu process had hanged at some point and locked down the card, impeding any write operations on it. So I did what any lazy developer would do at 1AM: hastily search StackOverflow and paste into the terminal the first possibly applicable code snippet. Albeit totally overkill, the answer was legit: zero-filling (writing `0`s in the disk, effectively deleting data) the device with the `dd` program. So I copy-pasted the command, hit Enter and waited‚Ää‚Äî‚Ääwithout properly understanding what I had just typed, I might add. The command seemed to take too long so I killed it after a few seconds. Much to my surprise, on reboot the OS wouldn't load.

The command I had copy-pasted from StackOverflow used `dev/sdb` as the destination device to be zero-filled, which must have been the original poster's SD card device name. Unfortunately for me, that was the name of my secondary HDD, while my SD card was probably something like `/dev/sdc`. The `dd` program had zero-filled the beginning of the HDD, which contains the partition table information, making it unmountable. After some tinkering around I removed the HDD entry from `/etc/fstab` and was able to boot into Ubuntu. After some research I found out the correct tools to restore the disk's partition table and everything was fine (except for the hours of sleep I lost on that day).

![Can you tell by the output of dd that the device will be completely and irrevocably wiped out? Hint: while the operation is running (i.e. before hitting CTRL+C), there _is no¬†output._](/assets/images/goiabada/1*RUsq0P9vGjQQvjpsbov09g.jpeg)
Can you tell by the output of dd that the device will be completely and irrevocably wiped out? Hint: while the operation is running (i.e. before hitting CTRL+C), there _is no¬†output._

The first and obvious lesson learned here is, of course, don't copy-paste and immediately run things from the Internet. It is potentially dangerous and just plain bad practice. The thing is, though, users will _always_ do something that is bad practice. Real-world users will find themselves tired and frustrated at 1AM, like myself, and will do stuff they're "not supposed to do". That is why feedback is so important: a simple confirmation dialog saying something like "this command will completely overwrite the destination file at device x, are you sure you want to continue?" might have made me think twice, and I might have saved a couple of hours of sleep.

> But you should know better! It is so obvious that `sudo dd if=/dev/zero of=/dev/sdb bs=512` will copy `0x00`s to the output file, `/dev/sdb`, which happens to be the address of your secondary HDD, and will thus erase all your data!

I totally should, and now that I am well-rested and have good hindsight on the subject it does feel like an embarrassingly naive mistake that I'd never want to write about on a blog post and share with my peers. But at the time I was unfamiliar with `dd`, and also tired and impatient. Users will often be tired, impatient or frustrated, and won't always know exactly what some command, button or link is intended to do on your software. Even extremely knowledgeable and competent people [will sometimes make almost unbelievable mistakes](https://twitter.com/gitlabstatus/status/826591961444384768): let's just call it human nature.

So the real lesson to be learned here isn't "scold your user for being stupid", but rather "make sure your software gives the user proper feedback". We can't change human nature, and people will always do something wrong for many different reasons. I am really not talking about anything complex, but just very basic, simple things: it costs nothing to add a confirmation dialog, a well-thought-of label or an informative modal to your software. As developers, we are constantly tempted to thinking that if the code works, then the feature is done; but the user might not even know that the feature is ready and working unless they have proper feedback.

Giving the user some feedback around critical sections of your software will go a long way. At worst, good feedback is harmless, and at best it will save someone from deleting their HDD.

By [Leonardo Brito](https://medium.com/@lbrito) on [June 19, 2017](https://medium.com/p/656f5fe3f6b8).

[Canonical link](https://medium.com/@lbrito/how-a-unix-cli-tool-made-me-care-about-software-feedback-656f5fe3f6b8)

Exported from [Medium](https://medium.com) on May 1, 2019.
;
T;U;[0I"∞<p>Providing feedback is one of the most important parts of any software. Unfortunately, more often than not we tend to downplay or ignore the very simple yet crucial task of letting the user know what is going on. In this article I‚Äôll use a short cautionary tale of how the lack of proper user feedback (and some laziness, I admit) almost cost me an entire HDD with years of personal data.</p>

<!-- more -->

<p>It was late at night and I was trying to clean up an SD card with some vacation photos. However, a silly media-detection Ubuntu process had hanged at some point and locked down the card, impeding any write operations on it. So I did what any lazy developer would do at 1AM: hastily search StackOverflow and paste into the terminal the first possibly applicable code snippet. Albeit totally overkill, the answer was legit: zero-filling (writing <code>0</code>s in the disk, effectively deleting data) the device with the <code>dd</code> program. So I copy-pasted the command, hit Enter and waited‚Ää‚Äî‚Ääwithout properly understanding what I had just typed, I might add. The command seemed to take too long so I killed it after a few seconds. Much to my surprise, on reboot the OS wouldn‚Äôt load.</p>

<p>The command I had copy-pasted from StackOverflow used <code>dev/sdb</code> as the destination device to be zero-filled, which must have been the original poster‚Äôs SD card device name. Unfortunately for me, that was the name of my secondary HDD, while my SD card was probably something like <code>/dev/sdc</code>. The <code>dd</code> program had zero-filled the beginning of the HDD, which contains the partition table information, making it unmountable. After some tinkering around I removed the HDD entry from <code>/etc/fstab</code> and was able to boot into Ubuntu. After some research I found out the correct tools to restore the disk‚Äôs partition table and everything was fine (except for the hours of sleep I lost on that day).</p>

<p><img src="/assets/images/goiabada/1*RUsq0P9vGjQQvjpsbov09g.jpeg" alt="Can you tell by the output of dd that the device will be completely and irrevocably wiped out? Hint: while the operation is running (i.e. before hitting CTRL+C), there _is no¬†output._">
Can you tell by the output of dd that the device will be completely and irrevocably wiped out? Hint: while the operation is running (i.e. before hitting CTRL+C), there <em>is no¬†output.</em></p>

<p>The first and obvious lesson learned here is, of course, don‚Äôt copy-paste and immediately run things from the Internet. It is potentially dangerous and just plain bad practice. The thing is, though, users will <em>always</em> do something that is bad practice. Real-world users will find themselves tired and frustrated at 1AM, like myself, and will do stuff they‚Äôre ‚Äúnot supposed to do‚Äù. That is why feedback is so important: a simple confirmation dialog saying something like ‚Äúthis command will completely overwrite the destination file at device x, are you sure you want to continue?‚Äù might have made me think twice, and I might have saved a couple of hours of sleep.</p>

<blockquote>
  <p>But you should know better! It is so obvious that <code>sudo dd if=/dev/zero of=/dev/sdb bs=512</code> will copy <code>0x00</code>s to the output file, <code>/dev/sdb</code>, which happens to be the address of your secondary HDD, and will thus erase all your data!</p>
</blockquote>

<p>I totally should, and now that I am well-rested and have good hindsight on the subject it does feel like an embarrassingly naive mistake that I‚Äôd never want to write about on a blog post and share with my peers. But at the time I was unfamiliar with <code>dd</code>, and also tired and impatient. Users will often be tired, impatient or frustrated, and won‚Äôt always know exactly what some command, button or link is intended to do on your software. Even extremely knowledgeable and competent people <a href="https://twitter.com/gitlabstatus/status/826591961444384768">will sometimes make almost unbelievable mistakes</a>: let‚Äôs just call it human nature.</p>

<p>So the real lesson to be learned here isn‚Äôt ‚Äúscold your user for being stupid‚Äù, but rather ‚Äúmake sure your software gives the user proper feedback‚Äù. We can‚Äôt change human nature, and people will always do something wrong for many different reasons. I am really not talking about anything complex, but just very basic, simple things: it costs nothing to add a confirmation dialog, a well-thought-of label or an informative modal to your software. As developers, we are constantly tempted to thinking that if the code works, then the feature is done; but the user might not even know that the feature is ready and working unless they have proper feedback.</p>

<p>Giving the user some feedback around critical sections of your software will go a long way. At worst, good feedback is harmless, and at best it will save someone from deleting their HDD.</p>

<p>By <a href="https://medium.com/@lbrito">Leonardo Brito</a> on <a href="https://medium.com/p/656f5fe3f6b8">June 19, 2017</a>.</p>

<p><a href="https://medium.com/@lbrito/how-a-unix-cli-tool-made-me-care-about-software-feedback-656f5fe3f6b8">Canonical link</a></p>

<p>Exported from <a href="https://medium.com">Medium</a> on May 1, 2019.</p>
;
T;U;[0I"ª<!DOCTYPE html><html lang="en"><head>
    <meta charset="utf-8">
    <title>A Developer's Notebook - How a Unix CLI tool made me care about software feedback</title>
    <link rel="stylesheet" href="https://unpkg.com/purecss@1.0.1/build/pure-min.css" integrity="sha384-oAOxQR6DkCoMliIh8yFnu25d7Eq/PHS21PClpwjOTeU2jRSq11vu66rf90/cZr47" crossorigin="anonymous">
    <link rel="stylesheet" href="../../assets/stylesheet.css">
    <link rel="stylesheet" href="../../assets/highlight.css">

    <!-- you don't need to keep this, but it's cool for stats! -->
    <meta name="generator" content="Nanoc 4.11.9">
  </head>
  <body>
    <div id="layout">
      <div class="header">
        <h1>
          <a href="../../">A Developer's Notebook</a>
        </h1>
      </div>


      <div class="content">
        <nav class="pure-g">
          <div class="pure-u-2-3 links">
            <a href="../../index.html">Home</a> ¬∑
            <a href="../../tags.html">Tags</a> ¬∑
            <a href="../../years.html">Years</a> ¬∑
            <a href="../../about.html">About</a>
          </div>

          <div class="pure-u-1-3">
            <div class="contact">
              <span>
                <a href="https://github.com/lbrito1" download="">
                  <img src="../../assets/icons/github.svg" alt="Github icon">
                  </a>
              </span>
              <span>
                <a href="https://www.linkedin.com/in/leonardo-mendes-brito/">
                <img src="../../assets/icons/linkedin.svg" alt="LinkedIn icon">
                </a>
              </span>
            </div>
          </div>
        </nav>
        
  <div class="post-show">
    <h1>How a Unix CLI tool made me care about software feedback</h1>
    <article class="text">
      <p>Providing feedback is one of the most important parts of any software. Unfortunately, more often than not we tend to downplay or ignore the very simple yet crucial task of letting the user know what is going on. In this article I‚Äôll use a short cautionary tale of how the lack of proper user feedback (and some laziness, I admit) almost cost me an entire HDD with years of personal data.</p>

<!-- more -->

<p>It was late at night and I was trying to clean up an SD card with some vacation photos. However, a silly media-detection Ubuntu process had hanged at some point and locked down the card, impeding any write operations on it. So I did what any lazy developer would do at 1AM: hastily search StackOverflow and paste into the terminal the first possibly applicable code snippet. Albeit totally overkill, the answer was legit: zero-filling (writing <code>0</code>s in the disk, effectively deleting data) the device with the <code>dd</code> program. So I copy-pasted the command, hit Enter and waited‚Ää‚Äî‚Ääwithout properly understanding what I had just typed, I might add. The command seemed to take too long so I killed it after a few seconds. Much to my surprise, on reboot the OS wouldn‚Äôt load.</p>

<p>The command I had copy-pasted from StackOverflow used <code>dev/sdb</code> as the destination device to be zero-filled, which must have been the original poster‚Äôs SD card device name. Unfortunately for me, that was the name of my secondary HDD, while my SD card was probably something like <code>/dev/sdc</code>. The <code>dd</code> program had zero-filled the beginning of the HDD, which contains the partition table information, making it unmountable. After some tinkering around I removed the HDD entry from <code>/etc/fstab</code> and was able to boot into Ubuntu. After some research I found out the correct tools to restore the disk‚Äôs partition table and everything was fine (except for the hours of sleep I lost on that day).</p>

<p><img src="../../assets/images/goiabada/1*RUsq0P9vGjQQvjpsbov09g.jpeg" alt="Can you tell by the output of dd that the device will be completely and irrevocably wiped out? Hint: while the operation is running (i.e. before hitting CTRL+C), there _is no&nbsp;output._">
Can you tell by the output of dd that the device will be completely and irrevocably wiped out? Hint: while the operation is running (i.e. before hitting CTRL+C), there <em>is no&nbsp;output.</em></p>

<p>The first and obvious lesson learned here is, of course, don‚Äôt copy-paste and immediately run things from the Internet. It is potentially dangerous and just plain bad practice. The thing is, though, users will <em>always</em> do something that is bad practice. Real-world users will find themselves tired and frustrated at 1AM, like myself, and will do stuff they‚Äôre ‚Äúnot supposed to do‚Äù. That is why feedback is so important: a simple confirmation dialog saying something like ‚Äúthis command will completely overwrite the destination file at device x, are you sure you want to continue?‚Äù might have made me think twice, and I might have saved a couple of hours of sleep.</p>

<blockquote>
  <p>But you should know better! It is so obvious that <code>sudo dd if=/dev/zero of=/dev/sdb bs=512</code> will copy <code>0x00</code>s to the output file, <code>/dev/sdb</code>, which happens to be the address of your secondary HDD, and will thus erase all your data!</p>
</blockquote>

<p>I totally should, and now that I am well-rested and have good hindsight on the subject it does feel like an embarrassingly naive mistake that I‚Äôd never want to write about on a blog post and share with my peers. But at the time I was unfamiliar with <code>dd</code>, and also tired and impatient. Users will often be tired, impatient or frustrated, and won‚Äôt always know exactly what some command, button or link is intended to do on your software. Even extremely knowledgeable and competent people <a href="https://twitter.com/gitlabstatus/status/826591961444384768">will sometimes make almost unbelievable mistakes</a>: let‚Äôs just call it human nature.</p>

<p>So the real lesson to be learned here isn‚Äôt ‚Äúscold your user for being stupid‚Äù, but rather ‚Äúmake sure your software gives the user proper feedback‚Äù. We can‚Äôt change human nature, and people will always do something wrong for many different reasons. I am really not talking about anything complex, but just very basic, simple things: it costs nothing to add a confirmation dialog, a well-thought-of label or an informative modal to your software. As developers, we are constantly tempted to thinking that if the code works, then the feature is done; but the user might not even know that the feature is ready and working unless they have proper feedback.</p>

<p>Giving the user some feedback around critical sections of your software will go a long way. At worst, good feedback is harmless, and at best it will save someone from deleting their HDD.</p>

<p>By <a href="https://medium.com/@lbrito">Leonardo Brito</a> on <a href="https://medium.com/p/656f5fe3f6b8">June 19, 2017</a>.</p>

<p><a href="https://medium.com/@lbrito/how-a-unix-cli-tool-made-me-care-about-software-feedback-656f5fe3f6b8">Canonical link</a></p>

<p>Exported from <a href="https://medium.com">Medium</a> on May 1, 2019.</p>

    </article>
    <aside>Posted at: Jun 19, 2017</aside>
    <div class="post-footer">
      <a href="../../index.html">Back</a>
    </div>
  </div>

        <div class="footer">
          2020 Leonardo Brito
        </div>
      </div>

    </div>
  


</body></html>;
T;@	;@	o;;;;	I"%/posts/2014-02-14-linked-list.md;
T{;{
;U;[I"G/home/carol/workspace/blog/content/posts/2014-02-14-linked-list.md;
TI"tHere's a very simple implementation of the linked list data structure.

A pointer to the head element is enough to define a linked list. Each element consists of one pointer to the subsequent element in the list and one pointer to the element's data:

[![linkedlist](/assets/images/codedeposit/2014/02/linkedlist.png?w=450)](/assets/images/codedeposit/2014/02/linkedlist.png)

<!-- more -->

So we'll start with the data structure itself. Namely, the Element struct:

<div class="highlight"><pre><code class="language-c">
typedef struct Element
{
      void *data_ptr;
      struct Element *next;
} Element;
</code></pre></div>


Simple enough: each element has one data pointer and one pointer to the next element, just as we defined.

Next, we need the 3 basic list element operations: add, remove and find. Since creating a new list is a matter of creating a new element and setting it as "head", we're omitting that.

<div class="highlight"><pre><code class="language-c">
void add(Element *list_head, void *data)
{
      Element *e = list_head;
      while (e->next != NULL) e = e->next;
      Element *toadd = new_element(data);
      e->next = toadd;
}
</code></pre></div>


To add data to a list, first we find the last element (i.e., next=NULL) by traversing the list. Next we create a new element with the data we're adding, and point the last element to it, so now it is the last element. This costs O(n). A more efficient way of doing this is keeping a pointer to the last element so we don't have to traverse the list at all, resulting in O(1) cost.

<div class="highlight"><pre><code class="language-c">
Element *search(void *list_head, void *data)
{
      Element *e = list_head;
      Element *prev = e;
      // exception for list head
      if (compare(data, e->data_ptr)) return NULL;
      do
      {
            if (compare(data, e->data_ptr)) return prev;
            prev = e;
      } while ((e = e->next) != NULL);
      return NULL;
}
</code></pre></div>


Searching is trivial: we traverse the list and return the pointer to the element whose subsequent element is the one we're looking for. This costs O(n). The reason we want to get our hands on the _previous_ element and not the element itself will be explained later. Also, we make a necessary exception for the list head, since there is no previous element to it and it does not carry data (in our implementation).

<div class="highlight"><pre><code class="language-c">
int delete(Element *list_head, void *data)
{
      Element *searched = search(list_head, data);
      if (searched)
      {
            Element *removed = searched->next;
            searched->next = searched->next->next;
            free(removed->data_ptr);
            free(removed);
            return TRUE;
      }
      else return FALSE;
}
</code></pre></div>


To remove an element, first we do a search in the list for the element we want deleted. The reason we wanted the pointer to the _previous_ element is that after we do the removal, we'll need to re-link the list: if we have A B C and remove B, A->next must point to C. If we have 3 or more elements this is trivial. If there are only 2 elements and we remove one of them (i.e. "C" in our example is NULL), then A->next will point to NULL and will become the first and last element, as expected.

That's all we need for a linked list! Below you can find the full runnable code and the expected output.

<div class="highlight"><pre><code class="language-c">

//======================
//      Linked list
// CC-BY Leonardo Brito
// lbrito@gmail.com
//======================

#include
#include
#include

#define TRUE 1
#define FALSE 0

#ifndef TEST_SIZE
#define TEST_SIZE 10
#endif

//======================
//          Algorithm
//======================

typedef struct Element
{
      void *data_ptr;
      struct Element *next;
} Element;

int compare(void *data1, void *data2);

Element *search(void *list_head, void *data);

Element *new_element(void *data)
{
      Element *e = (Element*) malloc(sizeof(Element));
      e->data_ptr = data;
      e->next = NULL;
      return e;
}

int compare(void *data1, void *data2)
{
      return (strcmp((char*) data1, (char*)data2) == 0 ? TRUE : FALSE);
}

void add(Element *list_head, void *data)
{
      Element *e = list_head;
      while (e->next != NULL) e = e->next;
      Element *toadd = new_element(data);
      e->next = toadd;
}

Element *search(void *list_head, void *data)
{
      Element *e = list_head;
      Element *prev = e;
      if (compare(data, e->data_ptr)) return NULL; // exception for list head
      do
      {
            if (compare(data, e->data_ptr)) return prev;
            prev = e;
      } while ((e = e->next) != NULL);
      return NULL;
}

int delete(Element *list_head, void *data)
{
      Element *searched = search(list_head, data);
      if (searched)
      {
            Element *removed = searched->next;
            searched->next = searched->next->next;
            free(removed->data_ptr);
            free(removed);
            return TRUE;
      }
      else return FALSE;
}

//======================
//          Tests
//======================

Element *build_list()
{
      char *head_data = "I'm the (permanent) list head. You can't delete me.";
      Element *head = new_element(head_data);
      char *basetext = "I'm element number ";
      int i=1;
      for (;i<TEST_SIZE;i++)        {             char *text1 = malloc(sizeof(char)*strlen(basetext));             strcpy(text1, basetext);             char numb[10];             sprintf(numb, "%d", i);             strcat(text1, numb);             add(head, text1);       }              return head; } void print_list(Element *head)  {       printf("\n==============");       Element *e = head;       int i = 0;       do        {             printf("\nList [%d]:\t%s",i++,(char**)e->data_ptr);
      } while ((e = e->next) != NULL);
      printf("\n==============\n");
      return head;
}

void test_delete(Element *head, int eln)
{
      char data[20];
      sprintf(data, "I'm element number %d", eln);
      if (delete(head, data)) printf("\nSuccessfully deleted element #%d",eln);
}

void test_add(Element *head, int eln)
{
      char *data = malloc(sizeof(char)*50);
      sprintf(data, "I'm NEW element number %d", eln);
      add(head, data);
      printf("\nSuccessfully added NEW element #%d",eln);
}

int main()
{
      Element *head = build_list();

      print_list(head);
      test_delete(head, 1);
      test_delete(head, 2);
      test_delete(head, 3);
      test_delete(head, 4);
      test_delete(head, 5);
      test_delete(head, 6);
      test_delete(head, 7);
      test_delete(head, 8);
      test_delete(head, 9);
      print_list(head);
      test_add(head, 1337);
      test_delete(head, 2);
      test_add(head, 98);
      print_list(head);

      return 0;
}

</code></pre></div>

<div class="highlight"><pre><code class="language-c">
C:\code\c\cstuff>linked_list

==============
List [0]:       I'm the (permanent) list head. You can't delete me.
List [1]:       I'm element number 1
List [2]:       I'm element number 2
List [3]:       I'm element number 3
List [4]:       I'm element number 4
List [5]:       I'm element number 5
List [6]:       I'm element number 6
List [7]:       I'm element number 7
List [8]:       I'm element number 8
List [9]:       I'm element number 9
==============

Successfully deleted element #1
Successfully deleted element #2
Successfully deleted element #3
Successfully deleted element #4
Successfully deleted element #5
Successfully deleted element #6
Successfully deleted element #7
Successfully deleted element #8
Successfully deleted element #9
==============
List [0]:       I'm the (permanent) list head. You can't delete me.
==============

Successfully added NEW element #1337
Successfully added NEW element #98
==============
List [0]:       I'm the (permanent) list head. You can't delete me.
List [1]:       I'm NEW element number 1337
List [2]:       I'm NEW element number 98
==============
</code></pre></div>

;
T;U;[0I"≥Ö<p>Here‚Äôs a very simple implementation of the linked list data structure.</p>

<p>A pointer to the head element is enough to define a linked list. Each element consists of one pointer to the subsequent element in the list and one pointer to the element‚Äôs data:</p>

<p><a href="/assets/images/codedeposit/2014/02/linkedlist.png"><img src="/assets/images/codedeposit/2014/02/linkedlist.png?w=450" alt="linkedlist"></a></p>

<!-- more -->

<p>So we‚Äôll start with the data structure itself. Namely, the Element struct:</p>

<div class="highlight"><pre><code class="language-c"><span class="k">typedef</span> <span class="k">struct</span> <span class="n">Element</span>
<span class="p">{</span>
      <span class="kt">void</span> <span class="o">*</span><span class="n">data_ptr</span><span class="p">;</span>
      <span class="k">struct</span> <span class="n">Element</span> <span class="o">*</span><span class="n">next</span><span class="p">;</span>
<span class="p">}</span> <span class="n">Element</span><span class="p">;</span></code></pre></div>

<p>Simple enough: each element has one data pointer and one pointer to the next element, just as we defined.</p>

<p>Next, we need the 3 basic list element operations: add, remove and find. Since creating a new list is a matter of creating a new element and setting it as ‚Äúhead‚Äù, we‚Äôre omitting that.</p>

<div class="highlight"><pre><code class="language-c"><span class="kt">void</span> <span class="nf">add</span><span class="p">(</span><span class="n">Element</span> <span class="o">*</span><span class="n">list_head</span><span class="p">,</span> <span class="kt">void</span> <span class="o">*</span><span class="n">data</span><span class="p">)</span>
<span class="p">{</span>
      <span class="n">Element</span> <span class="o">*</span><span class="n">e</span> <span class="o">=</span> <span class="n">list_head</span><span class="p">;</span>
      <span class="k">while</span> <span class="p">(</span><span class="n">e</span><span class="o">-&gt;</span><span class="n">next</span> <span class="o">!=</span> <span class="nb">NULL</span><span class="p">)</span> <span class="n">e</span> <span class="o">=</span> <span class="n">e</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">;</span>
      <span class="n">Element</span> <span class="o">*</span><span class="n">toadd</span> <span class="o">=</span> <span class="n">new_element</span><span class="p">(</span><span class="n">data</span><span class="p">);</span>
      <span class="n">e</span><span class="o">-&gt;</span><span class="n">next</span> <span class="o">=</span> <span class="n">toadd</span><span class="p">;</span>
<span class="p">}</span></code></pre></div>

<p>To add data to a list, first we find the last element (i.e., next=NULL) by traversing the list. Next we create a new element with the data we‚Äôre adding, and point the last element to it, so now it is the last element. This costs O(n). A more efficient way of doing this is keeping a pointer to the last element so we don‚Äôt have to traverse the list at all, resulting in O(1) cost.</p>

<div class="highlight"><pre><code class="language-c"><span class="n">Element</span> <span class="o">*</span><span class="nf">search</span><span class="p">(</span><span class="kt">void</span> <span class="o">*</span><span class="n">list_head</span><span class="p">,</span> <span class="kt">void</span> <span class="o">*</span><span class="n">data</span><span class="p">)</span>
<span class="p">{</span>
      <span class="n">Element</span> <span class="o">*</span><span class="n">e</span> <span class="o">=</span> <span class="n">list_head</span><span class="p">;</span>
      <span class="n">Element</span> <span class="o">*</span><span class="n">prev</span> <span class="o">=</span> <span class="n">e</span><span class="p">;</span>
      <span class="c1">// exception for list head</span>
      <span class="k">if</span> <span class="p">(</span><span class="n">compare</span><span class="p">(</span><span class="n">data</span><span class="p">,</span> <span class="n">e</span><span class="o">-&gt;</span><span class="n">data_ptr</span><span class="p">))</span> <span class="k">return</span> <span class="nb">NULL</span><span class="p">;</span>
      <span class="k">do</span>
      <span class="p">{</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">compare</span><span class="p">(</span><span class="n">data</span><span class="p">,</span> <span class="n">e</span><span class="o">-&gt;</span><span class="n">data_ptr</span><span class="p">))</span> <span class="k">return</span> <span class="n">prev</span><span class="p">;</span>
            <span class="n">prev</span> <span class="o">=</span> <span class="n">e</span><span class="p">;</span>
      <span class="p">}</span> <span class="k">while</span> <span class="p">((</span><span class="n">e</span> <span class="o">=</span> <span class="n">e</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">)</span> <span class="o">!=</span> <span class="nb">NULL</span><span class="p">);</span>
      <span class="k">return</span> <span class="nb">NULL</span><span class="p">;</span>
<span class="p">}</span></code></pre></div>

<p>Searching is trivial: we traverse the list and return the pointer to the element whose subsequent element is the one we‚Äôre looking for. This costs O(n). The reason we want to get our hands on the <em>previous</em> element and not the element itself will be explained later. Also, we make a necessary exception for the list head, since there is no previous element to it and it does not carry data (in our implementation).</p>

<div class="highlight"><pre><code class="language-c"><span class="kt">int</span> <span class="nf">delete</span><span class="p">(</span><span class="n">Element</span> <span class="o">*</span><span class="n">list_head</span><span class="p">,</span> <span class="kt">void</span> <span class="o">*</span><span class="n">data</span><span class="p">)</span>
<span class="p">{</span>
      <span class="n">Element</span> <span class="o">*</span><span class="n">searched</span> <span class="o">=</span> <span class="n">search</span><span class="p">(</span><span class="n">list_head</span><span class="p">,</span> <span class="n">data</span><span class="p">);</span>
      <span class="k">if</span> <span class="p">(</span><span class="n">searched</span><span class="p">)</span>
      <span class="p">{</span>
            <span class="n">Element</span> <span class="o">*</span><span class="n">removed</span> <span class="o">=</span> <span class="n">searched</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">;</span>
            <span class="n">searched</span><span class="o">-&gt;</span><span class="n">next</span> <span class="o">=</span> <span class="n">searched</span><span class="o">-&gt;</span><span class="n">next</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">;</span>
            <span class="n">free</span><span class="p">(</span><span class="n">removed</span><span class="o">-&gt;</span><span class="n">data_ptr</span><span class="p">);</span>
            <span class="n">free</span><span class="p">(</span><span class="n">removed</span><span class="p">);</span>
            <span class="k">return</span> <span class="n">TRUE</span><span class="p">;</span>
      <span class="p">}</span>
      <span class="k">else</span> <span class="k">return</span> <span class="n">FALSE</span><span class="p">;</span>
<span class="p">}</span></code></pre></div>

<p>To remove an element, first we do a search in the list for the element we want deleted. The reason we wanted the pointer to the <em>previous</em> element is that after we do the removal, we‚Äôll need to re-link the list: if we have A B C and remove B, A-&gt;next must point to C. If we have 3 or more elements this is trivial. If there are only 2 elements and we remove one of them (i.e. ‚ÄúC‚Äù in our example is NULL), then A-&gt;next will point to NULL and will become the first and last element, as expected.</p>

<p>That‚Äôs all we need for a linked list! Below you can find the full runnable code and the expected output.</p>

<div class="highlight"><pre><code class="language-c"><span class="c1">//======================</span>
<span class="c1">//      Linked list</span>
<span class="c1">// CC-BY Leonardo Brito</span>
<span class="c1">// lbrito@gmail.com</span>
<span class="c1">//======================</span>

<span class="cp">#include
#include
#include
</span>
<span class="cp">#define TRUE 1
#define FALSE 0
</span>
<span class="cp">#ifndef TEST_SIZE
#define TEST_SIZE 10
#endif
</span>
<span class="c1">//======================</span>
<span class="c1">//          Algorithm</span>
<span class="c1">//======================</span>

<span class="k">typedef</span> <span class="k">struct</span> <span class="n">Element</span>
<span class="p">{</span>
      <span class="kt">void</span> <span class="o">*</span><span class="n">data_ptr</span><span class="p">;</span>
      <span class="k">struct</span> <span class="n">Element</span> <span class="o">*</span><span class="n">next</span><span class="p">;</span>
<span class="p">}</span> <span class="n">Element</span><span class="p">;</span>

<span class="kt">int</span> <span class="nf">compare</span><span class="p">(</span><span class="kt">void</span> <span class="o">*</span><span class="n">data1</span><span class="p">,</span> <span class="kt">void</span> <span class="o">*</span><span class="n">data2</span><span class="p">);</span>

<span class="n">Element</span> <span class="o">*</span><span class="nf">search</span><span class="p">(</span><span class="kt">void</span> <span class="o">*</span><span class="n">list_head</span><span class="p">,</span> <span class="kt">void</span> <span class="o">*</span><span class="n">data</span><span class="p">);</span>

<span class="n">Element</span> <span class="o">*</span><span class="nf">new_element</span><span class="p">(</span><span class="kt">void</span> <span class="o">*</span><span class="n">data</span><span class="p">)</span>
<span class="p">{</span>
      <span class="n">Element</span> <span class="o">*</span><span class="n">e</span> <span class="o">=</span> <span class="p">(</span><span class="n">Element</span><span class="o">*</span><span class="p">)</span> <span class="n">malloc</span><span class="p">(</span><span class="k">sizeof</span><span class="p">(</span><span class="n">Element</span><span class="p">));</span>
      <span class="n">e</span><span class="o">-&gt;</span><span class="n">data_ptr</span> <span class="o">=</span> <span class="n">data</span><span class="p">;</span>
      <span class="n">e</span><span class="o">-&gt;</span><span class="n">next</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
      <span class="k">return</span> <span class="n">e</span><span class="p">;</span>
<span class="p">}</span>

<span class="kt">int</span> <span class="nf">compare</span><span class="p">(</span><span class="kt">void</span> <span class="o">*</span><span class="n">data1</span><span class="p">,</span> <span class="kt">void</span> <span class="o">*</span><span class="n">data2</span><span class="p">)</span>
<span class="p">{</span>
      <span class="k">return</span> <span class="p">(</span><span class="n">strcmp</span><span class="p">((</span><span class="kt">char</span><span class="o">*</span><span class="p">)</span> <span class="n">data1</span><span class="p">,</span> <span class="p">(</span><span class="kt">char</span><span class="o">*</span><span class="p">)</span><span class="n">data2</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span> <span class="o">?</span> <span class="n">TRUE</span> <span class="o">:</span> <span class="n">FALSE</span><span class="p">);</span>
<span class="p">}</span>

<span class="kt">void</span> <span class="nf">add</span><span class="p">(</span><span class="n">Element</span> <span class="o">*</span><span class="n">list_head</span><span class="p">,</span> <span class="kt">void</span> <span class="o">*</span><span class="n">data</span><span class="p">)</span>
<span class="p">{</span>
      <span class="n">Element</span> <span class="o">*</span><span class="n">e</span> <span class="o">=</span> <span class="n">list_head</span><span class="p">;</span>
      <span class="k">while</span> <span class="p">(</span><span class="n">e</span><span class="o">-&gt;</span><span class="n">next</span> <span class="o">!=</span> <span class="nb">NULL</span><span class="p">)</span> <span class="n">e</span> <span class="o">=</span> <span class="n">e</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">;</span>
      <span class="n">Element</span> <span class="o">*</span><span class="n">toadd</span> <span class="o">=</span> <span class="n">new_element</span><span class="p">(</span><span class="n">data</span><span class="p">);</span>
      <span class="n">e</span><span class="o">-&gt;</span><span class="n">next</span> <span class="o">=</span> <span class="n">toadd</span><span class="p">;</span>
<span class="p">}</span>

<span class="n">Element</span> <span class="o">*</span><span class="nf">search</span><span class="p">(</span><span class="kt">void</span> <span class="o">*</span><span class="n">list_head</span><span class="p">,</span> <span class="kt">void</span> <span class="o">*</span><span class="n">data</span><span class="p">)</span>
<span class="p">{</span>
      <span class="n">Element</span> <span class="o">*</span><span class="n">e</span> <span class="o">=</span> <span class="n">list_head</span><span class="p">;</span>
      <span class="n">Element</span> <span class="o">*</span><span class="n">prev</span> <span class="o">=</span> <span class="n">e</span><span class="p">;</span>
      <span class="k">if</span> <span class="p">(</span><span class="n">compare</span><span class="p">(</span><span class="n">data</span><span class="p">,</span> <span class="n">e</span><span class="o">-&gt;</span><span class="n">data_ptr</span><span class="p">))</span> <span class="k">return</span> <span class="nb">NULL</span><span class="p">;</span> <span class="c1">// exception for list head</span>
      <span class="k">do</span>
      <span class="p">{</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">compare</span><span class="p">(</span><span class="n">data</span><span class="p">,</span> <span class="n">e</span><span class="o">-&gt;</span><span class="n">data_ptr</span><span class="p">))</span> <span class="k">return</span> <span class="n">prev</span><span class="p">;</span>
            <span class="n">prev</span> <span class="o">=</span> <span class="n">e</span><span class="p">;</span>
      <span class="p">}</span> <span class="k">while</span> <span class="p">((</span><span class="n">e</span> <span class="o">=</span> <span class="n">e</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">)</span> <span class="o">!=</span> <span class="nb">NULL</span><span class="p">);</span>
      <span class="k">return</span> <span class="nb">NULL</span><span class="p">;</span>
<span class="p">}</span>

<span class="kt">int</span> <span class="nf">delete</span><span class="p">(</span><span class="n">Element</span> <span class="o">*</span><span class="n">list_head</span><span class="p">,</span> <span class="kt">void</span> <span class="o">*</span><span class="n">data</span><span class="p">)</span>
<span class="p">{</span>
      <span class="n">Element</span> <span class="o">*</span><span class="n">searched</span> <span class="o">=</span> <span class="n">search</span><span class="p">(</span><span class="n">list_head</span><span class="p">,</span> <span class="n">data</span><span class="p">);</span>
      <span class="k">if</span> <span class="p">(</span><span class="n">searched</span><span class="p">)</span>
      <span class="p">{</span>
            <span class="n">Element</span> <span class="o">*</span><span class="n">removed</span> <span class="o">=</span> <span class="n">searched</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">;</span>
            <span class="n">searched</span><span class="o">-&gt;</span><span class="n">next</span> <span class="o">=</span> <span class="n">searched</span><span class="o">-&gt;</span><span class="n">next</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">;</span>
            <span class="n">free</span><span class="p">(</span><span class="n">removed</span><span class="o">-&gt;</span><span class="n">data_ptr</span><span class="p">);</span>
            <span class="n">free</span><span class="p">(</span><span class="n">removed</span><span class="p">);</span>
            <span class="k">return</span> <span class="n">TRUE</span><span class="p">;</span>
      <span class="p">}</span>
      <span class="k">else</span> <span class="k">return</span> <span class="n">FALSE</span><span class="p">;</span>
<span class="p">}</span>

<span class="c1">//======================</span>
<span class="c1">//          Tests</span>
<span class="c1">//======================</span>

<span class="n">Element</span> <span class="o">*</span><span class="nf">build_list</span><span class="p">()</span>
<span class="p">{</span>
      <span class="kt">char</span> <span class="o">*</span><span class="n">head_data</span> <span class="o">=</span> <span class="s">"I'm the (permanent) list head. You can't delete me."</span><span class="p">;</span>
      <span class="n">Element</span> <span class="o">*</span><span class="n">head</span> <span class="o">=</span> <span class="n">new_element</span><span class="p">(</span><span class="n">head_data</span><span class="p">);</span>
      <span class="kt">char</span> <span class="o">*</span><span class="n">basetext</span> <span class="o">=</span> <span class="s">"I'm element number "</span><span class="p">;</span>
      <span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span>
      <span class="k">for</span> <span class="p">(;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">TEST_SIZE</span><span class="p">;</span><span class="n">i</span><span class="o">++</span><span class="p">)</span>        <span class="p">{</span>             <span class="kt">char</span> <span class="o">*</span><span class="n">text1</span> <span class="o">=</span> <span class="n">malloc</span><span class="p">(</span><span class="k">sizeof</span><span class="p">(</span><span class="kt">char</span><span class="p">)</span><span class="o">*</span><span class="n">strlen</span><span class="p">(</span><span class="n">basetext</span><span class="p">));</span>             <span class="n">strcpy</span><span class="p">(</span><span class="n">text1</span><span class="p">,</span> <span class="n">basetext</span><span class="p">);</span>             <span class="kt">char</span> <span class="n">numb</span><span class="p">[</span><span class="mi">10</span><span class="p">];</span>             <span class="n">sprintf</span><span class="p">(</span><span class="n">numb</span><span class="p">,</span> <span class="s">"%d"</span><span class="p">,</span> <span class="n">i</span><span class="p">);</span>             <span class="n">strcat</span><span class="p">(</span><span class="n">text1</span><span class="p">,</span> <span class="n">numb</span><span class="p">);</span>             <span class="n">add</span><span class="p">(</span><span class="n">head</span><span class="p">,</span> <span class="n">text1</span><span class="p">);</span>       <span class="p">}</span>              <span class="k">return</span> <span class="n">head</span><span class="p">;</span> <span class="p">}</span> <span class="kt">void</span> <span class="nf">print_list</span><span class="p">(</span><span class="n">Element</span> <span class="o">*</span><span class="n">head</span><span class="p">)</span>  <span class="p">{</span>       <span class="n">printf</span><span class="p">(</span><span class="s">"</span><span class="se">\n</span><span class="s">=============="</span><span class="p">);</span>       <span class="n">Element</span> <span class="o">*</span><span class="n">e</span> <span class="o">=</span> <span class="n">head</span><span class="p">;</span>       <span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>       <span class="k">do</span>        <span class="p">{</span>             <span class="n">printf</span><span class="p">(</span><span class="s">"</span><span class="se">\n</span><span class="s">List [%d]:</span><span class="se">\t</span><span class="s">%s"</span><span class="p">,</span><span class="n">i</span><span class="o">++</span><span class="p">,(</span><span class="kt">char</span><span class="o">**</span><span class="p">)</span><span class="n">e</span><span class="o">-&gt;</span><span class="n">data_ptr</span><span class="p">);</span>
      <span class="p">}</span> <span class="k">while</span> <span class="p">((</span><span class="n">e</span> <span class="o">=</span> <span class="n">e</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">)</span> <span class="o">!=</span> <span class="nb">NULL</span><span class="p">);</span>
      <span class="n">printf</span><span class="p">(</span><span class="s">"</span><span class="se">\n</span><span class="s">==============</span><span class="se">\n</span><span class="s">"</span><span class="p">);</span>
      <span class="k">return</span> <span class="n">head</span><span class="p">;</span>
<span class="p">}</span>

<span class="kt">void</span> <span class="nf">test_delete</span><span class="p">(</span><span class="n">Element</span> <span class="o">*</span><span class="n">head</span><span class="p">,</span> <span class="kt">int</span> <span class="n">eln</span><span class="p">)</span>
<span class="p">{</span>
      <span class="kt">char</span> <span class="n">data</span><span class="p">[</span><span class="mi">20</span><span class="p">];</span>
      <span class="n">sprintf</span><span class="p">(</span><span class="n">data</span><span class="p">,</span> <span class="s">"I'm element number %d"</span><span class="p">,</span> <span class="n">eln</span><span class="p">);</span>
      <span class="k">if</span> <span class="p">(</span><span class="n">delete</span><span class="p">(</span><span class="n">head</span><span class="p">,</span> <span class="n">data</span><span class="p">))</span> <span class="n">printf</span><span class="p">(</span><span class="s">"</span><span class="se">\n</span><span class="s">Successfully deleted element #%d"</span><span class="p">,</span><span class="n">eln</span><span class="p">);</span>
<span class="p">}</span>

<span class="kt">void</span> <span class="nf">test_add</span><span class="p">(</span><span class="n">Element</span> <span class="o">*</span><span class="n">head</span><span class="p">,</span> <span class="kt">int</span> <span class="n">eln</span><span class="p">)</span>
<span class="p">{</span>
      <span class="kt">char</span> <span class="o">*</span><span class="n">data</span> <span class="o">=</span> <span class="n">malloc</span><span class="p">(</span><span class="k">sizeof</span><span class="p">(</span><span class="kt">char</span><span class="p">)</span><span class="o">*</span><span class="mi">50</span><span class="p">);</span>
      <span class="n">sprintf</span><span class="p">(</span><span class="n">data</span><span class="p">,</span> <span class="s">"I'm NEW element number %d"</span><span class="p">,</span> <span class="n">eln</span><span class="p">);</span>
      <span class="n">add</span><span class="p">(</span><span class="n">head</span><span class="p">,</span> <span class="n">data</span><span class="p">);</span>
      <span class="n">printf</span><span class="p">(</span><span class="s">"</span><span class="se">\n</span><span class="s">Successfully added NEW element #%d"</span><span class="p">,</span><span class="n">eln</span><span class="p">);</span>
<span class="p">}</span>

<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
<span class="p">{</span>
      <span class="n">Element</span> <span class="o">*</span><span class="n">head</span> <span class="o">=</span> <span class="n">build_list</span><span class="p">();</span>

      <span class="n">print_list</span><span class="p">(</span><span class="n">head</span><span class="p">);</span>
      <span class="n">test_delete</span><span class="p">(</span><span class="n">head</span><span class="p">,</span> <span class="mi">1</span><span class="p">);</span>
      <span class="n">test_delete</span><span class="p">(</span><span class="n">head</span><span class="p">,</span> <span class="mi">2</span><span class="p">);</span>
      <span class="n">test_delete</span><span class="p">(</span><span class="n">head</span><span class="p">,</span> <span class="mi">3</span><span class="p">);</span>
      <span class="n">test_delete</span><span class="p">(</span><span class="n">head</span><span class="p">,</span> <span class="mi">4</span><span class="p">);</span>
      <span class="n">test_delete</span><span class="p">(</span><span class="n">head</span><span class="p">,</span> <span class="mi">5</span><span class="p">);</span>
      <span class="n">test_delete</span><span class="p">(</span><span class="n">head</span><span class="p">,</span> <span class="mi">6</span><span class="p">);</span>
      <span class="n">test_delete</span><span class="p">(</span><span class="n">head</span><span class="p">,</span> <span class="mi">7</span><span class="p">);</span>
      <span class="n">test_delete</span><span class="p">(</span><span class="n">head</span><span class="p">,</span> <span class="mi">8</span><span class="p">);</span>
      <span class="n">test_delete</span><span class="p">(</span><span class="n">head</span><span class="p">,</span> <span class="mi">9</span><span class="p">);</span>
      <span class="n">print_list</span><span class="p">(</span><span class="n">head</span><span class="p">);</span>
      <span class="n">test_add</span><span class="p">(</span><span class="n">head</span><span class="p">,</span> <span class="mi">1337</span><span class="p">);</span>
      <span class="n">test_delete</span><span class="p">(</span><span class="n">head</span><span class="p">,</span> <span class="mi">2</span><span class="p">);</span>
      <span class="n">test_add</span><span class="p">(</span><span class="n">head</span><span class="p">,</span> <span class="mi">98</span><span class="p">);</span>
      <span class="n">print_list</span><span class="p">(</span><span class="n">head</span><span class="p">);</span>

      <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span></code></pre></div>

<div class="highlight"><pre><code class="language-c"><span class="nl">C:</span><span class="err">\</span><span class="n">code</span><span class="err">\</span><span class="n">c</span><span class="err">\</span><span class="n">cstuff</span><span class="o">&gt;</span><span class="n">linked_list</span>

<span class="o">==============</span>
<span class="n">List</span> <span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">:</span>       <span class="n">I</span><span class="err">'</span><span class="n">m</span> <span class="n">the</span> <span class="p">(</span><span class="n">permanent</span><span class="p">)</span> <span class="n">list</span> <span class="n">head</span><span class="p">.</span> <span class="n">You</span> <span class="n">can</span><span class="err">'</span><span class="n">t</span> <span class="n">delete</span> <span class="n">me</span><span class="p">.</span>
<span class="n">List</span> <span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">:</span>       <span class="n">I</span><span class="err">'</span><span class="n">m</span> <span class="n">element</span> <span class="n">number</span> <span class="mi">1</span>
<span class="n">List</span> <span class="p">[</span><span class="mi">2</span><span class="p">]</span><span class="o">:</span>       <span class="n">I</span><span class="err">'</span><span class="n">m</span> <span class="n">element</span> <span class="n">number</span> <span class="mi">2</span>
<span class="n">List</span> <span class="p">[</span><span class="mi">3</span><span class="p">]</span><span class="o">:</span>       <span class="n">I</span><span class="err">'</span><span class="n">m</span> <span class="n">element</span> <span class="n">number</span> <span class="mi">3</span>
<span class="n">List</span> <span class="p">[</span><span class="mi">4</span><span class="p">]</span><span class="o">:</span>       <span class="n">I</span><span class="err">'</span><span class="n">m</span> <span class="n">element</span> <span class="n">number</span> <span class="mi">4</span>
<span class="n">List</span> <span class="p">[</span><span class="mi">5</span><span class="p">]</span><span class="o">:</span>       <span class="n">I</span><span class="err">'</span><span class="n">m</span> <span class="n">element</span> <span class="n">number</span> <span class="mi">5</span>
<span class="n">List</span> <span class="p">[</span><span class="mi">6</span><span class="p">]</span><span class="o">:</span>       <span class="n">I</span><span class="err">'</span><span class="n">m</span> <span class="n">element</span> <span class="n">number</span> <span class="mi">6</span>
<span class="n">List</span> <span class="p">[</span><span class="mi">7</span><span class="p">]</span><span class="o">:</span>       <span class="n">I</span><span class="err">'</span><span class="n">m</span> <span class="n">element</span> <span class="n">number</span> <span class="mi">7</span>
<span class="n">List</span> <span class="p">[</span><span class="mi">8</span><span class="p">]</span><span class="o">:</span>       <span class="n">I</span><span class="err">'</span><span class="n">m</span> <span class="n">element</span> <span class="n">number</span> <span class="mi">8</span>
<span class="n">List</span> <span class="p">[</span><span class="mi">9</span><span class="p">]</span><span class="o">:</span>       <span class="n">I</span><span class="err">'</span><span class="n">m</span> <span class="n">element</span> <span class="n">number</span> <span class="mi">9</span>
<span class="o">==============</span>

<span class="n">Successfully</span> <span class="n">deleted</span> <span class="n">element</span> <span class="err">#</span><span class="mi">1</span>
<span class="n">Successfully</span> <span class="n">deleted</span> <span class="n">element</span> <span class="err">#</span><span class="mi">2</span>
<span class="n">Successfully</span> <span class="n">deleted</span> <span class="n">element</span> <span class="err">#</span><span class="mi">3</span>
<span class="n">Successfully</span> <span class="n">deleted</span> <span class="n">element</span> <span class="err">#</span><span class="mi">4</span>
<span class="n">Successfully</span> <span class="n">deleted</span> <span class="n">element</span> <span class="err">#</span><span class="mi">5</span>
<span class="n">Successfully</span> <span class="n">deleted</span> <span class="n">element</span> <span class="err">#</span><span class="mi">6</span>
<span class="n">Successfully</span> <span class="n">deleted</span> <span class="n">element</span> <span class="err">#</span><span class="mi">7</span>
<span class="n">Successfully</span> <span class="n">deleted</span> <span class="n">element</span> <span class="err">#</span><span class="mi">8</span>
<span class="n">Successfully</span> <span class="n">deleted</span> <span class="n">element</span> <span class="err">#</span><span class="mi">9</span>
<span class="o">==============</span>
<span class="n">List</span> <span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">:</span>       <span class="n">I</span><span class="err">'</span><span class="n">m</span> <span class="n">the</span> <span class="p">(</span><span class="n">permanent</span><span class="p">)</span> <span class="n">list</span> <span class="n">head</span><span class="p">.</span> <span class="n">You</span> <span class="n">can</span><span class="err">'</span><span class="n">t</span> <span class="n">delete</span> <span class="n">me</span><span class="p">.</span>
<span class="o">==============</span>

<span class="n">Successfully</span> <span class="n">added</span> <span class="n">NEW</span> <span class="n">element</span> <span class="err">#</span><span class="mi">1337</span>
<span class="n">Successfully</span> <span class="n">added</span> <span class="n">NEW</span> <span class="n">element</span> <span class="err">#</span><span class="mi">98</span>
<span class="o">==============</span>
<span class="n">List</span> <span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">:</span>       <span class="n">I</span><span class="err">'</span><span class="n">m</span> <span class="n">the</span> <span class="p">(</span><span class="n">permanent</span><span class="p">)</span> <span class="n">list</span> <span class="n">head</span><span class="p">.</span> <span class="n">You</span> <span class="n">can</span><span class="err">'</span><span class="n">t</span> <span class="n">delete</span> <span class="n">me</span><span class="p">.</span>
<span class="n">List</span> <span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">:</span>       <span class="n">I</span><span class="err">'</span><span class="n">m</span> <span class="n">NEW</span> <span class="n">element</span> <span class="n">number</span> <span class="mi">1337</span>
<span class="n">List</span> <span class="p">[</span><span class="mi">2</span><span class="p">]</span><span class="o">:</span>       <span class="n">I</span><span class="err">'</span><span class="n">m</span> <span class="n">NEW</span> <span class="n">element</span> <span class="n">number</span> <span class="mi">98</span>
<span class="o">==============</span></code></pre></div>

;
T;U;[0I"aç<!DOCTYPE html><html lang="en"><head>
    <meta charset="utf-8">
    <title>A Developer's Notebook - Linked List</title>
    <link rel="stylesheet" href="https://unpkg.com/purecss@1.0.1/build/pure-min.css" integrity="sha384-oAOxQR6DkCoMliIh8yFnu25d7Eq/PHS21PClpwjOTeU2jRSq11vu66rf90/cZr47" crossorigin="anonymous">
    <link rel="stylesheet" href="../../assets/stylesheet.css">
    <link rel="stylesheet" href="../../assets/highlight.css">

    <!-- you don't need to keep this, but it's cool for stats! -->
    <meta name="generator" content="Nanoc 4.11.9">
  </head>
  <body>
    <div id="layout">
      <div class="header">
        <h1>
          <a href="../../">A Developer's Notebook</a>
        </h1>
      </div>


      <div class="content">
        <nav class="pure-g">
          <div class="pure-u-2-3 links">
            <a href="../../index.html">Home</a> ¬∑
            <a href="../../tags.html">Tags</a> ¬∑
            <a href="../../years.html">Years</a> ¬∑
            <a href="../../about.html">About</a>
          </div>

          <div class="pure-u-1-3">
            <div class="contact">
              <span>
                <a href="https://github.com/lbrito1" download="">
                  <img src="../../assets/icons/github.svg" alt="Github icon">
                  </a>
              </span>
              <span>
                <a href="https://www.linkedin.com/in/leonardo-mendes-brito/">
                <img src="../../assets/icons/linkedin.svg" alt="LinkedIn icon">
                </a>
              </span>
            </div>
          </div>
        </nav>
        
  <div class="post-show">
    <h1>Linked List</h1>
    <article class="text">
      <p>Here‚Äôs a very simple implementation of the linked list data structure.</p>

<p>A pointer to the head element is enough to define a linked list. Each element consists of one pointer to the subsequent element in the list and one pointer to the element‚Äôs data:</p>

<p><a href="../../assets/images/codedeposit/2014/02/linkedlist.png"><img src="../../assets/images/codedeposit/2014/02/linkedlist.png?w=450" alt="linkedlist"></a></p>

<!-- more -->

<p>So we‚Äôll start with the data structure itself. Namely, the Element struct:</p>

<div class="highlight"><pre><code class="language-c"><span class="k">typedef</span> <span class="k">struct</span> <span class="n">Element</span>
<span class="p">{</span>
      <span class="kt">void</span> <span class="o">*</span><span class="n">data_ptr</span><span class="p">;</span>
      <span class="k">struct</span> <span class="n">Element</span> <span class="o">*</span><span class="n">next</span><span class="p">;</span>
<span class="p">}</span> <span class="n">Element</span><span class="p">;</span></code></pre></div>

<p>Simple enough: each element has one data pointer and one pointer to the next element, just as we defined.</p>

<p>Next, we need the 3 basic list element operations: add, remove and find. Since creating a new list is a matter of creating a new element and setting it as ‚Äúhead‚Äù, we‚Äôre omitting that.</p>

<div class="highlight"><pre><code class="language-c"><span class="kt">void</span> <span class="nf">add</span><span class="p">(</span><span class="n">Element</span> <span class="o">*</span><span class="n">list_head</span><span class="p">,</span> <span class="kt">void</span> <span class="o">*</span><span class="n">data</span><span class="p">)</span>
<span class="p">{</span>
      <span class="n">Element</span> <span class="o">*</span><span class="n">e</span> <span class="o">=</span> <span class="n">list_head</span><span class="p">;</span>
      <span class="k">while</span> <span class="p">(</span><span class="n">e</span><span class="o">-&gt;</span><span class="n">next</span> <span class="o">!=</span> <span class="nb">NULL</span><span class="p">)</span> <span class="n">e</span> <span class="o">=</span> <span class="n">e</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">;</span>
      <span class="n">Element</span> <span class="o">*</span><span class="n">toadd</span> <span class="o">=</span> <span class="n">new_element</span><span class="p">(</span><span class="n">data</span><span class="p">);</span>
      <span class="n">e</span><span class="o">-&gt;</span><span class="n">next</span> <span class="o">=</span> <span class="n">toadd</span><span class="p">;</span>
<span class="p">}</span></code></pre></div>

<p>To add data to a list, first we find the last element (i.e., next=NULL) by traversing the list. Next we create a new element with the data we‚Äôre adding, and point the last element to it, so now it is the last element. This costs O(n). A more efficient way of doing this is keeping a pointer to the last element so we don‚Äôt have to traverse the list at all, resulting in O(1) cost.</p>

<div class="highlight"><pre><code class="language-c"><span class="n">Element</span> <span class="o">*</span><span class="nf">search</span><span class="p">(</span><span class="kt">void</span> <span class="o">*</span><span class="n">list_head</span><span class="p">,</span> <span class="kt">void</span> <span class="o">*</span><span class="n">data</span><span class="p">)</span>
<span class="p">{</span>
      <span class="n">Element</span> <span class="o">*</span><span class="n">e</span> <span class="o">=</span> <span class="n">list_head</span><span class="p">;</span>
      <span class="n">Element</span> <span class="o">*</span><span class="n">prev</span> <span class="o">=</span> <span class="n">e</span><span class="p">;</span>
      <span class="c1">// exception for list head</span>
      <span class="k">if</span> <span class="p">(</span><span class="n">compare</span><span class="p">(</span><span class="n">data</span><span class="p">,</span> <span class="n">e</span><span class="o">-&gt;</span><span class="n">data_ptr</span><span class="p">))</span> <span class="k">return</span> <span class="nb">NULL</span><span class="p">;</span>
      <span class="k">do</span>
      <span class="p">{</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">compare</span><span class="p">(</span><span class="n">data</span><span class="p">,</span> <span class="n">e</span><span class="o">-&gt;</span><span class="n">data_ptr</span><span class="p">))</span> <span class="k">return</span> <span class="n">prev</span><span class="p">;</span>
            <span class="n">prev</span> <span class="o">=</span> <span class="n">e</span><span class="p">;</span>
      <span class="p">}</span> <span class="k">while</span> <span class="p">((</span><span class="n">e</span> <span class="o">=</span> <span class="n">e</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">)</span> <span class="o">!=</span> <span class="nb">NULL</span><span class="p">);</span>
      <span class="k">return</span> <span class="nb">NULL</span><span class="p">;</span>
<span class="p">}</span></code></pre></div>

<p>Searching is trivial: we traverse the list and return the pointer to the element whose subsequent element is the one we‚Äôre looking for. This costs O(n). The reason we want to get our hands on the <em>previous</em> element and not the element itself will be explained later. Also, we make a necessary exception for the list head, since there is no previous element to it and it does not carry data (in our implementation).</p>

<div class="highlight"><pre><code class="language-c"><span class="kt">int</span> <span class="nf">delete</span><span class="p">(</span><span class="n">Element</span> <span class="o">*</span><span class="n">list_head</span><span class="p">,</span> <span class="kt">void</span> <span class="o">*</span><span class="n">data</span><span class="p">)</span>
<span class="p">{</span>
      <span class="n">Element</span> <span class="o">*</span><span class="n">searched</span> <span class="o">=</span> <span class="n">search</span><span class="p">(</span><span class="n">list_head</span><span class="p">,</span> <span class="n">data</span><span class="p">);</span>
      <span class="k">if</span> <span class="p">(</span><span class="n">searched</span><span class="p">)</span>
      <span class="p">{</span>
            <span class="n">Element</span> <span class="o">*</span><span class="n">removed</span> <span class="o">=</span> <span class="n">searched</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">;</span>
            <span class="n">searched</span><span class="o">-&gt;</span><span class="n">next</span> <span class="o">=</span> <span class="n">searched</span><span class="o">-&gt;</span><span class="n">next</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">;</span>
            <span class="n">free</span><span class="p">(</span><span class="n">removed</span><span class="o">-&gt;</span><span class="n">data_ptr</span><span class="p">);</span>
            <span class="n">free</span><span class="p">(</span><span class="n">removed</span><span class="p">);</span>
            <span class="k">return</span> <span class="n">TRUE</span><span class="p">;</span>
      <span class="p">}</span>
      <span class="k">else</span> <span class="k">return</span> <span class="n">FALSE</span><span class="p">;</span>
<span class="p">}</span></code></pre></div>

<p>To remove an element, first we do a search in the list for the element we want deleted. The reason we wanted the pointer to the <em>previous</em> element is that after we do the removal, we‚Äôll need to re-link the list: if we have A B C and remove B, A-&gt;next must point to C. If we have 3 or more elements this is trivial. If there are only 2 elements and we remove one of them (i.e. ‚ÄúC‚Äù in our example is NULL), then A-&gt;next will point to NULL and will become the first and last element, as expected.</p>

<p>That‚Äôs all we need for a linked list! Below you can find the full runnable code and the expected output.</p>

<div class="highlight"><pre><code class="language-c"><span class="c1">//======================</span>
<span class="c1">//      Linked list</span>
<span class="c1">// CC-BY Leonardo Brito</span>
<span class="c1">// lbrito@gmail.com</span>
<span class="c1">//======================</span>

<span class="cp">#include
#include
#include
</span>
<span class="cp">#define TRUE 1
#define FALSE 0
</span>
<span class="cp">#ifndef TEST_SIZE
#define TEST_SIZE 10
#endif
</span>
<span class="c1">//======================</span>
<span class="c1">//          Algorithm</span>
<span class="c1">//======================</span>

<span class="k">typedef</span> <span class="k">struct</span> <span class="n">Element</span>
<span class="p">{</span>
      <span class="kt">void</span> <span class="o">*</span><span class="n">data_ptr</span><span class="p">;</span>
      <span class="k">struct</span> <span class="n">Element</span> <span class="o">*</span><span class="n">next</span><span class="p">;</span>
<span class="p">}</span> <span class="n">Element</span><span class="p">;</span>

<span class="kt">int</span> <span class="nf">compare</span><span class="p">(</span><span class="kt">void</span> <span class="o">*</span><span class="n">data1</span><span class="p">,</span> <span class="kt">void</span> <span class="o">*</span><span class="n">data2</span><span class="p">);</span>

<span class="n">Element</span> <span class="o">*</span><span class="nf">search</span><span class="p">(</span><span class="kt">void</span> <span class="o">*</span><span class="n">list_head</span><span class="p">,</span> <span class="kt">void</span> <span class="o">*</span><span class="n">data</span><span class="p">);</span>

<span class="n">Element</span> <span class="o">*</span><span class="nf">new_element</span><span class="p">(</span><span class="kt">void</span> <span class="o">*</span><span class="n">data</span><span class="p">)</span>
<span class="p">{</span>
      <span class="n">Element</span> <span class="o">*</span><span class="n">e</span> <span class="o">=</span> <span class="p">(</span><span class="n">Element</span><span class="o">*</span><span class="p">)</span> <span class="n">malloc</span><span class="p">(</span><span class="k">sizeof</span><span class="p">(</span><span class="n">Element</span><span class="p">));</span>
      <span class="n">e</span><span class="o">-&gt;</span><span class="n">data_ptr</span> <span class="o">=</span> <span class="n">data</span><span class="p">;</span>
      <span class="n">e</span><span class="o">-&gt;</span><span class="n">next</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
      <span class="k">return</span> <span class="n">e</span><span class="p">;</span>
<span class="p">}</span>

<span class="kt">int</span> <span class="nf">compare</span><span class="p">(</span><span class="kt">void</span> <span class="o">*</span><span class="n">data1</span><span class="p">,</span> <span class="kt">void</span> <span class="o">*</span><span class="n">data2</span><span class="p">)</span>
<span class="p">{</span>
      <span class="k">return</span> <span class="p">(</span><span class="n">strcmp</span><span class="p">((</span><span class="kt">char</span><span class="o">*</span><span class="p">)</span> <span class="n">data1</span><span class="p">,</span> <span class="p">(</span><span class="kt">char</span><span class="o">*</span><span class="p">)</span><span class="n">data2</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span> <span class="o">?</span> <span class="n">TRUE</span> <span class="o">:</span> <span class="n">FALSE</span><span class="p">);</span>
<span class="p">}</span>

<span class="kt">void</span> <span class="nf">add</span><span class="p">(</span><span class="n">Element</span> <span class="o">*</span><span class="n">list_head</span><span class="p">,</span> <span class="kt">void</span> <span class="o">*</span><span class="n">data</span><span class="p">)</span>
<span class="p">{</span>
      <span class="n">Element</span> <span class="o">*</span><span class="n">e</span> <span class="o">=</span> <span class="n">list_head</span><span class="p">;</span>
      <span class="k">while</span> <span class="p">(</span><span class="n">e</span><span class="o">-&gt;</span><span class="n">next</span> <span class="o">!=</span> <span class="nb">NULL</span><span class="p">)</span> <span class="n">e</span> <span class="o">=</span> <span class="n">e</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">;</span>
      <span class="n">Element</span> <span class="o">*</span><span class="n">toadd</span> <span class="o">=</span> <span class="n">new_element</span><span class="p">(</span><span class="n">data</span><span class="p">);</span>
      <span class="n">e</span><span class="o">-&gt;</span><span class="n">next</span> <span class="o">=</span> <span class="n">toadd</span><span class="p">;</span>
<span class="p">}</span>

<span class="n">Element</span> <span class="o">*</span><span class="nf">search</span><span class="p">(</span><span class="kt">void</span> <span class="o">*</span><span class="n">list_head</span><span class="p">,</span> <span class="kt">void</span> <span class="o">*</span><span class="n">data</span><span class="p">)</span>
<span class="p">{</span>
      <span class="n">Element</span> <span class="o">*</span><span class="n">e</span> <span class="o">=</span> <span class="n">list_head</span><span class="p">;</span>
      <span class="n">Element</span> <span class="o">*</span><span class="n">prev</span> <span class="o">=</span> <span class="n">e</span><span class="p">;</span>
      <span class="k">if</span> <span class="p">(</span><span class="n">compare</span><span class="p">(</span><span class="n">data</span><span class="p">,</span> <span class="n">e</span><span class="o">-&gt;</span><span class="n">data_ptr</span><span class="p">))</span> <span class="k">return</span> <span class="nb">NULL</span><span class="p">;</span> <span class="c1">// exception for list head</span>
      <span class="k">do</span>
      <span class="p">{</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">compare</span><span class="p">(</span><span class="n">data</span><span class="p">,</span> <span class="n">e</span><span class="o">-&gt;</span><span class="n">data_ptr</span><span class="p">))</span> <span class="k">return</span> <span class="n">prev</span><span class="p">;</span>
            <span class="n">prev</span> <span class="o">=</span> <span class="n">e</span><span class="p">;</span>
      <span class="p">}</span> <span class="k">while</span> <span class="p">((</span><span class="n">e</span> <span class="o">=</span> <span class="n">e</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">)</span> <span class="o">!=</span> <span class="nb">NULL</span><span class="p">);</span>
      <span class="k">return</span> <span class="nb">NULL</span><span class="p">;</span>
<span class="p">}</span>

<span class="kt">int</span> <span class="nf">delete</span><span class="p">(</span><span class="n">Element</span> <span class="o">*</span><span class="n">list_head</span><span class="p">,</span> <span class="kt">void</span> <span class="o">*</span><span class="n">data</span><span class="p">)</span>
<span class="p">{</span>
      <span class="n">Element</span> <span class="o">*</span><span class="n">searched</span> <span class="o">=</span> <span class="n">search</span><span class="p">(</span><span class="n">list_head</span><span class="p">,</span> <span class="n">data</span><span class="p">);</span>
      <span class="k">if</span> <span class="p">(</span><span class="n">searched</span><span class="p">)</span>
      <span class="p">{</span>
            <span class="n">Element</span> <span class="o">*</span><span class="n">removed</span> <span class="o">=</span> <span class="n">searched</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">;</span>
            <span class="n">searched</span><span class="o">-&gt;</span><span class="n">next</span> <span class="o">=</span> <span class="n">searched</span><span class="o">-&gt;</span><span class="n">next</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">;</span>
            <span class="n">free</span><span class="p">(</span><span class="n">removed</span><span class="o">-&gt;</span><span class="n">data_ptr</span><span class="p">);</span>
            <span class="n">free</span><span class="p">(</span><span class="n">removed</span><span class="p">);</span>
            <span class="k">return</span> <span class="n">TRUE</span><span class="p">;</span>
      <span class="p">}</span>
      <span class="k">else</span> <span class="k">return</span> <span class="n">FALSE</span><span class="p">;</span>
<span class="p">}</span>

<span class="c1">//======================</span>
<span class="c1">//          Tests</span>
<span class="c1">//======================</span>

<span class="n">Element</span> <span class="o">*</span><span class="nf">build_list</span><span class="p">()</span>
<span class="p">{</span>
      <span class="kt">char</span> <span class="o">*</span><span class="n">head_data</span> <span class="o">=</span> <span class="s">"I'm the (permanent) list head. You can't delete me."</span><span class="p">;</span>
      <span class="n">Element</span> <span class="o">*</span><span class="n">head</span> <span class="o">=</span> <span class="n">new_element</span><span class="p">(</span><span class="n">head_data</span><span class="p">);</span>
      <span class="kt">char</span> <span class="o">*</span><span class="n">basetext</span> <span class="o">=</span> <span class="s">"I'm element number "</span><span class="p">;</span>
      <span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span>
      <span class="k">for</span> <span class="p">(;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">TEST_SIZE</span><span class="p">;</span><span class="n">i</span><span class="o">++</span><span class="p">)</span>        <span class="p">{</span>             <span class="kt">char</span> <span class="o">*</span><span class="n">text1</span> <span class="o">=</span> <span class="n">malloc</span><span class="p">(</span><span class="k">sizeof</span><span class="p">(</span><span class="kt">char</span><span class="p">)</span><span class="o">*</span><span class="n">strlen</span><span class="p">(</span><span class="n">basetext</span><span class="p">));</span>             <span class="n">strcpy</span><span class="p">(</span><span class="n">text1</span><span class="p">,</span> <span class="n">basetext</span><span class="p">);</span>             <span class="kt">char</span> <span class="n">numb</span><span class="p">[</span><span class="mi">10</span><span class="p">];</span>             <span class="n">sprintf</span><span class="p">(</span><span class="n">numb</span><span class="p">,</span> <span class="s">"%d"</span><span class="p">,</span> <span class="n">i</span><span class="p">);</span>             <span class="n">strcat</span><span class="p">(</span><span class="n">text1</span><span class="p">,</span> <span class="n">numb</span><span class="p">);</span>             <span class="n">add</span><span class="p">(</span><span class="n">head</span><span class="p">,</span> <span class="n">text1</span><span class="p">);</span>       <span class="p">}</span>              <span class="k">return</span> <span class="n">head</span><span class="p">;</span> <span class="p">}</span> <span class="kt">void</span> <span class="nf">print_list</span><span class="p">(</span><span class="n">Element</span> <span class="o">*</span><span class="n">head</span><span class="p">)</span>  <span class="p">{</span>       <span class="n">printf</span><span class="p">(</span><span class="s">"</span><span class="se">\n</span><span class="s">=============="</span><span class="p">);</span>       <span class="n">Element</span> <span class="o">*</span><span class="n">e</span> <span class="o">=</span> <span class="n">head</span><span class="p">;</span>       <span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>       <span class="k">do</span>        <span class="p">{</span>             <span class="n">printf</span><span class="p">(</span><span class="s">"</span><span class="se">\n</span><span class="s">List [%d]:</span><span class="se">\t</span><span class="s">%s"</span><span class="p">,</span><span class="n">i</span><span class="o">++</span><span class="p">,(</span><span class="kt">char</span><span class="o">**</span><span class="p">)</span><span class="n">e</span><span class="o">-&gt;</span><span class="n">data_ptr</span><span class="p">);</span>
      <span class="p">}</span> <span class="k">while</span> <span class="p">((</span><span class="n">e</span> <span class="o">=</span> <span class="n">e</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">)</span> <span class="o">!=</span> <span class="nb">NULL</span><span class="p">);</span>
      <span class="n">printf</span><span class="p">(</span><span class="s">"</span><span class="se">\n</span><span class="s">==============</span><span class="se">\n</span><span class="s">"</span><span class="p">);</span>
      <span class="k">return</span> <span class="n">head</span><span class="p">;</span>
<span class="p">}</span>

<span class="kt">void</span> <span class="nf">test_delete</span><span class="p">(</span><span class="n">Element</span> <span class="o">*</span><span class="n">head</span><span class="p">,</span> <span class="kt">int</span> <span class="n">eln</span><span class="p">)</span>
<span class="p">{</span>
      <span class="kt">char</span> <span class="n">data</span><span class="p">[</span><span class="mi">20</span><span class="p">];</span>
      <span class="n">sprintf</span><span class="p">(</span><span class="n">data</span><span class="p">,</span> <span class="s">"I'm element number %d"</span><span class="p">,</span> <span class="n">eln</span><span class="p">);</span>
      <span class="k">if</span> <span class="p">(</span><span class="n">delete</span><span class="p">(</span><span class="n">head</span><span class="p">,</span> <span class="n">data</span><span class="p">))</span> <span class="n">printf</span><span class="p">(</span><span class="s">"</span><span class="se">\n</span><span class="s">Successfully deleted element #%d"</span><span class="p">,</span><span class="n">eln</span><span class="p">);</span>
<span class="p">}</span>

<span class="kt">void</span> <span class="nf">test_add</span><span class="p">(</span><span class="n">Element</span> <span class="o">*</span><span class="n">head</span><span class="p">,</span> <span class="kt">int</span> <span class="n">eln</span><span class="p">)</span>
<span class="p">{</span>
      <span class="kt">char</span> <span class="o">*</span><span class="n">data</span> <span class="o">=</span> <span class="n">malloc</span><span class="p">(</span><span class="k">sizeof</span><span class="p">(</span><span class="kt">char</span><span class="p">)</span><span class="o">*</span><span class="mi">50</span><span class="p">);</span>
      <span class="n">sprintf</span><span class="p">(</span><span class="n">data</span><span class="p">,</span> <span class="s">"I'm NEW element number %d"</span><span class="p">,</span> <span class="n">eln</span><span class="p">);</span>
      <span class="n">add</span><span class="p">(</span><span class="n">head</span><span class="p">,</span> <span class="n">data</span><span class="p">);</span>
      <span class="n">printf</span><span class="p">(</span><span class="s">"</span><span class="se">\n</span><span class="s">Successfully added NEW element #%d"</span><span class="p">,</span><span class="n">eln</span><span class="p">);</span>
<span class="p">}</span>

<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
<span class="p">{</span>
      <span class="n">Element</span> <span class="o">*</span><span class="n">head</span> <span class="o">=</span> <span class="n">build_list</span><span class="p">();</span>

      <span class="n">print_list</span><span class="p">(</span><span class="n">head</span><span class="p">);</span>
      <span class="n">test_delete</span><span class="p">(</span><span class="n">head</span><span class="p">,</span> <span class="mi">1</span><span class="p">);</span>
      <span class="n">test_delete</span><span class="p">(</span><span class="n">head</span><span class="p">,</span> <span class="mi">2</span><span class="p">);</span>
      <span class="n">test_delete</span><span class="p">(</span><span class="n">head</span><span class="p">,</span> <span class="mi">3</span><span class="p">);</span>
      <span class="n">test_delete</span><span class="p">(</span><span class="n">head</span><span class="p">,</span> <span class="mi">4</span><span class="p">);</span>
      <span class="n">test_delete</span><span class="p">(</span><span class="n">head</span><span class="p">,</span> <span class="mi">5</span><span class="p">);</span>
      <span class="n">test_delete</span><span class="p">(</span><span class="n">head</span><span class="p">,</span> <span class="mi">6</span><span class="p">);</span>
      <span class="n">test_delete</span><span class="p">(</span><span class="n">head</span><span class="p">,</span> <span class="mi">7</span><span class="p">);</span>
      <span class="n">test_delete</span><span class="p">(</span><span class="n">head</span><span class="p">,</span> <span class="mi">8</span><span class="p">);</span>
      <span class="n">test_delete</span><span class="p">(</span><span class="n">head</span><span class="p">,</span> <span class="mi">9</span><span class="p">);</span>
      <span class="n">print_list</span><span class="p">(</span><span class="n">head</span><span class="p">);</span>
      <span class="n">test_add</span><span class="p">(</span><span class="n">head</span><span class="p">,</span> <span class="mi">1337</span><span class="p">);</span>
      <span class="n">test_delete</span><span class="p">(</span><span class="n">head</span><span class="p">,</span> <span class="mi">2</span><span class="p">);</span>
      <span class="n">test_add</span><span class="p">(</span><span class="n">head</span><span class="p">,</span> <span class="mi">98</span><span class="p">);</span>
      <span class="n">print_list</span><span class="p">(</span><span class="n">head</span><span class="p">);</span>

      <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span></code></pre></div>

<div class="highlight"><pre><code class="language-c"><span class="nl">C:</span><span class="err">\</span><span class="n">code</span><span class="err">\</span><span class="n">c</span><span class="err">\</span><span class="n">cstuff</span><span class="o">&gt;</span><span class="n">linked_list</span>

<span class="o">==============</span>
<span class="n">List</span> <span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">:</span>       <span class="n">I</span><span class="err">'</span><span class="n">m</span> <span class="n">the</span> <span class="p">(</span><span class="n">permanent</span><span class="p">)</span> <span class="n">list</span> <span class="n">head</span><span class="p">.</span> <span class="n">You</span> <span class="n">can</span><span class="err">'</span><span class="n">t</span> <span class="n">delete</span> <span class="n">me</span><span class="p">.</span>
<span class="n">List</span> <span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">:</span>       <span class="n">I</span><span class="err">'</span><span class="n">m</span> <span class="n">element</span> <span class="n">number</span> <span class="mi">1</span>
<span class="n">List</span> <span class="p">[</span><span class="mi">2</span><span class="p">]</span><span class="o">:</span>       <span class="n">I</span><span class="err">'</span><span class="n">m</span> <span class="n">element</span> <span class="n">number</span> <span class="mi">2</span>
<span class="n">List</span> <span class="p">[</span><span class="mi">3</span><span class="p">]</span><span class="o">:</span>       <span class="n">I</span><span class="err">'</span><span class="n">m</span> <span class="n">element</span> <span class="n">number</span> <span class="mi">3</span>
<span class="n">List</span> <span class="p">[</span><span class="mi">4</span><span class="p">]</span><span class="o">:</span>       <span class="n">I</span><span class="err">'</span><span class="n">m</span> <span class="n">element</span> <span class="n">number</span> <span class="mi">4</span>
<span class="n">List</span> <span class="p">[</span><span class="mi">5</span><span class="p">]</span><span class="o">:</span>       <span class="n">I</span><span class="err">'</span><span class="n">m</span> <span class="n">element</span> <span class="n">number</span> <span class="mi">5</span>
<span class="n">List</span> <span class="p">[</span><span class="mi">6</span><span class="p">]</span><span class="o">:</span>       <span class="n">I</span><span class="err">'</span><span class="n">m</span> <span class="n">element</span> <span class="n">number</span> <span class="mi">6</span>
<span class="n">List</span> <span class="p">[</span><span class="mi">7</span><span class="p">]</span><span class="o">:</span>       <span class="n">I</span><span class="err">'</span><span class="n">m</span> <span class="n">element</span> <span class="n">number</span> <span class="mi">7</span>
<span class="n">List</span> <span class="p">[</span><span class="mi">8</span><span class="p">]</span><span class="o">:</span>       <span class="n">I</span><span class="err">'</span><span class="n">m</span> <span class="n">element</span> <span class="n">number</span> <span class="mi">8</span>
<span class="n">List</span> <span class="p">[</span><span class="mi">9</span><span class="p">]</span><span class="o">:</span>       <span class="n">I</span><span class="err">'</span><span class="n">m</span> <span class="n">element</span> <span class="n">number</span> <span class="mi">9</span>
<span class="o">==============</span>

<span class="n">Successfully</span> <span class="n">deleted</span> <span class="n">element</span> <span class="err">#</span><span class="mi">1</span>
<span class="n">Successfully</span> <span class="n">deleted</span> <span class="n">element</span> <span class="err">#</span><span class="mi">2</span>
<span class="n">Successfully</span> <span class="n">deleted</span> <span class="n">element</span> <span class="err">#</span><span class="mi">3</span>
<span class="n">Successfully</span> <span class="n">deleted</span> <span class="n">element</span> <span class="err">#</span><span class="mi">4</span>
<span class="n">Successfully</span> <span class="n">deleted</span> <span class="n">element</span> <span class="err">#</span><span class="mi">5</span>
<span class="n">Successfully</span> <span class="n">deleted</span> <span class="n">element</span> <span class="err">#</span><span class="mi">6</span>
<span class="n">Successfully</span> <span class="n">deleted</span> <span class="n">element</span> <span class="err">#</span><span class="mi">7</span>
<span class="n">Successfully</span> <span class="n">deleted</span> <span class="n">element</span> <span class="err">#</span><span class="mi">8</span>
<span class="n">Successfully</span> <span class="n">deleted</span> <span class="n">element</span> <span class="err">#</span><span class="mi">9</span>
<span class="o">==============</span>
<span class="n">List</span> <span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">:</span>       <span class="n">I</span><span class="err">'</span><span class="n">m</span> <span class="n">the</span> <span class="p">(</span><span class="n">permanent</span><span class="p">)</span> <span class="n">list</span> <span class="n">head</span><span class="p">.</span> <span class="n">You</span> <span class="n">can</span><span class="err">'</span><span class="n">t</span> <span class="n">delete</span> <span class="n">me</span><span class="p">.</span>
<span class="o">==============</span>

<span class="n">Successfully</span> <span class="n">added</span> <span class="n">NEW</span> <span class="n">element</span> <span class="err">#</span><span class="mi">1337</span>
<span class="n">Successfully</span> <span class="n">added</span> <span class="n">NEW</span> <span class="n">element</span> <span class="err">#</span><span class="mi">98</span>
<span class="o">==============</span>
<span class="n">List</span> <span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">:</span>       <span class="n">I</span><span class="err">'</span><span class="n">m</span> <span class="n">the</span> <span class="p">(</span><span class="n">permanent</span><span class="p">)</span> <span class="n">list</span> <span class="n">head</span><span class="p">.</span> <span class="n">You</span> <span class="n">can</span><span class="err">'</span><span class="n">t</span> <span class="n">delete</span> <span class="n">me</span><span class="p">.</span>
<span class="n">List</span> <span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">:</span>       <span class="n">I</span><span class="err">'</span><span class="n">m</span> <span class="n">NEW</span> <span class="n">element</span> <span class="n">number</span> <span class="mi">1337</span>
<span class="n">List</span> <span class="p">[</span><span class="mi">2</span><span class="p">]</span><span class="o">:</span>       <span class="n">I</span><span class="err">'</span><span class="n">m</span> <span class="n">NEW</span> <span class="n">element</span> <span class="n">number</span> <span class="mi">98</span>
<span class="o">==============</span></code></pre></div>


    </article>
    <aside>Posted at: Feb 14, 2014</aside>
    <div class="post-footer">
      <a href="../../index.html">Back</a>
    </div>
  </div>

        <div class="footer">
          2020 Leonardo Brito
        </div>
      </div>

    </div>
  


</body></html>;
T;@;@o;;;;	I" /posts/2014-02-21-vector.md;
T{;{
;U;[I"B/home/carol/workspace/blog/content/posts/2014-02-21-vector.md;
TI"Very simple Vector implementation with add, add_all, get and delete operations using arrays of void pointers.

The downside to this as compared to simply using an array is that here we have an _array of pointers_, which means the data will most likely be scattered over the memory, not coalesced.

<!-- more -->

<div class="highlight"><pre><code class="language-c">
/*
    File: vector.c

    Copyright (c) 2014 Leonardo Brito <lbrito@gmail.com>

    This software is free software; you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation; either version 2 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License along
    with this program; if not, write the Free Software Foundation, Inc., 51
    Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
*/

#include <stdio.h>
#include <stdlib.h>
#include "comparators.c"

typedef struct
{
      void** array;
      size_t type_size;
      unsigned size;
      unsigned used;
      int (*cmp) (void*, void*);
} vector;

/**
 *  @brief Creates a new vector
 *
 *  @param [in] s          initial array size
 *  @param [in] ts         type size
 *  @param [in] comparator comparator function
 *  @return pointer to created vector
 */
vector* new_vector(unsigned s, size_t ts, int (*comparator) (void*, void*))
{
      vector* v = malloc(sizeof(vector));
      v->used = 0;
      v->size = s;
      v->type_size = ts;
      v->cmp = comparator;
      v->array = malloc(sizeof(void*)*v->size);

      return v;
}

/**
 *  @brief Doubles the vector size if necessary
 *
 *  @param [in] v      vector
 *  @param [in] length expected increase
 *  @return success(0) or failure(1)
 */
int grow(vector* v, int length)
{
      int ttlsize = v->used + length;
      int available = v->size;
      if (ttlsize > available)
      {
            while ( (available *= 2) < ttlsize);
            void** buf = (void**) realloc(v->array, sizeof(void*)*available);
            if (!buf) return 1;
            v->size = available;
            v->array = buf;
      }
      return 0;
}

/**
 *  @brief Add a single element to the vector
 *
 *  @param [in] v    vector
 *  @param [in] data
 *  @return success(0) or failure(1)
 */
int add(vector* v, void* data)
{
      if (grow(v,1) != 0) return 1;
      v->array[v->used++] = data;
      return 0;
}

/**
 *  @brief Adds an entire array to the vector
 *
 *  @param [in] v
 *  @param [in] data   data array
 *  @param [in] length length of the data array
 *  @return success(0) or failure(1)
 */
void add_all(vector* v, void** data, int length)
{
     grow(v, length);
     int i=0;
     while (i<length) v->array[v->used++] = &(data[i++]);
}

/**
 *  @brief Get data
 *
 *  @param [in] v
 *  @param [in] data
 *  @return index to searched data (-1 for failure)
 */
int get(vector* v, void* data)
{
      if (v->used==0) return -1;
      int i=0;
      do {
            if (v->cmp(data, v->array[i]) == 0) return i;
      } while (++i<v->used);
      return -1;
}

/**
 *  @brief Delete data from vector
 *
 *  @param [in] v
 *  @param [in] data
 *  @return success(0) or failure(1)
 */
int delete(vector* v, void* data)
{
      int idx = get(v, data);
      if (idx < 0) return idx;
      free(v->array[idx]);
      v->array[idx] = v->array[--v->used];
      return 0;
}

#ifdef _DEBUGGING
void print_vector(vector *v)
{
      printf("\nSIZE=%d\tUSED=%d\n==============",v->size,v->used);
      int i;
      for (i=0;i<v->used;i++) printf("\n[%d]\t%d",i,*(int*)v->array[i]);
}

int main()
{
      vector* v = new_vector(2, sizeof(int), compare_integer);
      static int y[] = {10,31,99,3,7,89,2,3};
      add_all(v, (void**) y, 8);
      delete(v, &y[0]);
      print_vector(v);

      return 0;
}
#endif
</code></pre></div>
;
T;U;[0I"0C<p>Very simple Vector implementation with add, add_all, get and delete operations using arrays of void pointers.</p>

<p>The downside to this as compared to simply using an array is that here we have an <em>array of pointers</em>, which means the data will most likely be scattered over the memory, not coalesced.</p>

<!-- more -->

<div class="highlight"><pre><code class="language-c"><span class="cm">/*
    File: vector.c

    Copyright (c) 2014 Leonardo Brito &lt;lbrito@gmail.com&gt;

    This software is free software; you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation; either version 2 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License along
    with this program; if not, write the Free Software Foundation, Inc., 51
    Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
*/</span>

<span class="cp">#include 
#include 
#include "comparators.c"
</span>
<span class="k">typedef</span> <span class="k">struct</span>
<span class="p">{</span>
      <span class="kt">void</span><span class="o">**</span> <span class="n">array</span><span class="p">;</span>
      <span class="kt">size_t</span> <span class="n">type_size</span><span class="p">;</span>
      <span class="kt">unsigned</span> <span class="n">size</span><span class="p">;</span>
      <span class="kt">unsigned</span> <span class="n">used</span><span class="p">;</span>
      <span class="kt">int</span> <span class="p">(</span><span class="o">*</span><span class="n">cmp</span><span class="p">)</span> <span class="p">(</span><span class="kt">void</span><span class="o">*</span><span class="p">,</span> <span class="kt">void</span><span class="o">*</span><span class="p">);</span>
<span class="p">}</span> <span class="n">vector</span><span class="p">;</span>

<span class="cm">/**
 *  @brief Creates a new vector
 *
 *  @param [in] s          initial array size
 *  @param [in] ts         type size
 *  @param [in] comparator comparator function
 *  @return pointer to created vector
 */</span>
<span class="n">vector</span><span class="o">*</span> <span class="nf">new_vector</span><span class="p">(</span><span class="kt">unsigned</span> <span class="n">s</span><span class="p">,</span> <span class="kt">size_t</span> <span class="n">ts</span><span class="p">,</span> <span class="kt">int</span> <span class="p">(</span><span class="o">*</span><span class="n">comparator</span><span class="p">)</span> <span class="p">(</span><span class="kt">void</span><span class="o">*</span><span class="p">,</span> <span class="kt">void</span><span class="o">*</span><span class="p">))</span>
<span class="p">{</span>
      <span class="n">vector</span><span class="o">*</span> <span class="n">v</span> <span class="o">=</span> <span class="n">malloc</span><span class="p">(</span><span class="k">sizeof</span><span class="p">(</span><span class="n">vector</span><span class="p">));</span>
      <span class="n">v</span><span class="o">-&gt;</span><span class="n">used</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
      <span class="n">v</span><span class="o">-&gt;</span><span class="n">size</span> <span class="o">=</span> <span class="n">s</span><span class="p">;</span>
      <span class="n">v</span><span class="o">-&gt;</span><span class="n">type_size</span> <span class="o">=</span> <span class="n">ts</span><span class="p">;</span>
      <span class="n">v</span><span class="o">-&gt;</span><span class="n">cmp</span> <span class="o">=</span> <span class="n">comparator</span><span class="p">;</span>
      <span class="n">v</span><span class="o">-&gt;</span><span class="n">array</span> <span class="o">=</span> <span class="n">malloc</span><span class="p">(</span><span class="k">sizeof</span><span class="p">(</span><span class="kt">void</span><span class="o">*</span><span class="p">)</span><span class="o">*</span><span class="n">v</span><span class="o">-&gt;</span><span class="n">size</span><span class="p">);</span>

      <span class="k">return</span> <span class="n">v</span><span class="p">;</span>
<span class="p">}</span>

<span class="cm">/**
 *  @brief Doubles the vector size if necessary
 *
 *  @param [in] v      vector
 *  @param [in] length expected increase
 *  @return success(0) or failure(1)
 */</span>
<span class="kt">int</span> <span class="nf">grow</span><span class="p">(</span><span class="n">vector</span><span class="o">*</span> <span class="n">v</span><span class="p">,</span> <span class="kt">int</span> <span class="n">length</span><span class="p">)</span>
<span class="p">{</span>
      <span class="kt">int</span> <span class="n">ttlsize</span> <span class="o">=</span> <span class="n">v</span><span class="o">-&gt;</span><span class="n">used</span> <span class="o">+</span> <span class="n">length</span><span class="p">;</span>
      <span class="kt">int</span> <span class="n">available</span> <span class="o">=</span> <span class="n">v</span><span class="o">-&gt;</span><span class="n">size</span><span class="p">;</span>
      <span class="k">if</span> <span class="p">(</span><span class="n">ttlsize</span> <span class="o">&gt;</span> <span class="n">available</span><span class="p">)</span>
      <span class="p">{</span>
            <span class="k">while</span> <span class="p">(</span> <span class="p">(</span><span class="n">available</span> <span class="o">*=</span> <span class="mi">2</span><span class="p">)</span> <span class="o">&lt;</span> <span class="n">ttlsize</span><span class="p">);</span>
            <span class="kt">void</span><span class="o">**</span> <span class="n">buf</span> <span class="o">=</span> <span class="p">(</span><span class="kt">void</span><span class="o">**</span><span class="p">)</span> <span class="n">realloc</span><span class="p">(</span><span class="n">v</span><span class="o">-&gt;</span><span class="n">array</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="kt">void</span><span class="o">*</span><span class="p">)</span><span class="o">*</span><span class="n">available</span><span class="p">);</span>
            <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">buf</span><span class="p">)</span> <span class="k">return</span> <span class="mi">1</span><span class="p">;</span>
            <span class="n">v</span><span class="o">-&gt;</span><span class="n">size</span> <span class="o">=</span> <span class="n">available</span><span class="p">;</span>
            <span class="n">v</span><span class="o">-&gt;</span><span class="n">array</span> <span class="o">=</span> <span class="n">buf</span><span class="p">;</span>
      <span class="p">}</span>
      <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>

<span class="cm">/**
 *  @brief Add a single element to the vector
 *
 *  @param [in] v    vector
 *  @param [in] data
 *  @return success(0) or failure(1)
 */</span>
<span class="kt">int</span> <span class="nf">add</span><span class="p">(</span><span class="n">vector</span><span class="o">*</span> <span class="n">v</span><span class="p">,</span> <span class="kt">void</span><span class="o">*</span> <span class="n">data</span><span class="p">)</span>
<span class="p">{</span>
      <span class="k">if</span> <span class="p">(</span><span class="n">grow</span><span class="p">(</span><span class="n">v</span><span class="p">,</span><span class="mi">1</span><span class="p">)</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">)</span> <span class="k">return</span> <span class="mi">1</span><span class="p">;</span>
      <span class="n">v</span><span class="o">-&gt;</span><span class="n">array</span><span class="p">[</span><span class="n">v</span><span class="o">-&gt;</span><span class="n">used</span><span class="o">++</span><span class="p">]</span> <span class="o">=</span> <span class="n">data</span><span class="p">;</span>
      <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>

<span class="cm">/**
 *  @brief Adds an entire array to the vector
 *
 *  @param [in] v
 *  @param [in] data   data array
 *  @param [in] length length of the data array
 *  @return success(0) or failure(1)
 */</span>
<span class="kt">void</span> <span class="nf">add_all</span><span class="p">(</span><span class="n">vector</span><span class="o">*</span> <span class="n">v</span><span class="p">,</span> <span class="kt">void</span><span class="o">**</span> <span class="n">data</span><span class="p">,</span> <span class="kt">int</span> <span class="n">length</span><span class="p">)</span>
<span class="p">{</span>
     <span class="n">grow</span><span class="p">(</span><span class="n">v</span><span class="p">,</span> <span class="n">length</span><span class="p">);</span>
     <span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span>
     <span class="k">while</span> <span class="p">(</span><span class="n">i</span><span class="o">&lt;</span><span class="n">length</span><span class="p">)</span> <span class="n">v</span><span class="o">-&gt;</span><span class="n">array</span><span class="p">[</span><span class="n">v</span><span class="o">-&gt;</span><span class="n">used</span><span class="o">++</span><span class="p">]</span> <span class="o">=</span> <span class="o">&amp;</span><span class="p">(</span><span class="n">data</span><span class="p">[</span><span class="n">i</span><span class="o">++</span><span class="p">]);</span>
<span class="p">}</span>

<span class="cm">/**
 *  @brief Get data
 *
 *  @param [in] v
 *  @param [in] data
 *  @return index to searched data (-1 for failure)
 */</span>
<span class="kt">int</span> <span class="nf">get</span><span class="p">(</span><span class="n">vector</span><span class="o">*</span> <span class="n">v</span><span class="p">,</span> <span class="kt">void</span><span class="o">*</span> <span class="n">data</span><span class="p">)</span>
<span class="p">{</span>
      <span class="k">if</span> <span class="p">(</span><span class="n">v</span><span class="o">-&gt;</span><span class="n">used</span><span class="o">==</span><span class="mi">0</span><span class="p">)</span> <span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
      <span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span>
      <span class="k">do</span> <span class="p">{</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">v</span><span class="o">-&gt;</span><span class="n">cmp</span><span class="p">(</span><span class="n">data</span><span class="p">,</span> <span class="n">v</span><span class="o">-&gt;</span><span class="n">array</span><span class="p">[</span><span class="n">i</span><span class="p">])</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="k">return</span> <span class="n">i</span><span class="p">;</span>
      <span class="p">}</span> <span class="k">while</span> <span class="p">(</span><span class="o">++</span><span class="n">iused</span><span class="p">);</span>
      <span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
<span class="p">}</span>

<span class="cm">/**
 *  @brief Delete data from vector
 *
 *  @param [in] v
 *  @param [in] data
 *  @return success(0) or failure(1)
 */</span>
<span class="kt">int</span> <span class="nf">delete</span><span class="p">(</span><span class="n">vector</span><span class="o">*</span> <span class="n">v</span><span class="p">,</span> <span class="kt">void</span><span class="o">*</span> <span class="n">data</span><span class="p">)</span>
<span class="p">{</span>
      <span class="kt">int</span> <span class="n">idx</span> <span class="o">=</span> <span class="n">get</span><span class="p">(</span><span class="n">v</span><span class="p">,</span> <span class="n">data</span><span class="p">);</span>
      <span class="k">if</span> <span class="p">(</span><span class="n">idx</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">)</span> <span class="k">return</span> <span class="n">idx</span><span class="p">;</span>
      <span class="n">free</span><span class="p">(</span><span class="n">v</span><span class="o">-&gt;</span><span class="n">array</span><span class="p">[</span><span class="n">idx</span><span class="p">]);</span>
      <span class="n">v</span><span class="o">-&gt;</span><span class="n">array</span><span class="p">[</span><span class="n">idx</span><span class="p">]</span> <span class="o">=</span> <span class="n">v</span><span class="o">-&gt;</span><span class="n">array</span><span class="p">[</span><span class="o">--</span><span class="n">v</span><span class="o">-&gt;</span><span class="n">used</span><span class="p">];</span>
      <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>

<span class="cp">#ifdef _DEBUGGING
</span><span class="kt">void</span> <span class="nf">print_vector</span><span class="p">(</span><span class="n">vector</span> <span class="o">*</span><span class="n">v</span><span class="p">)</span>
<span class="p">{</span>
      <span class="n">printf</span><span class="p">(</span><span class="s">"</span><span class="se">\n</span><span class="s">SIZE=%d</span><span class="se">\t</span><span class="s">USED=%d</span><span class="se">\n</span><span class="s">=============="</span><span class="p">,</span><span class="n">v</span><span class="o">-&gt;</span><span class="n">size</span><span class="p">,</span><span class="n">v</span><span class="o">-&gt;</span><span class="n">used</span><span class="p">);</span>
      <span class="kt">int</span> <span class="n">i</span><span class="p">;</span>
      <span class="k">for</span> <span class="p">(</span><span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="n">iused</span><span class="p">;</span><span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="n">printf</span><span class="p">(</span><span class="s">"</span><span class="se">\n</span><span class="s">[%d]</span><span class="se">\t</span><span class="s">%d"</span><span class="p">,</span><span class="n">i</span><span class="p">,</span><span class="o">*</span><span class="p">(</span><span class="kt">int</span><span class="o">*</span><span class="p">)</span><span class="n">v</span><span class="o">-&gt;</span><span class="n">array</span><span class="p">[</span><span class="n">i</span><span class="p">]);</span>
<span class="p">}</span>

<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
<span class="p">{</span>
      <span class="n">vector</span><span class="o">*</span> <span class="n">v</span> <span class="o">=</span> <span class="n">new_vector</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="kt">int</span><span class="p">),</span> <span class="n">compare_integer</span><span class="p">);</span>
      <span class="k">static</span> <span class="kt">int</span> <span class="n">y</span><span class="p">[]</span> <span class="o">=</span> <span class="p">{</span><span class="mi">10</span><span class="p">,</span><span class="mi">31</span><span class="p">,</span><span class="mi">99</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">7</span><span class="p">,</span><span class="mi">89</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">};</span>
      <span class="n">add_all</span><span class="p">(</span><span class="n">v</span><span class="p">,</span> <span class="p">(</span><span class="kt">void</span><span class="o">**</span><span class="p">)</span> <span class="n">y</span><span class="p">,</span> <span class="mi">8</span><span class="p">);</span>
      <span class="n">delete</span><span class="p">(</span><span class="n">v</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">y</span><span class="p">[</span><span class="mi">0</span><span class="p">]);</span>
      <span class="n">print_vector</span><span class="p">(</span><span class="n">v</span><span class="p">);</span>

      <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
<span class="cp">#endif
</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;&lt;/</span><span class="n">div</span><span class="o">&gt;</span></code></pre></div>
;
T;U;[0I" J<!DOCTYPE html><html lang="en"><head>
    <meta charset="utf-8">
    <title>A Developer's Notebook - Vector</title>
    <link rel="stylesheet" href="https://unpkg.com/purecss@1.0.1/build/pure-min.css" integrity="sha384-oAOxQR6DkCoMliIh8yFnu25d7Eq/PHS21PClpwjOTeU2jRSq11vu66rf90/cZr47" crossorigin="anonymous">
    <link rel="stylesheet" href="../../assets/stylesheet.css">
    <link rel="stylesheet" href="../../assets/highlight.css">

    <!-- you don't need to keep this, but it's cool for stats! -->
    <meta name="generator" content="Nanoc 4.11.9">
  </head>
  <body>
    <div id="layout">
      <div class="header">
        <h1>
          <a href="../../">A Developer's Notebook</a>
        </h1>
      </div>


      <div class="content">
        <nav class="pure-g">
          <div class="pure-u-2-3 links">
            <a href="../../index.html">Home</a> ¬∑
            <a href="../../tags.html">Tags</a> ¬∑
            <a href="../../years.html">Years</a> ¬∑
            <a href="../../about.html">About</a>
          </div>

          <div class="pure-u-1-3">
            <div class="contact">
              <span>
                <a href="https://github.com/lbrito1" download="">
                  <img src="../../assets/icons/github.svg" alt="Github icon">
                  </a>
              </span>
              <span>
                <a href="https://www.linkedin.com/in/leonardo-mendes-brito/">
                <img src="../../assets/icons/linkedin.svg" alt="LinkedIn icon">
                </a>
              </span>
            </div>
          </div>
        </nav>
        
  <div class="post-show">
    <h1>Vector</h1>
    <article class="text">
      <p>Very simple Vector implementation with add, add_all, get and delete operations using arrays of void pointers.</p>

<p>The downside to this as compared to simply using an array is that here we have an <em>array of pointers</em>, which means the data will most likely be scattered over the memory, not coalesced.</p>

<!-- more -->

<div class="highlight"><pre><code class="language-c"><span class="cm">/*
    File: vector.c

    Copyright (c) 2014 Leonardo Brito &lt;lbrito@gmail.com&gt;

    This software is free software; you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation; either version 2 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License along
    with this program; if not, write the Free Software Foundation, Inc., 51
    Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
*/</span>

<span class="cp">#include 
#include 
#include "comparators.c"
</span>
<span class="k">typedef</span> <span class="k">struct</span>
<span class="p">{</span>
      <span class="kt">void</span><span class="o">**</span> <span class="n">array</span><span class="p">;</span>
      <span class="kt">size_t</span> <span class="n">type_size</span><span class="p">;</span>
      <span class="kt">unsigned</span> <span class="n">size</span><span class="p">;</span>
      <span class="kt">unsigned</span> <span class="n">used</span><span class="p">;</span>
      <span class="kt">int</span> <span class="p">(</span><span class="o">*</span><span class="n">cmp</span><span class="p">)</span> <span class="p">(</span><span class="kt">void</span><span class="o">*</span><span class="p">,</span> <span class="kt">void</span><span class="o">*</span><span class="p">);</span>
<span class="p">}</span> <span class="n">vector</span><span class="p">;</span>

<span class="cm">/**
 *  @brief Creates a new vector
 *
 *  @param [in] s          initial array size
 *  @param [in] ts         type size
 *  @param [in] comparator comparator function
 *  @return pointer to created vector
 */</span>
<span class="n">vector</span><span class="o">*</span> <span class="nf">new_vector</span><span class="p">(</span><span class="kt">unsigned</span> <span class="n">s</span><span class="p">,</span> <span class="kt">size_t</span> <span class="n">ts</span><span class="p">,</span> <span class="kt">int</span> <span class="p">(</span><span class="o">*</span><span class="n">comparator</span><span class="p">)</span> <span class="p">(</span><span class="kt">void</span><span class="o">*</span><span class="p">,</span> <span class="kt">void</span><span class="o">*</span><span class="p">))</span>
<span class="p">{</span>
      <span class="n">vector</span><span class="o">*</span> <span class="n">v</span> <span class="o">=</span> <span class="n">malloc</span><span class="p">(</span><span class="k">sizeof</span><span class="p">(</span><span class="n">vector</span><span class="p">));</span>
      <span class="n">v</span><span class="o">-&gt;</span><span class="n">used</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
      <span class="n">v</span><span class="o">-&gt;</span><span class="n">size</span> <span class="o">=</span> <span class="n">s</span><span class="p">;</span>
      <span class="n">v</span><span class="o">-&gt;</span><span class="n">type_size</span> <span class="o">=</span> <span class="n">ts</span><span class="p">;</span>
      <span class="n">v</span><span class="o">-&gt;</span><span class="n">cmp</span> <span class="o">=</span> <span class="n">comparator</span><span class="p">;</span>
      <span class="n">v</span><span class="o">-&gt;</span><span class="n">array</span> <span class="o">=</span> <span class="n">malloc</span><span class="p">(</span><span class="k">sizeof</span><span class="p">(</span><span class="kt">void</span><span class="o">*</span><span class="p">)</span><span class="o">*</span><span class="n">v</span><span class="o">-&gt;</span><span class="n">size</span><span class="p">);</span>

      <span class="k">return</span> <span class="n">v</span><span class="p">;</span>
<span class="p">}</span>

<span class="cm">/**
 *  @brief Doubles the vector size if necessary
 *
 *  @param [in] v      vector
 *  @param [in] length expected increase
 *  @return success(0) or failure(1)
 */</span>
<span class="kt">int</span> <span class="nf">grow</span><span class="p">(</span><span class="n">vector</span><span class="o">*</span> <span class="n">v</span><span class="p">,</span> <span class="kt">int</span> <span class="n">length</span><span class="p">)</span>
<span class="p">{</span>
      <span class="kt">int</span> <span class="n">ttlsize</span> <span class="o">=</span> <span class="n">v</span><span class="o">-&gt;</span><span class="n">used</span> <span class="o">+</span> <span class="n">length</span><span class="p">;</span>
      <span class="kt">int</span> <span class="n">available</span> <span class="o">=</span> <span class="n">v</span><span class="o">-&gt;</span><span class="n">size</span><span class="p">;</span>
      <span class="k">if</span> <span class="p">(</span><span class="n">ttlsize</span> <span class="o">&gt;</span> <span class="n">available</span><span class="p">)</span>
      <span class="p">{</span>
            <span class="k">while</span> <span class="p">(</span> <span class="p">(</span><span class="n">available</span> <span class="o">*=</span> <span class="mi">2</span><span class="p">)</span> <span class="o">&lt;</span> <span class="n">ttlsize</span><span class="p">);</span>
            <span class="kt">void</span><span class="o">**</span> <span class="n">buf</span> <span class="o">=</span> <span class="p">(</span><span class="kt">void</span><span class="o">**</span><span class="p">)</span> <span class="n">realloc</span><span class="p">(</span><span class="n">v</span><span class="o">-&gt;</span><span class="n">array</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="kt">void</span><span class="o">*</span><span class="p">)</span><span class="o">*</span><span class="n">available</span><span class="p">);</span>
            <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">buf</span><span class="p">)</span> <span class="k">return</span> <span class="mi">1</span><span class="p">;</span>
            <span class="n">v</span><span class="o">-&gt;</span><span class="n">size</span> <span class="o">=</span> <span class="n">available</span><span class="p">;</span>
            <span class="n">v</span><span class="o">-&gt;</span><span class="n">array</span> <span class="o">=</span> <span class="n">buf</span><span class="p">;</span>
      <span class="p">}</span>
      <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>

<span class="cm">/**
 *  @brief Add a single element to the vector
 *
 *  @param [in] v    vector
 *  @param [in] data
 *  @return success(0) or failure(1)
 */</span>
<span class="kt">int</span> <span class="nf">add</span><span class="p">(</span><span class="n">vector</span><span class="o">*</span> <span class="n">v</span><span class="p">,</span> <span class="kt">void</span><span class="o">*</span> <span class="n">data</span><span class="p">)</span>
<span class="p">{</span>
      <span class="k">if</span> <span class="p">(</span><span class="n">grow</span><span class="p">(</span><span class="n">v</span><span class="p">,</span><span class="mi">1</span><span class="p">)</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">)</span> <span class="k">return</span> <span class="mi">1</span><span class="p">;</span>
      <span class="n">v</span><span class="o">-&gt;</span><span class="n">array</span><span class="p">[</span><span class="n">v</span><span class="o">-&gt;</span><span class="n">used</span><span class="o">++</span><span class="p">]</span> <span class="o">=</span> <span class="n">data</span><span class="p">;</span>
      <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>

<span class="cm">/**
 *  @brief Adds an entire array to the vector
 *
 *  @param [in] v
 *  @param [in] data   data array
 *  @param [in] length length of the data array
 *  @return success(0) or failure(1)
 */</span>
<span class="kt">void</span> <span class="nf">add_all</span><span class="p">(</span><span class="n">vector</span><span class="o">*</span> <span class="n">v</span><span class="p">,</span> <span class="kt">void</span><span class="o">**</span> <span class="n">data</span><span class="p">,</span> <span class="kt">int</span> <span class="n">length</span><span class="p">)</span>
<span class="p">{</span>
     <span class="n">grow</span><span class="p">(</span><span class="n">v</span><span class="p">,</span> <span class="n">length</span><span class="p">);</span>
     <span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span>
     <span class="k">while</span> <span class="p">(</span><span class="n">i</span><span class="o">&lt;</span><span class="n">length</span><span class="p">)</span> <span class="n">v</span><span class="o">-&gt;</span><span class="n">array</span><span class="p">[</span><span class="n">v</span><span class="o">-&gt;</span><span class="n">used</span><span class="o">++</span><span class="p">]</span> <span class="o">=</span> <span class="o">&amp;</span><span class="p">(</span><span class="n">data</span><span class="p">[</span><span class="n">i</span><span class="o">++</span><span class="p">]);</span>
<span class="p">}</span>

<span class="cm">/**
 *  @brief Get data
 *
 *  @param [in] v
 *  @param [in] data
 *  @return index to searched data (-1 for failure)
 */</span>
<span class="kt">int</span> <span class="nf">get</span><span class="p">(</span><span class="n">vector</span><span class="o">*</span> <span class="n">v</span><span class="p">,</span> <span class="kt">void</span><span class="o">*</span> <span class="n">data</span><span class="p">)</span>
<span class="p">{</span>
      <span class="k">if</span> <span class="p">(</span><span class="n">v</span><span class="o">-&gt;</span><span class="n">used</span><span class="o">==</span><span class="mi">0</span><span class="p">)</span> <span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
      <span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span>
      <span class="k">do</span> <span class="p">{</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">v</span><span class="o">-&gt;</span><span class="n">cmp</span><span class="p">(</span><span class="n">data</span><span class="p">,</span> <span class="n">v</span><span class="o">-&gt;</span><span class="n">array</span><span class="p">[</span><span class="n">i</span><span class="p">])</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="k">return</span> <span class="n">i</span><span class="p">;</span>
      <span class="p">}</span> <span class="k">while</span> <span class="p">(</span><span class="o">++</span><span class="n">iused</span><span class="p">);</span>
      <span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
<span class="p">}</span>

<span class="cm">/**
 *  @brief Delete data from vector
 *
 *  @param [in] v
 *  @param [in] data
 *  @return success(0) or failure(1)
 */</span>
<span class="kt">int</span> <span class="nf">delete</span><span class="p">(</span><span class="n">vector</span><span class="o">*</span> <span class="n">v</span><span class="p">,</span> <span class="kt">void</span><span class="o">*</span> <span class="n">data</span><span class="p">)</span>
<span class="p">{</span>
      <span class="kt">int</span> <span class="n">idx</span> <span class="o">=</span> <span class="n">get</span><span class="p">(</span><span class="n">v</span><span class="p">,</span> <span class="n">data</span><span class="p">);</span>
      <span class="k">if</span> <span class="p">(</span><span class="n">idx</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">)</span> <span class="k">return</span> <span class="n">idx</span><span class="p">;</span>
      <span class="n">free</span><span class="p">(</span><span class="n">v</span><span class="o">-&gt;</span><span class="n">array</span><span class="p">[</span><span class="n">idx</span><span class="p">]);</span>
      <span class="n">v</span><span class="o">-&gt;</span><span class="n">array</span><span class="p">[</span><span class="n">idx</span><span class="p">]</span> <span class="o">=</span> <span class="n">v</span><span class="o">-&gt;</span><span class="n">array</span><span class="p">[</span><span class="o">--</span><span class="n">v</span><span class="o">-&gt;</span><span class="n">used</span><span class="p">];</span>
      <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>

<span class="cp">#ifdef _DEBUGGING
</span><span class="kt">void</span> <span class="nf">print_vector</span><span class="p">(</span><span class="n">vector</span> <span class="o">*</span><span class="n">v</span><span class="p">)</span>
<span class="p">{</span>
      <span class="n">printf</span><span class="p">(</span><span class="s">"</span><span class="se">\n</span><span class="s">SIZE=%d</span><span class="se">\t</span><span class="s">USED=%d</span><span class="se">\n</span><span class="s">=============="</span><span class="p">,</span><span class="n">v</span><span class="o">-&gt;</span><span class="n">size</span><span class="p">,</span><span class="n">v</span><span class="o">-&gt;</span><span class="n">used</span><span class="p">);</span>
      <span class="kt">int</span> <span class="n">i</span><span class="p">;</span>
      <span class="k">for</span> <span class="p">(</span><span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="n">iused</span><span class="p">;</span><span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="n">printf</span><span class="p">(</span><span class="s">"</span><span class="se">\n</span><span class="s">[%d]</span><span class="se">\t</span><span class="s">%d"</span><span class="p">,</span><span class="n">i</span><span class="p">,</span><span class="o">*</span><span class="p">(</span><span class="kt">int</span><span class="o">*</span><span class="p">)</span><span class="n">v</span><span class="o">-&gt;</span><span class="n">array</span><span class="p">[</span><span class="n">i</span><span class="p">]);</span>
<span class="p">}</span>

<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
<span class="p">{</span>
      <span class="n">vector</span><span class="o">*</span> <span class="n">v</span> <span class="o">=</span> <span class="n">new_vector</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="kt">int</span><span class="p">),</span> <span class="n">compare_integer</span><span class="p">);</span>
      <span class="k">static</span> <span class="kt">int</span> <span class="n">y</span><span class="p">[]</span> <span class="o">=</span> <span class="p">{</span><span class="mi">10</span><span class="p">,</span><span class="mi">31</span><span class="p">,</span><span class="mi">99</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">7</span><span class="p">,</span><span class="mi">89</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">};</span>
      <span class="n">add_all</span><span class="p">(</span><span class="n">v</span><span class="p">,</span> <span class="p">(</span><span class="kt">void</span><span class="o">**</span><span class="p">)</span> <span class="n">y</span><span class="p">,</span> <span class="mi">8</span><span class="p">);</span>
      <span class="n">delete</span><span class="p">(</span><span class="n">v</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">y</span><span class="p">[</span><span class="mi">0</span><span class="p">]);</span>
      <span class="n">print_vector</span><span class="p">(</span><span class="n">v</span><span class="p">);</span>

      <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
<span class="cp">#endif
</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;&lt;/</span><span class="n">div</span><span class="o">&gt;</span></code></pre></div>

    </article>
    <aside>Posted at: Feb 21, 2014</aside>
    <div class="post-footer">
      <a href="../../index.html">Back</a>
    </div>
  </div>

        <div class="footer">
          2020 Leonardo Brito
        </div>
      </div>

    </div>
  


</body></html>;
T;@%;@%o;;;;	I"&/posts/2014-03-31-trees-part-i.md;
T{;{
;U;[I"H/home/carol/workspace/blog/content/posts/2014-03-31-trees-part-i.md;
TI"U[![tree](/assets/images/codedeposit/2014/03/tree1.jpg)](/assets/images/codedeposit/2014/03/tree1.jpg)

[![Bright green tree - Waikato](//upload.wikimedia.org/wikipedia/commons/thumb/f/f6/Bright_green_tree_-_Waikato.jpg/512px-Bright_green_tree_-_Waikato.jpg)](http://commons.wikimedia.org/wiki/File%3ABright_green_tree_-_Waikato.jpg)

We used trees to build the [heap data structure]({% link _posts/2014-03-21-heap-priority-queues.markdown %}) before, but we didn't bother with the theory behind trees, which are abstract and concrete data structures themselves. There's a huge range of material to cover so I'll split this in several posts.

In this first post we'll cover the basic theory and implement a binary search tree (BST), which provides `O(h)` time search, insert and delete operations (`h` is the tree height). First, the basics:

Trees are graphs with a few extra properties and interpretations/conventions.
* Trees have height (longest branch length) and depth (distance to root).
* The uppermost level consists of at most one node (the tree root).
* All nodes may have children.
* There are no edges other than parent-child edges.

Trees are classified according to some¬†of those properties above and some others we'll mention later. Most commonly, there is a constraint to the maximum number of children per node -e.g. the binary tree limits children to 2 per node.
<!-- more -->
To build a BST, we're going to need a working binary tree (BT) first. There are several ways to implement a BT. I chose a linked data structure:

<div class="highlight"><pre><code class="language-c">
typedef struct node
{
      void* data;
      struct node* parent;
      struct node* left_child;
      struct node* right_child;
} node;

typedef struct
{
      node* root;
      int order;
      int (*cmp) (void*, void*);
} binary_tree;
</code></pre></div>

Together with their respective memory allocation functions (which I'll omit for now), those two structs are enough to define a BT. Before we get into actually filling a tree with stuff, let's assume we have a tree and take a look at tree traversal.

Traversing a tree means visiting all the nodes in the tree data structure. Whilst linear data structures (arrays, linked lists etc) have a default traversal order, trees do not. The traversal methods are classified according to the specific order in which the nodes are visited. Specifically, we are interested in breadth-first and depth-first traversals.

Depth-first searches (DFS) start at the (sub)tree root and "sinks" down until it reaches a leaf. Breadth-first searches (BFS) start at the root and exhaust all of its children before descending any further. Visiting in DFS can be done **pre-order**, **in-order** or **post-order**. The "order" refers to the specific time when we visit the root: before, after or in between visiting the sibling(s).

<div class="highlight"><pre><code class="language-c">

void dfs(node* n, void (*visit) (node*), int v_order)
{
      if (n!=NULL)
      {
            if (v_order == PRE_ORDER) visit(n);

            dfs(n->left_child, visit, v_order);

            if (v_order == IN_ORDER) visit(n);

            dfs(n->right_child, visit, v_order);

            if(v_order == POST_ORDER) visit(n);
      }
}
</code></pre></div>

Now let's take a look at binary search trees (BST). BSTs are binary trees with the following additional condition:

"Let `x` be a tree.¬†If `y` is a node in the left subtree of `x`, then `key[y] <= key[x]`.¬†If `y` is a node in the right subtree of `x`, then `key[y] >= key[x]`."

In other words, for every¬†node in a BST (with unique elements), all values to the left are smaller and all values to the right are bigger than it. Note that this may appear¬†similar to the heap property but is not the same at all: unlike with the heap, BST siblings and cousins are ordered in a specific way.

To preserve the BST property, we need to insert stuff in a specific order:

<div class="highlight"><pre><code class="language-c">

/**
 *  @brief Insertion
 *
 *  Starting from the root, we dive down through
 *  the children until we reach the node whose
 *  value is closest to the value of the node we
 *  want to insert.
 *
 *  @param [in] bt
 *  @param [in] n
 *  @return Return_Description
 */
void tree_insert(binary_tree* bt, node* n)
{
      node* cur = bt->root;
      node* prev = NULL;
      int goes_to = -1;

      while(cur!=NULL)
      {
            prev = cur;
            if ( (bt->order == ORD_ASC)
                  ? bt->cmp(cur->data, n->data) < 0
                  : bt->cmp(cur->data, n->data) > 0 )
            {
                  cur = cur->left_child;
                  goes_to = LEFT;
            }
            else
            {
                  cur = cur->right_child;
                  goes_to = RIGHT;
            }
      }

      if (prev != NULL)
      {
            n->parent = prev;
            if (goes_to == LEFT)          set_child(prev, n, LEFT);
            else if (goes_to == RIGHT)    set_child(prev, n, RIGHT);
            DBG("Node (#%d) inserted\n",*(int*)n->data);
      }
      else  // tree is empty, insert @ root
      {
            DBG("Node (#%d) set as ROOT\n",*(int*)n->data);
            bt->root = n;
      }
}
</code></pre></div>

Starting at the root, we float down - moving left and right - until we reach the correct position for the node we're inserting, always keeping track of the current node's parent so it can be updated accordingly.

Together with a in-order DFS traversal, we can already do something useful with our BST tree: ordering a random set of values (integers in our case).

<div class="highlight"><pre><code class="language-c">
void depth_first(binary_tree* bt, void (*visit) (node*), int v_order)
{
      DBG("\nSTARTED DFS\n\n");
      dfs(bt->root, visit, v_order);
}

#ifdef _DEBUG
int main()
{
      binary_tree* bt = new_binary_tree(compare_integer, ORD_ASC);

      int ts = 10;

      srand(time(NULL));
      int i;

      for(i=0;i<ts;i++)
      {
            int* data = malloc(sizeof(int));
            *data = rand()%(ts*10);
            node* n = new_node((void*) data);
            tree_insert(bt, n);
      }

      depth_first(bt, visit, IN_ORDER);
}
#endif
</code></pre></div>

Here's a sample output:

<div class="highlight"><pre><code class="language-bash">
C:\code\c\cstuff\data_structures>bt
New node (#46)
Node (#46) set as ROOT
New node (#14)
Node (#14) inserted
New node (#85)
Node (#85) inserted
New node (#43)
Node (#43) inserted
New node (#63)
Node (#63) inserted
New node (#55)
Node (#55) inserted
New node (#91)
Node (#91) inserted
New node (#60)
Node (#60) inserted
New node (#72)
Node (#72) inserted
New node (#8)
Node (#8) inserted

STARTED DFS

Visited node #8
Visited node #14
Visited node #43
Visited node #46
Visited node #55
Visited node #60
Visited node #63
Visited node #72
Visited node #85
Visited node #91
</code></pre></div>

Several other operations commented with concise explanations and printable tests can be found at [data_structures/binary_search_tree.c](https://github.com/lbrito1/cstuff/blob/master/data_structures/binary_search_tree.c) in the blog's Github.

Next post we'll (probably!) cover the AVL tree, which is another kind of binary search tree.
;
T;U;[0I"„K<p><a href="/assets/images/codedeposit/2014/03/tree1.jpg"><img src="/assets/images/codedeposit/2014/03/tree1.jpg" alt="tree"></a></p>

<p><a href="http://commons.wikimedia.org/wiki/File%3ABright_green_tree_-_Waikato.jpg"><img src="//upload.wikimedia.org/wikipedia/commons/thumb/f/f6/Bright_green_tree_-_Waikato.jpg/512px-Bright_green_tree_-_Waikato.jpg" alt="Bright green tree - Waikato"></a></p>

<p>We used trees to build the <a href="%7B%%20link%20_posts/2014-03-21-heap-priority-queues.markdown%20%%7D">heap data structure</a> before, but we didn‚Äôt bother with the theory behind trees, which are abstract and concrete data structures themselves. There‚Äôs a huge range of material to cover so I‚Äôll split this in several posts.</p>

<p>In this first post we‚Äôll cover the basic theory and implement a binary search tree (BST), which provides <code>O(h)</code> time search, insert and delete operations (<code>h</code> is the tree height). First, the basics:</p>

<p>Trees are graphs with a few extra properties and interpretations/conventions.
* Trees have height (longest branch length) and depth (distance to root).
* The uppermost level consists of at most one node (the tree root).
* All nodes may have children.
* There are no edges other than parent-child edges.</p>

<p>Trees are classified according to some¬†of those properties above and some others we‚Äôll mention later. Most commonly, there is a constraint to the maximum number of children per node -e.g. the binary tree limits children to 2 per node.
<!-- more -->
To build a BST, we‚Äôre going to need a working binary tree (BT) first. There are several ways to implement a BT. I chose a linked data structure:</p>

<div class="highlight"><pre><code class="language-c"><span class="k">typedef</span> <span class="k">struct</span> <span class="n">node</span>
<span class="p">{</span>
      <span class="kt">void</span><span class="o">*</span> <span class="n">data</span><span class="p">;</span>
      <span class="k">struct</span> <span class="n">node</span><span class="o">*</span> <span class="n">parent</span><span class="p">;</span>
      <span class="k">struct</span> <span class="n">node</span><span class="o">*</span> <span class="n">left_child</span><span class="p">;</span>
      <span class="k">struct</span> <span class="n">node</span><span class="o">*</span> <span class="n">right_child</span><span class="p">;</span>
<span class="p">}</span> <span class="n">node</span><span class="p">;</span>

<span class="k">typedef</span> <span class="k">struct</span>
<span class="p">{</span>
      <span class="n">node</span><span class="o">*</span> <span class="n">root</span><span class="p">;</span>
      <span class="kt">int</span> <span class="n">order</span><span class="p">;</span>
      <span class="kt">int</span> <span class="p">(</span><span class="o">*</span><span class="n">cmp</span><span class="p">)</span> <span class="p">(</span><span class="kt">void</span><span class="o">*</span><span class="p">,</span> <span class="kt">void</span><span class="o">*</span><span class="p">);</span>
<span class="p">}</span> <span class="n">binary_tree</span><span class="p">;</span></code></pre></div>

<p>Together with their respective memory allocation functions (which I‚Äôll omit for now), those two structs are enough to define a BT. Before we get into actually filling a tree with stuff, let‚Äôs assume we have a tree and take a look at tree traversal.</p>

<p>Traversing a tree means visiting all the nodes in the tree data structure. Whilst linear data structures (arrays, linked lists etc) have a default traversal order, trees do not. The traversal methods are classified according to the specific order in which the nodes are visited. Specifically, we are interested in breadth-first and depth-first traversals.</p>

<p>Depth-first searches (DFS) start at the (sub)tree root and ‚Äúsinks‚Äù down until it reaches a leaf. Breadth-first searches (BFS) start at the root and exhaust all of its children before descending any further. Visiting in DFS can be done <strong>pre-order</strong>, <strong>in-order</strong> or <strong>post-order</strong>. The ‚Äúorder‚Äù refers to the specific time when we visit the root: before, after or in between visiting the sibling(s).</p>

<div class="highlight"><pre><code class="language-c"><span class="kt">void</span> <span class="nf">dfs</span><span class="p">(</span><span class="n">node</span><span class="o">*</span> <span class="n">n</span><span class="p">,</span> <span class="kt">void</span> <span class="p">(</span><span class="o">*</span><span class="n">visit</span><span class="p">)</span> <span class="p">(</span><span class="n">node</span><span class="o">*</span><span class="p">),</span> <span class="kt">int</span> <span class="n">v_order</span><span class="p">)</span>
<span class="p">{</span>
      <span class="k">if</span> <span class="p">(</span><span class="n">n</span><span class="o">!=</span><span class="nb">NULL</span><span class="p">)</span>
      <span class="p">{</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">v_order</span> <span class="o">==</span> <span class="n">PRE_ORDER</span><span class="p">)</span> <span class="n">visit</span><span class="p">(</span><span class="n">n</span><span class="p">);</span>

            <span class="n">dfs</span><span class="p">(</span><span class="n">n</span><span class="o">-&gt;</span><span class="n">left_child</span><span class="p">,</span> <span class="n">visit</span><span class="p">,</span> <span class="n">v_order</span><span class="p">);</span>

            <span class="k">if</span> <span class="p">(</span><span class="n">v_order</span> <span class="o">==</span> <span class="n">IN_ORDER</span><span class="p">)</span> <span class="n">visit</span><span class="p">(</span><span class="n">n</span><span class="p">);</span>

            <span class="n">dfs</span><span class="p">(</span><span class="n">n</span><span class="o">-&gt;</span><span class="n">right_child</span><span class="p">,</span> <span class="n">visit</span><span class="p">,</span> <span class="n">v_order</span><span class="p">);</span>

            <span class="k">if</span><span class="p">(</span><span class="n">v_order</span> <span class="o">==</span> <span class="n">POST_ORDER</span><span class="p">)</span> <span class="n">visit</span><span class="p">(</span><span class="n">n</span><span class="p">);</span>
      <span class="p">}</span>
<span class="p">}</span></code></pre></div>

<p>Now let‚Äôs take a look at binary search trees (BST). BSTs are binary trees with the following additional condition:</p>

<p>‚ÄúLet <code>x</code> be a tree.¬†If <code>y</code> is a node in the left subtree of <code>x</code>, then <code>key[y] &lt;= key[x]</code>.¬†If <code>y</code> is a node in the right subtree of <code>x</code>, then <code>key[y] &gt;= key[x]</code>.‚Äù</p>

<p>In other words, for every¬†node in a BST (with unique elements), all values to the left are smaller and all values to the right are bigger than it. Note that this may appear¬†similar to the heap property but is not the same at all: unlike with the heap, BST siblings and cousins are ordered in a specific way.</p>

<p>To preserve the BST property, we need to insert stuff in a specific order:</p>

<div class="highlight"><pre><code class="language-c"><span class="cm">/**
 *  @brief Insertion
 *
 *  Starting from the root, we dive down through
 *  the children until we reach the node whose
 *  value is closest to the value of the node we
 *  want to insert.
 *
 *  @param [in] bt
 *  @param [in] n
 *  @return Return_Description
 */</span>
<span class="kt">void</span> <span class="nf">tree_insert</span><span class="p">(</span><span class="n">binary_tree</span><span class="o">*</span> <span class="n">bt</span><span class="p">,</span> <span class="n">node</span><span class="o">*</span> <span class="n">n</span><span class="p">)</span>
<span class="p">{</span>
      <span class="n">node</span><span class="o">*</span> <span class="n">cur</span> <span class="o">=</span> <span class="n">bt</span><span class="o">-&gt;</span><span class="n">root</span><span class="p">;</span>
      <span class="n">node</span><span class="o">*</span> <span class="n">prev</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
      <span class="kt">int</span> <span class="n">goes_to</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>

      <span class="k">while</span><span class="p">(</span><span class="n">cur</span><span class="o">!=</span><span class="nb">NULL</span><span class="p">)</span>
      <span class="p">{</span>
            <span class="n">prev</span> <span class="o">=</span> <span class="n">cur</span><span class="p">;</span>
            <span class="k">if</span> <span class="p">(</span> <span class="p">(</span><span class="n">bt</span><span class="o">-&gt;</span><span class="n">order</span> <span class="o">==</span> <span class="n">ORD_ASC</span><span class="p">)</span>
                  <span class="o">?</span> <span class="n">bt</span><span class="o">-&gt;</span><span class="n">cmp</span><span class="p">(</span><span class="n">cur</span><span class="o">-&gt;</span><span class="n">data</span><span class="p">,</span> <span class="n">n</span><span class="o">-&gt;</span><span class="n">data</span><span class="p">)</span> <span class="o">&lt;</span> <span class="mi">0</span>
                  <span class="o">:</span> <span class="n">bt</span><span class="o">-&gt;</span><span class="n">cmp</span><span class="p">(</span><span class="n">cur</span><span class="o">-&gt;</span><span class="n">data</span><span class="p">,</span> <span class="n">n</span><span class="o">-&gt;</span><span class="n">data</span><span class="p">)</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="p">)</span>
            <span class="p">{</span>
                  <span class="n">cur</span> <span class="o">=</span> <span class="n">cur</span><span class="o">-&gt;</span><span class="n">left_child</span><span class="p">;</span>
                  <span class="n">goes_to</span> <span class="o">=</span> <span class="n">LEFT</span><span class="p">;</span>
            <span class="p">}</span>
            <span class="k">else</span>
            <span class="p">{</span>
                  <span class="n">cur</span> <span class="o">=</span> <span class="n">cur</span><span class="o">-&gt;</span><span class="n">right_child</span><span class="p">;</span>
                  <span class="n">goes_to</span> <span class="o">=</span> <span class="n">RIGHT</span><span class="p">;</span>
            <span class="p">}</span>
      <span class="p">}</span>

      <span class="k">if</span> <span class="p">(</span><span class="n">prev</span> <span class="o">!=</span> <span class="nb">NULL</span><span class="p">)</span>
      <span class="p">{</span>
            <span class="n">n</span><span class="o">-&gt;</span><span class="n">parent</span> <span class="o">=</span> <span class="n">prev</span><span class="p">;</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">goes_to</span> <span class="o">==</span> <span class="n">LEFT</span><span class="p">)</span>          <span class="n">set_child</span><span class="p">(</span><span class="n">prev</span><span class="p">,</span> <span class="n">n</span><span class="p">,</span> <span class="n">LEFT</span><span class="p">);</span>
            <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">goes_to</span> <span class="o">==</span> <span class="n">RIGHT</span><span class="p">)</span>    <span class="n">set_child</span><span class="p">(</span><span class="n">prev</span><span class="p">,</span> <span class="n">n</span><span class="p">,</span> <span class="n">RIGHT</span><span class="p">);</span>
            <span class="n">DBG</span><span class="p">(</span><span class="s">"Node (#%d) inserted</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span><span class="o">*</span><span class="p">(</span><span class="kt">int</span><span class="o">*</span><span class="p">)</span><span class="n">n</span><span class="o">-&gt;</span><span class="n">data</span><span class="p">);</span>
      <span class="p">}</span>
      <span class="k">else</span>  <span class="c1">// tree is empty, insert @ root</span>
      <span class="p">{</span>
            <span class="n">DBG</span><span class="p">(</span><span class="s">"Node (#%d) set as ROOT</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span><span class="o">*</span><span class="p">(</span><span class="kt">int</span><span class="o">*</span><span class="p">)</span><span class="n">n</span><span class="o">-&gt;</span><span class="n">data</span><span class="p">);</span>
            <span class="n">bt</span><span class="o">-&gt;</span><span class="n">root</span> <span class="o">=</span> <span class="n">n</span><span class="p">;</span>
      <span class="p">}</span>
<span class="p">}</span></code></pre></div>

<p>Starting at the root, we float down - moving left and right - until we reach the correct position for the node we‚Äôre inserting, always keeping track of the current node‚Äôs parent so it can be updated accordingly.</p>

<p>Together with a in-order DFS traversal, we can already do something useful with our BST tree: ordering a random set of values (integers in our case).</p>

<div class="highlight"><pre><code class="language-c"><span class="kt">void</span> <span class="nf">depth_first</span><span class="p">(</span><span class="n">binary_tree</span><span class="o">*</span> <span class="n">bt</span><span class="p">,</span> <span class="kt">void</span> <span class="p">(</span><span class="o">*</span><span class="n">visit</span><span class="p">)</span> <span class="p">(</span><span class="n">node</span><span class="o">*</span><span class="p">),</span> <span class="kt">int</span> <span class="n">v_order</span><span class="p">)</span>
<span class="p">{</span>
      <span class="n">DBG</span><span class="p">(</span><span class="s">"</span><span class="se">\n</span><span class="s">STARTED DFS</span><span class="se">\n\n</span><span class="s">"</span><span class="p">);</span>
      <span class="n">dfs</span><span class="p">(</span><span class="n">bt</span><span class="o">-&gt;</span><span class="n">root</span><span class="p">,</span> <span class="n">visit</span><span class="p">,</span> <span class="n">v_order</span><span class="p">);</span>
<span class="p">}</span>

<span class="cp">#ifdef _DEBUG
</span><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
<span class="p">{</span>
      <span class="n">binary_tree</span><span class="o">*</span> <span class="n">bt</span> <span class="o">=</span> <span class="n">new_binary_tree</span><span class="p">(</span><span class="n">compare_integer</span><span class="p">,</span> <span class="n">ORD_ASC</span><span class="p">);</span>

      <span class="kt">int</span> <span class="n">ts</span> <span class="o">=</span> <span class="mi">10</span><span class="p">;</span>

      <span class="n">srand</span><span class="p">(</span><span class="n">time</span><span class="p">(</span><span class="nb">NULL</span><span class="p">));</span>
      <span class="kt">int</span> <span class="n">i</span><span class="p">;</span>

      <span class="k">for</span><span class="p">(</span><span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">ts</span><span class="p">;</span><span class="n">i</span><span class="o">++</span><span class="p">)</span>
      <span class="p">{</span>
            <span class="kt">int</span><span class="o">*</span> <span class="n">data</span> <span class="o">=</span> <span class="n">malloc</span><span class="p">(</span><span class="k">sizeof</span><span class="p">(</span><span class="kt">int</span><span class="p">));</span>
            <span class="o">*</span><span class="n">data</span> <span class="o">=</span> <span class="n">rand</span><span class="p">()</span><span class="o">%</span><span class="p">(</span><span class="n">ts</span><span class="o">*</span><span class="mi">10</span><span class="p">);</span>
            <span class="n">node</span><span class="o">*</span> <span class="n">n</span> <span class="o">=</span> <span class="n">new_node</span><span class="p">((</span><span class="kt">void</span><span class="o">*</span><span class="p">)</span> <span class="n">data</span><span class="p">);</span>
            <span class="n">tree_insert</span><span class="p">(</span><span class="n">bt</span><span class="p">,</span> <span class="n">n</span><span class="p">);</span>
      <span class="p">}</span>

      <span class="n">depth_first</span><span class="p">(</span><span class="n">bt</span><span class="p">,</span> <span class="n">visit</span><span class="p">,</span> <span class="n">IN_ORDER</span><span class="p">);</span>
<span class="p">}</span>
<span class="cp">#endif</span></code></pre></div>

<p>Here‚Äôs a sample output:</p>

<div class="highlight"><pre><code class="language-bash">C:<span class="se">\c</span>ode<span class="se">\c\c</span>stuff<span class="se">\d</span>ata_structures&gt;bt
New node <span class="o">(</span><span class="c">#46)</span>
Node <span class="o">(</span><span class="c">#46) set as ROOT</span>
New node <span class="o">(</span><span class="c">#14)</span>
Node <span class="o">(</span><span class="c">#14) inserted</span>
New node <span class="o">(</span><span class="c">#85)</span>
Node <span class="o">(</span><span class="c">#85) inserted</span>
New node <span class="o">(</span><span class="c">#43)</span>
Node <span class="o">(</span><span class="c">#43) inserted</span>
New node <span class="o">(</span><span class="c">#63)</span>
Node <span class="o">(</span><span class="c">#63) inserted</span>
New node <span class="o">(</span><span class="c">#55)</span>
Node <span class="o">(</span><span class="c">#55) inserted</span>
New node <span class="o">(</span><span class="c">#91)</span>
Node <span class="o">(</span><span class="c">#91) inserted</span>
New node <span class="o">(</span><span class="c">#60)</span>
Node <span class="o">(</span><span class="c">#60) inserted</span>
New node <span class="o">(</span><span class="c">#72)</span>
Node <span class="o">(</span><span class="c">#72) inserted</span>
New node <span class="o">(</span><span class="c">#8)</span>
Node <span class="o">(</span><span class="c">#8) inserted</span>

STARTED DFS

Visited node <span class="c">#8</span>
Visited node <span class="c">#14</span>
Visited node <span class="c">#43</span>
Visited node <span class="c">#46</span>
Visited node <span class="c">#55</span>
Visited node <span class="c">#60</span>
Visited node <span class="c">#63</span>
Visited node <span class="c">#72</span>
Visited node <span class="c">#85</span>
Visited node <span class="c">#91</span></code></pre></div>

<p>Several other operations commented with concise explanations and printable tests can be found at <a href="https://github.com/lbrito1/cstuff/blob/master/data_structures/binary_search_tree.c">data_structures/binary_search_tree.c</a> in the blog‚Äôs Github.</p>

<p>Next post we‚Äôll (probably!) cover the AVL tree, which is another kind of binary search tree.</p>
;
T;U;[0I"´S<!DOCTYPE html><html lang="en"><head>
    <meta charset="utf-8">
    <title>A Developer's Notebook - Trees - Part I</title>
    <link rel="stylesheet" href="https://unpkg.com/purecss@1.0.1/build/pure-min.css" integrity="sha384-oAOxQR6DkCoMliIh8yFnu25d7Eq/PHS21PClpwjOTeU2jRSq11vu66rf90/cZr47" crossorigin="anonymous">
    <link rel="stylesheet" href="../../assets/stylesheet.css">
    <link rel="stylesheet" href="../../assets/highlight.css">

    <!-- you don't need to keep this, but it's cool for stats! -->
    <meta name="generator" content="Nanoc 4.11.9">
  </head>
  <body>
    <div id="layout">
      <div class="header">
        <h1>
          <a href="../../">A Developer's Notebook</a>
        </h1>
      </div>


      <div class="content">
        <nav class="pure-g">
          <div class="pure-u-2-3 links">
            <a href="../../index.html">Home</a> ¬∑
            <a href="../../tags.html">Tags</a> ¬∑
            <a href="../../years.html">Years</a> ¬∑
            <a href="../../about.html">About</a>
          </div>

          <div class="pure-u-1-3">
            <div class="contact">
              <span>
                <a href="https://github.com/lbrito1" download="">
                  <img src="../../assets/icons/github.svg" alt="Github icon">
                  </a>
              </span>
              <span>
                <a href="https://www.linkedin.com/in/leonardo-mendes-brito/">
                <img src="../../assets/icons/linkedin.svg" alt="LinkedIn icon">
                </a>
              </span>
            </div>
          </div>
        </nav>
        
  <div class="post-show">
    <h1>Trees - Part I</h1>
    <article class="text">
      <p><a href="../../assets/images/codedeposit/2014/03/tree1.jpg"><img src="../../assets/images/codedeposit/2014/03/tree1.jpg" alt="tree"></a></p>

<p><a href="http://commons.wikimedia.org/wiki/File%3ABright_green_tree_-_Waikato.jpg"><img src="//upload.wikimedia.org/wikipedia/commons/thumb/f/f6/Bright_green_tree_-_Waikato.jpg/512px-Bright_green_tree_-_Waikato.jpg" alt="Bright green tree - Waikato"></a></p>

<p>We used trees to build the <a href="%7B%%20link%20_posts/2014-03-21-heap-priority-queues.markdown%20%%7D">heap data structure</a> before, but we didn‚Äôt bother with the theory behind trees, which are abstract and concrete data structures themselves. There‚Äôs a huge range of material to cover so I‚Äôll split this in several posts.</p>

<p>In this first post we‚Äôll cover the basic theory and implement a binary search tree (BST), which provides <code>O(h)</code> time search, insert and delete operations (<code>h</code> is the tree height). First, the basics:</p>

<p>Trees are graphs with a few extra properties and interpretations/conventions.
* Trees have height (longest branch length) and depth (distance to root).
* The uppermost level consists of at most one node (the tree root).
* All nodes may have children.
* There are no edges other than parent-child edges.</p>

<p>Trees are classified according to some&nbsp;of those properties above and some others we‚Äôll mention later. Most commonly, there is a constraint to the maximum number of children per node -e.g. the binary tree limits children to 2 per node.
<!-- more -->
To build a BST, we‚Äôre going to need a working binary tree (BT) first. There are several ways to implement a BT. I chose a linked data structure:</p>

<div class="highlight"><pre><code class="language-c"><span class="k">typedef</span> <span class="k">struct</span> <span class="n">node</span>
<span class="p">{</span>
      <span class="kt">void</span><span class="o">*</span> <span class="n">data</span><span class="p">;</span>
      <span class="k">struct</span> <span class="n">node</span><span class="o">*</span> <span class="n">parent</span><span class="p">;</span>
      <span class="k">struct</span> <span class="n">node</span><span class="o">*</span> <span class="n">left_child</span><span class="p">;</span>
      <span class="k">struct</span> <span class="n">node</span><span class="o">*</span> <span class="n">right_child</span><span class="p">;</span>
<span class="p">}</span> <span class="n">node</span><span class="p">;</span>

<span class="k">typedef</span> <span class="k">struct</span>
<span class="p">{</span>
      <span class="n">node</span><span class="o">*</span> <span class="n">root</span><span class="p">;</span>
      <span class="kt">int</span> <span class="n">order</span><span class="p">;</span>
      <span class="kt">int</span> <span class="p">(</span><span class="o">*</span><span class="n">cmp</span><span class="p">)</span> <span class="p">(</span><span class="kt">void</span><span class="o">*</span><span class="p">,</span> <span class="kt">void</span><span class="o">*</span><span class="p">);</span>
<span class="p">}</span> <span class="n">binary_tree</span><span class="p">;</span></code></pre></div>

<p>Together with their respective memory allocation functions (which I‚Äôll omit for now), those two structs are enough to define a BT. Before we get into actually filling a tree with stuff, let‚Äôs assume we have a tree and take a look at tree traversal.</p>

<p>Traversing a tree means visiting all the nodes in the tree data structure. Whilst linear data structures (arrays, linked lists etc) have a default traversal order, trees do not. The traversal methods are classified according to the specific order in which the nodes are visited. Specifically, we are interested in breadth-first and depth-first traversals.</p>

<p>Depth-first searches (DFS) start at the (sub)tree root and ‚Äúsinks‚Äù down until it reaches a leaf. Breadth-first searches (BFS) start at the root and exhaust all of its children before descending any further. Visiting in DFS can be done <strong>pre-order</strong>, <strong>in-order</strong> or <strong>post-order</strong>. The ‚Äúorder‚Äù refers to the specific time when we visit the root: before, after or in between visiting the sibling(s).</p>

<div class="highlight"><pre><code class="language-c"><span class="kt">void</span> <span class="nf">dfs</span><span class="p">(</span><span class="n">node</span><span class="o">*</span> <span class="n">n</span><span class="p">,</span> <span class="kt">void</span> <span class="p">(</span><span class="o">*</span><span class="n">visit</span><span class="p">)</span> <span class="p">(</span><span class="n">node</span><span class="o">*</span><span class="p">),</span> <span class="kt">int</span> <span class="n">v_order</span><span class="p">)</span>
<span class="p">{</span>
      <span class="k">if</span> <span class="p">(</span><span class="n">n</span><span class="o">!=</span><span class="nb">NULL</span><span class="p">)</span>
      <span class="p">{</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">v_order</span> <span class="o">==</span> <span class="n">PRE_ORDER</span><span class="p">)</span> <span class="n">visit</span><span class="p">(</span><span class="n">n</span><span class="p">);</span>

            <span class="n">dfs</span><span class="p">(</span><span class="n">n</span><span class="o">-&gt;</span><span class="n">left_child</span><span class="p">,</span> <span class="n">visit</span><span class="p">,</span> <span class="n">v_order</span><span class="p">);</span>

            <span class="k">if</span> <span class="p">(</span><span class="n">v_order</span> <span class="o">==</span> <span class="n">IN_ORDER</span><span class="p">)</span> <span class="n">visit</span><span class="p">(</span><span class="n">n</span><span class="p">);</span>

            <span class="n">dfs</span><span class="p">(</span><span class="n">n</span><span class="o">-&gt;</span><span class="n">right_child</span><span class="p">,</span> <span class="n">visit</span><span class="p">,</span> <span class="n">v_order</span><span class="p">);</span>

            <span class="k">if</span><span class="p">(</span><span class="n">v_order</span> <span class="o">==</span> <span class="n">POST_ORDER</span><span class="p">)</span> <span class="n">visit</span><span class="p">(</span><span class="n">n</span><span class="p">);</span>
      <span class="p">}</span>
<span class="p">}</span></code></pre></div>

<p>Now let‚Äôs take a look at binary search trees (BST). BSTs are binary trees with the following additional condition:</p>

<p>‚ÄúLet <code>x</code> be a tree.&nbsp;If <code>y</code> is a node in the left subtree of <code>x</code>, then <code>key[y] &lt;= key[x]</code>.&nbsp;If <code>y</code> is a node in the right subtree of <code>x</code>, then <code>key[y] &gt;= key[x]</code>.‚Äù</p>

<p>In other words, for every&nbsp;node in a BST (with unique elements), all values to the left are smaller and all values to the right are bigger than it. Note that this may appear&nbsp;similar to the heap property but is not the same at all: unlike with the heap, BST siblings and cousins are ordered in a specific way.</p>

<p>To preserve the BST property, we need to insert stuff in a specific order:</p>

<div class="highlight"><pre><code class="language-c"><span class="cm">/**
 *  @brief Insertion
 *
 *  Starting from the root, we dive down through
 *  the children until we reach the node whose
 *  value is closest to the value of the node we
 *  want to insert.
 *
 *  @param [in] bt
 *  @param [in] n
 *  @return Return_Description
 */</span>
<span class="kt">void</span> <span class="nf">tree_insert</span><span class="p">(</span><span class="n">binary_tree</span><span class="o">*</span> <span class="n">bt</span><span class="p">,</span> <span class="n">node</span><span class="o">*</span> <span class="n">n</span><span class="p">)</span>
<span class="p">{</span>
      <span class="n">node</span><span class="o">*</span> <span class="n">cur</span> <span class="o">=</span> <span class="n">bt</span><span class="o">-&gt;</span><span class="n">root</span><span class="p">;</span>
      <span class="n">node</span><span class="o">*</span> <span class="n">prev</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
      <span class="kt">int</span> <span class="n">goes_to</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>

      <span class="k">while</span><span class="p">(</span><span class="n">cur</span><span class="o">!=</span><span class="nb">NULL</span><span class="p">)</span>
      <span class="p">{</span>
            <span class="n">prev</span> <span class="o">=</span> <span class="n">cur</span><span class="p">;</span>
            <span class="k">if</span> <span class="p">(</span> <span class="p">(</span><span class="n">bt</span><span class="o">-&gt;</span><span class="n">order</span> <span class="o">==</span> <span class="n">ORD_ASC</span><span class="p">)</span>
                  <span class="o">?</span> <span class="n">bt</span><span class="o">-&gt;</span><span class="n">cmp</span><span class="p">(</span><span class="n">cur</span><span class="o">-&gt;</span><span class="n">data</span><span class="p">,</span> <span class="n">n</span><span class="o">-&gt;</span><span class="n">data</span><span class="p">)</span> <span class="o">&lt;</span> <span class="mi">0</span>
                  <span class="o">:</span> <span class="n">bt</span><span class="o">-&gt;</span><span class="n">cmp</span><span class="p">(</span><span class="n">cur</span><span class="o">-&gt;</span><span class="n">data</span><span class="p">,</span> <span class="n">n</span><span class="o">-&gt;</span><span class="n">data</span><span class="p">)</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="p">)</span>
            <span class="p">{</span>
                  <span class="n">cur</span> <span class="o">=</span> <span class="n">cur</span><span class="o">-&gt;</span><span class="n">left_child</span><span class="p">;</span>
                  <span class="n">goes_to</span> <span class="o">=</span> <span class="n">LEFT</span><span class="p">;</span>
            <span class="p">}</span>
            <span class="k">else</span>
            <span class="p">{</span>
                  <span class="n">cur</span> <span class="o">=</span> <span class="n">cur</span><span class="o">-&gt;</span><span class="n">right_child</span><span class="p">;</span>
                  <span class="n">goes_to</span> <span class="o">=</span> <span class="n">RIGHT</span><span class="p">;</span>
            <span class="p">}</span>
      <span class="p">}</span>

      <span class="k">if</span> <span class="p">(</span><span class="n">prev</span> <span class="o">!=</span> <span class="nb">NULL</span><span class="p">)</span>
      <span class="p">{</span>
            <span class="n">n</span><span class="o">-&gt;</span><span class="n">parent</span> <span class="o">=</span> <span class="n">prev</span><span class="p">;</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">goes_to</span> <span class="o">==</span> <span class="n">LEFT</span><span class="p">)</span>          <span class="n">set_child</span><span class="p">(</span><span class="n">prev</span><span class="p">,</span> <span class="n">n</span><span class="p">,</span> <span class="n">LEFT</span><span class="p">);</span>
            <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">goes_to</span> <span class="o">==</span> <span class="n">RIGHT</span><span class="p">)</span>    <span class="n">set_child</span><span class="p">(</span><span class="n">prev</span><span class="p">,</span> <span class="n">n</span><span class="p">,</span> <span class="n">RIGHT</span><span class="p">);</span>
            <span class="n">DBG</span><span class="p">(</span><span class="s">"Node (#%d) inserted</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span><span class="o">*</span><span class="p">(</span><span class="kt">int</span><span class="o">*</span><span class="p">)</span><span class="n">n</span><span class="o">-&gt;</span><span class="n">data</span><span class="p">);</span>
      <span class="p">}</span>
      <span class="k">else</span>  <span class="c1">// tree is empty, insert @ root</span>
      <span class="p">{</span>
            <span class="n">DBG</span><span class="p">(</span><span class="s">"Node (#%d) set as ROOT</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span><span class="o">*</span><span class="p">(</span><span class="kt">int</span><span class="o">*</span><span class="p">)</span><span class="n">n</span><span class="o">-&gt;</span><span class="n">data</span><span class="p">);</span>
            <span class="n">bt</span><span class="o">-&gt;</span><span class="n">root</span> <span class="o">=</span> <span class="n">n</span><span class="p">;</span>
      <span class="p">}</span>
<span class="p">}</span></code></pre></div>

<p>Starting at the root, we float down - moving left and right - until we reach the correct position for the node we‚Äôre inserting, always keeping track of the current node‚Äôs parent so it can be updated accordingly.</p>

<p>Together with a in-order DFS traversal, we can already do something useful with our BST tree: ordering a random set of values (integers in our case).</p>

<div class="highlight"><pre><code class="language-c"><span class="kt">void</span> <span class="nf">depth_first</span><span class="p">(</span><span class="n">binary_tree</span><span class="o">*</span> <span class="n">bt</span><span class="p">,</span> <span class="kt">void</span> <span class="p">(</span><span class="o">*</span><span class="n">visit</span><span class="p">)</span> <span class="p">(</span><span class="n">node</span><span class="o">*</span><span class="p">),</span> <span class="kt">int</span> <span class="n">v_order</span><span class="p">)</span>
<span class="p">{</span>
      <span class="n">DBG</span><span class="p">(</span><span class="s">"</span><span class="se">\n</span><span class="s">STARTED DFS</span><span class="se">\n\n</span><span class="s">"</span><span class="p">);</span>
      <span class="n">dfs</span><span class="p">(</span><span class="n">bt</span><span class="o">-&gt;</span><span class="n">root</span><span class="p">,</span> <span class="n">visit</span><span class="p">,</span> <span class="n">v_order</span><span class="p">);</span>
<span class="p">}</span>

<span class="cp">#ifdef _DEBUG
</span><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
<span class="p">{</span>
      <span class="n">binary_tree</span><span class="o">*</span> <span class="n">bt</span> <span class="o">=</span> <span class="n">new_binary_tree</span><span class="p">(</span><span class="n">compare_integer</span><span class="p">,</span> <span class="n">ORD_ASC</span><span class="p">);</span>

      <span class="kt">int</span> <span class="n">ts</span> <span class="o">=</span> <span class="mi">10</span><span class="p">;</span>

      <span class="n">srand</span><span class="p">(</span><span class="n">time</span><span class="p">(</span><span class="nb">NULL</span><span class="p">));</span>
      <span class="kt">int</span> <span class="n">i</span><span class="p">;</span>

      <span class="k">for</span><span class="p">(</span><span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">ts</span><span class="p">;</span><span class="n">i</span><span class="o">++</span><span class="p">)</span>
      <span class="p">{</span>
            <span class="kt">int</span><span class="o">*</span> <span class="n">data</span> <span class="o">=</span> <span class="n">malloc</span><span class="p">(</span><span class="k">sizeof</span><span class="p">(</span><span class="kt">int</span><span class="p">));</span>
            <span class="o">*</span><span class="n">data</span> <span class="o">=</span> <span class="n">rand</span><span class="p">()</span><span class="o">%</span><span class="p">(</span><span class="n">ts</span><span class="o">*</span><span class="mi">10</span><span class="p">);</span>
            <span class="n">node</span><span class="o">*</span> <span class="n">n</span> <span class="o">=</span> <span class="n">new_node</span><span class="p">((</span><span class="kt">void</span><span class="o">*</span><span class="p">)</span> <span class="n">data</span><span class="p">);</span>
            <span class="n">tree_insert</span><span class="p">(</span><span class="n">bt</span><span class="p">,</span> <span class="n">n</span><span class="p">);</span>
      <span class="p">}</span>

      <span class="n">depth_first</span><span class="p">(</span><span class="n">bt</span><span class="p">,</span> <span class="n">visit</span><span class="p">,</span> <span class="n">IN_ORDER</span><span class="p">);</span>
<span class="p">}</span>
<span class="cp">#endif</span></code></pre></div>

<p>Here‚Äôs a sample output:</p>

<div class="highlight"><pre><code class="language-bash">C:<span class="se">\c</span>ode<span class="se">\c\c</span>stuff<span class="se">\d</span>ata_structures&gt;bt
New node <span class="o">(</span><span class="c">#46)</span>
Node <span class="o">(</span><span class="c">#46) set as ROOT</span>
New node <span class="o">(</span><span class="c">#14)</span>
Node <span class="o">(</span><span class="c">#14) inserted</span>
New node <span class="o">(</span><span class="c">#85)</span>
Node <span class="o">(</span><span class="c">#85) inserted</span>
New node <span class="o">(</span><span class="c">#43)</span>
Node <span class="o">(</span><span class="c">#43) inserted</span>
New node <span class="o">(</span><span class="c">#63)</span>
Node <span class="o">(</span><span class="c">#63) inserted</span>
New node <span class="o">(</span><span class="c">#55)</span>
Node <span class="o">(</span><span class="c">#55) inserted</span>
New node <span class="o">(</span><span class="c">#91)</span>
Node <span class="o">(</span><span class="c">#91) inserted</span>
New node <span class="o">(</span><span class="c">#60)</span>
Node <span class="o">(</span><span class="c">#60) inserted</span>
New node <span class="o">(</span><span class="c">#72)</span>
Node <span class="o">(</span><span class="c">#72) inserted</span>
New node <span class="o">(</span><span class="c">#8)</span>
Node <span class="o">(</span><span class="c">#8) inserted</span>

STARTED DFS

Visited node <span class="c">#8</span>
Visited node <span class="c">#14</span>
Visited node <span class="c">#43</span>
Visited node <span class="c">#46</span>
Visited node <span class="c">#55</span>
Visited node <span class="c">#60</span>
Visited node <span class="c">#63</span>
Visited node <span class="c">#72</span>
Visited node <span class="c">#85</span>
Visited node <span class="c">#91</span></code></pre></div>

<p>Several other operations commented with concise explanations and printable tests can be found at <a href="https://github.com/lbrito1/cstuff/blob/master/data_structures/binary_search_tree.c">data_structures/binary_search_tree.c</a> in the blog‚Äôs Github.</p>

<p>Next post we‚Äôll (probably!) cover the AVL tree, which is another kind of binary search tree.</p>

    </article>
    <aside>Posted at: Mar 31, 2014</aside>
    <div class="post-footer">
      <a href="../../index.html">Back</a>
    </div>
  </div>

        <div class="footer">
          2020 Leonardo Brito
        </div>
      </div>

    </div>
  


</body></html>;
T;@3;@3o;;;;	I"*/posts/2015-10-07-red-black-vs-avl.md;
T{;{
;U;[I"L/home/carol/workspace/blog/content/posts/2015-10-07-red-black-vs-avl.md;
TI"8In our previous installments we implemented two of the most well-known self-balancing binary search trees: [AVL]({% link _posts/2014-04-21-trees-part-ii-avl-tree.markdown %}) and [Red-black]({% link _posts/2015-10-01-trees-part-iii-red-black-tree.markdown %}) [trees]({% link _posts/2014-03-31-trees-part-i.markdown %}).

We had a few classes on AVL trees in our basic data structures & algorithms class back in college, which made its implementation far less of a challenge than the Red-black tree. So besides the fundamental guidance of CLRS I had to do quite some googling to get it working. While googling I noticed there were quite a lot of questions about which (AVL or RB) tree was "better" in some sense, be it insertion, search time, deletion time, etc. Most textbooks and articles dismiss this question just by stating the factor differences in either trees' worst case heights, [as we briefly mentioned]({% link _posts/2015-10-01-trees-part-iii-red-black-tree.markdown %}) in the past installment. If you're anything like me, however, you'll want to see some comparisons where the trees are _actually_ tested. So I decided to do some simple benchmarking to test those theoretical worst-cases. Here's what I found out.

<!-- more -->

First off, we need at least two cases: worst and average case. As we know from the previous installments, the worst possible case for BST insertion is when you are inserting continuously increasing or decreasing values, e.g. _1, 2, 3, 4, ..._ . In this case, a pure BST would behave exactly like a (doubly) linked list, while self-balancing trees should should spread out node distribution. The worst possible searches would be the top or bottom values, i.e. those close to the end of the "list": a pure BST would have to traverse the entire list (_n_ time), while self-balancing trees should enjoy a $latex k~log(n)$ time with some factor k.

What would an "average case" look like? Hard to say; depend on what is average for your application. It might just be the case that sequences are the average case. Since we can't define a "universal" average case and for the sake of simplicity, we will define the average case as a sequence of random numbers drawn from C's rand() function (one might argue that this is actually the "best" case since on the long run the BST will "naturally" become quite reasonably balanced, but let's not get picky about terminology).

:-------------------------:|:-------------------------:
[![Average case_search](/assets/images/codedeposit/2015/10/average-case_search.png?w=739)](/assets/images/codedeposit/2015/10/average-case_search.png)  |  [![Average case_insert](/assets/images/codedeposit/2015/10/average-case_insert.png?w=300)](/assets/images/codedeposit/2015/10/average-case_insert.png)

Figure 1

Benchmarking is done as follows: _x_ values are inserted into the tree (x up to 100k in 1k steps), and then using the same tree we search for the bottom $latex frac{x}{10}$ values in the tree, so if x = 10k we will search for the 1k lowest values.

In Figure 1 we have insertion and search times for the average case. As we predicted, search times are basically the same for all 3 trees, with the unbalanced BST taking slightly more time than Red-black and AVL. The difference is small but seems to increase a bit as more elements are added. Insertion took significantly longer in the AVL tree than the other two, most likely due to all the rotations AVL needs to do. Red-black performed slightly better than BST. All in all, the 3 trees performed very similarly.

Now let's see in Figure 2 how the trees perform in our worst-case scenario:



:-------------------------:|:-------------------------:
[![Worst case_search](/assets/images/codedeposit/2015/10/worst-case_search.png?w=739)](/assets/images/codedeposit/2015/10/worst-case_search.png) | [![Worst case_search](/assets/images/codedeposit/2015/10/worst-case_search.png?w=739)](/assets/images/codedeposit/2015/10/worst-case_search.png)

Figure 2

Figure 2 reminds us why self-balancing trees were invented. BST quickly degenerated into a $latex O(n)$-time [linked list]({% link _posts/2014-02-14-3.markdown %}}), which made the other two trees' performance invisible. Let's use a log plot to see how well R&B and AVL performed:

:-------------------------:|:-------------------------:
[![Worst case (log)_search](/assets/images/codedeposit/2015/10/worst-case-log_search.png?w=739)](/assets/images/codedeposit/2015/10/worst-case-log_search.png) | [![Worst case (log)_insert](/assets/images/codedeposit/2015/10/worst-case-log_insert.png?w=739)](/assets/images/codedeposit/2015/10/worst-case-log_insert.png)

Figure 3

Figure 3 shows the same results as Figure 2 but with a logarithmic plot. As we can see, Red & Black and AVL trees performed nearly identically since both have worst-case $latex O(log(n))$ times. The difference in factors between AVL and RB isn't really noticeable. AVL seems to have performed only infinitesimally better than RB, but the difference is most likely insignificant (statistically speaking).

The huge difference in performance between average and worst case are easily understood by looking at Figure 4. While BST height does increase more than the other trees' height on the average case, they all have the same order of magnitude. Not on the worst case, though: BST height increases linearly while AVL and RB are clearly logarithmic.

:-------------------------:|:-------------------------:
[![Average case_height](/assets/images/codedeposit/2015/10/average-case_height.png?w=739)](/assets/images/codedeposit/2015/10/average-case_height.png) | [![Worst case (log)_height](/assets/images/codedeposit/2015/10/worst-case-log_height.png?w=739)](/assets/images/codedeposit/2015/10/worst-case-log_height.png)

Figure 4

We are also able to notice the difference between AVL and Red-black factors in Figure 4's right picture, where AVL's height is consistently less than Red-black's.

Figure 5 shows only Red-black and AVL heights. Note that they are close to the theoretical bounds, which suggests that our worst case is indeed a worst case. Take n = 80000 as an example: for the AVL tree we expect a height always smaller than $latex 1.44~log_{2}(80000) \approx 23.45$, while the observed was 20. For the Red-black tree, the upper bound is $latex log_{2}(n) \approx 32.57$, also close to the observed (30). Although these differences may seem big, they aren't enough to significantly change observed search and insertion times (Figure 6). That's what makes Big O so great!

[![worst_heights](/assets/images/codedeposit/2015/10/worst_heights.png?w=300)](/assets/images/codedeposit/2015/10/worst_heights.png)

Figure 5

:-------------------------:|:-------------------------:
[![worst_searches](/assets/images/codedeposit/2015/10/worst_searches.png?w=300)](/assets/images/codedeposit/2015/10/worst_searches.png) | [![worst_inserts](/assets/images/codedeposit/2015/10/worst_inserts.png?w=300)](/assets/images/codedeposit/2015/10/worst_inserts.png)

Figure 6

This concludes our analysis of self-balancing BSTs. As always, all the code used in this post can be found [on Github](https://github.com/lbrito1/cstuff). Charts were rendered with Matplotlib + Seaborn.
;
T;U;[0I"<<p>In our previous installments we implemented two of the most well-known self-balancing binary search trees: <a href="%7B%%20link%20_posts/2014-04-21-trees-part-ii-avl-tree.markdown%20%%7D">AVL</a> and <a href="%7B%%20link%20_posts/2015-10-01-trees-part-iii-red-black-tree.markdown%20%%7D">Red-black</a> <a href="%7B%%20link%20_posts/2014-03-31-trees-part-i.markdown%20%%7D">trees</a>.</p>

<p>We had a few classes on AVL trees in our basic data structures &amp; algorithms class back in college, which made its implementation far less of a challenge than the Red-black tree. So besides the fundamental guidance of CLRS I had to do quite some googling to get it working. While googling I noticed there were quite a lot of questions about which (AVL or RB) tree was ‚Äúbetter‚Äù in some sense, be it insertion, search time, deletion time, etc. Most textbooks and articles dismiss this question just by stating the factor differences in either trees‚Äô worst case heights, <a href="%7B%%20link%20_posts/2015-10-01-trees-part-iii-red-black-tree.markdown%20%%7D">as we briefly mentioned</a> in the past installment. If you‚Äôre anything like me, however, you‚Äôll want to see some comparisons where the trees are <em>actually</em> tested. So I decided to do some simple benchmarking to test those theoretical worst-cases. Here‚Äôs what I found out.</p>

<!-- more -->

<p>First off, we need at least two cases: worst and average case. As we know from the previous installments, the worst possible case for BST insertion is when you are inserting continuously increasing or decreasing values, e.g. <em>1, 2, 3, 4, ‚Ä¶</em> . In this case, a pure BST would behave exactly like a (doubly) linked list, while self-balancing trees should should spread out node distribution. The worst possible searches would be the top or bottom values, i.e. those close to the end of the ‚Äúlist‚Äù: a pure BST would have to traverse the entire list (<em>n</em> time), while self-balancing trees should enjoy a $latex k~log(n)$ time with some factor k.</p>

<p>What would an ‚Äúaverage case‚Äù look like? Hard to say; depend on what is average for your application. It might just be the case that sequences are the average case. Since we can‚Äôt define a ‚Äúuniversal‚Äù average case and for the sake of simplicity, we will define the average case as a sequence of random numbers drawn from C‚Äôs rand() function (one might argue that this is actually the ‚Äúbest‚Äù case since on the long run the BST will ‚Äúnaturally‚Äù become quite reasonably balanced, but let‚Äôs not get picky about terminology).</p>

<table>
  <tbody>
    <tr>
      <td><a href="/assets/images/codedeposit/2015/10/average-case_search.png"><img src="/assets/images/codedeposit/2015/10/average-case_search.png?w=739" alt="Average case_search"></a></td>
      <td><a href="/assets/images/codedeposit/2015/10/average-case_insert.png"><img src="/assets/images/codedeposit/2015/10/average-case_insert.png?w=300" alt="Average case_insert"></a></td>
    </tr>
  </tbody>
</table>

<p>Figure 1</p>

<p>Benchmarking is done as follows: <em>x</em> values are inserted into the tree (x up to 100k in 1k steps), and then using the same tree we search for the bottom $latex frac{x}{10}$ values in the tree, so if x = 10k we will search for the 1k lowest values.</p>

<p>In Figure 1 we have insertion and search times for the average case. As we predicted, search times are basically the same for all 3 trees, with the unbalanced BST taking slightly more time than Red-black and AVL. The difference is small but seems to increase a bit as more elements are added. Insertion took significantly longer in the AVL tree than the other two, most likely due to all the rotations AVL needs to do. Red-black performed slightly better than BST. All in all, the 3 trees performed very similarly.</p>

<p>Now let‚Äôs see in Figure 2 how the trees perform in our worst-case scenario:</p>

<table>
  <tbody>
    <tr>
      <td><a href="/assets/images/codedeposit/2015/10/worst-case_search.png"><img src="/assets/images/codedeposit/2015/10/worst-case_search.png?w=739" alt="Worst case_search"></a></td>
      <td><a href="/assets/images/codedeposit/2015/10/worst-case_search.png"><img src="/assets/images/codedeposit/2015/10/worst-case_search.png?w=739" alt="Worst case_search"></a></td>
    </tr>
  </tbody>
</table>

<p>Figure 2</p>

<p>Figure 2 reminds us why self-balancing trees were invented. BST quickly degenerated into a $latex O(n)$-time <a href="%7B%%20link%20_posts/2014-02-14-3.markdown%20%%7D%7D">linked list</a>, which made the other two trees‚Äô performance invisible. Let‚Äôs use a log plot to see how well R&amp;B and AVL performed:</p>

<table>
  <tbody>
    <tr>
      <td><a href="/assets/images/codedeposit/2015/10/worst-case-log_search.png"><img src="/assets/images/codedeposit/2015/10/worst-case-log_search.png?w=739" alt="Worst case (log)_search"></a></td>
      <td><a href="/assets/images/codedeposit/2015/10/worst-case-log_insert.png"><img src="/assets/images/codedeposit/2015/10/worst-case-log_insert.png?w=739" alt="Worst case (log)_insert"></a></td>
    </tr>
  </tbody>
</table>

<p>Figure 3</p>

<p>Figure 3 shows the same results as Figure 2 but with a logarithmic plot. As we can see, Red &amp; Black and AVL trees performed nearly identically since both have worst-case $latex O(log(n))$ times. The difference in factors between AVL and RB isn‚Äôt really noticeable. AVL seems to have performed only infinitesimally better than RB, but the difference is most likely insignificant (statistically speaking).</p>

<p>The huge difference in performance between average and worst case are easily understood by looking at Figure 4. While BST height does increase more than the other trees‚Äô height on the average case, they all have the same order of magnitude. Not on the worst case, though: BST height increases linearly while AVL and RB are clearly logarithmic.</p>

<table>
  <tbody>
    <tr>
      <td><a href="/assets/images/codedeposit/2015/10/average-case_height.png"><img src="/assets/images/codedeposit/2015/10/average-case_height.png?w=739" alt="Average case_height"></a></td>
      <td><a href="/assets/images/codedeposit/2015/10/worst-case-log_height.png"><img src="/assets/images/codedeposit/2015/10/worst-case-log_height.png?w=739" alt="Worst case (log)_height"></a></td>
    </tr>
  </tbody>
</table>

<p>Figure 4</p>

<p>We are also able to notice the difference between AVL and Red-black factors in Figure 4‚Äôs right picture, where AVL‚Äôs height is consistently less than Red-black‚Äôs.</p>

<p>Figure 5 shows only Red-black and AVL heights. Note that they are close to the theoretical bounds, which suggests that our worst case is indeed a worst case. Take n = 80000 as an example: for the AVL tree we expect a height always smaller than $latex 1.44~log_{2}(80000) \approx 23.45$, while the observed was 20. For the Red-black tree, the upper bound is $latex log_{2}(n) \approx 32.57$, also close to the observed (30). Although these differences may seem big, they aren‚Äôt enough to significantly change observed search and insertion times (Figure 6). That‚Äôs what makes Big O so great!</p>

<p><a href="/assets/images/codedeposit/2015/10/worst_heights.png"><img src="/assets/images/codedeposit/2015/10/worst_heights.png?w=300" alt="worst_heights"></a></p>

<p>Figure 5</p>

<table>
  <tbody>
    <tr>
      <td><a href="/assets/images/codedeposit/2015/10/worst_searches.png"><img src="/assets/images/codedeposit/2015/10/worst_searches.png?w=300" alt="worst_searches"></a></td>
      <td><a href="/assets/images/codedeposit/2015/10/worst_inserts.png"><img src="/assets/images/codedeposit/2015/10/worst_inserts.png?w=300" alt="worst_inserts"></a></td>
    </tr>
  </tbody>
</table>

<p>Figure 6</p>

<p>This concludes our analysis of self-balancing BSTs. As always, all the code used in this post can be found <a href="https://github.com/lbrito1/cstuff">on Github</a>. Charts were rendered with Matplotlib + Seaborn.</p>
;
T;U;[0I"¢'<!DOCTYPE html><html lang="en"><head>
    <meta charset="utf-8">
    <title>A Developer's Notebook - Trees, part IV - Benchmarking Red-black and AVL trees</title>
    <link rel="stylesheet" href="https://unpkg.com/purecss@1.0.1/build/pure-min.css" integrity="sha384-oAOxQR6DkCoMliIh8yFnu25d7Eq/PHS21PClpwjOTeU2jRSq11vu66rf90/cZr47" crossorigin="anonymous">
    <link rel="stylesheet" href="../../assets/stylesheet.css">
    <link rel="stylesheet" href="../../assets/highlight.css">

    <!-- you don't need to keep this, but it's cool for stats! -->
    <meta name="generator" content="Nanoc 4.11.9">
  </head>
  <body>
    <div id="layout">
      <div class="header">
        <h1>
          <a href="../../">A Developer's Notebook</a>
        </h1>
      </div>


      <div class="content">
        <nav class="pure-g">
          <div class="pure-u-2-3 links">
            <a href="../../index.html">Home</a> ¬∑
            <a href="../../tags.html">Tags</a> ¬∑
            <a href="../../years.html">Years</a> ¬∑
            <a href="../../about.html">About</a>
          </div>

          <div class="pure-u-1-3">
            <div class="contact">
              <span>
                <a href="https://github.com/lbrito1" download="">
                  <img src="../../assets/icons/github.svg" alt="Github icon">
                  </a>
              </span>
              <span>
                <a href="https://www.linkedin.com/in/leonardo-mendes-brito/">
                <img src="../../assets/icons/linkedin.svg" alt="LinkedIn icon">
                </a>
              </span>
            </div>
          </div>
        </nav>
        
  <div class="post-show">
    <h1>Trees, part IV - Benchmarking Red-black and AVL trees</h1>
    <article class="text">
      <p>In our previous installments we implemented two of the most well-known self-balancing binary search trees: <a href="%7B%%20link%20_posts/2014-04-21-trees-part-ii-avl-tree.markdown%20%%7D">AVL</a> and <a href="%7B%%20link%20_posts/2015-10-01-trees-part-iii-red-black-tree.markdown%20%%7D">Red-black</a> <a href="%7B%%20link%20_posts/2014-03-31-trees-part-i.markdown%20%%7D">trees</a>.</p>

<p>We had a few classes on AVL trees in our basic data structures &amp; algorithms class back in college, which made its implementation far less of a challenge than the Red-black tree. So besides the fundamental guidance of CLRS I had to do quite some googling to get it working. While googling I noticed there were quite a lot of questions about which (AVL or RB) tree was ‚Äúbetter‚Äù in some sense, be it insertion, search time, deletion time, etc. Most textbooks and articles dismiss this question just by stating the factor differences in either trees‚Äô worst case heights, <a href="%7B%%20link%20_posts/2015-10-01-trees-part-iii-red-black-tree.markdown%20%%7D">as we briefly mentioned</a> in the past installment. If you‚Äôre anything like me, however, you‚Äôll want to see some comparisons where the trees are <em>actually</em> tested. So I decided to do some simple benchmarking to test those theoretical worst-cases. Here‚Äôs what I found out.</p>

<!-- more -->

<p>First off, we need at least two cases: worst and average case. As we know from the previous installments, the worst possible case for BST insertion is when you are inserting continuously increasing or decreasing values, e.g. <em>1, 2, 3, 4, ‚Ä¶</em> . In this case, a pure BST would behave exactly like a (doubly) linked list, while self-balancing trees should should spread out node distribution. The worst possible searches would be the top or bottom values, i.e. those close to the end of the ‚Äúlist‚Äù: a pure BST would have to traverse the entire list (<em>n</em> time), while self-balancing trees should enjoy a $latex k~log(n)$ time with some factor k.</p>

<p>What would an ‚Äúaverage case‚Äù look like? Hard to say; depend on what is average for your application. It might just be the case that sequences are the average case. Since we can‚Äôt define a ‚Äúuniversal‚Äù average case and for the sake of simplicity, we will define the average case as a sequence of random numbers drawn from C‚Äôs rand() function (one might argue that this is actually the ‚Äúbest‚Äù case since on the long run the BST will ‚Äúnaturally‚Äù become quite reasonably balanced, but let‚Äôs not get picky about terminology).</p>

<table>
  <tbody>
    <tr>
      <td><a href="../../assets/images/codedeposit/2015/10/average-case_search.png"><img src="../../assets/images/codedeposit/2015/10/average-case_search.png?w=739" alt="Average case_search"></a></td>
      <td><a href="../../assets/images/codedeposit/2015/10/average-case_insert.png"><img src="../../assets/images/codedeposit/2015/10/average-case_insert.png?w=300" alt="Average case_insert"></a></td>
    </tr>
  </tbody>
</table>

<p>Figure 1</p>

<p>Benchmarking is done as follows: <em>x</em> values are inserted into the tree (x up to 100k in 1k steps), and then using the same tree we search for the bottom $latex frac{x}{10}$ values in the tree, so if x = 10k we will search for the 1k lowest values.</p>

<p>In Figure 1 we have insertion and search times for the average case. As we predicted, search times are basically the same for all 3 trees, with the unbalanced BST taking slightly more time than Red-black and AVL. The difference is small but seems to increase a bit as more elements are added. Insertion took significantly longer in the AVL tree than the other two, most likely due to all the rotations AVL needs to do. Red-black performed slightly better than BST. All in all, the 3 trees performed very similarly.</p>

<p>Now let‚Äôs see in Figure 2 how the trees perform in our worst-case scenario:</p>

<table>
  <tbody>
    <tr>
      <td><a href="../../assets/images/codedeposit/2015/10/worst-case_search.png"><img src="../../assets/images/codedeposit/2015/10/worst-case_search.png?w=739" alt="Worst case_search"></a></td>
      <td><a href="../../assets/images/codedeposit/2015/10/worst-case_search.png"><img src="../../assets/images/codedeposit/2015/10/worst-case_search.png?w=739" alt="Worst case_search"></a></td>
    </tr>
  </tbody>
</table>

<p>Figure 2</p>

<p>Figure 2 reminds us why self-balancing trees were invented. BST quickly degenerated into a $latex O(n)$-time <a href="%7B%%20link%20_posts/2014-02-14-3.markdown%20%%7D%7D">linked list</a>, which made the other two trees‚Äô performance invisible. Let‚Äôs use a log plot to see how well R&amp;B and AVL performed:</p>

<table>
  <tbody>
    <tr>
      <td><a href="../../assets/images/codedeposit/2015/10/worst-case-log_search.png"><img src="../../assets/images/codedeposit/2015/10/worst-case-log_search.png?w=739" alt="Worst case (log)_search"></a></td>
      <td><a href="../../assets/images/codedeposit/2015/10/worst-case-log_insert.png"><img src="../../assets/images/codedeposit/2015/10/worst-case-log_insert.png?w=739" alt="Worst case (log)_insert"></a></td>
    </tr>
  </tbody>
</table>

<p>Figure 3</p>

<p>Figure 3 shows the same results as Figure 2 but with a logarithmic plot. As we can see, Red &amp; Black and AVL trees performed nearly identically since both have worst-case $latex O(log(n))$ times. The difference in factors between AVL and RB isn‚Äôt really noticeable. AVL seems to have performed only infinitesimally better than RB, but the difference is most likely insignificant (statistically speaking).</p>

<p>The huge difference in performance between average and worst case are easily understood by looking at Figure 4. While BST height does increase more than the other trees‚Äô height on the average case, they all have the same order of magnitude. Not on the worst case, though: BST height increases linearly while AVL and RB are clearly logarithmic.</p>

<table>
  <tbody>
    <tr>
      <td><a href="../../assets/images/codedeposit/2015/10/average-case_height.png"><img src="../../assets/images/codedeposit/2015/10/average-case_height.png?w=739" alt="Average case_height"></a></td>
      <td><a href="../../assets/images/codedeposit/2015/10/worst-case-log_height.png"><img src="../../assets/images/codedeposit/2015/10/worst-case-log_height.png?w=739" alt="Worst case (log)_height"></a></td>
    </tr>
  </tbody>
</table>

<p>Figure 4</p>

<p>We are also able to notice the difference between AVL and Red-black factors in Figure 4‚Äôs right picture, where AVL‚Äôs height is consistently less than Red-black‚Äôs.</p>

<p>Figure 5 shows only Red-black and AVL heights. Note that they are close to the theoretical bounds, which suggests that our worst case is indeed a worst case. Take n = 80000 as an example: for the AVL tree we expect a height always smaller than $latex 1.44~log_{2}(80000) \approx 23.45$, while the observed was 20. For the Red-black tree, the upper bound is $latex log_{2}(n) \approx 32.57$, also close to the observed (30). Although these differences may seem big, they aren‚Äôt enough to significantly change observed search and insertion times (Figure 6). That‚Äôs what makes Big O so great!</p>

<p><a href="../../assets/images/codedeposit/2015/10/worst_heights.png"><img src="../../assets/images/codedeposit/2015/10/worst_heights.png?w=300" alt="worst_heights"></a></p>

<p>Figure 5</p>

<table>
  <tbody>
    <tr>
      <td><a href="../../assets/images/codedeposit/2015/10/worst_searches.png"><img src="../../assets/images/codedeposit/2015/10/worst_searches.png?w=300" alt="worst_searches"></a></td>
      <td><a href="../../assets/images/codedeposit/2015/10/worst_inserts.png"><img src="../../assets/images/codedeposit/2015/10/worst_inserts.png?w=300" alt="worst_inserts"></a></td>
    </tr>
  </tbody>
</table>

<p>Figure 6</p>

<p>This concludes our analysis of self-balancing BSTs. As always, all the code used in this post can be found <a href="https://github.com/lbrito1/cstuff">on Github</a>. Charts were rendered with Matplotlib + Seaborn.</p>

    </article>
    <aside>Posted at: Oct 07, 2015</aside>
    <div class="post-footer">
      <a href="../../index.html">Back</a>
    </div>
  </div>

        <div class="footer">
          2020 Leonardo Brito
        </div>
      </div>

    </div>
  


</body></html>;
T;@A;@Ao;;;;	I"/posts/2014-03-18-stack.md;
T{;{
;U;[I"A/home/carol/workspace/blog/content/posts/2014-03-18-stack.md;
TI"∆
Using our implementation of a doubly linked (DL) list, we can very simply build the most basic LIFO (last in, first out) data structure: the stack.

[![stack](/assets/images/codedeposit/2014/03/stack.png?w=300)](/assets/images/codedeposit/2014/03/stack.png)

Stacks have two basic operations: push and pop. Push pushes data onto the stack (i.e., end of the DL list) and pop pops data off the list's tail, which is only possible because we can set the new tail as tail->prev, since we're using a DL list, with previous pointers. Another useful function is peek, which returns a pointer to the stack's top.

<!-- more -->

The only extra care we need here is to remind ourselves that pop only logically removes the element from the stack, so we'll have to free the data after we're done using it.

Here's the code with printable tests, as usual.

<div class="highlight"><pre><code class="language-c">
/*
    File: stack.c

    Copyright (c) 2014 Leonardo Brito <lbrito@gmail.com>

    This software is free software; you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation; either version 2 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License along
    with this program; if not, write the Free Software Foundation, Inc., 51
    Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
*/

#include "doubly_linked_list.c"

typedef d_linked_list stack;
typedef d_element elem;

stack *new_stack(int (*comparator) (void*, void*))
{
      return new_list(comparator);
}

void push(stack* s, void *data)
{
      add(s, data);
}

void* pop(stack* s)
{
      elem* tail = s->tail;
      if (tail!=NULL)
      {
            if (tail->prev != NULL)
            {
                  s->tail = tail->prev;
                  s->tail->next = NULL;
            }
            else
            {
                  s->tail = s->head;
            }
      }
      return tail->data;
}

void* peek(stack* s)
{
      return s->tail;
}

#ifdef _DEBUGGING
int main()
{
      stack* s = new_stack(compare_integer);
      int i, *data;
      for (i=0; i<100; i++)
      {
            data = malloc(sizeof(int));
            *data = i;
            push(s, data);
      }

      for (i=0; i<100; i++)
      {
            data = (int*) pop(s);
            printf("\nPopped %d",*((int*) data));
            free(data);
      }
      return 0;
}
#endif
</code></pre></div>
;
T;U;[0I"t <p>Using our implementation of a doubly linked (DL) list, we can very simply build the most basic LIFO (last in, first out) data structure: the stack.</p>

<p><a href="/assets/images/codedeposit/2014/03/stack.png"><img src="/assets/images/codedeposit/2014/03/stack.png?w=300" alt="stack"></a></p>

<p>Stacks have two basic operations: push and pop. Push pushes data onto the stack (i.e., end of the DL list) and pop pops data off the list‚Äôs tail, which is only possible because we can set the new tail as tail-&gt;prev, since we‚Äôre using a DL list, with previous pointers. Another useful function is peek, which returns a pointer to the stack‚Äôs top.</p>

<!-- more -->

<p>The only extra care we need here is to remind ourselves that pop only logically removes the element from the stack, so we‚Äôll have to free the data after we‚Äôre done using it.</p>

<p>Here‚Äôs the code with printable tests, as usual.</p>

<div class="highlight"><pre><code class="language-c"><span class="cm">/*
    File: stack.c

    Copyright (c) 2014 Leonardo Brito &lt;lbrito@gmail.com&gt;

    This software is free software; you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation; either version 2 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License along
    with this program; if not, write the Free Software Foundation, Inc., 51
    Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
*/</span>

<span class="cp">#include "doubly_linked_list.c"
</span>
<span class="k">typedef</span> <span class="n">d_linked_list</span> <span class="n">stack</span><span class="p">;</span>
<span class="k">typedef</span> <span class="n">d_element</span> <span class="n">elem</span><span class="p">;</span>

<span class="n">stack</span> <span class="o">*</span><span class="nf">new_stack</span><span class="p">(</span><span class="kt">int</span> <span class="p">(</span><span class="o">*</span><span class="n">comparator</span><span class="p">)</span> <span class="p">(</span><span class="kt">void</span><span class="o">*</span><span class="p">,</span> <span class="kt">void</span><span class="o">*</span><span class="p">))</span>
<span class="p">{</span>
      <span class="k">return</span> <span class="n">new_list</span><span class="p">(</span><span class="n">comparator</span><span class="p">);</span>
<span class="p">}</span>

<span class="kt">void</span> <span class="nf">push</span><span class="p">(</span><span class="n">stack</span><span class="o">*</span> <span class="n">s</span><span class="p">,</span> <span class="kt">void</span> <span class="o">*</span><span class="n">data</span><span class="p">)</span>
<span class="p">{</span>
      <span class="n">add</span><span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="n">data</span><span class="p">);</span>
<span class="p">}</span>

<span class="kt">void</span><span class="o">*</span> <span class="nf">pop</span><span class="p">(</span><span class="n">stack</span><span class="o">*</span> <span class="n">s</span><span class="p">)</span>
<span class="p">{</span>
      <span class="n">elem</span><span class="o">*</span> <span class="n">tail</span> <span class="o">=</span> <span class="n">s</span><span class="o">-&gt;</span><span class="n">tail</span><span class="p">;</span>
      <span class="k">if</span> <span class="p">(</span><span class="n">tail</span><span class="o">!=</span><span class="nb">NULL</span><span class="p">)</span>
      <span class="p">{</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">tail</span><span class="o">-&gt;</span><span class="n">prev</span> <span class="o">!=</span> <span class="nb">NULL</span><span class="p">)</span>
            <span class="p">{</span>
                  <span class="n">s</span><span class="o">-&gt;</span><span class="n">tail</span> <span class="o">=</span> <span class="n">tail</span><span class="o">-&gt;</span><span class="n">prev</span><span class="p">;</span>
                  <span class="n">s</span><span class="o">-&gt;</span><span class="n">tail</span><span class="o">-&gt;</span><span class="n">next</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
            <span class="p">}</span>
            <span class="k">else</span>
            <span class="p">{</span>
                  <span class="n">s</span><span class="o">-&gt;</span><span class="n">tail</span> <span class="o">=</span> <span class="n">s</span><span class="o">-&gt;</span><span class="n">head</span><span class="p">;</span>
            <span class="p">}</span>
      <span class="p">}</span>
      <span class="k">return</span> <span class="n">tail</span><span class="o">-&gt;</span><span class="n">data</span><span class="p">;</span>
<span class="p">}</span>

<span class="kt">void</span><span class="o">*</span> <span class="nf">peek</span><span class="p">(</span><span class="n">stack</span><span class="o">*</span> <span class="n">s</span><span class="p">)</span>
<span class="p">{</span>
      <span class="k">return</span> <span class="n">s</span><span class="o">-&gt;</span><span class="n">tail</span><span class="p">;</span>
<span class="p">}</span>

<span class="cp">#ifdef _DEBUGGING
</span><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
<span class="p">{</span>
      <span class="n">stack</span><span class="o">*</span> <span class="n">s</span> <span class="o">=</span> <span class="n">new_stack</span><span class="p">(</span><span class="n">compare_integer</span><span class="p">);</span>
      <span class="kt">int</span> <span class="n">i</span><span class="p">,</span> <span class="o">*</span><span class="n">data</span><span class="p">;</span>
      <span class="k">for</span> <span class="p">(</span><span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="mi">100</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
      <span class="p">{</span>
            <span class="n">data</span> <span class="o">=</span> <span class="n">malloc</span><span class="p">(</span><span class="k">sizeof</span><span class="p">(</span><span class="kt">int</span><span class="p">));</span>
            <span class="o">*</span><span class="n">data</span> <span class="o">=</span> <span class="n">i</span><span class="p">;</span>
            <span class="n">push</span><span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="n">data</span><span class="p">);</span>
      <span class="p">}</span>

      <span class="k">for</span> <span class="p">(</span><span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="mi">100</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
      <span class="p">{</span>
            <span class="n">data</span> <span class="o">=</span> <span class="p">(</span><span class="kt">int</span><span class="o">*</span><span class="p">)</span> <span class="n">pop</span><span class="p">(</span><span class="n">s</span><span class="p">);</span>
            <span class="n">printf</span><span class="p">(</span><span class="s">"</span><span class="se">\n</span><span class="s">Popped %d"</span><span class="p">,</span><span class="o">*</span><span class="p">((</span><span class="kt">int</span><span class="o">*</span><span class="p">)</span> <span class="n">data</span><span class="p">));</span>
            <span class="n">free</span><span class="p">(</span><span class="n">data</span><span class="p">);</span>
      <span class="p">}</span>
      <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
<span class="cp">#endif</span></code></pre></div>
;
T;U;[0I"(<!DOCTYPE html><html lang="en"><head>
    <meta charset="utf-8">
    <title>A Developer's Notebook - Stack</title>
    <link rel="stylesheet" href="https://unpkg.com/purecss@1.0.1/build/pure-min.css" integrity="sha384-oAOxQR6DkCoMliIh8yFnu25d7Eq/PHS21PClpwjOTeU2jRSq11vu66rf90/cZr47" crossorigin="anonymous">
    <link rel="stylesheet" href="../../assets/stylesheet.css">
    <link rel="stylesheet" href="../../assets/highlight.css">

    <!-- you don't need to keep this, but it's cool for stats! -->
    <meta name="generator" content="Nanoc 4.11.9">
  </head>
  <body>
    <div id="layout">
      <div class="header">
        <h1>
          <a href="../../">A Developer's Notebook</a>
        </h1>
      </div>


      <div class="content">
        <nav class="pure-g">
          <div class="pure-u-2-3 links">
            <a href="../../index.html">Home</a> ¬∑
            <a href="../../tags.html">Tags</a> ¬∑
            <a href="../../years.html">Years</a> ¬∑
            <a href="../../about.html">About</a>
          </div>

          <div class="pure-u-1-3">
            <div class="contact">
              <span>
                <a href="https://github.com/lbrito1" download="">
                  <img src="../../assets/icons/github.svg" alt="Github icon">
                  </a>
              </span>
              <span>
                <a href="https://www.linkedin.com/in/leonardo-mendes-brito/">
                <img src="../../assets/icons/linkedin.svg" alt="LinkedIn icon">
                </a>
              </span>
            </div>
          </div>
        </nav>
        
  <div class="post-show">
    <h1>Stack</h1>
    <article class="text">
      <p>Using our implementation of a doubly linked (DL) list, we can very simply build the most basic LIFO (last in, first out) data structure: the stack.</p>

<p><a href="../../assets/images/codedeposit/2014/03/stack.png"><img src="../../assets/images/codedeposit/2014/03/stack.png?w=300" alt="stack"></a></p>

<p>Stacks have two basic operations: push and pop. Push pushes data onto the stack (i.e., end of the DL list) and pop pops data off the list‚Äôs tail, which is only possible because we can set the new tail as tail-&gt;prev, since we‚Äôre using a DL list, with previous pointers. Another useful function is peek, which returns a pointer to the stack‚Äôs top.</p>

<!-- more -->

<p>The only extra care we need here is to remind ourselves that pop only logically removes the element from the stack, so we‚Äôll have to free the data after we‚Äôre done using it.</p>

<p>Here‚Äôs the code with printable tests, as usual.</p>

<div class="highlight"><pre><code class="language-c"><span class="cm">/*
    File: stack.c

    Copyright (c) 2014 Leonardo Brito &lt;lbrito@gmail.com&gt;

    This software is free software; you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation; either version 2 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License along
    with this program; if not, write the Free Software Foundation, Inc., 51
    Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
*/</span>

<span class="cp">#include "doubly_linked_list.c"
</span>
<span class="k">typedef</span> <span class="n">d_linked_list</span> <span class="n">stack</span><span class="p">;</span>
<span class="k">typedef</span> <span class="n">d_element</span> <span class="n">elem</span><span class="p">;</span>

<span class="n">stack</span> <span class="o">*</span><span class="nf">new_stack</span><span class="p">(</span><span class="kt">int</span> <span class="p">(</span><span class="o">*</span><span class="n">comparator</span><span class="p">)</span> <span class="p">(</span><span class="kt">void</span><span class="o">*</span><span class="p">,</span> <span class="kt">void</span><span class="o">*</span><span class="p">))</span>
<span class="p">{</span>
      <span class="k">return</span> <span class="n">new_list</span><span class="p">(</span><span class="n">comparator</span><span class="p">);</span>
<span class="p">}</span>

<span class="kt">void</span> <span class="nf">push</span><span class="p">(</span><span class="n">stack</span><span class="o">*</span> <span class="n">s</span><span class="p">,</span> <span class="kt">void</span> <span class="o">*</span><span class="n">data</span><span class="p">)</span>
<span class="p">{</span>
      <span class="n">add</span><span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="n">data</span><span class="p">);</span>
<span class="p">}</span>

<span class="kt">void</span><span class="o">*</span> <span class="nf">pop</span><span class="p">(</span><span class="n">stack</span><span class="o">*</span> <span class="n">s</span><span class="p">)</span>
<span class="p">{</span>
      <span class="n">elem</span><span class="o">*</span> <span class="n">tail</span> <span class="o">=</span> <span class="n">s</span><span class="o">-&gt;</span><span class="n">tail</span><span class="p">;</span>
      <span class="k">if</span> <span class="p">(</span><span class="n">tail</span><span class="o">!=</span><span class="nb">NULL</span><span class="p">)</span>
      <span class="p">{</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">tail</span><span class="o">-&gt;</span><span class="n">prev</span> <span class="o">!=</span> <span class="nb">NULL</span><span class="p">)</span>
            <span class="p">{</span>
                  <span class="n">s</span><span class="o">-&gt;</span><span class="n">tail</span> <span class="o">=</span> <span class="n">tail</span><span class="o">-&gt;</span><span class="n">prev</span><span class="p">;</span>
                  <span class="n">s</span><span class="o">-&gt;</span><span class="n">tail</span><span class="o">-&gt;</span><span class="n">next</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
            <span class="p">}</span>
            <span class="k">else</span>
            <span class="p">{</span>
                  <span class="n">s</span><span class="o">-&gt;</span><span class="n">tail</span> <span class="o">=</span> <span class="n">s</span><span class="o">-&gt;</span><span class="n">head</span><span class="p">;</span>
            <span class="p">}</span>
      <span class="p">}</span>
      <span class="k">return</span> <span class="n">tail</span><span class="o">-&gt;</span><span class="n">data</span><span class="p">;</span>
<span class="p">}</span>

<span class="kt">void</span><span class="o">*</span> <span class="nf">peek</span><span class="p">(</span><span class="n">stack</span><span class="o">*</span> <span class="n">s</span><span class="p">)</span>
<span class="p">{</span>
      <span class="k">return</span> <span class="n">s</span><span class="o">-&gt;</span><span class="n">tail</span><span class="p">;</span>
<span class="p">}</span>

<span class="cp">#ifdef _DEBUGGING
</span><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
<span class="p">{</span>
      <span class="n">stack</span><span class="o">*</span> <span class="n">s</span> <span class="o">=</span> <span class="n">new_stack</span><span class="p">(</span><span class="n">compare_integer</span><span class="p">);</span>
      <span class="kt">int</span> <span class="n">i</span><span class="p">,</span> <span class="o">*</span><span class="n">data</span><span class="p">;</span>
      <span class="k">for</span> <span class="p">(</span><span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="mi">100</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
      <span class="p">{</span>
            <span class="n">data</span> <span class="o">=</span> <span class="n">malloc</span><span class="p">(</span><span class="k">sizeof</span><span class="p">(</span><span class="kt">int</span><span class="p">));</span>
            <span class="o">*</span><span class="n">data</span> <span class="o">=</span> <span class="n">i</span><span class="p">;</span>
            <span class="n">push</span><span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="n">data</span><span class="p">);</span>
      <span class="p">}</span>

      <span class="k">for</span> <span class="p">(</span><span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="mi">100</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
      <span class="p">{</span>
            <span class="n">data</span> <span class="o">=</span> <span class="p">(</span><span class="kt">int</span><span class="o">*</span><span class="p">)</span> <span class="n">pop</span><span class="p">(</span><span class="n">s</span><span class="p">);</span>
            <span class="n">printf</span><span class="p">(</span><span class="s">"</span><span class="se">\n</span><span class="s">Popped %d"</span><span class="p">,</span><span class="o">*</span><span class="p">((</span><span class="kt">int</span><span class="o">*</span><span class="p">)</span> <span class="n">data</span><span class="p">));</span>
            <span class="n">free</span><span class="p">(</span><span class="n">data</span><span class="p">);</span>
      <span class="p">}</span>
      <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
<span class="cp">#endif</span></code></pre></div>

    </article>
    <aside>Posted at: Mar 18, 2014</aside>
    <div class="post-footer">
      <a href="../../index.html">Back</a>
    </div>
  </div>

        <div class="footer">
          2020 Leonardo Brito
        </div>
      </div>

    </div>
  


</body></html>;
T;@O;@Oo;;;;	I"6/posts/2014-03-18-burgergfx-simple-2d-graphics.md;
T{;{
;U;[I"X/home/carol/workspace/blog/content/posts/2014-03-18-burgergfx-simple-2d-graphics.md;
TI"Å[![sample code and output](/assets/images/codedeposit/2014/03/burger_gfx1.jpg)](/assets/images/codedeposit/2014/03/burger_gfx1.jpg)

Several times I find myself wanting to visualize something in 2D, but can't bother to fire up OpenGL or other cumbersome API.

So I wrote a simple program which I called BurgerGFX, with 2 core functionalities: draw point and draw line. I find this to be quite enough for simple applications such as viewing a graph.

Setting up the drawing canvas, which I call burger, is simple: call create(width, height), which returns a pointer to the burger. Then simply call the draws, prints and cleans as needed.

<!-- more -->

Here's the code for your enjoyment.

<div class="highlight"><pre><code class="language-c">
/*
    File: burgergfx.c

    Copyright (c) 2014 Leonardo Brito <lbrito@gmail.com>

    This software is free software; you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation; either version 2 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License along
    with this program; if not, write the Free Software Foundation, Inc., 51
    Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
*/

#include
#include
#include

typedef struct
{
      int w,h;
      char* burger_matrix;
} burger;

/**
 *  @brief Create a new w x h burger
 *
 *  @param [in] w width
 *  @param [in] h height
 *  @return pointer to burger
 */
burger* create(int w, int h)
{
      burger* bgfx = malloc(sizeof(burger));
      bgfx->w = w;
      bgfx->h = h;
      bgfx->burger_matrix = malloc(sizeof(char)*w*h);
      int i=0;
      for (;i<w*h;i++) bgfx->burger_matrix[i] = '.';
      return bgfx;
}

/**
 *  @brief Get the appropriate cell from a normalized x coordinate
 *
 *  @param [in] b burger
 *  @param [in] x normalized coordinate
 *  @return cell index
 */
int get_norm_x(burger* b, double x)
{
      return (int) round(b->w*x);
}

/**
 *  @brief Get the appropriate cell from a normalized y coordinate
 *
 *  @param [in] b burger
 *  @param [in] y normalized coordinate
 *  @return cell index
 */
int get_norm_y(burger* b, double y)
{
      return (int) round(b->h*y);
}

/**
 *  @brief Fill the burger with whitespace
 *
 *  @param [in] b

 */
void clean_burger(burger* b)
{
      int i=0;
      for (;iw*b->h;i++) b->burger_matrix[i] = ' ';
}

/**
 *  @brief Put char in cell
 *
 *  @param [in] b  burger
 *  @param [in] dx normalized x position
 *  @param [in] dy normalized y position
 *  @param [in] c  char to be put
 */
void put_burger(burger* b, double dx, double dy, char c)
{
      int x = get_norm_x(b, dx);
      int y = get_norm_y(b, dy);
      b->burger_matrix[y+(x*b->w)] = c;
}

/**
 *  @brief Put char in cell
 *
 *  @param [in] b burger
 *  @param [in] x cell index
 *  @param [in] y cell index
 *  @param [in] c char to be put
 */
void put_burger_int(burger* b, int x, int y, char c)
{
      b->burger_matrix[y+(x*b->w)] = c;
}

/**
 *  @brief Print the current burger
 *
 *  @param [in] bgfx
 */
void print_burger(burger* bgfx)
{

      int i = 0, j = 0;
      printf("\n");
      for (;i<(bgfx->w/2)-2;i++) printf("  ");
      printf("Burger\n");
      for (i=0;ih;i++)
      {
            for (j=0;jw;j++)
            {
                  printf("%c ",bgfx->burger_matrix[i+(j*bgfx->w)]);
            }
            printf("\n");
      }
}

/**
 *  @brief Draw line from point 1 to point 2 on burger
 *
 *  @param [in] bgfx
 *  @param [in] dx1  point 1 normalized x coord
 *  @param [in] dy1  point 1 normalized y coord
 *  @param [in] dx2  point 2 normalized x coord
 *  @param [in] dy2  point 2 normalized y coord
 */
void put_line(burger* bgfx, double dx1, double dy1, double dx2, double dy2)
{
      int x1 = get_norm_x(bgfx, dx1);
      int y1 = get_norm_y(bgfx, dy1);
      int x2 = get_norm_x(bgfx, dx2);
      int y2 = get_norm_y(bgfx, dy2);

      int i = 0;

      float a = (float)(y2-y1)/(float)(x2-x1);

      if (x1<x2)
      {
            for (i=x1; i            {
                  int x = i - x1;
                  int y = (int) (a*x) + y1;
                  put_burger_int(bgfx, i, y, '.');
            }
      }
      else
      {
            for (i=x2; i<x1; i++)
            {
                  int x = i - x2;
                  int y = (int) (a*x) + (y1                  put_burger_int(bgfx, i, y, '.');
            }
      }
}
</code></pre></div>
;
T;U;[0I"rD<p><a href="/assets/images/codedeposit/2014/03/burger_gfx1.jpg"><img src="/assets/images/codedeposit/2014/03/burger_gfx1.jpg" alt="sample code and output"></a></p>

<p>Several times I find myself wanting to visualize something in 2D, but can‚Äôt bother to fire up OpenGL or other cumbersome API.</p>

<p>So I wrote a simple program which I called BurgerGFX, with 2 core functionalities: draw point and draw line. I find this to be quite enough for simple applications such as viewing a graph.</p>

<p>Setting up the drawing canvas, which I call burger, is simple: call create(width, height), which returns a pointer to the burger. Then simply call the draws, prints and cleans as needed.</p>

<!-- more -->

<p>Here‚Äôs the code for your enjoyment.</p>

<div class="highlight"><pre><code class="language-c"><span class="cm">/*
    File: burgergfx.c

    Copyright (c) 2014 Leonardo Brito &lt;lbrito@gmail.com&gt;

    This software is free software; you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation; either version 2 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License along
    with this program; if not, write the Free Software Foundation, Inc., 51
    Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
*/</span>

<span class="cp">#include
#include
#include
</span>
<span class="k">typedef</span> <span class="k">struct</span>
<span class="p">{</span>
      <span class="kt">int</span> <span class="n">w</span><span class="p">,</span><span class="n">h</span><span class="p">;</span>
      <span class="kt">char</span><span class="o">*</span> <span class="n">burger_matrix</span><span class="p">;</span>
<span class="p">}</span> <span class="n">burger</span><span class="p">;</span>

<span class="cm">/**
 *  @brief Create a new w x h burger
 *
 *  @param [in] w width
 *  @param [in] h height
 *  @return pointer to burger
 */</span>
<span class="n">burger</span><span class="o">*</span> <span class="nf">create</span><span class="p">(</span><span class="kt">int</span> <span class="n">w</span><span class="p">,</span> <span class="kt">int</span> <span class="n">h</span><span class="p">)</span>
<span class="p">{</span>
      <span class="n">burger</span><span class="o">*</span> <span class="n">bgfx</span> <span class="o">=</span> <span class="n">malloc</span><span class="p">(</span><span class="k">sizeof</span><span class="p">(</span><span class="n">burger</span><span class="p">));</span>
      <span class="n">bgfx</span><span class="o">-&gt;</span><span class="n">w</span> <span class="o">=</span> <span class="n">w</span><span class="p">;</span>
      <span class="n">bgfx</span><span class="o">-&gt;</span><span class="n">h</span> <span class="o">=</span> <span class="n">h</span><span class="p">;</span>
      <span class="n">bgfx</span><span class="o">-&gt;</span><span class="n">burger_matrix</span> <span class="o">=</span> <span class="n">malloc</span><span class="p">(</span><span class="k">sizeof</span><span class="p">(</span><span class="kt">char</span><span class="p">)</span><span class="o">*</span><span class="n">w</span><span class="o">*</span><span class="n">h</span><span class="p">);</span>
      <span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span>
      <span class="k">for</span> <span class="p">(;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">w</span><span class="o">*</span><span class="n">h</span><span class="p">;</span><span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="n">bgfx</span><span class="o">-&gt;</span><span class="n">burger_matrix</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="sc">'.'</span><span class="p">;</span>
      <span class="k">return</span> <span class="n">bgfx</span><span class="p">;</span>
<span class="p">}</span>

<span class="cm">/**
 *  @brief Get the appropriate cell from a normalized x coordinate
 *
 *  @param [in] b burger
 *  @param [in] x normalized coordinate
 *  @return cell index
 */</span>
<span class="kt">int</span> <span class="nf">get_norm_x</span><span class="p">(</span><span class="n">burger</span><span class="o">*</span> <span class="n">b</span><span class="p">,</span> <span class="kt">double</span> <span class="n">x</span><span class="p">)</span>
<span class="p">{</span>
      <span class="k">return</span> <span class="p">(</span><span class="kt">int</span><span class="p">)</span> <span class="n">round</span><span class="p">(</span><span class="n">b</span><span class="o">-&gt;</span><span class="n">w</span><span class="o">*</span><span class="n">x</span><span class="p">);</span>
<span class="p">}</span>

<span class="cm">/**
 *  @brief Get the appropriate cell from a normalized y coordinate
 *
 *  @param [in] b burger
 *  @param [in] y normalized coordinate
 *  @return cell index
 */</span>
<span class="kt">int</span> <span class="nf">get_norm_y</span><span class="p">(</span><span class="n">burger</span><span class="o">*</span> <span class="n">b</span><span class="p">,</span> <span class="kt">double</span> <span class="n">y</span><span class="p">)</span>
<span class="p">{</span>
      <span class="k">return</span> <span class="p">(</span><span class="kt">int</span><span class="p">)</span> <span class="n">round</span><span class="p">(</span><span class="n">b</span><span class="o">-&gt;</span><span class="n">h</span><span class="o">*</span><span class="n">y</span><span class="p">);</span>
<span class="p">}</span>

<span class="cm">/**
 *  @brief Fill the burger with whitespace
 *
 *  @param [in] b

 */</span>
<span class="kt">void</span> <span class="nf">clean_burger</span><span class="p">(</span><span class="n">burger</span><span class="o">*</span> <span class="n">b</span><span class="p">)</span>
<span class="p">{</span>
      <span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span>
      <span class="k">for</span> <span class="p">(;</span><span class="n">iw</span><span class="o">*</span><span class="n">b</span><span class="o">-&gt;</span><span class="n">h</span><span class="p">;</span><span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="n">b</span><span class="o">-&gt;</span><span class="n">burger_matrix</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="sc">' '</span><span class="p">;</span>
<span class="p">}</span>

<span class="cm">/**
 *  @brief Put char in cell
 *
 *  @param [in] b  burger
 *  @param [in] dx normalized x position
 *  @param [in] dy normalized y position
 *  @param [in] c  char to be put
 */</span>
<span class="kt">void</span> <span class="nf">put_burger</span><span class="p">(</span><span class="n">burger</span><span class="o">*</span> <span class="n">b</span><span class="p">,</span> <span class="kt">double</span> <span class="n">dx</span><span class="p">,</span> <span class="kt">double</span> <span class="n">dy</span><span class="p">,</span> <span class="kt">char</span> <span class="n">c</span><span class="p">)</span>
<span class="p">{</span>
      <span class="kt">int</span> <span class="n">x</span> <span class="o">=</span> <span class="n">get_norm_x</span><span class="p">(</span><span class="n">b</span><span class="p">,</span> <span class="n">dx</span><span class="p">);</span>
      <span class="kt">int</span> <span class="n">y</span> <span class="o">=</span> <span class="n">get_norm_y</span><span class="p">(</span><span class="n">b</span><span class="p">,</span> <span class="n">dy</span><span class="p">);</span>
      <span class="n">b</span><span class="o">-&gt;</span><span class="n">burger_matrix</span><span class="p">[</span><span class="n">y</span><span class="o">+</span><span class="p">(</span><span class="n">x</span><span class="o">*</span><span class="n">b</span><span class="o">-&gt;</span><span class="n">w</span><span class="p">)]</span> <span class="o">=</span> <span class="n">c</span><span class="p">;</span>
<span class="p">}</span>

<span class="cm">/**
 *  @brief Put char in cell
 *
 *  @param [in] b burger
 *  @param [in] x cell index
 *  @param [in] y cell index
 *  @param [in] c char to be put
 */</span>
<span class="kt">void</span> <span class="nf">put_burger_int</span><span class="p">(</span><span class="n">burger</span><span class="o">*</span> <span class="n">b</span><span class="p">,</span> <span class="kt">int</span> <span class="n">x</span><span class="p">,</span> <span class="kt">int</span> <span class="n">y</span><span class="p">,</span> <span class="kt">char</span> <span class="n">c</span><span class="p">)</span>
<span class="p">{</span>
      <span class="n">b</span><span class="o">-&gt;</span><span class="n">burger_matrix</span><span class="p">[</span><span class="n">y</span><span class="o">+</span><span class="p">(</span><span class="n">x</span><span class="o">*</span><span class="n">b</span><span class="o">-&gt;</span><span class="n">w</span><span class="p">)]</span> <span class="o">=</span> <span class="n">c</span><span class="p">;</span>
<span class="p">}</span>

<span class="cm">/**
 *  @brief Print the current burger
 *
 *  @param [in] bgfx
 */</span>
<span class="kt">void</span> <span class="nf">print_burger</span><span class="p">(</span><span class="n">burger</span><span class="o">*</span> <span class="n">bgfx</span><span class="p">)</span>
<span class="p">{</span>

      <span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
      <span class="n">printf</span><span class="p">(</span><span class="s">"</span><span class="se">\n</span><span class="s">"</span><span class="p">);</span>
      <span class="k">for</span> <span class="p">(;</span><span class="n">i</span><span class="o">&lt;</span><span class="p">(</span><span class="n">bgfx</span><span class="o">-&gt;</span><span class="n">w</span><span class="o">/</span><span class="mi">2</span><span class="p">)</span><span class="o">-</span><span class="mi">2</span><span class="p">;</span><span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="n">printf</span><span class="p">(</span><span class="s">"  "</span><span class="p">);</span>
      <span class="n">printf</span><span class="p">(</span><span class="s">"Burger</span><span class="se">\n</span><span class="s">"</span><span class="p">);</span>
      <span class="k">for</span> <span class="p">(</span><span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="n">ih</span><span class="p">;</span><span class="n">i</span><span class="o">++</span><span class="p">)</span>
      <span class="p">{</span>
            <span class="k">for</span> <span class="p">(</span><span class="n">j</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="n">jw</span><span class="p">;</span><span class="n">j</span><span class="o">++</span><span class="p">)</span>
            <span class="p">{</span>
                  <span class="n">printf</span><span class="p">(</span><span class="s">"%c "</span><span class="p">,</span><span class="n">bgfx</span><span class="o">-&gt;</span><span class="n">burger_matrix</span><span class="p">[</span><span class="n">i</span><span class="o">+</span><span class="p">(</span><span class="n">j</span><span class="o">*</span><span class="n">bgfx</span><span class="o">-&gt;</span><span class="n">w</span><span class="p">)]);</span>
            <span class="p">}</span>
            <span class="n">printf</span><span class="p">(</span><span class="s">"</span><span class="se">\n</span><span class="s">"</span><span class="p">);</span>
      <span class="p">}</span>
<span class="p">}</span>

<span class="cm">/**
 *  @brief Draw line from point 1 to point 2 on burger
 *
 *  @param [in] bgfx
 *  @param [in] dx1  point 1 normalized x coord
 *  @param [in] dy1  point 1 normalized y coord
 *  @param [in] dx2  point 2 normalized x coord
 *  @param [in] dy2  point 2 normalized y coord
 */</span>
<span class="kt">void</span> <span class="nf">put_line</span><span class="p">(</span><span class="n">burger</span><span class="o">*</span> <span class="n">bgfx</span><span class="p">,</span> <span class="kt">double</span> <span class="n">dx1</span><span class="p">,</span> <span class="kt">double</span> <span class="n">dy1</span><span class="p">,</span> <span class="kt">double</span> <span class="n">dx2</span><span class="p">,</span> <span class="kt">double</span> <span class="n">dy2</span><span class="p">)</span>
<span class="p">{</span>
      <span class="kt">int</span> <span class="n">x1</span> <span class="o">=</span> <span class="n">get_norm_x</span><span class="p">(</span><span class="n">bgfx</span><span class="p">,</span> <span class="n">dx1</span><span class="p">);</span>
      <span class="kt">int</span> <span class="n">y1</span> <span class="o">=</span> <span class="n">get_norm_y</span><span class="p">(</span><span class="n">bgfx</span><span class="p">,</span> <span class="n">dy1</span><span class="p">);</span>
      <span class="kt">int</span> <span class="n">x2</span> <span class="o">=</span> <span class="n">get_norm_x</span><span class="p">(</span><span class="n">bgfx</span><span class="p">,</span> <span class="n">dx2</span><span class="p">);</span>
      <span class="kt">int</span> <span class="n">y2</span> <span class="o">=</span> <span class="n">get_norm_y</span><span class="p">(</span><span class="n">bgfx</span><span class="p">,</span> <span class="n">dy2</span><span class="p">);</span>

      <span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>

      <span class="kt">float</span> <span class="n">a</span> <span class="o">=</span> <span class="p">(</span><span class="kt">float</span><span class="p">)(</span><span class="n">y2</span><span class="o">-</span><span class="n">y1</span><span class="p">)</span><span class="o">/</span><span class="p">(</span><span class="kt">float</span><span class="p">)(</span><span class="n">x2</span><span class="o">-</span><span class="n">x1</span><span class="p">);</span>

      <span class="k">if</span> <span class="p">(</span><span class="n">x1</span><span class="o">&lt;</span><span class="n">x2</span><span class="p">)</span>
      <span class="p">{</span>
            <span class="k">for</span> <span class="p">(</span><span class="n">i</span><span class="o">=</span><span class="n">x1</span><span class="p">;</span> <span class="n">i</span>            <span class="p">{</span>
                  <span class="kt">int</span> <span class="n">x</span> <span class="o">=</span> <span class="n">i</span> <span class="o">-</span> <span class="n">x1</span><span class="p">;</span>
                  <span class="kt">int</span> <span class="n">y</span> <span class="o">=</span> <span class="p">(</span><span class="kt">int</span><span class="p">)</span> <span class="p">(</span><span class="n">a</span><span class="o">*</span><span class="n">x</span><span class="p">)</span> <span class="o">+</span> <span class="n">y1</span><span class="p">;</span>
                  <span class="n">put_burger_int</span><span class="p">(</span><span class="n">bgfx</span><span class="p">,</span> <span class="n">i</span><span class="p">,</span> <span class="n">y</span><span class="p">,</span> <span class="sc">'.'</span><span class="p">);</span>
            <span class="p">}</span>
      <span class="p">}</span>
      <span class="k">else</span>
      <span class="p">{</span>
            <span class="k">for</span> <span class="p">(</span><span class="n">i</span><span class="o">=</span><span class="n">x2</span><span class="p">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">x1</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
            <span class="p">{</span>
                  <span class="kt">int</span> <span class="n">x</span> <span class="o">=</span> <span class="n">i</span> <span class="o">-</span> <span class="n">x2</span><span class="p">;</span>
                  <span class="kt">int</span> <span class="n">y</span> <span class="o">=</span> <span class="p">(</span><span class="kt">int</span><span class="p">)</span> <span class="p">(</span><span class="n">a</span><span class="o">*</span><span class="n">x</span><span class="p">)</span> <span class="o">+</span> <span class="p">(</span><span class="n">y1</span>                  <span class="n">put_burger_int</span><span class="p">(</span><span class="n">bgfx</span><span class="p">,</span> <span class="n">i</span><span class="p">,</span> <span class="n">y</span><span class="p">,</span> <span class="sc">'.'</span><span class="p">);</span>
            <span class="p">}</span>
      <span class="p">}</span>
<span class="p">}</span></code></pre></div>
;
T;U;[0I"FL<!DOCTYPE html><html lang="en"><head>
    <meta charset="utf-8">
    <title>A Developer's Notebook - BurgerGFX - simple 2D graphics</title>
    <link rel="stylesheet" href="https://unpkg.com/purecss@1.0.1/build/pure-min.css" integrity="sha384-oAOxQR6DkCoMliIh8yFnu25d7Eq/PHS21PClpwjOTeU2jRSq11vu66rf90/cZr47" crossorigin="anonymous">
    <link rel="stylesheet" href="../../assets/stylesheet.css">
    <link rel="stylesheet" href="../../assets/highlight.css">

    <!-- you don't need to keep this, but it's cool for stats! -->
    <meta name="generator" content="Nanoc 4.11.9">
  </head>
  <body>
    <div id="layout">
      <div class="header">
        <h1>
          <a href="../../">A Developer's Notebook</a>
        </h1>
      </div>


      <div class="content">
        <nav class="pure-g">
          <div class="pure-u-2-3 links">
            <a href="../../index.html">Home</a> ¬∑
            <a href="../../tags.html">Tags</a> ¬∑
            <a href="../../years.html">Years</a> ¬∑
            <a href="../../about.html">About</a>
          </div>

          <div class="pure-u-1-3">
            <div class="contact">
              <span>
                <a href="https://github.com/lbrito1" download="">
                  <img src="../../assets/icons/github.svg" alt="Github icon">
                  </a>
              </span>
              <span>
                <a href="https://www.linkedin.com/in/leonardo-mendes-brito/">
                <img src="../../assets/icons/linkedin.svg" alt="LinkedIn icon">
                </a>
              </span>
            </div>
          </div>
        </nav>
        
  <div class="post-show">
    <h1>BurgerGFX - simple 2D graphics</h1>
    <article class="text">
      <p><a href="../../assets/images/codedeposit/2014/03/burger_gfx1.jpg"><img src="../../assets/images/codedeposit/2014/03/burger_gfx1.jpg" alt="sample code and output"></a></p>

<p>Several times I find myself wanting to visualize something in 2D, but can‚Äôt bother to fire up OpenGL or other cumbersome API.</p>

<p>So I wrote a simple program which I called BurgerGFX, with 2 core functionalities: draw point and draw line. I find this to be quite enough for simple applications such as viewing a graph.</p>

<p>Setting up the drawing canvas, which I call burger, is simple: call create(width, height), which returns a pointer to the burger. Then simply call the draws, prints and cleans as needed.</p>

<!-- more -->

<p>Here‚Äôs the code for your enjoyment.</p>

<div class="highlight"><pre><code class="language-c"><span class="cm">/*
    File: burgergfx.c

    Copyright (c) 2014 Leonardo Brito &lt;lbrito@gmail.com&gt;

    This software is free software; you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation; either version 2 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License along
    with this program; if not, write the Free Software Foundation, Inc., 51
    Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
*/</span>

<span class="cp">#include
#include
#include
</span>
<span class="k">typedef</span> <span class="k">struct</span>
<span class="p">{</span>
      <span class="kt">int</span> <span class="n">w</span><span class="p">,</span><span class="n">h</span><span class="p">;</span>
      <span class="kt">char</span><span class="o">*</span> <span class="n">burger_matrix</span><span class="p">;</span>
<span class="p">}</span> <span class="n">burger</span><span class="p">;</span>

<span class="cm">/**
 *  @brief Create a new w x h burger
 *
 *  @param [in] w width
 *  @param [in] h height
 *  @return pointer to burger
 */</span>
<span class="n">burger</span><span class="o">*</span> <span class="nf">create</span><span class="p">(</span><span class="kt">int</span> <span class="n">w</span><span class="p">,</span> <span class="kt">int</span> <span class="n">h</span><span class="p">)</span>
<span class="p">{</span>
      <span class="n">burger</span><span class="o">*</span> <span class="n">bgfx</span> <span class="o">=</span> <span class="n">malloc</span><span class="p">(</span><span class="k">sizeof</span><span class="p">(</span><span class="n">burger</span><span class="p">));</span>
      <span class="n">bgfx</span><span class="o">-&gt;</span><span class="n">w</span> <span class="o">=</span> <span class="n">w</span><span class="p">;</span>
      <span class="n">bgfx</span><span class="o">-&gt;</span><span class="n">h</span> <span class="o">=</span> <span class="n">h</span><span class="p">;</span>
      <span class="n">bgfx</span><span class="o">-&gt;</span><span class="n">burger_matrix</span> <span class="o">=</span> <span class="n">malloc</span><span class="p">(</span><span class="k">sizeof</span><span class="p">(</span><span class="kt">char</span><span class="p">)</span><span class="o">*</span><span class="n">w</span><span class="o">*</span><span class="n">h</span><span class="p">);</span>
      <span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span>
      <span class="k">for</span> <span class="p">(;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">w</span><span class="o">*</span><span class="n">h</span><span class="p">;</span><span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="n">bgfx</span><span class="o">-&gt;</span><span class="n">burger_matrix</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="sc">'.'</span><span class="p">;</span>
      <span class="k">return</span> <span class="n">bgfx</span><span class="p">;</span>
<span class="p">}</span>

<span class="cm">/**
 *  @brief Get the appropriate cell from a normalized x coordinate
 *
 *  @param [in] b burger
 *  @param [in] x normalized coordinate
 *  @return cell index
 */</span>
<span class="kt">int</span> <span class="nf">get_norm_x</span><span class="p">(</span><span class="n">burger</span><span class="o">*</span> <span class="n">b</span><span class="p">,</span> <span class="kt">double</span> <span class="n">x</span><span class="p">)</span>
<span class="p">{</span>
      <span class="k">return</span> <span class="p">(</span><span class="kt">int</span><span class="p">)</span> <span class="n">round</span><span class="p">(</span><span class="n">b</span><span class="o">-&gt;</span><span class="n">w</span><span class="o">*</span><span class="n">x</span><span class="p">);</span>
<span class="p">}</span>

<span class="cm">/**
 *  @brief Get the appropriate cell from a normalized y coordinate
 *
 *  @param [in] b burger
 *  @param [in] y normalized coordinate
 *  @return cell index
 */</span>
<span class="kt">int</span> <span class="nf">get_norm_y</span><span class="p">(</span><span class="n">burger</span><span class="o">*</span> <span class="n">b</span><span class="p">,</span> <span class="kt">double</span> <span class="n">y</span><span class="p">)</span>
<span class="p">{</span>
      <span class="k">return</span> <span class="p">(</span><span class="kt">int</span><span class="p">)</span> <span class="n">round</span><span class="p">(</span><span class="n">b</span><span class="o">-&gt;</span><span class="n">h</span><span class="o">*</span><span class="n">y</span><span class="p">);</span>
<span class="p">}</span>

<span class="cm">/**
 *  @brief Fill the burger with whitespace
 *
 *  @param [in] b

 */</span>
<span class="kt">void</span> <span class="nf">clean_burger</span><span class="p">(</span><span class="n">burger</span><span class="o">*</span> <span class="n">b</span><span class="p">)</span>
<span class="p">{</span>
      <span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span>
      <span class="k">for</span> <span class="p">(;</span><span class="n">iw</span><span class="o">*</span><span class="n">b</span><span class="o">-&gt;</span><span class="n">h</span><span class="p">;</span><span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="n">b</span><span class="o">-&gt;</span><span class="n">burger_matrix</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="sc">' '</span><span class="p">;</span>
<span class="p">}</span>

<span class="cm">/**
 *  @brief Put char in cell
 *
 *  @param [in] b  burger
 *  @param [in] dx normalized x position
 *  @param [in] dy normalized y position
 *  @param [in] c  char to be put
 */</span>
<span class="kt">void</span> <span class="nf">put_burger</span><span class="p">(</span><span class="n">burger</span><span class="o">*</span> <span class="n">b</span><span class="p">,</span> <span class="kt">double</span> <span class="n">dx</span><span class="p">,</span> <span class="kt">double</span> <span class="n">dy</span><span class="p">,</span> <span class="kt">char</span> <span class="n">c</span><span class="p">)</span>
<span class="p">{</span>
      <span class="kt">int</span> <span class="n">x</span> <span class="o">=</span> <span class="n">get_norm_x</span><span class="p">(</span><span class="n">b</span><span class="p">,</span> <span class="n">dx</span><span class="p">);</span>
      <span class="kt">int</span> <span class="n">y</span> <span class="o">=</span> <span class="n">get_norm_y</span><span class="p">(</span><span class="n">b</span><span class="p">,</span> <span class="n">dy</span><span class="p">);</span>
      <span class="n">b</span><span class="o">-&gt;</span><span class="n">burger_matrix</span><span class="p">[</span><span class="n">y</span><span class="o">+</span><span class="p">(</span><span class="n">x</span><span class="o">*</span><span class="n">b</span><span class="o">-&gt;</span><span class="n">w</span><span class="p">)]</span> <span class="o">=</span> <span class="n">c</span><span class="p">;</span>
<span class="p">}</span>

<span class="cm">/**
 *  @brief Put char in cell
 *
 *  @param [in] b burger
 *  @param [in] x cell index
 *  @param [in] y cell index
 *  @param [in] c char to be put
 */</span>
<span class="kt">void</span> <span class="nf">put_burger_int</span><span class="p">(</span><span class="n">burger</span><span class="o">*</span> <span class="n">b</span><span class="p">,</span> <span class="kt">int</span> <span class="n">x</span><span class="p">,</span> <span class="kt">int</span> <span class="n">y</span><span class="p">,</span> <span class="kt">char</span> <span class="n">c</span><span class="p">)</span>
<span class="p">{</span>
      <span class="n">b</span><span class="o">-&gt;</span><span class="n">burger_matrix</span><span class="p">[</span><span class="n">y</span><span class="o">+</span><span class="p">(</span><span class="n">x</span><span class="o">*</span><span class="n">b</span><span class="o">-&gt;</span><span class="n">w</span><span class="p">)]</span> <span class="o">=</span> <span class="n">c</span><span class="p">;</span>
<span class="p">}</span>

<span class="cm">/**
 *  @brief Print the current burger
 *
 *  @param [in] bgfx
 */</span>
<span class="kt">void</span> <span class="nf">print_burger</span><span class="p">(</span><span class="n">burger</span><span class="o">*</span> <span class="n">bgfx</span><span class="p">)</span>
<span class="p">{</span>

      <span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
      <span class="n">printf</span><span class="p">(</span><span class="s">"</span><span class="se">\n</span><span class="s">"</span><span class="p">);</span>
      <span class="k">for</span> <span class="p">(;</span><span class="n">i</span><span class="o">&lt;</span><span class="p">(</span><span class="n">bgfx</span><span class="o">-&gt;</span><span class="n">w</span><span class="o">/</span><span class="mi">2</span><span class="p">)</span><span class="o">-</span><span class="mi">2</span><span class="p">;</span><span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="n">printf</span><span class="p">(</span><span class="s">"  "</span><span class="p">);</span>
      <span class="n">printf</span><span class="p">(</span><span class="s">"Burger</span><span class="se">\n</span><span class="s">"</span><span class="p">);</span>
      <span class="k">for</span> <span class="p">(</span><span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="n">ih</span><span class="p">;</span><span class="n">i</span><span class="o">++</span><span class="p">)</span>
      <span class="p">{</span>
            <span class="k">for</span> <span class="p">(</span><span class="n">j</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="n">jw</span><span class="p">;</span><span class="n">j</span><span class="o">++</span><span class="p">)</span>
            <span class="p">{</span>
                  <span class="n">printf</span><span class="p">(</span><span class="s">"%c "</span><span class="p">,</span><span class="n">bgfx</span><span class="o">-&gt;</span><span class="n">burger_matrix</span><span class="p">[</span><span class="n">i</span><span class="o">+</span><span class="p">(</span><span class="n">j</span><span class="o">*</span><span class="n">bgfx</span><span class="o">-&gt;</span><span class="n">w</span><span class="p">)]);</span>
            <span class="p">}</span>
            <span class="n">printf</span><span class="p">(</span><span class="s">"</span><span class="se">\n</span><span class="s">"</span><span class="p">);</span>
      <span class="p">}</span>
<span class="p">}</span>

<span class="cm">/**
 *  @brief Draw line from point 1 to point 2 on burger
 *
 *  @param [in] bgfx
 *  @param [in] dx1  point 1 normalized x coord
 *  @param [in] dy1  point 1 normalized y coord
 *  @param [in] dx2  point 2 normalized x coord
 *  @param [in] dy2  point 2 normalized y coord
 */</span>
<span class="kt">void</span> <span class="nf">put_line</span><span class="p">(</span><span class="n">burger</span><span class="o">*</span> <span class="n">bgfx</span><span class="p">,</span> <span class="kt">double</span> <span class="n">dx1</span><span class="p">,</span> <span class="kt">double</span> <span class="n">dy1</span><span class="p">,</span> <span class="kt">double</span> <span class="n">dx2</span><span class="p">,</span> <span class="kt">double</span> <span class="n">dy2</span><span class="p">)</span>
<span class="p">{</span>
      <span class="kt">int</span> <span class="n">x1</span> <span class="o">=</span> <span class="n">get_norm_x</span><span class="p">(</span><span class="n">bgfx</span><span class="p">,</span> <span class="n">dx1</span><span class="p">);</span>
      <span class="kt">int</span> <span class="n">y1</span> <span class="o">=</span> <span class="n">get_norm_y</span><span class="p">(</span><span class="n">bgfx</span><span class="p">,</span> <span class="n">dy1</span><span class="p">);</span>
      <span class="kt">int</span> <span class="n">x2</span> <span class="o">=</span> <span class="n">get_norm_x</span><span class="p">(</span><span class="n">bgfx</span><span class="p">,</span> <span class="n">dx2</span><span class="p">);</span>
      <span class="kt">int</span> <span class="n">y2</span> <span class="o">=</span> <span class="n">get_norm_y</span><span class="p">(</span><span class="n">bgfx</span><span class="p">,</span> <span class="n">dy2</span><span class="p">);</span>

      <span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>

      <span class="kt">float</span> <span class="n">a</span> <span class="o">=</span> <span class="p">(</span><span class="kt">float</span><span class="p">)(</span><span class="n">y2</span><span class="o">-</span><span class="n">y1</span><span class="p">)</span><span class="o">/</span><span class="p">(</span><span class="kt">float</span><span class="p">)(</span><span class="n">x2</span><span class="o">-</span><span class="n">x1</span><span class="p">);</span>

      <span class="k">if</span> <span class="p">(</span><span class="n">x1</span><span class="o">&lt;</span><span class="n">x2</span><span class="p">)</span>
      <span class="p">{</span>
            <span class="k">for</span> <span class="p">(</span><span class="n">i</span><span class="o">=</span><span class="n">x1</span><span class="p">;</span> <span class="n">i</span>            <span class="p">{</span>
                  <span class="kt">int</span> <span class="n">x</span> <span class="o">=</span> <span class="n">i</span> <span class="o">-</span> <span class="n">x1</span><span class="p">;</span>
                  <span class="kt">int</span> <span class="n">y</span> <span class="o">=</span> <span class="p">(</span><span class="kt">int</span><span class="p">)</span> <span class="p">(</span><span class="n">a</span><span class="o">*</span><span class="n">x</span><span class="p">)</span> <span class="o">+</span> <span class="n">y1</span><span class="p">;</span>
                  <span class="n">put_burger_int</span><span class="p">(</span><span class="n">bgfx</span><span class="p">,</span> <span class="n">i</span><span class="p">,</span> <span class="n">y</span><span class="p">,</span> <span class="sc">'.'</span><span class="p">);</span>
            <span class="p">}</span>
      <span class="p">}</span>
      <span class="k">else</span>
      <span class="p">{</span>
            <span class="k">for</span> <span class="p">(</span><span class="n">i</span><span class="o">=</span><span class="n">x2</span><span class="p">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">x1</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
            <span class="p">{</span>
                  <span class="kt">int</span> <span class="n">x</span> <span class="o">=</span> <span class="n">i</span> <span class="o">-</span> <span class="n">x2</span><span class="p">;</span>
                  <span class="kt">int</span> <span class="n">y</span> <span class="o">=</span> <span class="p">(</span><span class="kt">int</span><span class="p">)</span> <span class="p">(</span><span class="n">a</span><span class="o">*</span><span class="n">x</span><span class="p">)</span> <span class="o">+</span> <span class="p">(</span><span class="n">y1</span>                  <span class="n">put_burger_int</span><span class="p">(</span><span class="n">bgfx</span><span class="p">,</span> <span class="n">i</span><span class="p">,</span> <span class="n">y</span><span class="p">,</span> <span class="sc">'.'</span><span class="p">);</span>
            <span class="p">}</span>
      <span class="p">}</span>
<span class="p">}</span></code></pre></div>

    </article>
    <aside>Posted at: Mar 18, 2014</aside>
    <div class="post-footer">
      <a href="../../index.html">Back</a>
    </div>
  </div>

        <div class="footer">
          2020 Leonardo Brito
        </div>
      </div>

    </div>
  


</body></html>;
T;@];@]o;;;;	I"/index.html.erb;
T{;{
;U;[I"6/home/carol/workspace/blog/content/index.html.erb;
TI"u<% render('/posts_index.*', posts: sorted_articles, title: nil, show_tags: true) do %>
  <%= yield %>
<% end %>
;
T;U;[0I"&œ<div class='pure-g'>
  
    <div class='post-index pure-u-1-1'>
      <h2><a href="/2019/08/creating-more.html">My attempt at creating more</a></h2>

      <article class="text">
          <p>I began blogging in the now prehistoric late 2000s.</p>

<p>I‚Äôve done a few blogs about different subjects (computer science, algorithms, web development, short stories and political ramblings). I‚Äôve had blogs on Blogspot, Wordpress and, more recently, Medium.</p>

<p>Those platforms were (or are, I suppose) an easy way to spew your ideas over the Internet while also being nice and comfy for other people to actually read (this last point is important for the CSS-challenged such as yours truly). In other words, those services Got Shit Done‚Ñ¢.</p>


        <div class="post-tags">
          
            <div class="tags">
            
              <a class="pure-button button-xsmall" href="/tags/hello world">hello world</a>
            
            </div>
          
        </div>

        <div class="pure-g post-footer">
          <div class = pure-u-1-2>
              <a class='read-more' href='/2019/08/creating-more.html'>Continue reading &rsaquo;</a>
          </div>
          <div class="pure-u-1-2 post-meta">
            <aside>Posted Aug 29, 2019</aside>

          </div>
        </div>
      </article>
    </div>
  
    <div class='post-index pure-u-1-1'>
      <h2><a href="/2018/09/10-ways-not-to-do-a-big-deploy.html">10 ways not to do a big deploy</a></h2>

      <article class="text">
          <p>Ideally, deploys should be small, concise, easily revertible, fast and with a small or nil footprint on the database. However, no matter how awesome you are, sometimes that is just unattainable and you end up needing to deploy something that is just the opposite: big, messy, hard to revert, painfully slow and rubbing the DB the wrong way. If the deploy messes with a mission-critical part of your software, all the worse for you.</p>

<p>But there are actually many ways you can make those situations even worse. Here are a few bullet points you can follow to guarantee a nightmarish deploy complete with nasty side-effects that will haunt you and your coworkers for days to come.</p>


        <div class="post-tags">
          
            <div class="tags">
            
              <a class="pure-button button-xsmall" href="/tags/Devops">Devops</a>
            
            </div>
          
        </div>

        <div class="pure-g post-footer">
          <div class = pure-u-1-2>
              <a class='read-more' href='/2018/09/10-ways-not-to-do-a-big-deploy.html'>Continue reading &rsaquo;</a>
          </div>
          <div class="pure-u-1-2 post-meta">
            <aside>Posted Sep 03, 2018</aside>

          </div>
        </div>
      </article>
    </div>
  
    <div class='post-index pure-u-1-1'>
      <h2><a href="/2019/01/halving-page-sizes-with-srcset.html">Halving page sizes with srcset</a></h2>

      <article class="text">
          <p><a href="https://www.webbloatscore.com/">Web bloat</a> is <a href="http://idlewords.com/talks/website_obesity.htm">discussed</a> a lot nowadays. Web pages with fairly straightforward content‚Ää‚Äî‚Ääsuch as a Google search results page‚Ää‚Äî‚Ääare substantially bigger today than they were a few decades ago, even though the content itself hasn‚Äôt changed that much. We, web developers, are at least partly to blame: laziness or just <a href="http://www.haneycodes.net/npm-left-pad-have-we-forgotten-how-to-program/">bad programming</a> are definitively part of the problem (of course, laziness might stem from a tight or impossible deadline, and bad code might come from inexperienced programmers‚Ää‚Äî‚Ääno judgment going on here).</p>


        <div class="post-tags">
          
            <div class="tags">
            
              <a class="pure-button button-xsmall" href="/tags/Web development">Web development</a>
            
            </div>
          
        </div>

        <div class="pure-g post-footer">
          <div class = pure-u-1-2>
              <a class='read-more' href='/2019/01/halving-page-sizes-with-srcset.html'>Continue reading &rsaquo;</a>
          </div>
          <div class="pure-u-1-2 post-meta">
            <aside>Posted Sep 03, 2018</aside>

          </div>
        </div>
      </article>
    </div>
  
    <div class='post-index pure-u-1-1'>
      <h2><a href="/2018/06/working-remotely-in-a-non-remote-company.html">Working remotely in a non-remote company</a></h2>

      <article class="text">
          <p><img src="/assets/images/goiabada/1*mgVZOuAHmp9Ipm2asL0IQQ.jpg" alt=""></p>

<p>We‚Äôre a small team here at Guava, and we‚Äôve always considered ourselves <em>remote friendly.</em> Most of us work remotely every now and then pushed by varied <em>force majeure</em> situations‚Äî be it the flu, the need to supervise renovation or construction work at home, flash floods near the office, receiving guests at home or any number of other situations. We‚Äôve also had a few of us working remotely for a few days or weeks while traveling to or back from a conference, or when visiting relatives that live out of town. In other words, remote working has always been a very temporary and circumstantial thing among us.</p>

<p>We have a nice office (with hammocks!), excellent work equipment, great desk space, comfortable chairs, plenty of snacks and comfort food and an infinite supply of coffee. We‚Äôre also easygoing and overall pleasant people (well, most of us are) to work with several hours a day, and some of us are even mildly funny.</p>


        <div class="post-tags">
          
            <div class="tags">
            
              <a class="pure-button button-xsmall" href="/tags/Remote work">Remote work</a>
            
            </div>
          
        </div>

        <div class="pure-g post-footer">
          <div class = pure-u-1-2>
              <a class='read-more' href='/2018/06/working-remotely-in-a-non-remote-company.html'>Continue reading &rsaquo;</a>
          </div>
          <div class="pure-u-1-2 post-meta">
            <aside>Posted Jun 12, 2018</aside>

          </div>
        </div>
      </article>
    </div>
  
    <div class='post-index pure-u-1-1'>
      <h2><a href="/2018/03/the-5-stages-of-dealing-with-legacy-code.html">The 5 stages of dealing with legacy code</a></h2>

      <article class="text">
          <p>Yes, this article will use the <a href="https://en.wikipedia.org/wiki/K%C3%BCbler-Ross_model">5 stages of grief</a> as an analogy for something software development-related. There are at least a few thousand other articles with a similar motif (424,000 results for ‚Äúgrief stages software‚Äù according to <a href="https://www.google.es/search?q=grief+stages+software&amp;oq=grief+stages+software">Google</a>). But bear with me for the next 5 minutes and I promise you‚Äôll get something out of this‚Ää‚Äî‚Ääif nothing else, at least the smirk of those who read their past follies put on text by someone else.</p>

<p>I have been working on a rather big Rails project for the past year and half. The project is nearly 7 years old, and has an all-too-common successful-startup-bought-by-industry-giant background story. In a project with this kind of background, some things are bound to happen: many developers of many skill ranges have come and gone, many software fads (cough, Meteor, cough), and above all else <em>a lot</em> of legacy code that is, well, let‚Äôs put it nicely, <em>not so great</em>. None of this should be taken personally in any way‚Ää‚Äî‚Ääit is just natural for such things to occur in such projects.</p>


        <div class="post-tags">
          
            <div class="tags">
            
              <a class="pure-button button-xsmall" href="/tags/Legacy code">Legacy code</a>
            
            </div>
          
        </div>

        <div class="pure-g post-footer">
          <div class = pure-u-1-2>
              <a class='read-more' href='/2018/03/the-5-stages-of-dealing-with-legacy-code.html'>Continue reading &rsaquo;</a>
          </div>
          <div class="pure-u-1-2 post-meta">
            <aside>Posted Mar 05, 2018</aside>

          </div>
        </div>
      </article>
    </div>
  
    <div class='post-index pure-u-1-1'>
      <h2><a href="/2017/09/improving-spec-speed-in-a-huge-old-Rails-app.html">Improving spec speed in a huge, old Rails app</a></h2>

      <article class="text">
          <p>We got a 6-year-old Rails app with ~370k LOC and a ~6k-test suite which took 24 minutes to complete. Not good! We took a few days off of the main project to see if we could make things better.</p>

<p>More often than not, test suites are the nasty underbelly of a Rails app. Size and age just aggravate the problem. Tests are seldom a high priority in any project, and speed might not be an issue at all in smaller apps where the whole test suite might take just a few seconds to complete. As the project grows and the CI takes increasingly longer to complete, spec speed suddenly becomes more of an issue.</p>

<p>‚ÄúSmall‚Äù and ‚Äúnew‚Äù are not exactly the case for a certain Rails project we‚Äôre working on here at Guava. We‚Äôre talking about a 6-year-old e-commerce portal with ~370k LOC, a couple million customers and a ~6k-test, 300-spec suite which took, on average, a whopping 24 minutes to complete in our CI. <em>Not good!</em> So we took a couple of days off the main project to see if we could make things better‚Ää‚Äî‚Ääor less worse.</p>


        <div class="post-tags">
          
            <div class="tags">
            
              <a class="pure-button button-xsmall" href="/tags/Ruby">Ruby</a>
            
              <a class="pure-button button-xsmall" href="/tags/Rails">Rails</a>
            
              <a class="pure-button button-xsmall" href="/tags/Software Engineering">Software Engineering</a>
            
              <a class="pure-button button-xsmall" href="/tags/TDD">TDD</a>
            
              <a class="pure-button button-xsmall" href="/tags/RSpec">RSpec</a>
            
            </div>
          
        </div>

        <div class="pure-g post-footer">
          <div class = pure-u-1-2>
              <a class='read-more' href='/2017/09/improving-spec-speed-in-a-huge-old-Rails-app.html'>Continue reading &rsaquo;</a>
          </div>
          <div class="pure-u-1-2 post-meta">
            <aside>Posted Sep 04, 2017</aside>

          </div>
        </div>
      </article>
    </div>
  
    <div class='post-index pure-u-1-1'>
      <h2><a href="/2017/06/how-a-Unix-CLI-tool-made-me-care-about-software-feedback.html">How a Unix CLI tool made me care about software feedback</a></h2>

      <article class="text">
          <p>Providing feedback is one of the most important parts of any software. Unfortunately, more often than not we tend to downplay or ignore the very simple yet crucial task of letting the user know what is going on. In this article I‚Äôll use a short cautionary tale of how the lack of proper user feedback (and some laziness, I admit) almost cost me an entire HDD with years of personal data.</p>


        <div class="post-tags">
          
            <div class="tags">
            
              <a class="pure-button button-xsmall" href="/tags/Software Engineering">Software Engineering</a>
            
              <a class="pure-button button-xsmall" href="/tags/Unix">Unix</a>
            
            </div>
          
        </div>

        <div class="pure-g post-footer">
          <div class = pure-u-1-2>
              <a class='read-more' href='/2017/06/how-a-Unix-CLI-tool-made-me-care-about-software-feedback.html'>Continue reading &rsaquo;</a>
          </div>
          <div class="pure-u-1-2 post-meta">
            <aside>Posted Jun 19, 2017</aside>

          </div>
        </div>
      </article>
    </div>
  
    <div class='post-index pure-u-1-1'>
      <h2><a href="/2017/05/when-postgres-is-not-enough.html">When Postgres is not enough</a></h2>

      <article class="text">
          <p>What happens when your project‚Äôs RDBMS is just not enough to deal with unexpectedly huge amounts of data?</p>

<p>You could try to de-normalize some tables here and there to avoid unnecessary JOINs, create a few indexes, implement some kind of pagination or even pre-process the data into a more palatable format. However, if you did all that and it still was not enough, the ‚Äúnatural impulse‚Äù is to give up on the RDBMS altogether and just use Elasticsearch. Sounds like a no-brainer, right?</p>


        <div class="post-tags">
          
            <div class="tags">
            
              <a class="pure-button button-xsmall" href="/tags/Ruby">Ruby</a>
            
              <a class="pure-button button-xsmall" href="/tags/Software Engineering">Software Engineering</a>
            
              <a class="pure-button button-xsmall" href="/tags/Postgresql">Postgresql</a>
            
              <a class="pure-button button-xsmall" href="/tags/SQL">SQL</a>
            
            </div>
          
        </div>

        <div class="pure-g post-footer">
          <div class = pure-u-1-2>
              <a class='read-more' href='/2017/05/when-postgres-is-not-enough.html'>Continue reading &rsaquo;</a>
          </div>
          <div class="pure-u-1-2 post-meta">
            <aside>Posted May 08, 2017</aside>

          </div>
        </div>
      </article>
    </div>
  
    <div class='post-index pure-u-1-1'>
      <h2><a href="/2017/03/dont-obsess-over-code-dry.html">Don't obsess over code DRYness</a></h2>

      <article class="text">
          <p>Being clever is a good thing for a developer. Ingenuity allows us to write software that solves complex real-world problems. However, ‚Äúclever‚Äù <em>code</em> is not always a good thing. In many cases‚Ää‚Äî‚ÄäI dare say in <em>most</em> cases‚Ää‚Äî‚Ääit is a very bad thing. I consciously try to avoid writing code that might be seen as ‚Äúclever‚Äù. The smart thing to do is trying hard not to be smart (yes, very <a href="http://literarydevices.net/war-is-peace/">1984</a>).</p>

<p>Developers tend to see themselves (quite indulgently) as smart people. Not many people understand what we do, and society sees a developer as a kind of modern wizard, writing unreadable magic spells in a small metal box. In reality, though, we are not half as smart as we think: for instance, if you are a developer, you are certainly familiar with the frustration of trying to understand some cryptic piece of code that seemed perfectly reasonable and straightforward when you wrote it a couple of months earlier.</p>


        <div class="post-tags">
          
            <div class="tags">
            
              <a class="pure-button button-xsmall" href="/tags/Ruby">Ruby</a>
            
              <a class="pure-button button-xsmall" href="/tags/Software Engineering">Software Engineering</a>
            
            </div>
          
        </div>

        <div class="pure-g post-footer">
          <div class = pure-u-1-2>
              <a class='read-more' href='/2017/03/dont-obsess-over-code-dry.html'>Continue reading &rsaquo;</a>
          </div>
          <div class="pure-u-1-2 post-meta">
            <aside>Posted Mar 20, 2017</aside>

          </div>
        </div>
      </article>
    </div>
  
    <div class='post-index pure-u-1-1'>
      <h2><a href="/2015/10/building-a-shared-library-in-c-and-using-it-in-a-python-program.html">Building a shared library in C and using it in a Python program</a></h2>

      <article class="text">
          <p><a href="/assets/images/codedeposit/2015/10/pathfinding.png"><img src="/assets/images/codedeposit/2015/10/pathfinding.png?w=660" alt="pathfinding"></a></p>

<p>Figure 1</p>

<p>How do old-time languages such as C, Fortran and others survive in a world with Python, Ruby and so on?</p>

<p>There is¬†plenty¬†legacy code still around which need maintaining, of course. And there are (will always be?) a few specific applications where low level is needed. But¬†one of the great things with software is building upon old stuff using new tools, which brings us to our topic today: building a shared library containing some of our C stuff and using it in nice and comfy Python. Figure 1 shows an example of what we can achieve by using graphical tools available in Python to improve our existing code‚Äôs text-based output. More on that later on.</p>

<p>For our purposes, we consider shared libraries as a collection of compiled objects condensed into a single file, which may then be called by other software. This is, of course, a simplification. A longer discussion about shared and static libraries can be found in [1].</p>


        <div class="post-tags">
          
            <div class="tags">
            
              <a class="pure-button button-xsmall" href="/tags/c">c</a>
            
              <a class="pure-button button-xsmall" href="/tags/linux">linux</a>
            
              <a class="pure-button button-xsmall" href="/tags/python">python</a>
            
              <a class="pure-button button-xsmall" href="/tags/reuse">reuse</a>
            
              <a class="pure-button button-xsmall" href="/tags/shared library">shared library</a>
            
            </div>
          
        </div>

        <div class="pure-g post-footer">
          <div class = pure-u-1-2>
              <a class='read-more' href='/2015/10/building-a-shared-library-in-c-and-using-it-in-a-python-program.html'>Continue reading &rsaquo;</a>
          </div>
          <div class="pure-u-1-2 post-meta">
            <aside>Posted Oct 28, 2015</aside>

          </div>
        </div>
      </article>
    </div>
  
    <div class='post-index pure-u-1-1'>
      <h2><a href="/2015/10/red-black-vs-avl.html">Trees, part IV - Benchmarking Red-black and AVL trees</a></h2>

      <article class="text">
          <p>In our previous installments we implemented two of the most well-known self-balancing binary search trees: <a href="%7B%%20link%20_posts/2014-04-21-trees-part-ii-avl-tree.markdown%20%%7D">AVL</a> and <a href="%7B%%20link%20_posts/2015-10-01-trees-part-iii-red-black-tree.markdown%20%%7D">Red-black</a> <a href="%7B%%20link%20_posts/2014-03-31-trees-part-i.markdown%20%%7D">trees</a>.</p>

<p>We had a few classes on AVL trees in our basic data structures &amp; algorithms class back in college, which made its implementation far less of a challenge than the Red-black tree. So besides the fundamental guidance of CLRS I had to do quite some googling to get it working. While googling I noticed there were quite a lot of questions about which (AVL or RB) tree was ‚Äúbetter‚Äù in some sense, be it insertion, search time, deletion time, etc. Most textbooks and articles dismiss this question just by stating the factor differences in either trees‚Äô worst case heights, <a href="%7B%%20link%20_posts/2015-10-01-trees-part-iii-red-black-tree.markdown%20%%7D">as we briefly mentioned</a> in the past installment. If you‚Äôre anything like me, however, you‚Äôll want to see some comparisons where the trees are <em>actually</em> tested. So I decided to do some simple benchmarking to test those theoretical worst-cases. Here‚Äôs what I found out.</p>


        <div class="post-tags">
          
        </div>

        <div class="pure-g post-footer">
          <div class = pure-u-1-2>
              <a class='read-more' href='/2015/10/red-black-vs-avl.html'>Continue reading &rsaquo;</a>
          </div>
          <div class="pure-u-1-2 post-meta">
            <aside>Posted Oct 07, 2015</aside>

          </div>
        </div>
      </article>
    </div>
  
    <div class='post-index pure-u-1-1'>
      <h2><a href="/2015/10/trees-part-iii-red-black-tree.html">Trees, part III - Red-black tree</a></h2>

      <article class="text">
          <p>In our last installment on trees, we studied and implemented the <a href="%7B%%20link%20_posts/2014-04-21-trees-part-ii-avl-tree.markdown%20%%7D">AVL tree</a>. The AVL tree is one of many <a href="https://en.wikipedia.org/wiki/Self-balancing_binary_search_tree">self-balancing binary search trees</a>, a special kind of BST that enforces sub-linear operation costs by maintaining tree height close to the theoretical minimum of $latex log_{2}(n)$. This is usually done by what is called <em>tree rotation</em>, which is basically moving around tree nodes (and updating some special node properties).</p>

<p>As you can see in the Wikipedia page¬π, AVL trees guarantee that the tree height is strictly less than $latex \approx 1.44~log_{2}(n)$, while Red-black trees have a slightly worse threshold of $latex \approx 2~log_{2}(n)$; thus, AVL trees will provide significantly better search times than Red-black trees. However, while AVL trees may need to do $latex O(log(n))$ rotations after each insertion, Red-black trees must do at most 2 rotations per insertion. So either one may be your tree of choice depending on the application: if search time is critical but data doesn‚Äôt get updated too often, an AVL tree will perform better; whereas a Red-black tree will perform better in scenarios where data is constantly being changed.</p>

<p>Self-balancing BSTs add some kind of property to tree nodes that make way for tree balancing: with AVL trees, it was the ‚Äúbalance factor‚Äù. With Red-black trees, a ‚Äúcolor‚Äù property is added to each node. This leads us to the <strong>Red-black tree properties</strong>:</p>

<ol>
  <li>Every node is either red or black</li>
  <li>Every leaf is black</li>
  <li>If a node is red, then both its children are black</li>
  <li>Every path from a node to any of its descendant leafs contains the same number of black nodes</li>
</ol>


        <div class="post-tags">
          
        </div>

        <div class="pure-g post-footer">
          <div class = pure-u-1-2>
              <a class='read-more' href='/2015/10/trees-part-iii-red-black-tree.html'>Continue reading &rsaquo;</a>
          </div>
          <div class="pure-u-1-2 post-meta">
            <aside>Posted Oct 01, 2015</aside>

          </div>
        </div>
      </article>
    </div>
  
    <div class='post-index pure-u-1-1'>
      <h2><a href="/2015/09/ruby-dsl-metaprogramming-part-ii.html">Ruby DSL & metaprogramming, part II</a></h2>

      <article class="text">
          <p>In the previous installment we built a simple text generator using some Ruby meta-programming tricks. It was still far from being our desired context-free grammar (CFG) generator, though, since it lacked many <a href="https://www.cs.rochester.edu/~nelson/courses/csc_173/grammars/cfg.html">CFG prerequisites</a>. Most flagrantly, we had no rule recursion and only one production (rule definition) per rule. Here‚Äôs the what a script that would use both features:</p>

<div class="highlight"><pre><code class="language-bash">dictionary
  noun <span class="s1">'dog'</span>, <span class="s1">'bus'</span>
  verb <span class="s1">'barked'</span>, <span class="s1">'parked'</span>
  preposition <span class="s1">'at'</span>

rule <span class="s1">'phrase'</span>
  opt <span class="s1">'The'</span>, noun, verb, preposition, <span class="s1">'a'</span>, noun
  opt <span class="s1">'Here goes some'</span>, phrase, <span class="s1">'recursion.'</span>
  opt <span class="s1">'Meet me'</span>, preposition, <span class="s1">'the station.'</span>

grammar phrase: 10</code></pre></div>

<p>The <code>dictionary</code> section is just as we left it. Let‚Äôs see what changed in the <code>rule</code> section.</p>


        <div class="post-tags">
          
            <div class="tags">
            
              <a class="pure-button button-xsmall" href="/tags/DSL">DSL</a>
            
              <a class="pure-button button-xsmall" href="/tags/metaprogramming">metaprogramming</a>
            
              <a class="pure-button button-xsmall" href="/tags/Ruby">Ruby</a>
            
            </div>
          
        </div>

        <div class="pure-g post-footer">
          <div class = pure-u-1-2>
              <a class='read-more' href='/2015/09/ruby-dsl-metaprogramming-part-ii.html'>Continue reading &rsaquo;</a>
          </div>
          <div class="pure-u-1-2 post-meta">
            <aside>Posted Sep 20, 2015</aside>

          </div>
        </div>
      </article>
    </div>
  
    <div class='post-index pure-u-1-1'>
      <h2><a href="/2015/09/ruby-dsl-metaprogramming-part-i.html">Ruby DSL & metaprogramming, part I</a></h2>

      <article class="text">
          <p>I‚Äôve been working with Ruby for nearly a year now, which means I‚Äôm starting to feel the urge to tell people how awesome the language is. One of the most interesting aspects of Ruby to me is <a href="https://en.wikipedia.org/wiki/Metaprogramming">metaprogramming</a>, which it seems to have quite a vocation for.</p>

<p>Since college I have a fondness for automata and formal languages theory. One of the topics I particularly like is text generation (if you haven‚Äôt already, check out the excellent <a href="http://pdos.csail.mit.edu/scigen/">SCIgen</a> and the <a href="http://dev.null.org/dadaengine/">Dada engine</a>), so I thought that building a Context-free grammar (CFG)-like text generator in Ruby would be a nice little exercise and an opportunity to use some of the language‚Äôs coolest features. Also I‚Äôve implemented one of those using Java several years ago, and it was <em>a mess</em>, so I was curious as to how much of an improvement would Ruby offer.</p>

<p>Suppose the following script:</p>

<div class="highlight"><pre><code class="language-ruby"><span class="n">dictionary</span> <span class="s1">'noun'</span><span class="p">,</span> <span class="s1">'dog'</span><span class="p">,</span> <span class="s1">'bus'</span>
<span class="n">dictionary</span> <span class="s1">'verb'</span><span class="p">,</span> <span class="s1">'barked'</span><span class="p">,</span> <span class="s1">'parked'</span>
<span class="n">dictionary</span> <span class="s1">'preposition'</span><span class="p">,</span> <span class="s1">'at'</span>

<span class="n">rule</span> <span class="s1">'phrase'</span><span class="p">,</span> <span class="s1">'noun'</span><span class="p">,</span> <span class="s1">'verb'</span><span class="p">,</span> <span class="s1">'preposition'</span><span class="p">,</span> <span class="s1">'noun'</span>

<span class="n">codex</span> <span class="s1">'phrase'</span></code></pre></div>

<p>We‚Äôd like <code>dictionary</code> to store some words according to their classes, and <code>rule</code> to define a specific ordering of words. For now let‚Äôs not worry about <code>codex</code> (it‚Äôs just a collection of rules).</p>

<p>At this point the seasoned programmer is mentally sketching some kind of text parser. It‚Äôs an okay solution, but isn‚Äôt there something <em>nicer</em> we can do? Well, there is: <a href="https://en.wikipedia.org/wiki/Domain-specific_language">DSL</a>s! In fact, Ruby is quite an excellent tool to build a DSL, and many famed Ruby-powered applications such as Rspec (and <a href="http://www.leighhalliday.com/creating-ruby-dsl">many others</a>) define some kind of DSL.</p>


        <div class="post-tags">
          
            <div class="tags">
            
              <a class="pure-button button-xsmall" href="/tags/DSL">DSL</a>
            
              <a class="pure-button button-xsmall" href="/tags/metaprogramming">metaprogramming</a>
            
              <a class="pure-button button-xsmall" href="/tags/Ruby">Ruby</a>
            
            </div>
          
        </div>

        <div class="pure-g post-footer">
          <div class = pure-u-1-2>
              <a class='read-more' href='/2015/09/ruby-dsl-metaprogramming-part-i.html'>Continue reading &rsaquo;</a>
          </div>
          <div class="pure-u-1-2 post-meta">
            <aside>Posted Sep 11, 2015</aside>

          </div>
        </div>
      </article>
    </div>
  
    <div class='post-index pure-u-1-1'>
      <h2><a href="/2014/04/trees-part-ii-avl-tree.html">Trees, Part II: AVL Tree</a></h2>

      <article class="text">
          <p>Masters classes started a few weeks ago, taking their¬†toll on my productivity here. Sorry about that!</p>

<p>So we (pardon the¬†<a href="http://en.wikipedia.org/wiki/Nosism">nosism</a>, but I think it sounds less egocentric¬†than writing ‚ÄúI‚Äù all the time) hinted at AVL trees back on our <a href="%7B%%20link%20_posts/2014-03-31-trees-part-i.markdown%20%%7D">Trees, Part I</a>¬†post. Specifically, we learned that:</p>

<blockquote>a binary search tree (BST), provides O(h) time search, insert and delete operations (h is the tree height.</blockquote>

<p>Linear time (O(h)) doesn‚Äôt sound very good - if h is close to n, we‚Äôll have the same performance as a <a href="%7B%%20link%20_posts/2014-02-14-3.markdown%20%%7D%7D">linked list</a>.¬†What if there were a way to¬†bound the tree height¬†to some sub-linear factor? As it turns out, there are several ways to do so, and the general idea of somehow¬†keeping the tree height limited to a certain factor of the number of elements it holds is called height¬†<strong>balancing</strong>. Ergo we‚Äôll want to look into (height)¬†<strong>balanced/self-balancing binary search trees **(BBST)</strong>.¬†**</p>

<div class="highlight"><pre><code class="language-bash">                      Burger


                          M
                        <span class="nb">.</span>   <span class="nb">.</span>
                      <span class="nb">.</span>       <span class="nb">.</span>
                    <span class="nb">.</span>           <span class="nb">.</span>
                  <span class="nb">.</span>               <span class="nb">.</span>
                E <span class="nb">.</span>                 P <span class="nb">.</span>
              <span class="nb">.</span>     <span class="nb">.</span>                   <span class="nb">.</span>
            <span class="nb">.</span>         <span class="nb">.</span>                   <span class="nb">.</span>
          <span class="nb">.</span>             <span class="nb">.</span>                   <span class="nb">.</span>
      D <span class="nb">.</span>                 I                   Y
                        <span class="nb">.</span>
                      <span class="nb">.</span>
                    <span class="nb">.</span>
                  <span class="nb">.</span>
                F</code></pre></div>

<p><em>AVL tree</em></p>

<p>Since binary search trees have at most two children, the best tree height (i.e. smallest) we can achieve is log2 n (n being the number of elements in the tree). There are <a href="http://en.wikipedia.org/wiki/Self-balancing_binary_search_tree">several </a>self-balancing BSTs developed over the years. It seems that up there in the US college professors¬†tend to prefer the red-black tree when studying BBSTs, whilst over here AVL is preferred. In any case, AVL tree was¬†the first BBST ever devised, so we‚Äôll adopt it as our BBST model.</p>

<p>AVL trees (named after its two Soviet inventors Adelson-Velsky and Landis) use a series of <strong>rotations</strong> to keep the tree balanced. To keep track of when a certain subtree rooted at some node needs to be rotated, we maintain (or calculate) a¬†<strong>balance factor</strong> variable for each node, which is the difference between the node‚Äôs left and right children‚Äôs heights, i.e.:</p>

<p>balance_factor(n) = n.left_child.height - n.right_child.height</p>


        <div class="post-tags">
          
            <div class="tags">
            
              <a class="pure-button button-xsmall" href="/tags/avl">avl</a>
            
              <a class="pure-button button-xsmall" href="/tags/binary search tree">binary search tree</a>
            
              <a class="pure-button button-xsmall" href="/tags/bst">bst</a>
            
              <a class="pure-button button-xsmall" href="/tags/data structure">data structure</a>
            
              <a class="pure-button button-xsmall" href="/tags/tree">tree</a>
            
            </div>
          
        </div>

        <div class="pure-g post-footer">
          <div class = pure-u-1-2>
              <a class='read-more' href='/2014/04/trees-part-ii-avl-tree.html'>Continue reading &rsaquo;</a>
          </div>
          <div class="pure-u-1-2 post-meta">
            <aside>Posted Apr 21, 2014</aside>

          </div>
        </div>
      </article>
    </div>
  
    <div class='post-index pure-u-1-1'>
      <h2><a href="/2014/04/shortest-path-part-i-dijkstras-algorithm.html">Shortest path, part I - Dijkstra's algorithm</a></h2>

      <article class="text">
          <p>Now that we have a way to represent <a href="%7B%%20link%20_posts/2014-03-23-graph.markdown%20%%7D">graphs</a>, we can discuss one of the most important problems in graph theory: the shortest path problem (SPP). More or less formally, we‚Äôll define SPP as:</p>

<p>Given a weighted¬†graph G(V,E), find the sequence P = {v0, v1, v2, ‚Ä¶, v(n-1)}, vi ‚àà V, from vertex V0 to vertex V(n-1), such that¬†the list of edges¬†EP = {(v0,v1), (v1,v2), ‚Ä¶ (v(n-2), v(n-1))} exists and the summation of costs of all elements e¬†‚àà EP is the smallest possible.</p>

<p>In other words, find the less expensive (ergo ‚Äúshortest‚Äù)¬†path between two vertices.</p>

<p>The trivial solution is using <a href="%7B%%20link%20_posts/2014-03-31-trees-part-i.markdown%20%%7D">BFS</a>¬†starting at vertex A and stopping when it reaches vertex B. However, BFS doesn‚Äôt look at the edge costs: it calculates the path with¬†least edges, not the path with least total cost.</p>

<p>Although not necessarily the fastest, Dijkstra‚Äôs algorithm is probably the most popular way to solve the shortest path problem due to its simplicity and elegance. The algorithm relies heavily on <a href="%7B%%20link%20_posts/2014-03-21-heap-priority-queues.markdown%20%%7D">priority queues</a>, so make sure to take a look at that if you haven‚Äôt already.</p>

<p><strong>Pseudocode</strong></p>

<div class="highlight"><pre><code class="language-bash">dist[from] <span class="o">=</span> 0
<span class="k">for </span>v : G
      <span class="k">if </span>v <span class="o">!=</span> <span class="nb">source
            </span>dist[v] <span class="o">=</span> infinity
      prev[v] <span class="o">=</span> <span class="nt">-1</span>
      PQ.add<span class="o">(</span>v, dist[v]<span class="o">)</span>
<span class="k">while </span>PQ.hasNext<span class="o">()</span>
      u <span class="o">=</span> PQ.pop<span class="o">()</span>
      <span class="k">for </span>each neighbor v of u
            alt <span class="o">=</span> dist[u] + length<span class="o">(</span>u, v<span class="o">)</span>
            <span class="k">if </span>alt &lt; dist[v]
                  dist[v] <span class="o">=</span> alt
                  prev[v] <span class="o">=</span> u
                  PQ.decrease_key<span class="o">(</span>v,alt<span class="o">)</span>
<span class="k">return </span>prev</code></pre></div>


        <div class="post-tags">
          
            <div class="tags">
            
              <a class="pure-button button-xsmall" href="/tags/dijkstra">dijkstra</a>
            
              <a class="pure-button button-xsmall" href="/tags/graph">graph</a>
            
              <a class="pure-button button-xsmall" href="/tags/graph search">graph search</a>
            
              <a class="pure-button button-xsmall" href="/tags/shortest path">shortest path</a>
            
            </div>
          
        </div>

        <div class="pure-g post-footer">
          <div class = pure-u-1-2>
              <a class='read-more' href='/2014/04/shortest-path-part-i-dijkstras-algorithm.html'>Continue reading &rsaquo;</a>
          </div>
          <div class="pure-u-1-2 post-meta">
            <aside>Posted Apr 06, 2014</aside>

          </div>
        </div>
      </article>
    </div>
  
    <div class='post-index pure-u-1-1'>
      <h2><a href="/2014/03/trees-part-i.html">Trees - Part I</a></h2>

      <article class="text">
          <p><a href="/assets/images/codedeposit/2014/03/tree1.jpg"><img src="/assets/images/codedeposit/2014/03/tree1.jpg" alt="tree"></a></p>

<p><a href="http://commons.wikimedia.org/wiki/File%3ABright_green_tree_-_Waikato.jpg"><img src="//upload.wikimedia.org/wikipedia/commons/thumb/f/f6/Bright_green_tree_-_Waikato.jpg/512px-Bright_green_tree_-_Waikato.jpg" alt="Bright green tree - Waikato"></a></p>

<p>We used trees to build the <a href="%7B%%20link%20_posts/2014-03-21-heap-priority-queues.markdown%20%%7D">heap data structure</a> before, but we didn‚Äôt bother with the theory behind trees, which are abstract and concrete data structures themselves. There‚Äôs a huge range of material to cover so I‚Äôll split this in several posts.</p>

<p>In this first post we‚Äôll cover the basic theory and implement a binary search tree (BST), which provides <code>O(h)</code> time search, insert and delete operations (<code>h</code> is the tree height). First, the basics:</p>

<p>Trees are graphs with a few extra properties and interpretations/conventions.
* Trees have height (longest branch length) and depth (distance to root).
* The uppermost level consists of at most one node (the tree root).
* All nodes may have children.
* There are no edges other than parent-child edges.</p>

<p>Trees are classified according to some¬†of those properties above and some others we‚Äôll mention later. Most commonly, there is a constraint to the maximum number of children per node -e.g. the binary tree limits children to 2 per node.

        <div class="post-tags">
          
            <div class="tags">
            
              <a class="pure-button button-xsmall" href="/tags/abstract data structure">abstract data structure</a>
            
              <a class="pure-button button-xsmall" href="/tags/bst">bst</a>
            
              <a class="pure-button button-xsmall" href="/tags/data structure">data structure</a>
            
              <a class="pure-button button-xsmall" href="/tags/graph">graph</a>
            
              <a class="pure-button button-xsmall" href="/tags/tree">tree</a>
            
            </div>
          
        </div>

        <div class="pure-g post-footer">
          <div class = pure-u-1-2>
              <a class='read-more' href='/2014/03/trees-part-i.html'>Continue reading &rsaquo;</a>
          </div>
          <div class="pure-u-1-2 post-meta">
            <aside>Posted Mar 31, 2014</aside>

          </div>
        </div>
      </article>
    </div>
  
    <div class='post-index pure-u-1-1'>
      <h2><a href="/2014/03/graph.html">Graph</a></h2>

      <article class="text">
          <p>Mathematically, a graph is a set of vertices and edges, thus a graph <code>G</code> is usually written as <code>G(V,E)</code>. Besides linking vertices in the graph, edges can also carry a specific value which may be interpreted as cost, weight, distance etc.</p>

<p><a href="/assets/images/codedeposit/2014/03/graph1.jpg"><img src="/assets/images/codedeposit/2014/03/graph1.jpg" alt="graph viewed with BurgerGFX"></a></p>

<p>In computer science, we‚Äôre interested in the (abstract) data structure used to implement the graph mathematical concept. Let‚Äôs first discuss the basic elements in a graph - vertices and edges:</p>

<div class="highlight"><pre><code class="language-c"><span class="k">typedef</span> <span class="k">struct</span> <span class="n">vertex</span>
<span class="p">{</span>
 <span class="kt">unsigned</span> <span class="kt">long</span> <span class="n">id</span><span class="p">;</span>
 <span class="kt">int</span> <span class="n">status</span><span class="p">;</span>
 <span class="kt">double</span> <span class="n">x</span><span class="p">,</span><span class="n">y</span><span class="p">;</span>
 <span class="kt">void</span><span class="o">*</span> <span class="n">data</span><span class="p">;</span>
<span class="p">}</span> <span class="n">vertex</span><span class="p">;</span></code></pre></div>

<p>Vertices should be able to hold any kind of data, so we‚Äôll just throw in a void pointer for that. Other than that we have an id, status (marked or unmarked - more on that later) and 2D coordinates so we can draw the vertices somewhere.</p>

<div class="highlight"><pre><code class="language-c"><span class="k">typedef</span> <span class="k">struct</span> <span class="n">edge</span>
<span class="p">{</span>
 <span class="n">vertex</span><span class="o">*</span> <span class="n">from</span><span class="p">,</span> <span class="o">*</span><span class="n">to</span><span class="p">;</span>
 <span class="kt">int</span> <span class="n">cost</span><span class="p">;</span>
<span class="p">}</span> <span class="n">edge</span><span class="p">;</span></code></pre></div>

<p>Edges consist of just pointers to the vertices they link and an optional value used as weight, distance, cost etc. Strictly speaking we could use a void pointer for that value as well, as long as we also defined a comparison function. But let‚Äôs save the hassle and just use an integer instead - most algorithms will be fine with that.</p>


        <div class="post-tags">
          
            <div class="tags">
            
              <a class="pure-button button-xsmall" href="/tags/data structure">data structure</a>
            
              <a class="pure-button button-xsmall" href="/tags/graph">graph</a>
            
              <a class="pure-button button-xsmall" href="/tags/graph theory">graph theory</a>
            
            </div>
          
        </div>

        <div class="pure-g post-footer">
          <div class = pure-u-1-2>
              <a class='read-more' href='/2014/03/graph.html'>Continue reading &rsaquo;</a>
          </div>
          <div class="pure-u-1-2 post-meta">
            <aside>Posted Mar 23, 2014</aside>

          </div>
        </div>
      </article>
    </div>
  
    <div class='post-index pure-u-1-1'>
      <h2><a href="/2014/03/heap-priority-queues.html">Heap & Priority Queues</a></h2>

      <article class="text">
          <p>Priority queues (PQs) are abstract data types that work just like regular stacks, but the popping order depends on each element‚Äôs priority instead of the sequence they were pushed onto the queue (FIFO or LIFO).</p>

<p>The na√Øve way of implementing a PQ consists of using an unsorted list or array and searching for the highest-priority element at each pop, which takes O(n) time. There are several more efficient implementations, of which the most usual is the heap.</p>

<p>Heaps are complete (i.e. all levels except possibly the last are filled) binary trees that work as PQs by maintaining the following property: children nodes always have a smaller priority than their parent, i.e. for any node A with children B and C, priority(B) &lt; priority(A) &amp;&amp; priority(C) &lt; priority(A). Note that there is no assumed relation between siblings or cousins.</p>

<p><a href="/assets/images/codedeposit/2014/03/heap.jpg"><img src="/assets/images/codedeposit/2014/03/heap.jpg" alt="max-heap and corresponding array."></a>
<em>max-heap and corresponding array.</em></p>

<p>Each element of a heap has two pieces of information: a key and a value, hence we call them key-value (KV) pair. The key identifies the specific element, and the value determines the element‚Äôs priority within the heap. Heaps can be min-heaps (low value = high priority) or max-heaps (high value = high priority).</p>


        <div class="post-tags">
          
            <div class="tags">
            
              <a class="pure-button button-xsmall" href="/tags/abstract data structure">abstract data structure</a>
            
              <a class="pure-button button-xsmall" href="/tags/data structure">data structure</a>
            
              <a class="pure-button button-xsmall" href="/tags/heap">heap</a>
            
              <a class="pure-button button-xsmall" href="/tags/priority queue">priority queue</a>
            
              <a class="pure-button button-xsmall" href="/tags/queue">queue</a>
            
            </div>
          
        </div>

        <div class="pure-g post-footer">
          <div class = pure-u-1-2>
              <a class='read-more' href='/2014/03/heap-priority-queues.html'>Continue reading &rsaquo;</a>
          </div>
          <div class="pure-u-1-2 post-meta">
            <aside>Posted Mar 21, 2014</aside>

          </div>
        </div>
      </article>
    </div>
  
    <div class='post-index pure-u-1-1'>
      <h2><a href="/2014/03/burgergfx-simple-2d-graphics.html">BurgerGFX - simple 2D graphics</a></h2>

      <article class="text">
          <p><a href="/assets/images/codedeposit/2014/03/burger_gfx1.jpg"><img src="/assets/images/codedeposit/2014/03/burger_gfx1.jpg" alt="sample code and output"></a></p>

<p>Several times I find myself wanting to visualize something in 2D, but can‚Äôt bother to fire up OpenGL or other cumbersome API.</p>

<p>So I wrote a simple program which I called BurgerGFX, with 2 core functionalities: draw point and draw line. I find this to be quite enough for simple applications such as viewing a graph.</p>

<p>Setting up the drawing canvas, which I call burger, is simple: call create(width, height), which returns a pointer to the burger. Then simply call the draws, prints and cleans as needed.</p>


        <div class="post-tags">
          
            <div class="tags">
            
              <a class="pure-button button-xsmall" href="/tags/graphics">graphics</a>
            
            </div>
          
        </div>

        <div class="pure-g post-footer">
          <div class = pure-u-1-2>
              <a class='read-more' href='/2014/03/burgergfx-simple-2d-graphics.html'>Continue reading &rsaquo;</a>
          </div>
          <div class="pure-u-1-2 post-meta">
            <aside>Posted Mar 18, 2014</aside>

          </div>
        </div>
      </article>
    </div>
  
    <div class='post-index pure-u-1-1'>
      <h2><a href="/2014/03/stack.html">Stack</a></h2>

      <article class="text">
          <p>Using our implementation of a doubly linked (DL) list, we can very simply build the most basic LIFO (last in, first out) data structure: the stack.</p>

<p><a href="/assets/images/codedeposit/2014/03/stack.png"><img src="/assets/images/codedeposit/2014/03/stack.png?w=300" alt="stack"></a></p>

<p>Stacks have two basic operations: push and pop. Push pushes data onto the stack (i.e., end of the DL list) and pop pops data off the list‚Äôs tail, which is only possible because we can set the new tail as tail-&gt;prev, since we‚Äôre using a DL list, with previous pointers. Another useful function is peek, which returns a pointer to the stack‚Äôs top.</p>


        <div class="post-tags">
          
            <div class="tags">
            
              <a class="pure-button button-xsmall" href="/tags/abstract data structure">abstract data structure</a>
            
              <a class="pure-button button-xsmall" href="/tags/data structure">data structure</a>
            
            </div>
          
        </div>

        <div class="pure-g post-footer">
          <div class = pure-u-1-2>
              <a class='read-more' href='/2014/03/stack.html'>Continue reading &rsaquo;</a>
          </div>
          <div class="pure-u-1-2 post-meta">
            <aside>Posted Mar 18, 2014</aside>

          </div>
        </div>
      </article>
    </div>
  
    <div class='post-index pure-u-1-1'>
      <h2><a href="/2014/03/doubly-linked-list.html">Doubly linked list</a></h2>

      <article class="text">
          <p>A doubly linked list is like our previously implemented Linked List, but instead of only having pointers to the next element, it also has pointers to the _previous _element:</p>

<p><a href="/assets/images/codedeposit/2014/03/610px-doubly-linked-list-svg.png"><img src="/assets/images/codedeposit/2014/03/610px-doubly-linked-list-svg.png" alt="610px-Doubly-linked-list.svg"></a></p>

<p>This property makes the doubly linked list very useful as a base for other data structures such as the stack: having a previous pointer means we can quickly (O(1)) remove objects from the list‚Äôs tail, which would be impossible with a linked list.</p>

<p>We won‚Äôt discuss implementation since it so similar to a linked list. If anything implementation is even simpler than a linked list because of the previous pointer access.</p>


        <div class="post-tags">
          
            <div class="tags">
            
              <a class="pure-button button-xsmall" href="/tags/data structure">data structure</a>
            
              <a class="pure-button button-xsmall" href="/tags/list">list</a>
            
            </div>
          
        </div>

        <div class="pure-g post-footer">
          <div class = pure-u-1-2>
              <a class='read-more' href='/2014/03/doubly-linked-list.html'>Continue reading &rsaquo;</a>
          </div>
          <div class="pure-u-1-2 post-meta">
            <aside>Posted Mar 18, 2014</aside>

          </div>
        </div>
      </article>
    </div>
  
    <div class='post-index pure-u-1-1'>
      <h2><a href="/2014/02/vector.html">Vector</a></h2>

      <article class="text">
          <p>Very simple Vector implementation with add, add_all, get and delete operations using arrays of void pointers.</p>

<p>The downside to this as compared to simply using an array is that here we have an <em>array of pointers</em>, which means the data will most likely be scattered over the memory, not coalesced.</p>


        <div class="post-tags">
          
            <div class="tags">
            
              <a class="pure-button button-xsmall" href="/tags/data structure">data structure</a>
            
            </div>
          
        </div>

        <div class="pure-g post-footer">
          <div class = pure-u-1-2>
              <a class='read-more' href='/2014/02/vector.html'>Continue reading &rsaquo;</a>
          </div>
          <div class="pure-u-1-2 post-meta">
            <aside>Posted Feb 21, 2014</aside>

          </div>
        </div>
      </article>
    </div>
  
    <div class='post-index pure-u-1-1'>
      <h2><a href="/2014/02/mergesort.html">Mergesort</a></h2>

      <article class="text">
          <p>Mergesort is an important sorting algorithm when you don‚Äôt have efficient random memory access, since it doesn‚Äôt rely on that and has good time complexity - O(n logn) specifically.</p>

<p>As a typical divide-and-conquer algorithm, Mergesort has two steps: first it recursively splits the lists in two until each half is unitary, then it recursively mends back the lists until it reaches the original size.</p>

<p>But before we dive into the actual algorithm, we need to make some changes to the linked list algorithm we‚Äôll be using.</p>


        <div class="post-tags">
          
            <div class="tags">
            
              <a class="pure-button button-xsmall" href="/tags/sorting algorithm">sorting algorithm</a>
            
            </div>
          
        </div>

        <div class="pure-g post-footer">
          <div class = pure-u-1-2>
              <a class='read-more' href='/2014/02/mergesort.html'>Continue reading &rsaquo;</a>
          </div>
          <div class="pure-u-1-2 post-meta">
            <aside>Posted Feb 21, 2014</aside>

          </div>
        </div>
      </article>
    </div>
  
    <div class='post-index pure-u-1-1'>
      <h2><a href="/2014/02/linked-list.html">Linked List</a></h2>

      <article class="text">
          <p>Here‚Äôs a very simple implementation of the linked list data structure.</p>

<p>A pointer to the head element is enough to define a linked list. Each element consists of one pointer to the subsequent element in the list and one pointer to the element‚Äôs data:</p>

<p><a href="/assets/images/codedeposit/2014/02/linkedlist.png"><img src="/assets/images/codedeposit/2014/02/linkedlist.png?w=450" alt="linkedlist"></a></p>


        <div class="post-tags">
          
            <div class="tags">
            
              <a class="pure-button button-xsmall" href="/tags/data structure">data structure</a>
            
              <a class="pure-button button-xsmall" href="/tags/list">list</a>
            
            </div>
          
        </div>

        <div class="pure-g post-footer">
          <div class = pure-u-1-2>
              <a class='read-more' href='/2014/02/linked-list.html'>Continue reading &rsaquo;</a>
          </div>
          <div class="pure-u-1-2 post-meta">
            <aside>Posted Feb 14, 2014</aside>

          </div>
        </div>
      </article>
    </div>
  
</div>

;
T;U;[0I"’<!DOCTYPE html><html lang="en"><head>
    <meta charset="utf-8">
    <title>A Developer's Notebook - Home</title>
    <link rel="stylesheet" href="https://unpkg.com/purecss@1.0.1/build/pure-min.css" integrity="sha384-oAOxQR6DkCoMliIh8yFnu25d7Eq/PHS21PClpwjOTeU2jRSq11vu66rf90/cZr47" crossorigin="anonymous">
    <link rel="stylesheet" href="assets/stylesheet.css">
    <link rel="stylesheet" href="assets/highlight.css">

    <!-- you don't need to keep this, but it's cool for stats! -->
    <meta name="generator" content="Nanoc 4.11.9">
  </head>
  <body>
    <div id="layout">
      <div class="header">
        <h1>
          <a href="./">A Developer's Notebook</a>
        </h1>
      </div>


      <div class="content">
        <nav class="pure-g">
          <div class="pure-u-2-3 links">
            <a href="index.html">Home</a> ¬∑
            <a href="tags.html">Tags</a> ¬∑
            <a href="years.html">Years</a> ¬∑
            <a href="about.html">About</a>
          </div>

          <div class="pure-u-1-3">
            <div class="contact">
              <span>
                <a href="https://github.com/lbrito1" download="">
                  <img src="assets/icons/github.svg" alt="Github icon">
                  </a>
              </span>
              <span>
                <a href="https://www.linkedin.com/in/leonardo-mendes-brito/">
                <img src="assets/icons/linkedin.svg" alt="LinkedIn icon">
                </a>
              </span>
            </div>
          </div>
        </nav>
        <div class="pure-g">
  
    <div class="post-index pure-u-1-1">
      <h2><a href="2019/08/creating-more.html">My attempt at creating more</a></h2>

      <article class="text">
          <p>I began blogging in the now prehistoric late 2000s.</p>

<p>I‚Äôve done a few blogs about different subjects (computer science, algorithms, web development, short stories and political ramblings). I‚Äôve had blogs on Blogspot, Wordpress and, more recently, Medium.</p>

<p>Those platforms were (or are, I suppose) an easy way to spew your ideas over the Internet while also being nice and comfy for other people to actually read (this last point is important for the CSS-challenged such as yours truly). In other words, those services Got Shit Done‚Ñ¢.</p>


        <div class="post-tags">
          
            <div class="tags">
            
              <a class="pure-button button-xsmall" href="tags/hello world">hello world</a>
            
            </div>
          
        </div>

        <div class="pure-g post-footer">
          <div class="pure-u-1-2">
              <a class="read-more" href="2019/08/creating-more.html">Continue reading ‚Ä∫</a>
          </div>
          <div class="pure-u-1-2 post-meta">
            <aside>Posted Aug 29, 2019</aside>

          </div>
        </div>
      </article>
    </div>
  
    <div class="post-index pure-u-1-1">
      <h2><a href="2018/09/10-ways-not-to-do-a-big-deploy.html">10 ways not to do a big deploy</a></h2>

      <article class="text">
          <p>Ideally, deploys should be small, concise, easily revertible, fast and with a small or nil footprint on the database. However, no matter how awesome you are, sometimes that is just unattainable and you end up needing to deploy something that is just the opposite: big, messy, hard to revert, painfully slow and rubbing the DB the wrong way. If the deploy messes with a mission-critical part of your software, all the worse for you.</p>

<p>But there are actually many ways you can make those situations even worse. Here are a few bullet points you can follow to guarantee a nightmarish deploy complete with nasty side-effects that will haunt you and your coworkers for days to come.</p>


        <div class="post-tags">
          
            <div class="tags">
            
              <a class="pure-button button-xsmall" href="tags/Devops">Devops</a>
            
            </div>
          
        </div>

        <div class="pure-g post-footer">
          <div class="pure-u-1-2">
              <a class="read-more" href="2018/09/10-ways-not-to-do-a-big-deploy.html">Continue reading ‚Ä∫</a>
          </div>
          <div class="pure-u-1-2 post-meta">
            <aside>Posted Sep 03, 2018</aside>

          </div>
        </div>
      </article>
    </div>
  
    <div class="post-index pure-u-1-1">
      <h2><a href="2019/01/halving-page-sizes-with-srcset.html">Halving page sizes with srcset</a></h2>

      <article class="text">
          <p><a href="https://www.webbloatscore.com/">Web bloat</a> is <a href="http://idlewords.com/talks/website_obesity.htm">discussed</a> a lot nowadays. Web pages with fairly straightforward content‚Ää‚Äî‚Ääsuch as a Google search results page‚Ää‚Äî‚Ääare substantially bigger today than they were a few decades ago, even though the content itself hasn‚Äôt changed that much. We, web developers, are at least partly to blame: laziness or just <a href="http://www.haneycodes.net/npm-left-pad-have-we-forgotten-how-to-program/">bad programming</a> are definitively part of the problem (of course, laziness might stem from a tight or impossible deadline, and bad code might come from inexperienced programmers‚Ää‚Äî‚Ääno judgment going on here).</p>


        <div class="post-tags">
          
            <div class="tags">
            
              <a class="pure-button button-xsmall" href="tags/Web development">Web development</a>
            
            </div>
          
        </div>

        <div class="pure-g post-footer">
          <div class="pure-u-1-2">
              <a class="read-more" href="2019/01/halving-page-sizes-with-srcset.html">Continue reading ‚Ä∫</a>
          </div>
          <div class="pure-u-1-2 post-meta">
            <aside>Posted Sep 03, 2018</aside>

          </div>
        </div>
      </article>
    </div>
  
    <div class="post-index pure-u-1-1">
      <h2><a href="2018/06/working-remotely-in-a-non-remote-company.html">Working remotely in a non-remote company</a></h2>

      <article class="text">
          <p><img src="assets/images/goiabada/1*mgVZOuAHmp9Ipm2asL0IQQ.jpg" alt=""></p>

<p>We‚Äôre a small team here at Guava, and we‚Äôve always considered ourselves <em>remote friendly.</em> Most of us work remotely every now and then pushed by varied <em>force majeure</em> situations‚Äî be it the flu, the need to supervise renovation or construction work at home, flash floods near the office, receiving guests at home or any number of other situations. We‚Äôve also had a few of us working remotely for a few days or weeks while traveling to or back from a conference, or when visiting relatives that live out of town. In other words, remote working has always been a very temporary and circumstantial thing among us.</p>

<p>We have a nice office (with hammocks!), excellent work equipment, great desk space, comfortable chairs, plenty of snacks and comfort food and an infinite supply of coffee. We‚Äôre also easygoing and overall pleasant people (well, most of us are) to work with several hours a day, and some of us are even mildly funny.</p>


        <div class="post-tags">
          
            <div class="tags">
            
              <a class="pure-button button-xsmall" href="tags/Remote work">Remote work</a>
            
            </div>
          
        </div>

        <div class="pure-g post-footer">
          <div class="pure-u-1-2">
              <a class="read-more" href="2018/06/working-remotely-in-a-non-remote-company.html">Continue reading ‚Ä∫</a>
          </div>
          <div class="pure-u-1-2 post-meta">
            <aside>Posted Jun 12, 2018</aside>

          </div>
        </div>
      </article>
    </div>
  
    <div class="post-index pure-u-1-1">
      <h2><a href="2018/03/the-5-stages-of-dealing-with-legacy-code.html">The 5 stages of dealing with legacy code</a></h2>

      <article class="text">
          <p>Yes, this article will use the <a href="https://en.wikipedia.org/wiki/K%C3%BCbler-Ross_model">5 stages of grief</a> as an analogy for something software development-related. There are at least a few thousand other articles with a similar motif (424,000 results for ‚Äúgrief stages software‚Äù according to <a href="https://www.google.es/search?q=grief+stages+software&amp;oq=grief+stages+software">Google</a>). But bear with me for the next 5 minutes and I promise you‚Äôll get something out of this‚Ää‚Äî‚Ääif nothing else, at least the smirk of those who read their past follies put on text by someone else.</p>

<p>I have been working on a rather big Rails project for the past year and half. The project is nearly 7 years old, and has an all-too-common successful-startup-bought-by-industry-giant background story. In a project with this kind of background, some things are bound to happen: many developers of many skill ranges have come and gone, many software fads (cough, Meteor, cough), and above all else <em>a lot</em> of legacy code that is, well, let‚Äôs put it nicely, <em>not so great</em>. None of this should be taken personally in any way‚Ää‚Äî‚Ääit is just natural for such things to occur in such projects.</p>


        <div class="post-tags">
          
            <div class="tags">
            
              <a class="pure-button button-xsmall" href="tags/Legacy code">Legacy code</a>
            
            </div>
          
        </div>

        <div class="pure-g post-footer">
          <div class="pure-u-1-2">
              <a class="read-more" href="2018/03/the-5-stages-of-dealing-with-legacy-code.html">Continue reading ‚Ä∫</a>
          </div>
          <div class="pure-u-1-2 post-meta">
            <aside>Posted Mar 05, 2018</aside>

          </div>
        </div>
      </article>
    </div>
  
    <div class="post-index pure-u-1-1">
      <h2><a href="2017/09/improving-spec-speed-in-a-huge-old-Rails-app.html">Improving spec speed in a huge, old Rails app</a></h2>

      <article class="text">
          <p>We got a 6-year-old Rails app with ~370k LOC and a ~6k-test suite which took 24 minutes to complete. Not good! We took a few days off of the main project to see if we could make things better.</p>

<p>More often than not, test suites are the nasty underbelly of a Rails app. Size and age just aggravate the problem. Tests are seldom a high priority in any project, and speed might not be an issue at all in smaller apps where the whole test suite might take just a few seconds to complete. As the project grows and the CI takes increasingly longer to complete, spec speed suddenly becomes more of an issue.</p>

<p>‚ÄúSmall‚Äù and ‚Äúnew‚Äù are not exactly the case for a certain Rails project we‚Äôre working on here at Guava. We‚Äôre talking about a 6-year-old e-commerce portal with ~370k LOC, a couple million customers and a ~6k-test, 300-spec suite which took, on average, a whopping 24 minutes to complete in our CI. <em>Not good!</em> So we took a couple of days off the main project to see if we could make things better‚Ää‚Äî‚Ääor less worse.</p>


        <div class="post-tags">
          
            <div class="tags">
            
              <a class="pure-button button-xsmall" href="tags/Ruby">Ruby</a>
            
              <a class="pure-button button-xsmall" href="tags/Rails">Rails</a>
            
              <a class="pure-button button-xsmall" href="tags/Software Engineering">Software Engineering</a>
            
              <a class="pure-button button-xsmall" href="tags/TDD">TDD</a>
            
              <a class="pure-button button-xsmall" href="tags/RSpec">RSpec</a>
            
            </div>
          
        </div>

        <div class="pure-g post-footer">
          <div class="pure-u-1-2">
              <a class="read-more" href="2017/09/improving-spec-speed-in-a-huge-old-Rails-app.html">Continue reading ‚Ä∫</a>
          </div>
          <div class="pure-u-1-2 post-meta">
            <aside>Posted Sep 04, 2017</aside>

          </div>
        </div>
      </article>
    </div>
  
    <div class="post-index pure-u-1-1">
      <h2><a href="2017/06/how-a-Unix-CLI-tool-made-me-care-about-software-feedback.html">How a Unix CLI tool made me care about software feedback</a></h2>

      <article class="text">
          <p>Providing feedback is one of the most important parts of any software. Unfortunately, more often than not we tend to downplay or ignore the very simple yet crucial task of letting the user know what is going on. In this article I‚Äôll use a short cautionary tale of how the lack of proper user feedback (and some laziness, I admit) almost cost me an entire HDD with years of personal data.</p>


        <div class="post-tags">
          
            <div class="tags">
            
              <a class="pure-button button-xsmall" href="tags/Software Engineering">Software Engineering</a>
            
              <a class="pure-button button-xsmall" href="tags/Unix">Unix</a>
            
            </div>
          
        </div>

        <div class="pure-g post-footer">
          <div class="pure-u-1-2">
              <a class="read-more" href="2017/06/how-a-Unix-CLI-tool-made-me-care-about-software-feedback.html">Continue reading ‚Ä∫</a>
          </div>
          <div class="pure-u-1-2 post-meta">
            <aside>Posted Jun 19, 2017</aside>

          </div>
        </div>
      </article>
    </div>
  
    <div class="post-index pure-u-1-1">
      <h2><a href="2017/05/when-postgres-is-not-enough.html">When Postgres is not enough</a></h2>

      <article class="text">
          <p>What happens when your project‚Äôs RDBMS is just not enough to deal with unexpectedly huge amounts of data?</p>

<p>You could try to de-normalize some tables here and there to avoid unnecessary JOINs, create a few indexes, implement some kind of pagination or even pre-process the data into a more palatable format. However, if you did all that and it still was not enough, the ‚Äúnatural impulse‚Äù is to give up on the RDBMS altogether and just use Elasticsearch. Sounds like a no-brainer, right?</p>


        <div class="post-tags">
          
            <div class="tags">
            
              <a class="pure-button button-xsmall" href="tags/Ruby">Ruby</a>
            
              <a class="pure-button button-xsmall" href="tags/Software Engineering">Software Engineering</a>
            
              <a class="pure-button button-xsmall" href="tags/Postgresql">Postgresql</a>
            
              <a class="pure-button button-xsmall" href="tags/SQL">SQL</a>
            
            </div>
          
        </div>

        <div class="pure-g post-footer">
          <div class="pure-u-1-2">
              <a class="read-more" href="2017/05/when-postgres-is-not-enough.html">Continue reading ‚Ä∫</a>
          </div>
          <div class="pure-u-1-2 post-meta">
            <aside>Posted May 08, 2017</aside>

          </div>
        </div>
      </article>
    </div>
  
    <div class="post-index pure-u-1-1">
      <h2><a href="2017/03/dont-obsess-over-code-dry.html">Don't obsess over code DRYness</a></h2>

      <article class="text">
          <p>Being clever is a good thing for a developer. Ingenuity allows us to write software that solves complex real-world problems. However, ‚Äúclever‚Äù <em>code</em> is not always a good thing. In many cases‚Ää‚Äî‚ÄäI dare say in <em>most</em> cases‚Ää‚Äî‚Ääit is a very bad thing. I consciously try to avoid writing code that might be seen as ‚Äúclever‚Äù. The smart thing to do is trying hard not to be smart (yes, very <a href="http://literarydevices.net/war-is-peace/">1984</a>).</p>

<p>Developers tend to see themselves (quite indulgently) as smart people. Not many people understand what we do, and society sees a developer as a kind of modern wizard, writing unreadable magic spells in a small metal box. In reality, though, we are not half as smart as we think: for instance, if you are a developer, you are certainly familiar with the frustration of trying to understand some cryptic piece of code that seemed perfectly reasonable and straightforward when you wrote it a couple of months earlier.</p>


        <div class="post-tags">
          
            <div class="tags">
            
              <a class="pure-button button-xsmall" href="tags/Ruby">Ruby</a>
            
              <a class="pure-button button-xsmall" href="tags/Software Engineering">Software Engineering</a>
            
            </div>
          
        </div>

        <div class="pure-g post-footer">
          <div class="pure-u-1-2">
              <a class="read-more" href="2017/03/dont-obsess-over-code-dry.html">Continue reading ‚Ä∫</a>
          </div>
          <div class="pure-u-1-2 post-meta">
            <aside>Posted Mar 20, 2017</aside>

          </div>
        </div>
      </article>
    </div>
  
    <div class="post-index pure-u-1-1">
      <h2><a href="2015/10/building-a-shared-library-in-c-and-using-it-in-a-python-program.html">Building a shared library in C and using it in a Python program</a></h2>

      <article class="text">
          <p><a href="assets/images/codedeposit/2015/10/pathfinding.png"><img src="assets/images/codedeposit/2015/10/pathfinding.png?w=660" alt="pathfinding"></a></p>

<p>Figure 1</p>

<p>How do old-time languages such as C, Fortran and others survive in a world with Python, Ruby and so on?</p>

<p>There is&nbsp;plenty&nbsp;legacy code still around which need maintaining, of course. And there are (will always be?) a few specific applications where low level is needed. But&nbsp;one of the great things with software is building upon old stuff using new tools, which brings us to our topic today: building a shared library containing some of our C stuff and using it in nice and comfy Python. Figure 1 shows an example of what we can achieve by using graphical tools available in Python to improve our existing code‚Äôs text-based output. More on that later on.</p>

<p>For our purposes, we consider shared libraries as a collection of compiled objects condensed into a single file, which may then be called by other software. This is, of course, a simplification. A longer discussion about shared and static libraries can be found in [1].</p>


        <div class="post-tags">
          
            <div class="tags">
            
              <a class="pure-button button-xsmall" href="tags/c">c</a>
            
              <a class="pure-button button-xsmall" href="tags/linux">linux</a>
            
              <a class="pure-button button-xsmall" href="tags/python">python</a>
            
              <a class="pure-button button-xsmall" href="tags/reuse">reuse</a>
            
              <a class="pure-button button-xsmall" href="tags/shared library">shared library</a>
            
            </div>
          
        </div>

        <div class="pure-g post-footer">
          <div class="pure-u-1-2">
              <a class="read-more" href="2015/10/building-a-shared-library-in-c-and-using-it-in-a-python-program.html">Continue reading ‚Ä∫</a>
          </div>
          <div class="pure-u-1-2 post-meta">
            <aside>Posted Oct 28, 2015</aside>

          </div>
        </div>
      </article>
    </div>
  
    <div class="post-index pure-u-1-1">
      <h2><a href="2015/10/red-black-vs-avl.html">Trees, part IV - Benchmarking Red-black and AVL trees</a></h2>

      <article class="text">
          <p>In our previous installments we implemented two of the most well-known self-balancing binary search trees: <a href="%7B%%20link%20_posts/2014-04-21-trees-part-ii-avl-tree.markdown%20%%7D">AVL</a> and <a href="%7B%%20link%20_posts/2015-10-01-trees-part-iii-red-black-tree.markdown%20%%7D">Red-black</a> <a href="%7B%%20link%20_posts/2014-03-31-trees-part-i.markdown%20%%7D">trees</a>.</p>

<p>We had a few classes on AVL trees in our basic data structures &amp; algorithms class back in college, which made its implementation far less of a challenge than the Red-black tree. So besides the fundamental guidance of CLRS I had to do quite some googling to get it working. While googling I noticed there were quite a lot of questions about which (AVL or RB) tree was ‚Äúbetter‚Äù in some sense, be it insertion, search time, deletion time, etc. Most textbooks and articles dismiss this question just by stating the factor differences in either trees‚Äô worst case heights, <a href="%7B%%20link%20_posts/2015-10-01-trees-part-iii-red-black-tree.markdown%20%%7D">as we briefly mentioned</a> in the past installment. If you‚Äôre anything like me, however, you‚Äôll want to see some comparisons where the trees are <em>actually</em> tested. So I decided to do some simple benchmarking to test those theoretical worst-cases. Here‚Äôs what I found out.</p>


        <div class="post-tags">
          
        </div>

        <div class="pure-g post-footer">
          <div class="pure-u-1-2">
              <a class="read-more" href="2015/10/red-black-vs-avl.html">Continue reading ‚Ä∫</a>
          </div>
          <div class="pure-u-1-2 post-meta">
            <aside>Posted Oct 07, 2015</aside>

          </div>
        </div>
      </article>
    </div>
  
    <div class="post-index pure-u-1-1">
      <h2><a href="2015/10/trees-part-iii-red-black-tree.html">Trees, part III - Red-black tree</a></h2>

      <article class="text">
          <p>In our last installment on trees, we studied and implemented the <a href="%7B%%20link%20_posts/2014-04-21-trees-part-ii-avl-tree.markdown%20%%7D">AVL tree</a>. The AVL tree is one of many <a href="https://en.wikipedia.org/wiki/Self-balancing_binary_search_tree">self-balancing binary search trees</a>, a special kind of BST that enforces sub-linear operation costs by maintaining tree height close to the theoretical minimum of $latex log_{2}(n)$. This is usually done by what is called <em>tree rotation</em>, which is basically moving around tree nodes (and updating some special node properties).</p>

<p>As you can see in the Wikipedia page¬π, AVL trees guarantee that the tree height is strictly less than $latex \approx 1.44~log_{2}(n)$, while Red-black trees have a slightly worse threshold of $latex \approx 2~log_{2}(n)$; thus, AVL trees will provide significantly better search times than Red-black trees. However, while AVL trees may need to do $latex O(log(n))$ rotations after each insertion, Red-black trees must do at most 2 rotations per insertion. So either one may be your tree of choice depending on the application: if search time is critical but data doesn‚Äôt get updated too often, an AVL tree will perform better; whereas a Red-black tree will perform better in scenarios where data is constantly being changed.</p>

<p>Self-balancing BSTs add some kind of property to tree nodes that make way for tree balancing: with AVL trees, it was the ‚Äúbalance factor‚Äù. With Red-black trees, a ‚Äúcolor‚Äù property is added to each node. This leads us to the <strong>Red-black tree properties</strong>:</p>

<ol>
  <li>Every node is either red or black</li>
  <li>Every leaf is black</li>
  <li>If a node is red, then both its children are black</li>
  <li>Every path from a node to any of its descendant leafs contains the same number of black nodes</li>
</ol>


        <div class="post-tags">
          
        </div>

        <div class="pure-g post-footer">
          <div class="pure-u-1-2">
              <a class="read-more" href="2015/10/trees-part-iii-red-black-tree.html">Continue reading ‚Ä∫</a>
          </div>
          <div class="pure-u-1-2 post-meta">
            <aside>Posted Oct 01, 2015</aside>

          </div>
        </div>
      </article>
    </div>
  
    <div class="post-index pure-u-1-1">
      <h2><a href="2015/09/ruby-dsl-metaprogramming-part-ii.html">Ruby DSL &amp; metaprogramming, part II</a></h2>

      <article class="text">
          <p>In the previous installment we built a simple text generator using some Ruby meta-programming tricks. It was still far from being our desired context-free grammar (CFG) generator, though, since it lacked many <a href="https://www.cs.rochester.edu/~nelson/courses/csc_173/grammars/cfg.html">CFG prerequisites</a>. Most flagrantly, we had no rule recursion and only one production (rule definition) per rule. Here‚Äôs the what a script that would use both features:</p>

<div class="highlight"><pre><code class="language-bash">dictionary
  noun <span class="s1">'dog'</span>, <span class="s1">'bus'</span>
  verb <span class="s1">'barked'</span>, <span class="s1">'parked'</span>
  preposition <span class="s1">'at'</span>

rule <span class="s1">'phrase'</span>
  opt <span class="s1">'The'</span>, noun, verb, preposition, <span class="s1">'a'</span>, noun
  opt <span class="s1">'Here goes some'</span>, phrase, <span class="s1">'recursion.'</span>
  opt <span class="s1">'Meet me'</span>, preposition, <span class="s1">'the station.'</span>

grammar phrase: 10</code></pre></div>

<p>The <code>dictionary</code> section is just as we left it. Let‚Äôs see what changed in the <code>rule</code> section.</p>


        <div class="post-tags">
          
            <div class="tags">
            
              <a class="pure-button button-xsmall" href="tags/DSL">DSL</a>
            
              <a class="pure-button button-xsmall" href="tags/metaprogramming">metaprogramming</a>
            
              <a class="pure-button button-xsmall" href="tags/Ruby">Ruby</a>
            
            </div>
          
        </div>

        <div class="pure-g post-footer">
          <div class="pure-u-1-2">
              <a class="read-more" href="2015/09/ruby-dsl-metaprogramming-part-ii.html">Continue reading ‚Ä∫</a>
          </div>
          <div class="pure-u-1-2 post-meta">
            <aside>Posted Sep 20, 2015</aside>

          </div>
        </div>
      </article>
    </div>
  
    <div class="post-index pure-u-1-1">
      <h2><a href="2015/09/ruby-dsl-metaprogramming-part-i.html">Ruby DSL &amp; metaprogramming, part I</a></h2>

      <article class="text">
          <p>I‚Äôve been working with Ruby for nearly a year now, which means I‚Äôm starting to feel the urge to tell people how awesome the language is. One of the most interesting aspects of Ruby to me is <a href="https://en.wikipedia.org/wiki/Metaprogramming">metaprogramming</a>, which it seems to have quite a vocation for.</p>

<p>Since college I have a fondness for automata and formal languages theory. One of the topics I particularly like is text generation (if you haven‚Äôt already, check out the excellent <a href="http://pdos.csail.mit.edu/scigen/">SCIgen</a> and the <a href="http://dev.null.org/dadaengine/">Dada engine</a>), so I thought that building a Context-free grammar (CFG)-like text generator in Ruby would be a nice little exercise and an opportunity to use some of the language‚Äôs coolest features. Also I‚Äôve implemented one of those using Java several years ago, and it was <em>a mess</em>, so I was curious as to how much of an improvement would Ruby offer.</p>

<p>Suppose the following script:</p>

<div class="highlight"><pre><code class="language-ruby"><span class="n">dictionary</span> <span class="s1">'noun'</span><span class="p">,</span> <span class="s1">'dog'</span><span class="p">,</span> <span class="s1">'bus'</span>
<span class="n">dictionary</span> <span class="s1">'verb'</span><span class="p">,</span> <span class="s1">'barked'</span><span class="p">,</span> <span class="s1">'parked'</span>
<span class="n">dictionary</span> <span class="s1">'preposition'</span><span class="p">,</span> <span class="s1">'at'</span>

<span class="n">rule</span> <span class="s1">'phrase'</span><span class="p">,</span> <span class="s1">'noun'</span><span class="p">,</span> <span class="s1">'verb'</span><span class="p">,</span> <span class="s1">'preposition'</span><span class="p">,</span> <span class="s1">'noun'</span>

<span class="n">codex</span> <span class="s1">'phrase'</span></code></pre></div>

<p>We‚Äôd like <code>dictionary</code> to store some words according to their classes, and <code>rule</code> to define a specific ordering of words. For now let‚Äôs not worry about <code>codex</code> (it‚Äôs just a collection of rules).</p>

<p>At this point the seasoned programmer is mentally sketching some kind of text parser. It‚Äôs an okay solution, but isn‚Äôt there something <em>nicer</em> we can do? Well, there is: <a href="https://en.wikipedia.org/wiki/Domain-specific_language">DSL</a>s! In fact, Ruby is quite an excellent tool to build a DSL, and many famed Ruby-powered applications such as Rspec (and <a href="http://www.leighhalliday.com/creating-ruby-dsl">many others</a>) define some kind of DSL.</p>


        <div class="post-tags">
          
            <div class="tags">
            
              <a class="pure-button button-xsmall" href="tags/DSL">DSL</a>
            
              <a class="pure-button button-xsmall" href="tags/metaprogramming">metaprogramming</a>
            
              <a class="pure-button button-xsmall" href="tags/Ruby">Ruby</a>
            
            </div>
          
        </div>

        <div class="pure-g post-footer">
          <div class="pure-u-1-2">
              <a class="read-more" href="2015/09/ruby-dsl-metaprogramming-part-i.html">Continue reading ‚Ä∫</a>
          </div>
          <div class="pure-u-1-2 post-meta">
            <aside>Posted Sep 11, 2015</aside>

          </div>
        </div>
      </article>
    </div>
  
    <div class="post-index pure-u-1-1">
      <h2><a href="2014/04/trees-part-ii-avl-tree.html">Trees, Part II: AVL Tree</a></h2>

      <article class="text">
          <p>Masters classes started a few weeks ago, taking their&nbsp;toll on my productivity here. Sorry about that!</p>

<p>So we (pardon the&nbsp;<a href="http://en.wikipedia.org/wiki/Nosism">nosism</a>, but I think it sounds less egocentric&nbsp;than writing ‚ÄúI‚Äù all the time) hinted at AVL trees back on our <a href="%7B%%20link%20_posts/2014-03-31-trees-part-i.markdown%20%%7D">Trees, Part I</a>&nbsp;post. Specifically, we learned that:</p>

<blockquote>a binary search tree (BST), provides O(h) time search, insert and delete operations (h is the tree height.</blockquote>

<p>Linear time (O(h)) doesn‚Äôt sound very good - if h is close to n, we‚Äôll have the same performance as a <a href="%7B%%20link%20_posts/2014-02-14-3.markdown%20%%7D%7D">linked list</a>.&nbsp;What if there were a way to&nbsp;bound the tree height&nbsp;to some sub-linear factor? As it turns out, there are several ways to do so, and the general idea of somehow&nbsp;keeping the tree height limited to a certain factor of the number of elements it holds is called height&nbsp;<strong>balancing</strong>. Ergo we‚Äôll want to look into (height)&nbsp;<strong>balanced/self-balancing binary search trees **(BBST)</strong>.&nbsp;**</p>

<div class="highlight"><pre><code class="language-bash">                      Burger


                          M
                        <span class="nb">.</span>   <span class="nb">.</span>
                      <span class="nb">.</span>       <span class="nb">.</span>
                    <span class="nb">.</span>           <span class="nb">.</span>
                  <span class="nb">.</span>               <span class="nb">.</span>
                E <span class="nb">.</span>                 P <span class="nb">.</span>
              <span class="nb">.</span>     <span class="nb">.</span>                   <span class="nb">.</span>
            <span class="nb">.</span>         <span class="nb">.</span>                   <span class="nb">.</span>
          <span class="nb">.</span>             <span class="nb">.</span>                   <span class="nb">.</span>
      D <span class="nb">.</span>                 I                   Y
                        <span class="nb">.</span>
                      <span class="nb">.</span>
                    <span class="nb">.</span>
                  <span class="nb">.</span>
                F</code></pre></div>

<p><em>AVL tree</em></p>

<p>Since binary search trees have at most two children, the best tree height (i.e. smallest) we can achieve is log2 n (n being the number of elements in the tree). There are <a href="http://en.wikipedia.org/wiki/Self-balancing_binary_search_tree">several </a>self-balancing BSTs developed over the years. It seems that up there in the US college professors&nbsp;tend to prefer the red-black tree when studying BBSTs, whilst over here AVL is preferred. In any case, AVL tree was&nbsp;the first BBST ever devised, so we‚Äôll adopt it as our BBST model.</p>

<p>AVL trees (named after its two Soviet inventors Adelson-Velsky and Landis) use a series of <strong>rotations</strong> to keep the tree balanced. To keep track of when a certain subtree rooted at some node needs to be rotated, we maintain (or calculate) a&nbsp;<strong>balance factor</strong> variable for each node, which is the difference between the node‚Äôs left and right children‚Äôs heights, i.e.:</p>

<p>balance_factor(n) = n.left_child.height - n.right_child.height</p>


        <div class="post-tags">
          
            <div class="tags">
            
              <a class="pure-button button-xsmall" href="tags/avl">avl</a>
            
              <a class="pure-button button-xsmall" href="tags/binary search tree">binary search tree</a>
            
              <a class="pure-button button-xsmall" href="tags/bst">bst</a>
            
              <a class="pure-button button-xsmall" href="tags/data structure">data structure</a>
            
              <a class="pure-button button-xsmall" href="tags/tree">tree</a>
            
            </div>
          
        </div>

        <div class="pure-g post-footer">
          <div class="pure-u-1-2">
              <a class="read-more" href="2014/04/trees-part-ii-avl-tree.html">Continue reading ‚Ä∫</a>
          </div>
          <div class="pure-u-1-2 post-meta">
            <aside>Posted Apr 21, 2014</aside>

          </div>
        </div>
      </article>
    </div>
  
    <div class="post-index pure-u-1-1">
      <h2><a href="2014/04/shortest-path-part-i-dijkstras-algorithm.html">Shortest path, part I - Dijkstra's algorithm</a></h2>

      <article class="text">
          <p>Now that we have a way to represent <a href="%7B%%20link%20_posts/2014-03-23-graph.markdown%20%%7D">graphs</a>, we can discuss one of the most important problems in graph theory: the shortest path problem (SPP). More or less formally, we‚Äôll define SPP as:</p>

<p>Given a weighted&nbsp;graph G(V,E), find the sequence P = {v0, v1, v2, ‚Ä¶, v(n-1)}, vi ‚àà V, from vertex V0 to vertex V(n-1), such that&nbsp;the list of edges&nbsp;EP = {(v0,v1), (v1,v2), ‚Ä¶ (v(n-2), v(n-1))} exists and the summation of costs of all elements e&nbsp;‚àà EP is the smallest possible.</p>

<p>In other words, find the less expensive (ergo ‚Äúshortest‚Äù)&nbsp;path between two vertices.</p>

<p>The trivial solution is using <a href="%7B%%20link%20_posts/2014-03-31-trees-part-i.markdown%20%%7D">BFS</a>&nbsp;starting at vertex A and stopping when it reaches vertex B. However, BFS doesn‚Äôt look at the edge costs: it calculates the path with&nbsp;least edges, not the path with least total cost.</p>

<p>Although not necessarily the fastest, Dijkstra‚Äôs algorithm is probably the most popular way to solve the shortest path problem due to its simplicity and elegance. The algorithm relies heavily on <a href="%7B%%20link%20_posts/2014-03-21-heap-priority-queues.markdown%20%%7D">priority queues</a>, so make sure to take a look at that if you haven‚Äôt already.</p>

<p><strong>Pseudocode</strong></p>

<div class="highlight"><pre><code class="language-bash">dist[from] <span class="o">=</span> 0
<span class="k">for </span>v : G
      <span class="k">if </span>v <span class="o">!=</span> <span class="nb">source
            </span>dist[v] <span class="o">=</span> infinity
      prev[v] <span class="o">=</span> <span class="nt">-1</span>
      PQ.add<span class="o">(</span>v, dist[v]<span class="o">)</span>
<span class="k">while </span>PQ.hasNext<span class="o">()</span>
      u <span class="o">=</span> PQ.pop<span class="o">()</span>
      <span class="k">for </span>each neighbor v of u
            alt <span class="o">=</span> dist[u] + length<span class="o">(</span>u, v<span class="o">)</span>
            <span class="k">if </span>alt &lt; dist[v]
                  dist[v] <span class="o">=</span> alt
                  prev[v] <span class="o">=</span> u
                  PQ.decrease_key<span class="o">(</span>v,alt<span class="o">)</span>
<span class="k">return </span>prev</code></pre></div>


        <div class="post-tags">
          
            <div class="tags">
            
              <a class="pure-button button-xsmall" href="tags/dijkstra">dijkstra</a>
            
              <a class="pure-button button-xsmall" href="tags/graph">graph</a>
            
              <a class="pure-button button-xsmall" href="tags/graph search">graph search</a>
            
              <a class="pure-button button-xsmall" href="tags/shortest path">shortest path</a>
            
            </div>
          
        </div>

        <div class="pure-g post-footer">
          <div class="pure-u-1-2">
              <a class="read-more" href="2014/04/shortest-path-part-i-dijkstras-algorithm.html">Continue reading ‚Ä∫</a>
          </div>
          <div class="pure-u-1-2 post-meta">
            <aside>Posted Apr 06, 2014</aside>

          </div>
        </div>
      </article>
    </div>
  
    <div class="post-index pure-u-1-1">
      <h2><a href="2014/03/trees-part-i.html">Trees - Part I</a></h2>

      <article class="text">
          <p><a href="assets/images/codedeposit/2014/03/tree1.jpg"><img src="assets/images/codedeposit/2014/03/tree1.jpg" alt="tree"></a></p>

<p><a href="http://commons.wikimedia.org/wiki/File%3ABright_green_tree_-_Waikato.jpg"><img src="//upload.wikimedia.org/wikipedia/commons/thumb/f/f6/Bright_green_tree_-_Waikato.jpg/512px-Bright_green_tree_-_Waikato.jpg" alt="Bright green tree - Waikato"></a></p>

<p>We used trees to build the <a href="%7B%%20link%20_posts/2014-03-21-heap-priority-queues.markdown%20%%7D">heap data structure</a> before, but we didn‚Äôt bother with the theory behind trees, which are abstract and concrete data structures themselves. There‚Äôs a huge range of material to cover so I‚Äôll split this in several posts.</p>

<p>In this first post we‚Äôll cover the basic theory and implement a binary search tree (BST), which provides <code>O(h)</code> time search, insert and delete operations (<code>h</code> is the tree height). First, the basics:</p>

<p>Trees are graphs with a few extra properties and interpretations/conventions.
* Trees have height (longest branch length) and depth (distance to root).
* The uppermost level consists of at most one node (the tree root).
* All nodes may have children.
* There are no edges other than parent-child edges.</p>

<p>Trees are classified according to some&nbsp;of those properties above and some others we‚Äôll mention later. Most commonly, there is a constraint to the maximum number of children per node -e.g. the binary tree limits children to 2 per node.

        </p><div class="post-tags">
          
            <div class="tags">
            
              <a class="pure-button button-xsmall" href="tags/abstract data structure">abstract data structure</a>
            
              <a class="pure-button button-xsmall" href="tags/bst">bst</a>
            
              <a class="pure-button button-xsmall" href="tags/data structure">data structure</a>
            
              <a class="pure-button button-xsmall" href="tags/graph">graph</a>
            
              <a class="pure-button button-xsmall" href="tags/tree">tree</a>
            
            </div>
          
        </div>

        <div class="pure-g post-footer">
          <div class="pure-u-1-2">
              <a class="read-more" href="2014/03/trees-part-i.html">Continue reading ‚Ä∫</a>
          </div>
          <div class="pure-u-1-2 post-meta">
            <aside>Posted Mar 31, 2014</aside>

          </div>
        </div>
      </article>
    </div>
  
    <div class="post-index pure-u-1-1">
      <h2><a href="2014/03/graph.html">Graph</a></h2>

      <article class="text">
          <p>Mathematically, a graph is a set of vertices and edges, thus a graph <code>G</code> is usually written as <code>G(V,E)</code>. Besides linking vertices in the graph, edges can also carry a specific value which may be interpreted as cost, weight, distance etc.</p>

<p><a href="assets/images/codedeposit/2014/03/graph1.jpg"><img src="assets/images/codedeposit/2014/03/graph1.jpg" alt="graph viewed with BurgerGFX"></a></p>

<p>In computer science, we‚Äôre interested in the (abstract) data structure used to implement the graph mathematical concept. Let‚Äôs first discuss the basic elements in a graph - vertices and edges:</p>

<div class="highlight"><pre><code class="language-c"><span class="k">typedef</span> <span class="k">struct</span> <span class="n">vertex</span>
<span class="p">{</span>
 <span class="kt">unsigned</span> <span class="kt">long</span> <span class="n">id</span><span class="p">;</span>
 <span class="kt">int</span> <span class="n">status</span><span class="p">;</span>
 <span class="kt">double</span> <span class="n">x</span><span class="p">,</span><span class="n">y</span><span class="p">;</span>
 <span class="kt">void</span><span class="o">*</span> <span class="n">data</span><span class="p">;</span>
<span class="p">}</span> <span class="n">vertex</span><span class="p">;</span></code></pre></div>

<p>Vertices should be able to hold any kind of data, so we‚Äôll just throw in a void pointer for that. Other than that we have an id, status (marked or unmarked - more on that later) and 2D coordinates so we can draw the vertices somewhere.</p>

<div class="highlight"><pre><code class="language-c"><span class="k">typedef</span> <span class="k">struct</span> <span class="n">edge</span>
<span class="p">{</span>
 <span class="n">vertex</span><span class="o">*</span> <span class="n">from</span><span class="p">,</span> <span class="o">*</span><span class="n">to</span><span class="p">;</span>
 <span class="kt">int</span> <span class="n">cost</span><span class="p">;</span>
<span class="p">}</span> <span class="n">edge</span><span class="p">;</span></code></pre></div>

<p>Edges consist of just pointers to the vertices they link and an optional value used as weight, distance, cost etc. Strictly speaking we could use a void pointer for that value as well, as long as we also defined a comparison function. But let‚Äôs save the hassle and just use an integer instead - most algorithms will be fine with that.</p>


        <div class="post-tags">
          
            <div class="tags">
            
              <a class="pure-button button-xsmall" href="tags/data structure">data structure</a>
            
              <a class="pure-button button-xsmall" href="tags/graph">graph</a>
            
              <a class="pure-button button-xsmall" href="tags/graph theory">graph theory</a>
            
            </div>
          
        </div>

        <div class="pure-g post-footer">
          <div class="pure-u-1-2">
              <a class="read-more" href="2014/03/graph.html">Continue reading ‚Ä∫</a>
          </div>
          <div class="pure-u-1-2 post-meta">
            <aside>Posted Mar 23, 2014</aside>

          </div>
        </div>
      </article>
    </div>
  
    <div class="post-index pure-u-1-1">
      <h2><a href="2014/03/heap-priority-queues.html">Heap &amp; Priority Queues</a></h2>

      <article class="text">
          <p>Priority queues (PQs) are abstract data types that work just like regular stacks, but the popping order depends on each element‚Äôs priority instead of the sequence they were pushed onto the queue (FIFO or LIFO).</p>

<p>The na√Øve way of implementing a PQ consists of using an unsorted list or array and searching for the highest-priority element at each pop, which takes O(n) time. There are several more efficient implementations, of which the most usual is the heap.</p>

<p>Heaps are complete (i.e. all levels except possibly the last are filled) binary trees that work as PQs by maintaining the following property: children nodes always have a smaller priority than their parent, i.e. for any node A with children B and C, priority(B) &lt; priority(A) &amp;&amp; priority(C) &lt; priority(A). Note that there is no assumed relation between siblings or cousins.</p>

<p><a href="assets/images/codedeposit/2014/03/heap.jpg"><img src="assets/images/codedeposit/2014/03/heap.jpg" alt="max-heap and corresponding array."></a>
<em>max-heap and corresponding array.</em></p>

<p>Each element of a heap has two pieces of information: a key and a value, hence we call them key-value (KV) pair. The key identifies the specific element, and the value determines the element‚Äôs priority within the heap. Heaps can be min-heaps (low value = high priority) or max-heaps (high value = high priority).</p>


        <div class="post-tags">
          
            <div class="tags">
            
              <a class="pure-button button-xsmall" href="tags/abstract data structure">abstract data structure</a>
            
              <a class="pure-button button-xsmall" href="tags/data structure">data structure</a>
            
              <a class="pure-button button-xsmall" href="tags/heap">heap</a>
            
              <a class="pure-button button-xsmall" href="tags/priority queue">priority queue</a>
            
              <a class="pure-button button-xsmall" href="tags/queue">queue</a>
            
            </div>
          
        </div>

        <div class="pure-g post-footer">
          <div class="pure-u-1-2">
              <a class="read-more" href="2014/03/heap-priority-queues.html">Continue reading ‚Ä∫</a>
          </div>
          <div class="pure-u-1-2 post-meta">
            <aside>Posted Mar 21, 2014</aside>

          </div>
        </div>
      </article>
    </div>
  
    <div class="post-index pure-u-1-1">
      <h2><a href="2014/03/burgergfx-simple-2d-graphics.html">BurgerGFX - simple 2D graphics</a></h2>

      <article class="text">
          <p><a href="assets/images/codedeposit/2014/03/burger_gfx1.jpg"><img src="assets/images/codedeposit/2014/03/burger_gfx1.jpg" alt="sample code and output"></a></p>

<p>Several times I find myself wanting to visualize something in 2D, but can‚Äôt bother to fire up OpenGL or other cumbersome API.</p>

<p>So I wrote a simple program which I called BurgerGFX, with 2 core functionalities: draw point and draw line. I find this to be quite enough for simple applications such as viewing a graph.</p>

<p>Setting up the drawing canvas, which I call burger, is simple: call create(width, height), which returns a pointer to the burger. Then simply call the draws, prints and cleans as needed.</p>


        <div class="post-tags">
          
            <div class="tags">
            
              <a class="pure-button button-xsmall" href="tags/graphics">graphics</a>
            
            </div>
          
        </div>

        <div class="pure-g post-footer">
          <div class="pure-u-1-2">
              <a class="read-more" href="2014/03/burgergfx-simple-2d-graphics.html">Continue reading ‚Ä∫</a>
          </div>
          <div class="pure-u-1-2 post-meta">
            <aside>Posted Mar 18, 2014</aside>

          </div>
        </div>
      </article>
    </div>
  
    <div class="post-index pure-u-1-1">
      <h2><a href="2014/03/stack.html">Stack</a></h2>

      <article class="text">
          <p>Using our implementation of a doubly linked (DL) list, we can very simply build the most basic LIFO (last in, first out) data structure: the stack.</p>

<p><a href="assets/images/codedeposit/2014/03/stack.png"><img src="assets/images/codedeposit/2014/03/stack.png?w=300" alt="stack"></a></p>

<p>Stacks have two basic operations: push and pop. Push pushes data onto the stack (i.e., end of the DL list) and pop pops data off the list‚Äôs tail, which is only possible because we can set the new tail as tail-&gt;prev, since we‚Äôre using a DL list, with previous pointers. Another useful function is peek, which returns a pointer to the stack‚Äôs top.</p>


        <div class="post-tags">
          
            <div class="tags">
            
              <a class="pure-button button-xsmall" href="tags/abstract data structure">abstract data structure</a>
            
              <a class="pure-button button-xsmall" href="tags/data structure">data structure</a>
            
            </div>
          
        </div>

        <div class="pure-g post-footer">
          <div class="pure-u-1-2">
              <a class="read-more" href="2014/03/stack.html">Continue reading ‚Ä∫</a>
          </div>
          <div class="pure-u-1-2 post-meta">
            <aside>Posted Mar 18, 2014</aside>

          </div>
        </div>
      </article>
    </div>
  
    <div class="post-index pure-u-1-1">
      <h2><a href="2014/03/doubly-linked-list.html">Doubly linked list</a></h2>

      <article class="text">
          <p>A doubly linked list is like our previously implemented Linked List, but instead of only having pointers to the next element, it also has pointers to the _previous _element:</p>

<p><a href="assets/images/codedeposit/2014/03/610px-doubly-linked-list-svg.png"><img src="assets/images/codedeposit/2014/03/610px-doubly-linked-list-svg.png" alt="610px-Doubly-linked-list.svg"></a></p>

<p>This property makes the doubly linked list very useful as a base for other data structures such as the stack: having a previous pointer means we can quickly (O(1)) remove objects from the list‚Äôs tail, which would be impossible with a linked list.</p>

<p>We won‚Äôt discuss implementation since it so similar to a linked list. If anything implementation is even simpler than a linked list because of the previous pointer access.</p>


        <div class="post-tags">
          
            <div class="tags">
            
              <a class="pure-button button-xsmall" href="tags/data structure">data structure</a>
            
              <a class="pure-button button-xsmall" href="tags/list">list</a>
            
            </div>
          
        </div>

        <div class="pure-g post-footer">
          <div class="pure-u-1-2">
              <a class="read-more" href="2014/03/doubly-linked-list.html">Continue reading ‚Ä∫</a>
          </div>
          <div class="pure-u-1-2 post-meta">
            <aside>Posted Mar 18, 2014</aside>

          </div>
        </div>
      </article>
    </div>
  
    <div class="post-index pure-u-1-1">
      <h2><a href="2014/02/vector.html">Vector</a></h2>

      <article class="text">
          <p>Very simple Vector implementation with add, add_all, get and delete operations using arrays of void pointers.</p>

<p>The downside to this as compared to simply using an array is that here we have an <em>array of pointers</em>, which means the data will most likely be scattered over the memory, not coalesced.</p>


        <div class="post-tags">
          
            <div class="tags">
            
              <a class="pure-button button-xsmall" href="tags/data structure">data structure</a>
            
            </div>
          
        </div>

        <div class="pure-g post-footer">
          <div class="pure-u-1-2">
              <a class="read-more" href="2014/02/vector.html">Continue reading ‚Ä∫</a>
          </div>
          <div class="pure-u-1-2 post-meta">
            <aside>Posted Feb 21, 2014</aside>

          </div>
        </div>
      </article>
    </div>
  
    <div class="post-index pure-u-1-1">
      <h2><a href="2014/02/mergesort.html">Mergesort</a></h2>

      <article class="text">
          <p>Mergesort is an important sorting algorithm when you don‚Äôt have efficient random memory access, since it doesn‚Äôt rely on that and has good time complexity - O(n logn) specifically.</p>

<p>As a typical divide-and-conquer algorithm, Mergesort has two steps: first it recursively splits the lists in two until each half is unitary, then it recursively mends back the lists until it reaches the original size.</p>

<p>But before we dive into the actual algorithm, we need to make some changes to the linked list algorithm we‚Äôll be using.</p>


        <div class="post-tags">
          
            <div class="tags">
            
              <a class="pure-button button-xsmall" href="tags/sorting algorithm">sorting algorithm</a>
            
            </div>
          
        </div>

        <div class="pure-g post-footer">
          <div class="pure-u-1-2">
              <a class="read-more" href="2014/02/mergesort.html">Continue reading ‚Ä∫</a>
          </div>
          <div class="pure-u-1-2 post-meta">
            <aside>Posted Feb 21, 2014</aside>

          </div>
        </div>
      </article>
    </div>
  
    <div class="post-index pure-u-1-1">
      <h2><a href="2014/02/linked-list.html">Linked List</a></h2>

      <article class="text">
          <p>Here‚Äôs a very simple implementation of the linked list data structure.</p>

<p>A pointer to the head element is enough to define a linked list. Each element consists of one pointer to the subsequent element in the list and one pointer to the element‚Äôs data:</p>

<p><a href="assets/images/codedeposit/2014/02/linkedlist.png"><img src="assets/images/codedeposit/2014/02/linkedlist.png?w=450" alt="linkedlist"></a></p>


        <div class="post-tags">
          
            <div class="tags">
            
              <a class="pure-button button-xsmall" href="tags/data structure">data structure</a>
            
              <a class="pure-button button-xsmall" href="tags/list">list</a>
            
            </div>
          
        </div>

        <div class="pure-g post-footer">
          <div class="pure-u-1-2">
              <a class="read-more" href="2014/02/linked-list.html">Continue reading ‚Ä∫</a>
          </div>
          <div class="pure-u-1-2 post-meta">
            <aside>Posted Feb 14, 2014</aside>

          </div>
        </div>
      </article>
    </div>
  
</div>


        <div class="footer">
          2020 Leonardo Brito
        </div>
      </div>

    </div>
  

</body></html>;
T;@k;@ko;;;;	I"/tags.html.erb;
T{;{
;U;[I"5/home/carol/workspace/blog/content/tags.html.erb;
TI"ò<h1>Tags</h1>

<% all_tags.each do |tag, count| %>
  <h2><%= link_for_tag(tag, 'tags/') %> (<%= count %> post<%= 's' if count > 1 %>)
  </h2>
<% end %>
;
T;U;[0I"ï
<h1>Tags</h1>


  <h2><a href="tags/Web development" rel="tag">Web development</a> (1 post)
  </h2>

  <h2><a href="tags/Ruby" rel="tag">Ruby</a> (5 posts)
  </h2>

  <h2><a href="tags/Software Engineering" rel="tag">Software Engineering</a> (4 posts)
  </h2>

  <h2><a href="tags/Postgresql" rel="tag">Postgresql</a> (1 post)
  </h2>

  <h2><a href="tags/SQL" rel="tag">SQL</a> (1 post)
  </h2>

  <h2><a href="tags/Rails" rel="tag">Rails</a> (1 post)
  </h2>

  <h2><a href="tags/TDD" rel="tag">TDD</a> (1 post)
  </h2>

  <h2><a href="tags/RSpec" rel="tag">RSpec</a> (1 post)
  </h2>

  <h2><a href="tags/DSL" rel="tag">DSL</a> (2 posts)
  </h2>

  <h2><a href="tags/metaprogramming" rel="tag">metaprogramming</a> (2 posts)
  </h2>

  <h2><a href="tags/dijkstra" rel="tag">dijkstra</a> (1 post)
  </h2>

  <h2><a href="tags/graph" rel="tag">graph</a> (3 posts)
  </h2>

  <h2><a href="tags/graph search" rel="tag">graph search</a> (1 post)
  </h2>

  <h2><a href="tags/shortest path" rel="tag">shortest path</a> (1 post)
  </h2>

  <h2><a href="tags/sorting algorithm" rel="tag">sorting algorithm</a> (1 post)
  </h2>

  <h2><a href="tags/abstract data structure" rel="tag">abstract data structure</a> (3 posts)
  </h2>

  <h2><a href="tags/data structure" rel="tag">data structure</a> (8 posts)
  </h2>

  <h2><a href="tags/heap" rel="tag">heap</a> (1 post)
  </h2>

  <h2><a href="tags/priority queue" rel="tag">priority queue</a> (1 post)
  </h2>

  <h2><a href="tags/queue" rel="tag">queue</a> (1 post)
  </h2>

  <h2><a href="tags/Remote work" rel="tag">Remote work</a> (1 post)
  </h2>

  <h2><a href="tags/hello world" rel="tag">hello world</a> (1 post)
  </h2>

  <h2><a href="tags/Legacy code" rel="tag">Legacy code</a> (1 post)
  </h2>

  <h2><a href="tags/Devops" rel="tag">Devops</a> (1 post)
  </h2>

  <h2><a href="tags/avl" rel="tag">avl</a> (1 post)
  </h2>

  <h2><a href="tags/binary search tree" rel="tag">binary search tree</a> (1 post)
  </h2>

  <h2><a href="tags/bst" rel="tag">bst</a> (2 posts)
  </h2>

  <h2><a href="tags/tree" rel="tag">tree</a> (2 posts)
  </h2>

  <h2><a href="tags/c" rel="tag">c</a> (1 post)
  </h2>

  <h2><a href="tags/linux" rel="tag">linux</a> (1 post)
  </h2>

  <h2><a href="tags/python" rel="tag">python</a> (1 post)
  </h2>

  <h2><a href="tags/reuse" rel="tag">reuse</a> (1 post)
  </h2>

  <h2><a href="tags/shared library" rel="tag">shared library</a> (1 post)
  </h2>

  <h2><a href="tags/graph theory" rel="tag">graph theory</a> (1 post)
  </h2>

  <h2><a href="tags/list" rel="tag">list</a> (2 posts)
  </h2>

  <h2><a href="tags/Unix" rel="tag">Unix</a> (1 post)
  </h2>

  <h2><a href="tags/graphics" rel="tag">graphics</a> (1 post)
  </h2>

;
T;U;[0I"<!DOCTYPE html><html lang="en"><head>
    <meta charset="utf-8">
    <title>A Developer's Notebook - Tags</title>
    <link rel="stylesheet" href="https://unpkg.com/purecss@1.0.1/build/pure-min.css" integrity="sha384-oAOxQR6DkCoMliIh8yFnu25d7Eq/PHS21PClpwjOTeU2jRSq11vu66rf90/cZr47" crossorigin="anonymous">
    <link rel="stylesheet" href="assets/stylesheet.css">
    <link rel="stylesheet" href="assets/highlight.css">

    <!-- you don't need to keep this, but it's cool for stats! -->
    <meta name="generator" content="Nanoc 4.11.9">
  </head>
  <body>
    <div id="layout">
      <div class="header">
        <h1>
          <a href="./">A Developer's Notebook</a>
        </h1>
      </div>


      <div class="content">
        <nav class="pure-g">
          <div class="pure-u-2-3 links">
            <a href="index.html">Home</a> ¬∑
            <a href="tags.html">Tags</a> ¬∑
            <a href="years.html">Years</a> ¬∑
            <a href="about.html">About</a>
          </div>

          <div class="pure-u-1-3">
            <div class="contact">
              <span>
                <a href="https://github.com/lbrito1" download="">
                  <img src="assets/icons/github.svg" alt="Github icon">
                  </a>
              </span>
              <span>
                <a href="https://www.linkedin.com/in/leonardo-mendes-brito/">
                <img src="assets/icons/linkedin.svg" alt="LinkedIn icon">
                </a>
              </span>
            </div>
          </div>
        </nav>
        <h1>Tags</h1>


  <h2><a href="tags/Web development" rel="tag">Web development</a> (1 post)
  </h2>

  <h2><a href="tags/Ruby" rel="tag">Ruby</a> (5 posts)
  </h2>

  <h2><a href="tags/Software Engineering" rel="tag">Software Engineering</a> (4 posts)
  </h2>

  <h2><a href="tags/Postgresql" rel="tag">Postgresql</a> (1 post)
  </h2>

  <h2><a href="tags/SQL" rel="tag">SQL</a> (1 post)
  </h2>

  <h2><a href="tags/Rails" rel="tag">Rails</a> (1 post)
  </h2>

  <h2><a href="tags/TDD" rel="tag">TDD</a> (1 post)
  </h2>

  <h2><a href="tags/RSpec" rel="tag">RSpec</a> (1 post)
  </h2>

  <h2><a href="tags/DSL" rel="tag">DSL</a> (2 posts)
  </h2>

  <h2><a href="tags/metaprogramming" rel="tag">metaprogramming</a> (2 posts)
  </h2>

  <h2><a href="tags/dijkstra" rel="tag">dijkstra</a> (1 post)
  </h2>

  <h2><a href="tags/graph" rel="tag">graph</a> (3 posts)
  </h2>

  <h2><a href="tags/graph search" rel="tag">graph search</a> (1 post)
  </h2>

  <h2><a href="tags/shortest path" rel="tag">shortest path</a> (1 post)
  </h2>

  <h2><a href="tags/sorting algorithm" rel="tag">sorting algorithm</a> (1 post)
  </h2>

  <h2><a href="tags/abstract data structure" rel="tag">abstract data structure</a> (3 posts)
  </h2>

  <h2><a href="tags/data structure" rel="tag">data structure</a> (8 posts)
  </h2>

  <h2><a href="tags/heap" rel="tag">heap</a> (1 post)
  </h2>

  <h2><a href="tags/priority queue" rel="tag">priority queue</a> (1 post)
  </h2>

  <h2><a href="tags/queue" rel="tag">queue</a> (1 post)
  </h2>

  <h2><a href="tags/Remote work" rel="tag">Remote work</a> (1 post)
  </h2>

  <h2><a href="tags/hello world" rel="tag">hello world</a> (1 post)
  </h2>

  <h2><a href="tags/Legacy code" rel="tag">Legacy code</a> (1 post)
  </h2>

  <h2><a href="tags/Devops" rel="tag">Devops</a> (1 post)
  </h2>

  <h2><a href="tags/avl" rel="tag">avl</a> (1 post)
  </h2>

  <h2><a href="tags/binary search tree" rel="tag">binary search tree</a> (1 post)
  </h2>

  <h2><a href="tags/bst" rel="tag">bst</a> (2 posts)
  </h2>

  <h2><a href="tags/tree" rel="tag">tree</a> (2 posts)
  </h2>

  <h2><a href="tags/c" rel="tag">c</a> (1 post)
  </h2>

  <h2><a href="tags/linux" rel="tag">linux</a> (1 post)
  </h2>

  <h2><a href="tags/python" rel="tag">python</a> (1 post)
  </h2>

  <h2><a href="tags/reuse" rel="tag">reuse</a> (1 post)
  </h2>

  <h2><a href="tags/shared library" rel="tag">shared library</a> (1 post)
  </h2>

  <h2><a href="tags/graph theory" rel="tag">graph theory</a> (1 post)
  </h2>

  <h2><a href="tags/list" rel="tag">list</a> (2 posts)
  </h2>

  <h2><a href="tags/Unix" rel="tag">Unix</a> (1 post)
  </h2>

  <h2><a href="tags/graphics" rel="tag">graphics</a> (1 post)
  </h2>


        <div class="footer">
          2020 Leonardo Brito
        </div>
      </div>

    </div>
  

</body></html>;
T;@y;@yo;;;;	I";/unpublished/2014-02-01-codedeposit-relearning-in-c.md;
T{;{;U;[I"]/home/carol/workspace/blog/content/unpublished/2014-02-01-codedeposit-relearning-in-c.md;
TI"gAs most major IT companies would tell you, it is important to keep sharp at basic algorithms and Computer Science theory. If you're not fresh out of school, chances are that most of the basic stuff will start fading away.

I was starting to feel that about 1 year after graduation, so I decided to go back to the practical core of Computer Science: algorithms and data structures, aided by the classic Introduction to Algorithms by Cromen & Leiserson. C was my language of choice: although by this point I'm more comfortable with Java, C gives the programmer much more control over what's going on in the machine, which in my opinion is extremely relevant to the process of learning algorithms.

I've deliberately chosen to use the bare minimum in terms of libraries, which means I'll be using basically only C standard library. I do the actual coding in Notepad++ and compile with gcc. Up-to-date code can be found at my github account, linked to the right, on the sidebar.

My goal with this blog is both to relearn and to provide useful code and explanations for other students who are starting out at CS. For that purpose, I try being as instructive and didactical I can. However, understand that no material here is fail-proof; there will inevitably be (many) errors, bugs and typos - please don't hold them against me. I will be happy if you point them out.

-- Leonardo Brito
;
T;@Ä;@Äo;;;;	I"0/unpublished/2019-06-19-git-dir-settings.md;
T{;{;U;[I"R/home/carol/workspace/blog/content/unpublished/2019-06-19-git-dir-settings.md;
TI"<!-- ---
author: lbrito1
comments: true
created_at: 2018-09-03
layout: single
title: "Git dir settings"
excerpt: "How to use a single gitconfig file for all projects in a dir. Useful for different work/personal git configs."
categories:
- Code
tags:
- Git

TO-DO

 -->
;
T;@à;@ào;;;;	I"/years.html.erb;
T{;{
;U;[I"6/home/carol/workspace/blog/content/years.html.erb;
TI"Ô<h1>Posts by year</h1>

<% all_years.each do |year, count| %>
  <% year_page = @items.find { |i| i.identifier == "/years/#{year}" } %>
  <h2><%= link_to(year.to_s, year_page) %> (<%= count %> post<%= 's' if count > 1 %>)
  </h2>
<% end %>
;
T;U;[0I"'<h1>Posts by year</h1>


  
  <h2><a href="/2018/">2018</a> (4 posts)
  </h2>

  
  <h2><a href="/2017/">2017</a> (4 posts)
  </h2>

  
  <h2><a href="/2015/">2015</a> (5 posts)
  </h2>

  
  <h2><a href="/2014/">2014</a> (11 posts)
  </h2>

  
  <h2><a href="/2019/">2019</a> (1 post)
  </h2>

;
T;U;[0I"ü<!DOCTYPE html><html lang="en"><head>
    <meta charset="utf-8">
    <title>A Developer's Notebook - Years</title>
    <link rel="stylesheet" href="https://unpkg.com/purecss@1.0.1/build/pure-min.css" integrity="sha384-oAOxQR6DkCoMliIh8yFnu25d7Eq/PHS21PClpwjOTeU2jRSq11vu66rf90/cZr47" crossorigin="anonymous">
    <link rel="stylesheet" href="assets/stylesheet.css">
    <link rel="stylesheet" href="assets/highlight.css">

    <!-- you don't need to keep this, but it's cool for stats! -->
    <meta name="generator" content="Nanoc 4.11.9">
  </head>
  <body>
    <div id="layout">
      <div class="header">
        <h1>
          <a href="./">A Developer's Notebook</a>
        </h1>
      </div>


      <div class="content">
        <nav class="pure-g">
          <div class="pure-u-2-3 links">
            <a href="index.html">Home</a> ¬∑
            <a href="tags.html">Tags</a> ¬∑
            <a href="years.html">Years</a> ¬∑
            <a href="about.html">About</a>
          </div>

          <div class="pure-u-1-3">
            <div class="contact">
              <span>
                <a href="https://github.com/lbrito1" download="">
                  <img src="assets/icons/github.svg" alt="Github icon">
                  </a>
              </span>
              <span>
                <a href="https://www.linkedin.com/in/leonardo-mendes-brito/">
                <img src="assets/icons/linkedin.svg" alt="LinkedIn icon">
                </a>
              </span>
            </div>
          </div>
        </nav>
        <h1>Posts by year</h1>


  
  <h2><a href="2018/">2018</a> (4 posts)
  </h2>

  
  <h2><a href="2017/">2017</a> (4 posts)
  </h2>

  
  <h2><a href="2015/">2015</a> (5 posts)
  </h2>

  
  <h2><a href="2014/">2014</a> (11 posts)
  </h2>

  
  <h2><a href="2019/">2019</a> (1 post)
  </h2>


        <div class="footer">
          2020 Leonardo Brito
        </div>
      </div>

    </div>
  

</body></html>;
T;@ó;@óo;;;;	I"/about.md;
T{;{
;U;[I"0/home/carol/workspace/blog/content/about.md;
TI"C# About

This is a static blog generator.

There are approximately 1 trillion similar projects spread over an [unfathomable amount of different libraries](https://www.staticgen.com/).

This uses Ruby (more specifically, the excellent [Nanoc](https://nanoc.ws) lib) to generate static HTML pages from Markdown or other HTML files.

[Pure CSS](https://purecss.io/) is sparingly used to help with layouts and such. I recommend that you don't look at the CSS, just trust that it works most times.

<%= render('/image.*', src: '/assets/images/monkey.gif', alt: 'A monkey typing on a computer', caption: 'Myself trying to write CSS.') %>

## Features
* Zero amount of Javascript;
* Basic blogging functionalities (a page that lists all posts, a page to show the actual post, tagging etc);
* Syntax highlighting;
* Readable on any device known to mankind (actually I tested only on my monitor and smartphone);
* A page that shows posts by year;
* A page that shows posts by tag;
* A helper for images;
* A rake task that helps set up a new post;
* Small: the entire output of this skeleton is like 100KB (images excluded);
* Has stupid emojis üé® (okay that's just your browser);
* That's about it.

## Why?
Why not?

## Myself

My name is Leo and I'm a software developer. I enjoy Ruby. You can find my Github and Linkedin profiles in the page header.
;
T;U;[0I"ƒ<h1 id="about">About</h1>

<p>This is a static blog generator.</p>

<p>There are approximately 1 trillion similar projects spread over an <a href="https://www.staticgen.com/">unfathomable amount of different libraries</a>.</p>

<p>This uses Ruby (more specifically, the excellent <a href="https://nanoc.ws">Nanoc</a> lib) to generate static HTML pages from Markdown or other HTML files.</p>

<p><a href="https://purecss.io/">Pure CSS</a> is sparingly used to help with layouts and such. I recommend that you don‚Äôt look at the CSS, just trust that it works most times.</p>

<div class="image-box">
  <div>
    <a href="/assets/images/monkey.gif" target="_blank">
      <img src="/assets/images/monkey.gif" alt="A monkey typing on a computer" />
    </a>
  </div>
  <div class="image-caption">Myself trying to write CSS.</div>
</div>

<h2 id="features">Features</h2>
<ul>
  <li>Zero amount of Javascript;</li>
  <li>Basic blogging functionalities (a page that lists all posts, a page to show the actual post, tagging etc);</li>
  <li>Syntax highlighting;</li>
  <li>Readable on any device known to mankind (actually I tested only on my monitor and smartphone);</li>
  <li>A page that shows posts by year;</li>
  <li>A page that shows posts by tag;</li>
  <li>A helper for images;</li>
  <li>A rake task that helps set up a new post;</li>
  <li>Small: the entire output of this skeleton is like 100KB (images excluded);</li>
  <li>Has stupid emojis üé® (okay that‚Äôs just your browser);</li>
  <li>That‚Äôs about it.</li>
</ul>

<h2 id="why">Why?</h2>
<p>Why not?</p>

<h2 id="myself">Myself</h2>

<p>My name is Leo and I‚Äôm a software developer. I enjoy Ruby. You can find my Github and Linkedin profiles in the page header.</p>
;
T;U;[0I"=<!DOCTYPE html><html lang="en"><head>
    <meta charset="utf-8">
    <title>A Developer's Notebook - About</title>
    <link rel="stylesheet" href="https://unpkg.com/purecss@1.0.1/build/pure-min.css" integrity="sha384-oAOxQR6DkCoMliIh8yFnu25d7Eq/PHS21PClpwjOTeU2jRSq11vu66rf90/cZr47" crossorigin="anonymous">
    <link rel="stylesheet" href="assets/stylesheet.css">
    <link rel="stylesheet" href="assets/highlight.css">

    <!-- you don't need to keep this, but it's cool for stats! -->
    <meta name="generator" content="Nanoc 4.11.9">
  </head>
  <body>
    <div id="layout">
      <div class="header">
        <h1>
          <a href="./">A Developer's Notebook</a>
        </h1>
      </div>


      <div class="content">
        <nav class="pure-g">
          <div class="pure-u-2-3 links">
            <a href="index.html">Home</a> ¬∑
            <a href="tags.html">Tags</a> ¬∑
            <a href="years.html">Years</a> ¬∑
            <a href="about.html">About</a>
          </div>

          <div class="pure-u-1-3">
            <div class="contact">
              <span>
                <a href="https://github.com/lbrito1" download="">
                  <img src="assets/icons/github.svg" alt="Github icon">
                  </a>
              </span>
              <span>
                <a href="https://www.linkedin.com/in/leonardo-mendes-brito/">
                <img src="assets/icons/linkedin.svg" alt="LinkedIn icon">
                </a>
              </span>
            </div>
          </div>
        </nav>
        <h1 id="about">About</h1>

<p>This is a static blog generator.</p>

<p>There are approximately 1 trillion similar projects spread over an <a href="https://www.staticgen.com/">unfathomable amount of different libraries</a>.</p>

<p>This uses Ruby (more specifically, the excellent <a href="https://nanoc.ws">Nanoc</a> lib) to generate static HTML pages from Markdown or other HTML files.</p>

<p><a href="https://purecss.io/">Pure CSS</a> is sparingly used to help with layouts and such. I recommend that you don‚Äôt look at the CSS, just trust that it works most times.</p>

<div class="image-box">
  <div>
    <a href="assets/images/monkey.gif" target="_blank">
      <img src="assets/images/monkey.gif" alt="A monkey typing on a computer">
    </a>
  </div>
  <div class="image-caption">Myself trying to write CSS.</div>
</div>

<h2 id="features">Features</h2>
<ul>
  <li>Zero amount of Javascript;</li>
  <li>Basic blogging functionalities (a page that lists all posts, a page to show the actual post, tagging etc);</li>
  <li>Syntax highlighting;</li>
  <li>Readable on any device known to mankind (actually I tested only on my monitor and smartphone);</li>
  <li>A page that shows posts by year;</li>
  <li>A page that shows posts by tag;</li>
  <li>A helper for images;</li>
  <li>A rake task that helps set up a new post;</li>
  <li>Small: the entire output of this skeleton is like 100KB (images excluded);</li>
  <li>Has stupid emojis üé® (okay that‚Äôs just your browser);</li>
  <li>That‚Äôs about it.</li>
</ul>

<h2 id="why">Why?</h2>
<p>Why not?</p>

<h2 id="myself">Myself</h2>

<p>My name is Leo and I‚Äôm a software developer. I enjoy Ruby. You can find my Github and Linkedin profiles in the page header.</p>

        <div class="footer">
          2020 Leonardo Brito
        </div>
      </div>

    </div>
  

</body></html>;
T;@•;@•o;;;;	I"/assets/images/avatar.jpg;
T{;{	;o:Nanoc::Core::BinaryContent:@filenameI"@/home/carol/workspace/blog/content/assets/images/avatar.jpg;
T;@¨;@¨;@¨o;;;;	I"=/assets/images/codedeposit/2015/10/worst-case_insert.png;
T{;{	;o;;I"_/home/carol/workspace/blog/content/assets/images/codedeposit/2015/10/worst-case_insert.png;
T;@≤;@≤;@≤o;;;;	I"9/assets/images/codedeposit/2015/10/worst_inserts.png;
T{;{	;o;;I"[/home/carol/workspace/blog/content/assets/images/codedeposit/2015/10/worst_inserts.png;
T;@∏;@∏;@∏o;;;;	I"7/assets/images/codedeposit/2015/10/pathfinding.png;
T{;{	;o;;I"Y/home/carol/workspace/blog/content/assets/images/codedeposit/2015/10/pathfinding.png;
T;@æ;@æ;@æo;;;;	I"?/assets/images/codedeposit/2015/10/average-case_height.png;
T{;{	;o;;I"a/home/carol/workspace/blog/content/assets/images/codedeposit/2015/10/average-case_height.png;
T;@ƒ;@ƒ;@ƒo;;;;	I"B/assets/images/codedeposit/2015/10/red_black_right_rotate.png;
T{;{	;o;;I"d/home/carol/workspace/blog/content/assets/images/codedeposit/2015/10/red_black_right_rotate.png;
T;@ ;@ ;@ o;;;;	I"A/assets/images/codedeposit/2015/10/worst-case-log_height.png;
T{;{	;o;;I"c/home/carol/workspace/blog/content/assets/images/codedeposit/2015/10/worst-case-log_height.png;
T;@–;@–;@–o;;;;	I"4/assets/images/codedeposit/2015/10/figure_1.png;
T{;{	;o;;I"V/home/carol/workspace/blog/content/assets/images/codedeposit/2015/10/figure_1.png;
T;@÷;@÷;@÷o;;;;	I"D/assets/images/codedeposit/2015/10/red_black_tree_rotation1.png;
T{;{	;o;;I"f/home/carol/workspace/blog/content/assets/images/codedeposit/2015/10/red_black_tree_rotation1.png;
T;@‹;@‹;@‹o;;;;	I"9/assets/images/codedeposit/2015/10/worst_heights.png;
T{;{	;o;;I"[/home/carol/workspace/blog/content/assets/images/codedeposit/2015/10/worst_heights.png;
T;@‚;@‚;@‚o;;;;	I"4/assets/images/codedeposit/2015/10/figure_2.png;
T{;{	;o;;I"V/home/carol/workspace/blog/content/assets/images/codedeposit/2015/10/figure_2.png;
T;@Ë;@Ë;@Ëo;;;;	I"=/assets/images/codedeposit/2015/10/worst-case_search.png;
T{;{	;o;;I"_/home/carol/workspace/blog/content/assets/images/codedeposit/2015/10/worst-case_search.png;
T;@Ó;@Ó;@Óo;;;;	I"A/assets/images/codedeposit/2015/10/worst-case-log_search.png;
T{;{	;o;;I"c/home/carol/workspace/blog/content/assets/images/codedeposit/2015/10/worst-case-log_search.png;
T;@Ù;@Ù;@Ùo;;;;	I"A/assets/images/codedeposit/2015/10/red_black_left_rotate.png;
T{;{	;o;;I"c/home/carol/workspace/blog/content/assets/images/codedeposit/2015/10/red_black_left_rotate.png;
T;@˙;@˙;@˙o;;;;	I":/assets/images/codedeposit/2015/10/worst_searches.png;
T{;{	;o;;I"\/home/carol/workspace/blog/content/assets/images/codedeposit/2015/10/worst_searches.png;
T;@ ;@ ;@ o;;;;	I"A/assets/images/codedeposit/2015/10/worst-case-log_insert.png;
T{;{	;o;;I"c/home/carol/workspace/blog/content/assets/images/codedeposit/2015/10/worst-case-log_insert.png;
T;@;@;@o;;;;	I"?/assets/images/codedeposit/2015/10/average-case_insert.png;
T{;{	;o;;I"a/home/carol/workspace/blog/content/assets/images/codedeposit/2015/10/average-case_insert.png;
T;@;@;@o;;;;	I"=/assets/images/codedeposit/2015/10/worst-case_height.png;
T{;{	;o;;I"_/home/carol/workspace/blog/content/assets/images/codedeposit/2015/10/worst-case_height.png;
T;@;@;@o;;;;	I"?/assets/images/codedeposit/2015/10/average-case_search.png;
T{;{	;o;;I"a/home/carol/workspace/blog/content/assets/images/codedeposit/2015/10/average-case_search.png;
T;@;@;@o;;;;	I"2/assets/images/codedeposit/2014/04/graph1.png;
T{;{	;o;;I"T/home/carol/workspace/blog/content/assets/images/codedeposit/2014/04/graph1.png;
T;@;@;@o;;;;	I"5/assets/images/codedeposit/2014/02/codedepo1.jpg;
T{;{	;o;;I"W/home/carol/workspace/blog/content/assets/images/codedeposit/2014/02/codedepo1.jpg;
T;@$;@$;@$o;;;;	I"4/assets/images/codedeposit/2014/02/codedepo.jpg;
T{;{	;o;;I"V/home/carol/workspace/blog/content/assets/images/codedeposit/2014/02/codedepo.jpg;
T;@*;@*;@*o;;;;	I"2/assets/images/codedeposit/2014/02/header.jpg;
T{;{	;o;;I"T/home/carol/workspace/blog/content/assets/images/codedeposit/2014/02/header.jpg;
T;@0;@0;@0o;;;;	I"6/assets/images/codedeposit/2014/02/linkedlist.png;
T{;{	;o;;I"X/home/carol/workspace/blog/content/assets/images/codedeposit/2014/02/linkedlist.png;
T;@6;@6;@6o;;;;	I":/assets/images/codedeposit/2014/02/cropped-header.jpg;
T{;{	;o;;I"\/home/carol/workspace/blog/content/assets/images/codedeposit/2014/02/cropped-header.jpg;
T;@<;@<;@<o;;;;	I"=/assets/images/codedeposit/2014/02/cropped-codedepo1.jpg;
T{;{	;o;;I"_/home/carol/workspace/blog/content/assets/images/codedeposit/2014/02/cropped-codedepo1.jpg;
T;@B;@B;@Bo;;;;	I"0/assets/images/codedeposit/2014/03/tree.jpg;
T{;{	;o;;I"R/home/carol/workspace/blog/content/assets/images/codedeposit/2014/03/tree.jpg;
T;@H;@H;@Ho;;;;	I"1/assets/images/codedeposit/2014/03/tree1.jpg;
T{;{	;o;;I"S/home/carol/workspace/blog/content/assets/images/codedeposit/2014/03/tree1.jpg;
T;@N;@N;@No;;;;	I"7/assets/images/codedeposit/2014/03/burger_gfx1.jpg;
T{;{	;o;;I"Y/home/carol/workspace/blog/content/assets/images/codedeposit/2014/03/burger_gfx1.jpg;
T;@T;@T;@To;;;;	I"0/assets/images/codedeposit/2014/03/heap.jpg;
T{;{	;o;;I"R/home/carol/workspace/blog/content/assets/images/codedeposit/2014/03/heap.jpg;
T;@Z;@Z;@Zo;;;;	I"1/assets/images/codedeposit/2014/03/graph.jpg;
T{;{	;o;;I"S/home/carol/workspace/blog/content/assets/images/codedeposit/2014/03/graph.jpg;
T;@`;@`;@`o;;;;	I"2/assets/images/codedeposit/2014/03/graph1.jpg;
T{;{	;o;;I"T/home/carol/workspace/blog/content/assets/images/codedeposit/2014/03/graph1.jpg;
T;@f;@f;@fo;;;;	I"1/assets/images/codedeposit/2014/03/stack.png;
T{;{	;o;;I"S/home/carol/workspace/blog/content/assets/images/codedeposit/2014/03/stack.png;
T;@l;@l;@lo;;;;	I"6/assets/images/codedeposit/2014/03/burger_gfx.jpg;
T{;{	;o;;I"X/home/carol/workspace/blog/content/assets/images/codedeposit/2014/03/burger_gfx.jpg;
T;@r;@r;@ro;;;;	I"H/assets/images/codedeposit/2014/03/610px-doubly-linked-list-svg.png;
T{;{	;o;;I"j/home/carol/workspace/blog/content/assets/images/codedeposit/2014/03/610px-doubly-linked-list-svg.png;
T;@x;@x;@xo;;;;	I"*/assets/images/screenshot-desktop.png;
T{;{	;o;;I"L/home/carol/workspace/blog/content/assets/images/screenshot-desktop.png;
T;@~;@~;@~o;;;;	I"/assets/images/monkey.gif;
T{;{	;o;;I"@/home/carol/workspace/blog/content/assets/images/monkey.gif;
T;@Ñ;@Ñ;@Ño;;;;	I"+/assets/images/fan_page_screenshot.png;
T{;{	;o;;I"M/home/carol/workspace/blog/content/assets/images/fan_page_screenshot.png;
T;@ä;@ä;@äo;;;;	I"3/assets/images/goiabada/0*71RikbZX7I55dU74.jpg;
T{;{	;o;;I"U/home/carol/workspace/blog/content/assets/images/goiabada/0*71RikbZX7I55dU74.jpg;
T;@ê;@ê;@êo;;;;	I":/assets/images/goiabada/1*RUsq0P9vGjQQvjpsbov09g.jpeg;
T{;{	;o;;I"\/home/carol/workspace/blog/content/assets/images/goiabada/1*RUsq0P9vGjQQvjpsbov09g.jpeg;
T;@ñ;@ñ;@ño;;;;	I"9/assets/images/goiabada/1*FjCiO6MvtgTo0pr533qZVw.jpg;
T{;{	;o;;I"[/home/carol/workspace/blog/content/assets/images/goiabada/1*FjCiO6MvtgTo0pr533qZVw.jpg;
T;@ú;@ú;@úo;;;;	I"9/assets/images/goiabada/1*mgVZOuAHmp9Ipm2asL0IQQ.jpg;
T{;{	;o;;I"[/home/carol/workspace/blog/content/assets/images/goiabada/1*mgVZOuAHmp9Ipm2asL0IQQ.jpg;
T;@¢;@¢;@¢o;;;;	I"/assets/stylesheet.scss;
T{;{	;U;[I">/home/carol/workspace/blog/content/assets/stylesheet.scss;
TI"â
// Palette
$color1: #000;
$color2: #111;
$color3: #999;
$color4: #BBB;
$color5: #EEE;

$color-hyperlink: #5aafdb;

$font-serif: "Didot", serif;

a {
  color: $color-hyperlink;
  text-decoration: none;
}

h1 { font-weight: 300; }
h2 { font-weight: 300; }

aside { font-family:  $font-serif; }

body {
  color: #222;
  font-family:  $font-serif;
  font-size: 22px;
}

.text {
  font-family:  $font-serif;
  color: $color2;
  line-height: 1.6em;
}

// Navigation
nav {
  padding: 1em 0;
  color: $color2;
  border-bottom: 1px solid $color3;
  margin-bottom: 1em;
  a {
    font-family:  $font-serif;
    font-size: 95%;
    color: $color1;
  }

  .contact {
    img {
      width: 1em;
      height: 1em;
    }
    float: right;
    span {
      margin: 2px;
    }
  }
}

// Layout
#layout {
  position: relative;
  left: 0;
  padding-left: 0;
}

// Main content
.content {
  margin: 0 auto;
  padding: 0 1em;
  max-width: 800px;
  margin-bottom: 50px;
  line-height: 1.8em;
  h1 { text-align: center; }

  .footer {
    margin: 20px 0;
    color: $color2;
    font-size: 90%;
    text-align: center;
  }
}

.header {
  margin: 0;
  color: #333;
  text-align: center;
  padding: 2.5em 2em 0;
  // background-image: linear-gradient(to left top, #bfcbe1, #b4c5e2, #aabee4, #9fb8e5, #94b1e6, #8aa9e4, #7fa2e2, #759ae0, #688fda, #5b84d4, #4e7ace, #406fc8);

  // Site title
  h1 {
    margin: 0.2em 0;
    font-weight: 300;
    font-size: 300%;
  }
  a {
    color: $color1;
  }
}

// Post (Index)
.post-index {
  border-bottom: 1px solid $color3;
  padding: 1.5em 0;
  .post-tags {
    display: inline-block;
    margin: 10px 0;
  }
  h2 a {
    font-family:  $font-serif;
    color: $color2;
    font-weight: 300;
  }
  aside {
    color: $color3;
  }
  .read-more {
    font-size: 90%;
  }
  .tags {
    font-family:  $font-serif;
    color: $color3;
  }
  .post-meta {
    text-align: right;
    font-size: 90%;
  }
  .post-footer {
  }
}

// Post (Show)
.post-show {
  h1 {
    text-align: center;
    color: $color2;
    font-weight: 300;
  }
  aside {
    font-style: italic;
    color: $color3;
  }
  .post-footer {
    padding: 40px 0;
  }
}

article {
  img {
    width: 100%;
  }
}

.button-xsmall {
    font-size: 70%;
}

.image-box {
  text-align: center;
  .image-caption {
    color: $color3;
    font-style: italic;
    text-align: center;
    font-size: 70%;
  }
}

// Syntax highlighting
.highlight {
  padding: 0 10px;
  font-size: 80%;
}

// Responsive media queries
@media(max-width: 1000px) {
  .content {
    margin: 0.5em;
    max-width: 100%;
  }
  * { font-size: 110%; }
  h2 {
    font-size: 180%;
    line-height: 1.5em;
  }
  nav {
    a {
      font-size: 120%;
    }
  }
}
;
T;U;[0I"ıa {
  color: #5aafdb;
  text-decoration: none; }

h1 {
  font-weight: 300; }

h2 {
  font-weight: 300; }

aside {
  font-family: "Didot", serif; }

body {
  color: #222;
  font-family: "Didot", serif;
  font-size: 22px; }

.text {
  font-family: "Didot", serif;
  color: #111;
  line-height: 1.6em; }

nav {
  padding: 1em 0;
  color: #111;
  border-bottom: 1px solid #999;
  margin-bottom: 1em; }
  nav a {
    font-family: "Didot", serif;
    font-size: 95%;
    color: #000; }
  nav .contact {
    float: right; }
    nav .contact img {
      width: 1em;
      height: 1em; }
    nav .contact span {
      margin: 2px; }

#layout {
  position: relative;
  left: 0;
  padding-left: 0; }

.content {
  margin: 0 auto;
  padding: 0 1em;
  max-width: 800px;
  margin-bottom: 50px;
  line-height: 1.8em; }
  .content h1 {
    text-align: center; }
  .content .footer {
    margin: 20px 0;
    color: #111;
    font-size: 90%;
    text-align: center; }

.header {
  margin: 0;
  color: #333;
  text-align: center;
  padding: 2.5em 2em 0; }
  .header h1 {
    margin: 0.2em 0;
    font-weight: 300;
    font-size: 300%; }
  .header a {
    color: #000; }

.post-index {
  border-bottom: 1px solid #999;
  padding: 1.5em 0; }
  .post-index .post-tags {
    display: inline-block;
    margin: 10px 0; }
  .post-index h2 a {
    font-family: "Didot", serif;
    color: #111;
    font-weight: 300; }
  .post-index aside {
    color: #999; }
  .post-index .read-more {
    font-size: 90%; }
  .post-index .tags {
    font-family: "Didot", serif;
    color: #999; }
  .post-index .post-meta {
    text-align: right;
    font-size: 90%; }

.post-show h1 {
  text-align: center;
  color: #111;
  font-weight: 300; }
.post-show aside {
  font-style: italic;
  color: #999; }
.post-show .post-footer {
  padding: 40px 0; }

article img {
  width: 100%; }

.button-xsmall {
  font-size: 70%; }

.image-box {
  text-align: center; }
  .image-box .image-caption {
    color: #999;
    font-style: italic;
    text-align: center;
    font-size: 70%; }

.highlight {
  padding: 0 10px;
  font-size: 80%; }

@media (max-width: 1000px) {
  .content {
    margin: 0.5em;
    max-width: 100%; }

  * {
    font-size: 110%; }

  h2 {
    font-size: 180%;
    line-height: 1.5em; }

  nav a {
    font-size: 120%; } }
;
T;@¨;@¨o;;;;	I"/assets/highlight.css;
T{;{	;U;[I"</home/carol/workspace/blog/content/assets/highlight.css;
TI"Ë.highlight table td { padding: 5px; }
.highlight table pre { margin: 0; }
.highlight .c, .highlight .ch, .highlight .cd, .highlight .cpf {
  color: #75715e;
  font-style: italic;
}
.highlight .cm {
  color: #75715e;
  font-style: italic;
}
.highlight .c1 {
  color: #75715e;
  font-style: italic;
}
.highlight .cp {
  color: #75715e;
  font-weight: bold;
}
.highlight .cs {
  color: #75715e;
  font-weight: bold;
  font-style: italic;
}
.highlight .err {
  color: #960050;
  background-color: #1e0010;
}
.highlight .gi {
  color: #ffffff;
  background-color: #324932;
}
.highlight .gd {
  color: #ffffff;
  background-color: #493131;
}
.highlight .ge {
  color: #000000;
  font-style: italic;
}
.highlight .gr {
  color: #aa0000;
}
.highlight .gt {
  color: #aa0000;
}
.highlight .gh {
  color: #999999;
}
.highlight .go {
  color: #888888;
}
.highlight .gp {
  color: #555555;
}
.highlight .gs {
  font-weight: bold;
}
.highlight .gu {
  color: #aaaaaa;
}
.highlight .k, .highlight .kv {
  color: #66d9ef;
  font-weight: bold;
}
.highlight .kc {
  color: #66d9ef;
  font-weight: bold;
}
.highlight .kd {
  color: #66d9ef;
  font-weight: bold;
}
.highlight .kp {
  color: #66d9ef;
  font-weight: bold;
}
.highlight .kr {
  color: #66d9ef;
  font-weight: bold;
}
.highlight .kt {
  color: #66d9ef;
  font-weight: bold;
}
.highlight .kn {
  color: #f92672;
  font-weight: bold;
}
.highlight .ow {
  color: #f92672;
  font-weight: bold;
}
.highlight .o {
  color: #f92672;
  font-weight: bold;
}
.highlight .mf {
  color: #ae81ff;
}
.highlight .mh {
  color: #ae81ff;
}
.highlight .il {
  color: #ae81ff;
}
.highlight .mi {
  color: #ae81ff;
}
.highlight .mo {
  color: #ae81ff;
}
.highlight .m, .highlight .mb, .highlight .mx {
  color: #ae81ff;
}
.highlight .se {
  color: #ae81ff;
}
.highlight .sb {
  color: #e6db74;
}
.highlight .sc {
  color: #e6db74;
}
.highlight .sd {
  color: #e6db74;
}
.highlight .s2 {
  color: #e6db74;
}
.highlight .sh {
  color: #e6db74;
}
.highlight .si {
  color: #e6db74;
}
.highlight .sx {
  color: #e6db74;
}
.highlight .sr {
  color: #e6db74;
}
.highlight .s1 {
  color: #e6db74;
}
.highlight .ss {
  color: #e6db74;
}
.highlight .s, .highlight .sa, .highlight .dl {
  color: #e6db74;
}
.highlight .na {
  color: #a6e22e;
}
.highlight .nc {
  color: #a6e22e;
  font-weight: bold;
}
.highlight .nd {
  color: #a6e22e;
  font-weight: bold;
}
.highlight .ne {
  color: #a6e22e;
  font-weight: bold;
}
.highlight .nf, .highlight .fm {
  color: #a6e22e;
  font-weight: bold;
}
.highlight .no {
  color: #66d9ef;
}
.highlight .bp {
  color: #f8f8f2;
}
.highlight .nb {
  color: #f8f8f2;
}
.highlight .ni {
  color: #f8f8f2;
}
.highlight .nn {
  color: #f8f8f2;
}
.highlight .vc {
  color: #f8f8f2;
}
.highlight .vg {
  color: #f8f8f2;
}
.highlight .vi {
  color: #f8f8f2;
}
.highlight .nv, .highlight .vm {
  color: #f8f8f2;
}
.highlight .w {
  color: #f8f8f2;
}
.highlight .nl {
  color: #f8f8f2;
  font-weight: bold;
}
.highlight .nt {
  color: #f92672;
}
.highlight {
  color: #f8f8f2;
  background-color: #49483e;
}
;
T;@≥;@≥;@≥o;;;;	I"/assets/icons/github.svg;
T{;{	;o;;I"?/home/carol/workspace/blog/content/assets/icons/github.svg;
T;@ª;@ª;@ªo;;;;	I"/assets/icons/linkedin.svg;
T{;{	;o;;I"A/home/carol/workspace/blog/content/assets/icons/linkedin.svg;
T;@¡;@¡;@¡o;;;;	I"/tags/Web development;
T{;{	;U;[0I" ;
T;@«;U;[0I"J<!DOCTYPE html><html lang="en"><head>
    <meta charset="utf-8">
    <title>A Developer's Notebook - </title>
    <link rel="stylesheet" href="https://unpkg.com/purecss@1.0.1/build/pure-min.css" integrity="sha384-oAOxQR6DkCoMliIh8yFnu25d7Eq/PHS21PClpwjOTeU2jRSq11vu66rf90/cZr47" crossorigin="anonymous">
    <link rel="stylesheet" href="../../assets/stylesheet.css">
    <link rel="stylesheet" href="../../assets/highlight.css">

    <!-- you don't need to keep this, but it's cool for stats! -->
    <meta name="generator" content="Nanoc 4.11.9">
  </head>
  <body>
    <div id="layout">
      <div class="header">
        <h1>
          <a href="../../">A Developer's Notebook</a>
        </h1>
      </div>


      <div class="content">
        <nav class="pure-g">
          <div class="pure-u-2-3 links">
            <a href="../../index.html">Home</a> ¬∑
            <a href="../../tags.html">Tags</a> ¬∑
            <a href="../../years.html">Years</a> ¬∑
            <a href="../../about.html">About</a>
          </div>

          <div class="pure-u-1-3">
            <div class="contact">
              <span>
                <a href="https://github.com/lbrito1" download="">
                  <img src="../../assets/icons/github.svg" alt="Github icon">
                  </a>
              </span>
              <span>
                <a href="https://www.linkedin.com/in/leonardo-mendes-brito/">
                <img src="../../assets/icons/linkedin.svg" alt="LinkedIn icon">
                </a>
              </span>
            </div>
          </div>
        </nav>
        
  <h1>Posts tagged "Web development"</h1>

  <div class="pure-g">
  
    <div class="post-index pure-u-1-1">
      <h2><a href="../../2019/01/halving-page-sizes-with-srcset.html">Halving page sizes with srcset</a></h2>

      <article class="text">
          <p><a href="https://www.webbloatscore.com/">Web bloat</a> is <a href="http://idlewords.com/talks/website_obesity.htm">discussed</a> a lot nowadays. Web pages with fairly straightforward content‚Ää‚Äî‚Ääsuch as a Google search results page‚Ää‚Äî‚Ääare substantially bigger today than they were a few decades ago, even though the content itself hasn‚Äôt changed that much. We, web developers, are at least partly to blame: laziness or just <a href="http://www.haneycodes.net/npm-left-pad-have-we-forgotten-how-to-program/">bad programming</a> are definitively part of the problem (of course, laziness might stem from a tight or impossible deadline, and bad code might come from inexperienced programmers‚Ää‚Äî‚Ääno judgment going on here).</p>


        <div class="post-tags">
          
        </div>

        <div class="pure-g post-footer">
          <div class="pure-u-1-2">
              <a class="read-more" href="../../2019/01/halving-page-sizes-with-srcset.html">Continue reading ‚Ä∫</a>
          </div>
          <div class="pure-u-1-2 post-meta">
            <aside>Posted Sep 03, 2018</aside>

          </div>
        </div>
      </article>
    </div>
  
</div>


        <div class="footer">
          2020 Leonardo Brito
        </div>
      </div>

    </div>
  


</body></html>;
T;@ o;;;;	I"/tags/Ruby;
T{;{	;U;[0I" ;
T;@—;U;[0I"N,<!DOCTYPE html><html lang="en"><head>
    <meta charset="utf-8">
    <title>A Developer's Notebook - </title>
    <link rel="stylesheet" href="https://unpkg.com/purecss@1.0.1/build/pure-min.css" integrity="sha384-oAOxQR6DkCoMliIh8yFnu25d7Eq/PHS21PClpwjOTeU2jRSq11vu66rf90/cZr47" crossorigin="anonymous">
    <link rel="stylesheet" href="../../assets/stylesheet.css">
    <link rel="stylesheet" href="../../assets/highlight.css">

    <!-- you don't need to keep this, but it's cool for stats! -->
    <meta name="generator" content="Nanoc 4.11.9">
  </head>
  <body>
    <div id="layout">
      <div class="header">
        <h1>
          <a href="../../">A Developer's Notebook</a>
        </h1>
      </div>


      <div class="content">
        <nav class="pure-g">
          <div class="pure-u-2-3 links">
            <a href="../../index.html">Home</a> ¬∑
            <a href="../../tags.html">Tags</a> ¬∑
            <a href="../../years.html">Years</a> ¬∑
            <a href="../../about.html">About</a>
          </div>

          <div class="pure-u-1-3">
            <div class="contact">
              <span>
                <a href="https://github.com/lbrito1" download="">
                  <img src="../../assets/icons/github.svg" alt="Github icon">
                  </a>
              </span>
              <span>
                <a href="https://www.linkedin.com/in/leonardo-mendes-brito/">
                <img src="../../assets/icons/linkedin.svg" alt="LinkedIn icon">
                </a>
              </span>
            </div>
          </div>
        </nav>
        
  <h1>Posts tagged "Ruby"</h1>

  <div class="pure-g">
  
    <div class="post-index pure-u-1-1">
      <h2><a href="../../2017/05/when-postgres-is-not-enough.html">When Postgres is not enough</a></h2>

      <article class="text">
          <p>What happens when your project‚Äôs RDBMS is just not enough to deal with unexpectedly huge amounts of data?</p>

<p>You could try to de-normalize some tables here and there to avoid unnecessary JOINs, create a few indexes, implement some kind of pagination or even pre-process the data into a more palatable format. However, if you did all that and it still was not enough, the ‚Äúnatural impulse‚Äù is to give up on the RDBMS altogether and just use Elasticsearch. Sounds like a no-brainer, right?</p>


        <div class="post-tags">
          
        </div>

        <div class="pure-g post-footer">
          <div class="pure-u-1-2">
              <a class="read-more" href="../../2017/05/when-postgres-is-not-enough.html">Continue reading ‚Ä∫</a>
          </div>
          <div class="pure-u-1-2 post-meta">
            <aside>Posted May 08, 2017</aside>

          </div>
        </div>
      </article>
    </div>
  
    <div class="post-index pure-u-1-1">
      <h2><a href="../../2017/09/improving-spec-speed-in-a-huge-old-Rails-app.html">Improving spec speed in a huge, old Rails app</a></h2>

      <article class="text">
          <p>We got a 6-year-old Rails app with ~370k LOC and a ~6k-test suite which took 24 minutes to complete. Not good! We took a few days off of the main project to see if we could make things better.</p>

<p>More often than not, test suites are the nasty underbelly of a Rails app. Size and age just aggravate the problem. Tests are seldom a high priority in any project, and speed might not be an issue at all in smaller apps where the whole test suite might take just a few seconds to complete. As the project grows and the CI takes increasingly longer to complete, spec speed suddenly becomes more of an issue.</p>

<p>‚ÄúSmall‚Äù and ‚Äúnew‚Äù are not exactly the case for a certain Rails project we‚Äôre working on here at Guava. We‚Äôre talking about a 6-year-old e-commerce portal with ~370k LOC, a couple million customers and a ~6k-test, 300-spec suite which took, on average, a whopping 24 minutes to complete in our CI. <em>Not good!</em> So we took a couple of days off the main project to see if we could make things better‚Ää‚Äî‚Ääor less worse.</p>


        <div class="post-tags">
          
        </div>

        <div class="pure-g post-footer">
          <div class="pure-u-1-2">
              <a class="read-more" href="../../2017/09/improving-spec-speed-in-a-huge-old-Rails-app.html">Continue reading ‚Ä∫</a>
          </div>
          <div class="pure-u-1-2 post-meta">
            <aside>Posted Sep 04, 2017</aside>

          </div>
        </div>
      </article>
    </div>
  
    <div class="post-index pure-u-1-1">
      <h2><a href="../../2015/09/ruby-dsl-metaprogramming-part-ii.html">Ruby DSL &amp; metaprogramming, part II</a></h2>

      <article class="text">
          <p>In the previous installment we built a simple text generator using some Ruby meta-programming tricks. It was still far from being our desired context-free grammar (CFG) generator, though, since it lacked many <a href="https://www.cs.rochester.edu/~nelson/courses/csc_173/grammars/cfg.html">CFG prerequisites</a>. Most flagrantly, we had no rule recursion and only one production (rule definition) per rule. Here‚Äôs the what a script that would use both features:</p>

<div class="highlight"><pre><code class="language-bash">dictionary
  noun <span class="s1">'dog'</span>, <span class="s1">'bus'</span>
  verb <span class="s1">'barked'</span>, <span class="s1">'parked'</span>
  preposition <span class="s1">'at'</span>

rule <span class="s1">'phrase'</span>
  opt <span class="s1">'The'</span>, noun, verb, preposition, <span class="s1">'a'</span>, noun
  opt <span class="s1">'Here goes some'</span>, phrase, <span class="s1">'recursion.'</span>
  opt <span class="s1">'Meet me'</span>, preposition, <span class="s1">'the station.'</span>

grammar phrase: 10</code></pre></div>

<p>The <code>dictionary</code> section is just as we left it. Let‚Äôs see what changed in the <code>rule</code> section.</p>


        <div class="post-tags">
          
        </div>

        <div class="pure-g post-footer">
          <div class="pure-u-1-2">
              <a class="read-more" href="../../2015/09/ruby-dsl-metaprogramming-part-ii.html">Continue reading ‚Ä∫</a>
          </div>
          <div class="pure-u-1-2 post-meta">
            <aside>Posted Sep 20, 2015</aside>

          </div>
        </div>
      </article>
    </div>
  
    <div class="post-index pure-u-1-1">
      <h2><a href="../../2015/09/ruby-dsl-metaprogramming-part-i.html">Ruby DSL &amp; metaprogramming, part I</a></h2>

      <article class="text">
          <p>I‚Äôve been working with Ruby for nearly a year now, which means I‚Äôm starting to feel the urge to tell people how awesome the language is. One of the most interesting aspects of Ruby to me is <a href="https://en.wikipedia.org/wiki/Metaprogramming">metaprogramming</a>, which it seems to have quite a vocation for.</p>

<p>Since college I have a fondness for automata and formal languages theory. One of the topics I particularly like is text generation (if you haven‚Äôt already, check out the excellent <a href="http://pdos.csail.mit.edu/scigen/">SCIgen</a> and the <a href="http://dev.null.org/dadaengine/">Dada engine</a>), so I thought that building a Context-free grammar (CFG)-like text generator in Ruby would be a nice little exercise and an opportunity to use some of the language‚Äôs coolest features. Also I‚Äôve implemented one of those using Java several years ago, and it was <em>a mess</em>, so I was curious as to how much of an improvement would Ruby offer.</p>

<p>Suppose the following script:</p>

<div class="highlight"><pre><code class="language-ruby"><span class="n">dictionary</span> <span class="s1">'noun'</span><span class="p">,</span> <span class="s1">'dog'</span><span class="p">,</span> <span class="s1">'bus'</span>
<span class="n">dictionary</span> <span class="s1">'verb'</span><span class="p">,</span> <span class="s1">'barked'</span><span class="p">,</span> <span class="s1">'parked'</span>
<span class="n">dictionary</span> <span class="s1">'preposition'</span><span class="p">,</span> <span class="s1">'at'</span>

<span class="n">rule</span> <span class="s1">'phrase'</span><span class="p">,</span> <span class="s1">'noun'</span><span class="p">,</span> <span class="s1">'verb'</span><span class="p">,</span> <span class="s1">'preposition'</span><span class="p">,</span> <span class="s1">'noun'</span>

<span class="n">codex</span> <span class="s1">'phrase'</span></code></pre></div>

<p>We‚Äôd like <code>dictionary</code> to store some words according to their classes, and <code>rule</code> to define a specific ordering of words. For now let‚Äôs not worry about <code>codex</code> (it‚Äôs just a collection of rules).</p>

<p>At this point the seasoned programmer is mentally sketching some kind of text parser. It‚Äôs an okay solution, but isn‚Äôt there something <em>nicer</em> we can do? Well, there is: <a href="https://en.wikipedia.org/wiki/Domain-specific_language">DSL</a>s! In fact, Ruby is quite an excellent tool to build a DSL, and many famed Ruby-powered applications such as Rspec (and <a href="http://www.leighhalliday.com/creating-ruby-dsl">many others</a>) define some kind of DSL.</p>


        <div class="post-tags">
          
        </div>

        <div class="pure-g post-footer">
          <div class="pure-u-1-2">
              <a class="read-more" href="../../2015/09/ruby-dsl-metaprogramming-part-i.html">Continue reading ‚Ä∫</a>
          </div>
          <div class="pure-u-1-2 post-meta">
            <aside>Posted Sep 11, 2015</aside>

          </div>
        </div>
      </article>
    </div>
  
    <div class="post-index pure-u-1-1">
      <h2><a href="../../2017/03/dont-obsess-over-code-dry.html">Don't obsess over code DRYness</a></h2>

      <article class="text">
          <p>Being clever is a good thing for a developer. Ingenuity allows us to write software that solves complex real-world problems. However, ‚Äúclever‚Äù <em>code</em> is not always a good thing. In many cases‚Ää‚Äî‚ÄäI dare say in <em>most</em> cases‚Ää‚Äî‚Ääit is a very bad thing. I consciously try to avoid writing code that might be seen as ‚Äúclever‚Äù. The smart thing to do is trying hard not to be smart (yes, very <a href="http://literarydevices.net/war-is-peace/">1984</a>).</p>

<p>Developers tend to see themselves (quite indulgently) as smart people. Not many people understand what we do, and society sees a developer as a kind of modern wizard, writing unreadable magic spells in a small metal box. In reality, though, we are not half as smart as we think: for instance, if you are a developer, you are certainly familiar with the frustration of trying to understand some cryptic piece of code that seemed perfectly reasonable and straightforward when you wrote it a couple of months earlier.</p>


        <div class="post-tags">
          
        </div>

        <div class="pure-g post-footer">
          <div class="pure-u-1-2">
              <a class="read-more" href="../../2017/03/dont-obsess-over-code-dry.html">Continue reading ‚Ä∫</a>
          </div>
          <div class="pure-u-1-2 post-meta">
            <aside>Posted Mar 20, 2017</aside>

          </div>
        </div>
      </article>
    </div>
  
</div>


        <div class="footer">
          2020 Leonardo Brito
        </div>
      </div>

    </div>
  


</body></html>;
T;@‘o;;;;	I"/tags/Software Engineering;
T{;{	;U;[0I" ;
T;@€;U;[0I"¶<!DOCTYPE html><html lang="en"><head>
    <meta charset="utf-8">
    <title>A Developer's Notebook - </title>
    <link rel="stylesheet" href="https://unpkg.com/purecss@1.0.1/build/pure-min.css" integrity="sha384-oAOxQR6DkCoMliIh8yFnu25d7Eq/PHS21PClpwjOTeU2jRSq11vu66rf90/cZr47" crossorigin="anonymous">
    <link rel="stylesheet" href="../../assets/stylesheet.css">
    <link rel="stylesheet" href="../../assets/highlight.css">

    <!-- you don't need to keep this, but it's cool for stats! -->
    <meta name="generator" content="Nanoc 4.11.9">
  </head>
  <body>
    <div id="layout">
      <div class="header">
        <h1>
          <a href="../../">A Developer's Notebook</a>
        </h1>
      </div>


      <div class="content">
        <nav class="pure-g">
          <div class="pure-u-2-3 links">
            <a href="../../index.html">Home</a> ¬∑
            <a href="../../tags.html">Tags</a> ¬∑
            <a href="../../years.html">Years</a> ¬∑
            <a href="../../about.html">About</a>
          </div>

          <div class="pure-u-1-3">
            <div class="contact">
              <span>
                <a href="https://github.com/lbrito1" download="">
                  <img src="../../assets/icons/github.svg" alt="Github icon">
                  </a>
              </span>
              <span>
                <a href="https://www.linkedin.com/in/leonardo-mendes-brito/">
                <img src="../../assets/icons/linkedin.svg" alt="LinkedIn icon">
                </a>
              </span>
            </div>
          </div>
        </nav>
        
  <h1>Posts tagged "Software Engineering"</h1>

  <div class="pure-g">
  
    <div class="post-index pure-u-1-1">
      <h2><a href="../../2017/05/when-postgres-is-not-enough.html">When Postgres is not enough</a></h2>

      <article class="text">
          <p>What happens when your project‚Äôs RDBMS is just not enough to deal with unexpectedly huge amounts of data?</p>

<p>You could try to de-normalize some tables here and there to avoid unnecessary JOINs, create a few indexes, implement some kind of pagination or even pre-process the data into a more palatable format. However, if you did all that and it still was not enough, the ‚Äúnatural impulse‚Äù is to give up on the RDBMS altogether and just use Elasticsearch. Sounds like a no-brainer, right?</p>


        <div class="post-tags">
          
        </div>

        <div class="pure-g post-footer">
          <div class="pure-u-1-2">
              <a class="read-more" href="../../2017/05/when-postgres-is-not-enough.html">Continue reading ‚Ä∫</a>
          </div>
          <div class="pure-u-1-2 post-meta">
            <aside>Posted May 08, 2017</aside>

          </div>
        </div>
      </article>
    </div>
  
    <div class="post-index pure-u-1-1">
      <h2><a href="../../2017/09/improving-spec-speed-in-a-huge-old-Rails-app.html">Improving spec speed in a huge, old Rails app</a></h2>

      <article class="text">
          <p>We got a 6-year-old Rails app with ~370k LOC and a ~6k-test suite which took 24 minutes to complete. Not good! We took a few days off of the main project to see if we could make things better.</p>

<p>More often than not, test suites are the nasty underbelly of a Rails app. Size and age just aggravate the problem. Tests are seldom a high priority in any project, and speed might not be an issue at all in smaller apps where the whole test suite might take just a few seconds to complete. As the project grows and the CI takes increasingly longer to complete, spec speed suddenly becomes more of an issue.</p>

<p>‚ÄúSmall‚Äù and ‚Äúnew‚Äù are not exactly the case for a certain Rails project we‚Äôre working on here at Guava. We‚Äôre talking about a 6-year-old e-commerce portal with ~370k LOC, a couple million customers and a ~6k-test, 300-spec suite which took, on average, a whopping 24 minutes to complete in our CI. <em>Not good!</em> So we took a couple of days off the main project to see if we could make things better‚Ää‚Äî‚Ääor less worse.</p>


        <div class="post-tags">
          
        </div>

        <div class="pure-g post-footer">
          <div class="pure-u-1-2">
              <a class="read-more" href="../../2017/09/improving-spec-speed-in-a-huge-old-Rails-app.html">Continue reading ‚Ä∫</a>
          </div>
          <div class="pure-u-1-2 post-meta">
            <aside>Posted Sep 04, 2017</aside>

          </div>
        </div>
      </article>
    </div>
  
    <div class="post-index pure-u-1-1">
      <h2><a href="../../2017/03/dont-obsess-over-code-dry.html">Don't obsess over code DRYness</a></h2>

      <article class="text">
          <p>Being clever is a good thing for a developer. Ingenuity allows us to write software that solves complex real-world problems. However, ‚Äúclever‚Äù <em>code</em> is not always a good thing. In many cases‚Ää‚Äî‚ÄäI dare say in <em>most</em> cases‚Ää‚Äî‚Ääit is a very bad thing. I consciously try to avoid writing code that might be seen as ‚Äúclever‚Äù. The smart thing to do is trying hard not to be smart (yes, very <a href="http://literarydevices.net/war-is-peace/">1984</a>).</p>

<p>Developers tend to see themselves (quite indulgently) as smart people. Not many people understand what we do, and society sees a developer as a kind of modern wizard, writing unreadable magic spells in a small metal box. In reality, though, we are not half as smart as we think: for instance, if you are a developer, you are certainly familiar with the frustration of trying to understand some cryptic piece of code that seemed perfectly reasonable and straightforward when you wrote it a couple of months earlier.</p>


        <div class="post-tags">
          
        </div>

        <div class="pure-g post-footer">
          <div class="pure-u-1-2">
              <a class="read-more" href="../../2017/03/dont-obsess-over-code-dry.html">Continue reading ‚Ä∫</a>
          </div>
          <div class="pure-u-1-2 post-meta">
            <aside>Posted Mar 20, 2017</aside>

          </div>
        </div>
      </article>
    </div>
  
    <div class="post-index pure-u-1-1">
      <h2><a href="../../2017/06/how-a-Unix-CLI-tool-made-me-care-about-software-feedback.html">How a Unix CLI tool made me care about software feedback</a></h2>

      <article class="text">
          <p>Providing feedback is one of the most important parts of any software. Unfortunately, more often than not we tend to downplay or ignore the very simple yet crucial task of letting the user know what is going on. In this article I‚Äôll use a short cautionary tale of how the lack of proper user feedback (and some laziness, I admit) almost cost me an entire HDD with years of personal data.</p>


        <div class="post-tags">
          
        </div>

        <div class="pure-g post-footer">
          <div class="pure-u-1-2">
              <a class="read-more" href="../../2017/06/how-a-Unix-CLI-tool-made-me-care-about-software-feedback.html">Continue reading ‚Ä∫</a>
          </div>
          <div class="pure-u-1-2 post-meta">
            <aside>Posted Jun 19, 2017</aside>

          </div>
        </div>
      </article>
    </div>
  
</div>


        <div class="footer">
          2020 Leonardo Brito
        </div>
      </div>

    </div>
  


</body></html>;
T;@ﬁo;;;;	I"/tags/Postgresql;
T{;{	;U;[0I" ;
T;@Â;U;[0I"P<!DOCTYPE html><html lang="en"><head>
    <meta charset="utf-8">
    <title>A Developer's Notebook - </title>
    <link rel="stylesheet" href="https://unpkg.com/purecss@1.0.1/build/pure-min.css" integrity="sha384-oAOxQR6DkCoMliIh8yFnu25d7Eq/PHS21PClpwjOTeU2jRSq11vu66rf90/cZr47" crossorigin="anonymous">
    <link rel="stylesheet" href="../../assets/stylesheet.css">
    <link rel="stylesheet" href="../../assets/highlight.css">

    <!-- you don't need to keep this, but it's cool for stats! -->
    <meta name="generator" content="Nanoc 4.11.9">
  </head>
  <body>
    <div id="layout">
      <div class="header">
        <h1>
          <a href="../../">A Developer's Notebook</a>
        </h1>
      </div>


      <div class="content">
        <nav class="pure-g">
          <div class="pure-u-2-3 links">
            <a href="../../index.html">Home</a> ¬∑
            <a href="../../tags.html">Tags</a> ¬∑
            <a href="../../years.html">Years</a> ¬∑
            <a href="../../about.html">About</a>
          </div>

          <div class="pure-u-1-3">
            <div class="contact">
              <span>
                <a href="https://github.com/lbrito1" download="">
                  <img src="../../assets/icons/github.svg" alt="Github icon">
                  </a>
              </span>
              <span>
                <a href="https://www.linkedin.com/in/leonardo-mendes-brito/">
                <img src="../../assets/icons/linkedin.svg" alt="LinkedIn icon">
                </a>
              </span>
            </div>
          </div>
        </nav>
        
  <h1>Posts tagged "Postgresql"</h1>

  <div class="pure-g">
  
    <div class="post-index pure-u-1-1">
      <h2><a href="../../2017/05/when-postgres-is-not-enough.html">When Postgres is not enough</a></h2>

      <article class="text">
          <p>What happens when your project‚Äôs RDBMS is just not enough to deal with unexpectedly huge amounts of data?</p>

<p>You could try to de-normalize some tables here and there to avoid unnecessary JOINs, create a few indexes, implement some kind of pagination or even pre-process the data into a more palatable format. However, if you did all that and it still was not enough, the ‚Äúnatural impulse‚Äù is to give up on the RDBMS altogether and just use Elasticsearch. Sounds like a no-brainer, right?</p>


        <div class="post-tags">
          
        </div>

        <div class="pure-g post-footer">
          <div class="pure-u-1-2">
              <a class="read-more" href="../../2017/05/when-postgres-is-not-enough.html">Continue reading ‚Ä∫</a>
          </div>
          <div class="pure-u-1-2 post-meta">
            <aside>Posted May 08, 2017</aside>

          </div>
        </div>
      </article>
    </div>
  
</div>


        <div class="footer">
          2020 Leonardo Brito
        </div>
      </div>

    </div>
  


</body></html>;
T;@Ëo;;;;	I"/tags/SQL;
T{;{	;U;[0I" ;
T;@Ô;U;[0I"I<!DOCTYPE html><html lang="en"><head>
    <meta charset="utf-8">
    <title>A Developer's Notebook - </title>
    <link rel="stylesheet" href="https://unpkg.com/purecss@1.0.1/build/pure-min.css" integrity="sha384-oAOxQR6DkCoMliIh8yFnu25d7Eq/PHS21PClpwjOTeU2jRSq11vu66rf90/cZr47" crossorigin="anonymous">
    <link rel="stylesheet" href="../../assets/stylesheet.css">
    <link rel="stylesheet" href="../../assets/highlight.css">

    <!-- you don't need to keep this, but it's cool for stats! -->
    <meta name="generator" content="Nanoc 4.11.9">
  </head>
  <body>
    <div id="layout">
      <div class="header">
        <h1>
          <a href="../../">A Developer's Notebook</a>
        </h1>
      </div>


      <div class="content">
        <nav class="pure-g">
          <div class="pure-u-2-3 links">
            <a href="../../index.html">Home</a> ¬∑
            <a href="../../tags.html">Tags</a> ¬∑
            <a href="../../years.html">Years</a> ¬∑
            <a href="../../about.html">About</a>
          </div>

          <div class="pure-u-1-3">
            <div class="contact">
              <span>
                <a href="https://github.com/lbrito1" download="">
                  <img src="../../assets/icons/github.svg" alt="Github icon">
                  </a>
              </span>
              <span>
                <a href="https://www.linkedin.com/in/leonardo-mendes-brito/">
                <img src="../../assets/icons/linkedin.svg" alt="LinkedIn icon">
                </a>
              </span>
            </div>
          </div>
        </nav>
        
  <h1>Posts tagged "SQL"</h1>

  <div class="pure-g">
  
    <div class="post-index pure-u-1-1">
      <h2><a href="../../2017/05/when-postgres-is-not-enough.html">When Postgres is not enough</a></h2>

      <article class="text">
          <p>What happens when your project‚Äôs RDBMS is just not enough to deal with unexpectedly huge amounts of data?</p>

<p>You could try to de-normalize some tables here and there to avoid unnecessary JOINs, create a few indexes, implement some kind of pagination or even pre-process the data into a more palatable format. However, if you did all that and it still was not enough, the ‚Äúnatural impulse‚Äù is to give up on the RDBMS altogether and just use Elasticsearch. Sounds like a no-brainer, right?</p>


        <div class="post-tags">
          
        </div>

        <div class="pure-g post-footer">
          <div class="pure-u-1-2">
              <a class="read-more" href="../../2017/05/when-postgres-is-not-enough.html">Continue reading ‚Ä∫</a>
          </div>
          <div class="pure-u-1-2 post-meta">
            <aside>Posted May 08, 2017</aside>

          </div>
        </div>
      </article>
    </div>
  
</div>


        <div class="footer">
          2020 Leonardo Brito
        </div>
      </div>

    </div>
  


</body></html>;
T;@Úo;;;;	I"/tags/Rails;
T{;{	;U;[0I" ;
T;@˘;U;[0I"©<!DOCTYPE html><html lang="en"><head>
    <meta charset="utf-8">
    <title>A Developer's Notebook - </title>
    <link rel="stylesheet" href="https://unpkg.com/purecss@1.0.1/build/pure-min.css" integrity="sha384-oAOxQR6DkCoMliIh8yFnu25d7Eq/PHS21PClpwjOTeU2jRSq11vu66rf90/cZr47" crossorigin="anonymous">
    <link rel="stylesheet" href="../../assets/stylesheet.css">
    <link rel="stylesheet" href="../../assets/highlight.css">

    <!-- you don't need to keep this, but it's cool for stats! -->
    <meta name="generator" content="Nanoc 4.11.9">
  </head>
  <body>
    <div id="layout">
      <div class="header">
        <h1>
          <a href="../../">A Developer's Notebook</a>
        </h1>
      </div>


      <div class="content">
        <nav class="pure-g">
          <div class="pure-u-2-3 links">
            <a href="../../index.html">Home</a> ¬∑
            <a href="../../tags.html">Tags</a> ¬∑
            <a href="../../years.html">Years</a> ¬∑
            <a href="../../about.html">About</a>
          </div>

          <div class="pure-u-1-3">
            <div class="contact">
              <span>
                <a href="https://github.com/lbrito1" download="">
                  <img src="../../assets/icons/github.svg" alt="Github icon">
                  </a>
              </span>
              <span>
                <a href="https://www.linkedin.com/in/leonardo-mendes-brito/">
                <img src="../../assets/icons/linkedin.svg" alt="LinkedIn icon">
                </a>
              </span>
            </div>
          </div>
        </nav>
        
  <h1>Posts tagged "Rails"</h1>

  <div class="pure-g">
  
    <div class="post-index pure-u-1-1">
      <h2><a href="../../2017/09/improving-spec-speed-in-a-huge-old-Rails-app.html">Improving spec speed in a huge, old Rails app</a></h2>

      <article class="text">
          <p>We got a 6-year-old Rails app with ~370k LOC and a ~6k-test suite which took 24 minutes to complete. Not good! We took a few days off of the main project to see if we could make things better.</p>

<p>More often than not, test suites are the nasty underbelly of a Rails app. Size and age just aggravate the problem. Tests are seldom a high priority in any project, and speed might not be an issue at all in smaller apps where the whole test suite might take just a few seconds to complete. As the project grows and the CI takes increasingly longer to complete, spec speed suddenly becomes more of an issue.</p>

<p>‚ÄúSmall‚Äù and ‚Äúnew‚Äù are not exactly the case for a certain Rails project we‚Äôre working on here at Guava. We‚Äôre talking about a 6-year-old e-commerce portal with ~370k LOC, a couple million customers and a ~6k-test, 300-spec suite which took, on average, a whopping 24 minutes to complete in our CI. <em>Not good!</em> So we took a couple of days off the main project to see if we could make things better‚Ää‚Äî‚Ääor less worse.</p>


        <div class="post-tags">
          
        </div>

        <div class="pure-g post-footer">
          <div class="pure-u-1-2">
              <a class="read-more" href="../../2017/09/improving-spec-speed-in-a-huge-old-Rails-app.html">Continue reading ‚Ä∫</a>
          </div>
          <div class="pure-u-1-2 post-meta">
            <aside>Posted Sep 04, 2017</aside>

          </div>
        </div>
      </article>
    </div>
  
</div>


        <div class="footer">
          2020 Leonardo Brito
        </div>
      </div>

    </div>
  


</body></html>;
T;@¸o;;;;	I"/tags/TDD;
T{;{	;U;[0I" ;
T;@;U;[0I"ß<!DOCTYPE html><html lang="en"><head>
    <meta charset="utf-8">
    <title>A Developer's Notebook - </title>
    <link rel="stylesheet" href="https://unpkg.com/purecss@1.0.1/build/pure-min.css" integrity="sha384-oAOxQR6DkCoMliIh8yFnu25d7Eq/PHS21PClpwjOTeU2jRSq11vu66rf90/cZr47" crossorigin="anonymous">
    <link rel="stylesheet" href="../../assets/stylesheet.css">
    <link rel="stylesheet" href="../../assets/highlight.css">

    <!-- you don't need to keep this, but it's cool for stats! -->
    <meta name="generator" content="Nanoc 4.11.9">
  </head>
  <body>
    <div id="layout">
      <div class="header">
        <h1>
          <a href="../../">A Developer's Notebook</a>
        </h1>
      </div>


      <div class="content">
        <nav class="pure-g">
          <div class="pure-u-2-3 links">
            <a href="../../index.html">Home</a> ¬∑
            <a href="../../tags.html">Tags</a> ¬∑
            <a href="../../years.html">Years</a> ¬∑
            <a href="../../about.html">About</a>
          </div>

          <div class="pure-u-1-3">
            <div class="contact">
              <span>
                <a href="https://github.com/lbrito1" download="">
                  <img src="../../assets/icons/github.svg" alt="Github icon">
                  </a>
              </span>
              <span>
                <a href="https://www.linkedin.com/in/leonardo-mendes-brito/">
                <img src="../../assets/icons/linkedin.svg" alt="LinkedIn icon">
                </a>
              </span>
            </div>
          </div>
        </nav>
        
  <h1>Posts tagged "TDD"</h1>

  <div class="pure-g">
  
    <div class="post-index pure-u-1-1">
      <h2><a href="../../2017/09/improving-spec-speed-in-a-huge-old-Rails-app.html">Improving spec speed in a huge, old Rails app</a></h2>

      <article class="text">
          <p>We got a 6-year-old Rails app with ~370k LOC and a ~6k-test suite which took 24 minutes to complete. Not good! We took a few days off of the main project to see if we could make things better.</p>

<p>More often than not, test suites are the nasty underbelly of a Rails app. Size and age just aggravate the problem. Tests are seldom a high priority in any project, and speed might not be an issue at all in smaller apps where the whole test suite might take just a few seconds to complete. As the project grows and the CI takes increasingly longer to complete, spec speed suddenly becomes more of an issue.</p>

<p>‚ÄúSmall‚Äù and ‚Äúnew‚Äù are not exactly the case for a certain Rails project we‚Äôre working on here at Guava. We‚Äôre talking about a 6-year-old e-commerce portal with ~370k LOC, a couple million customers and a ~6k-test, 300-spec suite which took, on average, a whopping 24 minutes to complete in our CI. <em>Not good!</em> So we took a couple of days off the main project to see if we could make things better‚Ää‚Äî‚Ääor less worse.</p>


        <div class="post-tags">
          
        </div>

        <div class="pure-g post-footer">
          <div class="pure-u-1-2">
              <a class="read-more" href="../../2017/09/improving-spec-speed-in-a-huge-old-Rails-app.html">Continue reading ‚Ä∫</a>
          </div>
          <div class="pure-u-1-2 post-meta">
            <aside>Posted Sep 04, 2017</aside>

          </div>
        </div>
      </article>
    </div>
  
</div>


        <div class="footer">
          2020 Leonardo Brito
        </div>
      </div>

    </div>
  


</body></html>;
T;@o;;;;	I"/tags/RSpec;
T{;{	;U;[0I" ;
T;@;U;[0I"©<!DOCTYPE html><html lang="en"><head>
    <meta charset="utf-8">
    <title>A Developer's Notebook - </title>
    <link rel="stylesheet" href="https://unpkg.com/purecss@1.0.1/build/pure-min.css" integrity="sha384-oAOxQR6DkCoMliIh8yFnu25d7Eq/PHS21PClpwjOTeU2jRSq11vu66rf90/cZr47" crossorigin="anonymous">
    <link rel="stylesheet" href="../../assets/stylesheet.css">
    <link rel="stylesheet" href="../../assets/highlight.css">

    <!-- you don't need to keep this, but it's cool for stats! -->
    <meta name="generator" content="Nanoc 4.11.9">
  </head>
  <body>
    <div id="layout">
      <div class="header">
        <h1>
          <a href="../../">A Developer's Notebook</a>
        </h1>
      </div>


      <div class="content">
        <nav class="pure-g">
          <div class="pure-u-2-3 links">
            <a href="../../index.html">Home</a> ¬∑
            <a href="../../tags.html">Tags</a> ¬∑
            <a href="../../years.html">Years</a> ¬∑
            <a href="../../about.html">About</a>
          </div>

          <div class="pure-u-1-3">
            <div class="contact">
              <span>
                <a href="https://github.com/lbrito1" download="">
                  <img src="../../assets/icons/github.svg" alt="Github icon">
                  </a>
              </span>
              <span>
                <a href="https://www.linkedin.com/in/leonardo-mendes-brito/">
                <img src="../../assets/icons/linkedin.svg" alt="LinkedIn icon">
                </a>
              </span>
            </div>
          </div>
        </nav>
        
  <h1>Posts tagged "RSpec"</h1>

  <div class="pure-g">
  
    <div class="post-index pure-u-1-1">
      <h2><a href="../../2017/09/improving-spec-speed-in-a-huge-old-Rails-app.html">Improving spec speed in a huge, old Rails app</a></h2>

      <article class="text">
          <p>We got a 6-year-old Rails app with ~370k LOC and a ~6k-test suite which took 24 minutes to complete. Not good! We took a few days off of the main project to see if we could make things better.</p>

<p>More often than not, test suites are the nasty underbelly of a Rails app. Size and age just aggravate the problem. Tests are seldom a high priority in any project, and speed might not be an issue at all in smaller apps where the whole test suite might take just a few seconds to complete. As the project grows and the CI takes increasingly longer to complete, spec speed suddenly becomes more of an issue.</p>

<p>‚ÄúSmall‚Äù and ‚Äúnew‚Äù are not exactly the case for a certain Rails project we‚Äôre working on here at Guava. We‚Äôre talking about a 6-year-old e-commerce portal with ~370k LOC, a couple million customers and a ~6k-test, 300-spec suite which took, on average, a whopping 24 minutes to complete in our CI. <em>Not good!</em> So we took a couple of days off the main project to see if we could make things better‚Ää‚Äî‚Ääor less worse.</p>


        <div class="post-tags">
          
        </div>

        <div class="pure-g post-footer">
          <div class="pure-u-1-2">
              <a class="read-more" href="../../2017/09/improving-spec-speed-in-a-huge-old-Rails-app.html">Continue reading ‚Ä∫</a>
          </div>
          <div class="pure-u-1-2 post-meta">
            <aside>Posted Sep 04, 2017</aside>

          </div>
        </div>
      </article>
    </div>
  
</div>


        <div class="footer">
          2020 Leonardo Brito
        </div>
      </div>

    </div>
  


</body></html>;
T;@o;;;;	I"/tags/DSL;
T{;{	;U;[0I" ;
T;@;U;[0I"Î<!DOCTYPE html><html lang="en"><head>
    <meta charset="utf-8">
    <title>A Developer's Notebook - </title>
    <link rel="stylesheet" href="https://unpkg.com/purecss@1.0.1/build/pure-min.css" integrity="sha384-oAOxQR6DkCoMliIh8yFnu25d7Eq/PHS21PClpwjOTeU2jRSq11vu66rf90/cZr47" crossorigin="anonymous">
    <link rel="stylesheet" href="../../assets/stylesheet.css">
    <link rel="stylesheet" href="../../assets/highlight.css">

    <!-- you don't need to keep this, but it's cool for stats! -->
    <meta name="generator" content="Nanoc 4.11.9">
  </head>
  <body>
    <div id="layout">
      <div class="header">
        <h1>
          <a href="../../">A Developer's Notebook</a>
        </h1>
      </div>


      <div class="content">
        <nav class="pure-g">
          <div class="pure-u-2-3 links">
            <a href="../../index.html">Home</a> ¬∑
            <a href="../../tags.html">Tags</a> ¬∑
            <a href="../../years.html">Years</a> ¬∑
            <a href="../../about.html">About</a>
          </div>

          <div class="pure-u-1-3">
            <div class="contact">
              <span>
                <a href="https://github.com/lbrito1" download="">
                  <img src="../../assets/icons/github.svg" alt="Github icon">
                  </a>
              </span>
              <span>
                <a href="https://www.linkedin.com/in/leonardo-mendes-brito/">
                <img src="../../assets/icons/linkedin.svg" alt="LinkedIn icon">
                </a>
              </span>
            </div>
          </div>
        </nav>
        
  <h1>Posts tagged "DSL"</h1>

  <div class="pure-g">
  
    <div class="post-index pure-u-1-1">
      <h2><a href="../../2015/09/ruby-dsl-metaprogramming-part-ii.html">Ruby DSL &amp; metaprogramming, part II</a></h2>

      <article class="text">
          <p>In the previous installment we built a simple text generator using some Ruby meta-programming tricks. It was still far from being our desired context-free grammar (CFG) generator, though, since it lacked many <a href="https://www.cs.rochester.edu/~nelson/courses/csc_173/grammars/cfg.html">CFG prerequisites</a>. Most flagrantly, we had no rule recursion and only one production (rule definition) per rule. Here‚Äôs the what a script that would use both features:</p>

<div class="highlight"><pre><code class="language-bash">dictionary
  noun <span class="s1">'dog'</span>, <span class="s1">'bus'</span>
  verb <span class="s1">'barked'</span>, <span class="s1">'parked'</span>
  preposition <span class="s1">'at'</span>

rule <span class="s1">'phrase'</span>
  opt <span class="s1">'The'</span>, noun, verb, preposition, <span class="s1">'a'</span>, noun
  opt <span class="s1">'Here goes some'</span>, phrase, <span class="s1">'recursion.'</span>
  opt <span class="s1">'Meet me'</span>, preposition, <span class="s1">'the station.'</span>

grammar phrase: 10</code></pre></div>

<p>The <code>dictionary</code> section is just as we left it. Let‚Äôs see what changed in the <code>rule</code> section.</p>


        <div class="post-tags">
          
        </div>

        <div class="pure-g post-footer">
          <div class="pure-u-1-2">
              <a class="read-more" href="../../2015/09/ruby-dsl-metaprogramming-part-ii.html">Continue reading ‚Ä∫</a>
          </div>
          <div class="pure-u-1-2 post-meta">
            <aside>Posted Sep 20, 2015</aside>

          </div>
        </div>
      </article>
    </div>
  
    <div class="post-index pure-u-1-1">
      <h2><a href="../../2015/09/ruby-dsl-metaprogramming-part-i.html">Ruby DSL &amp; metaprogramming, part I</a></h2>

      <article class="text">
          <p>I‚Äôve been working with Ruby for nearly a year now, which means I‚Äôm starting to feel the urge to tell people how awesome the language is. One of the most interesting aspects of Ruby to me is <a href="https://en.wikipedia.org/wiki/Metaprogramming">metaprogramming</a>, which it seems to have quite a vocation for.</p>

<p>Since college I have a fondness for automata and formal languages theory. One of the topics I particularly like is text generation (if you haven‚Äôt already, check out the excellent <a href="http://pdos.csail.mit.edu/scigen/">SCIgen</a> and the <a href="http://dev.null.org/dadaengine/">Dada engine</a>), so I thought that building a Context-free grammar (CFG)-like text generator in Ruby would be a nice little exercise and an opportunity to use some of the language‚Äôs coolest features. Also I‚Äôve implemented one of those using Java several years ago, and it was <em>a mess</em>, so I was curious as to how much of an improvement would Ruby offer.</p>

<p>Suppose the following script:</p>

<div class="highlight"><pre><code class="language-ruby"><span class="n">dictionary</span> <span class="s1">'noun'</span><span class="p">,</span> <span class="s1">'dog'</span><span class="p">,</span> <span class="s1">'bus'</span>
<span class="n">dictionary</span> <span class="s1">'verb'</span><span class="p">,</span> <span class="s1">'barked'</span><span class="p">,</span> <span class="s1">'parked'</span>
<span class="n">dictionary</span> <span class="s1">'preposition'</span><span class="p">,</span> <span class="s1">'at'</span>

<span class="n">rule</span> <span class="s1">'phrase'</span><span class="p">,</span> <span class="s1">'noun'</span><span class="p">,</span> <span class="s1">'verb'</span><span class="p">,</span> <span class="s1">'preposition'</span><span class="p">,</span> <span class="s1">'noun'</span>

<span class="n">codex</span> <span class="s1">'phrase'</span></code></pre></div>

<p>We‚Äôd like <code>dictionary</code> to store some words according to their classes, and <code>rule</code> to define a specific ordering of words. For now let‚Äôs not worry about <code>codex</code> (it‚Äôs just a collection of rules).</p>

<p>At this point the seasoned programmer is mentally sketching some kind of text parser. It‚Äôs an okay solution, but isn‚Äôt there something <em>nicer</em> we can do? Well, there is: <a href="https://en.wikipedia.org/wiki/Domain-specific_language">DSL</a>s! In fact, Ruby is quite an excellent tool to build a DSL, and many famed Ruby-powered applications such as Rspec (and <a href="http://www.leighhalliday.com/creating-ruby-dsl">many others</a>) define some kind of DSL.</p>


        <div class="post-tags">
          
        </div>

        <div class="pure-g post-footer">
          <div class="pure-u-1-2">
              <a class="read-more" href="../../2015/09/ruby-dsl-metaprogramming-part-i.html">Continue reading ‚Ä∫</a>
          </div>
          <div class="pure-u-1-2 post-meta">
            <aside>Posted Sep 11, 2015</aside>

          </div>
        </div>
      </article>
    </div>
  
</div>


        <div class="footer">
          2020 Leonardo Brito
        </div>
      </div>

    </div>
  


</body></html>;
T;@o;;;;	I"/tags/metaprogramming;
T{;{	;U;[0I" ;
T;@!;U;[0I"˜<!DOCTYPE html><html lang="en"><head>
    <meta charset="utf-8">
    <title>A Developer's Notebook - </title>
    <link rel="stylesheet" href="https://unpkg.com/purecss@1.0.1/build/pure-min.css" integrity="sha384-oAOxQR6DkCoMliIh8yFnu25d7Eq/PHS21PClpwjOTeU2jRSq11vu66rf90/cZr47" crossorigin="anonymous">
    <link rel="stylesheet" href="../../assets/stylesheet.css">
    <link rel="stylesheet" href="../../assets/highlight.css">

    <!-- you don't need to keep this, but it's cool for stats! -->
    <meta name="generator" content="Nanoc 4.11.9">
  </head>
  <body>
    <div id="layout">
      <div class="header">
        <h1>
          <a href="../../">A Developer's Notebook</a>
        </h1>
      </div>


      <div class="content">
        <nav class="pure-g">
          <div class="pure-u-2-3 links">
            <a href="../../index.html">Home</a> ¬∑
            <a href="../../tags.html">Tags</a> ¬∑
            <a href="../../years.html">Years</a> ¬∑
            <a href="../../about.html">About</a>
          </div>

          <div class="pure-u-1-3">
            <div class="contact">
              <span>
                <a href="https://github.com/lbrito1" download="">
                  <img src="../../assets/icons/github.svg" alt="Github icon">
                  </a>
              </span>
              <span>
                <a href="https://www.linkedin.com/in/leonardo-mendes-brito/">
                <img src="../../assets/icons/linkedin.svg" alt="LinkedIn icon">
                </a>
              </span>
            </div>
          </div>
        </nav>
        
  <h1>Posts tagged "metaprogramming"</h1>

  <div class="pure-g">
  
    <div class="post-index pure-u-1-1">
      <h2><a href="../../2015/09/ruby-dsl-metaprogramming-part-ii.html">Ruby DSL &amp; metaprogramming, part II</a></h2>

      <article class="text">
          <p>In the previous installment we built a simple text generator using some Ruby meta-programming tricks. It was still far from being our desired context-free grammar (CFG) generator, though, since it lacked many <a href="https://www.cs.rochester.edu/~nelson/courses/csc_173/grammars/cfg.html">CFG prerequisites</a>. Most flagrantly, we had no rule recursion and only one production (rule definition) per rule. Here‚Äôs the what a script that would use both features:</p>

<div class="highlight"><pre><code class="language-bash">dictionary
  noun <span class="s1">'dog'</span>, <span class="s1">'bus'</span>
  verb <span class="s1">'barked'</span>, <span class="s1">'parked'</span>
  preposition <span class="s1">'at'</span>

rule <span class="s1">'phrase'</span>
  opt <span class="s1">'The'</span>, noun, verb, preposition, <span class="s1">'a'</span>, noun
  opt <span class="s1">'Here goes some'</span>, phrase, <span class="s1">'recursion.'</span>
  opt <span class="s1">'Meet me'</span>, preposition, <span class="s1">'the station.'</span>

grammar phrase: 10</code></pre></div>

<p>The <code>dictionary</code> section is just as we left it. Let‚Äôs see what changed in the <code>rule</code> section.</p>


        <div class="post-tags">
          
        </div>

        <div class="pure-g post-footer">
          <div class="pure-u-1-2">
              <a class="read-more" href="../../2015/09/ruby-dsl-metaprogramming-part-ii.html">Continue reading ‚Ä∫</a>
          </div>
          <div class="pure-u-1-2 post-meta">
            <aside>Posted Sep 20, 2015</aside>

          </div>
        </div>
      </article>
    </div>
  
    <div class="post-index pure-u-1-1">
      <h2><a href="../../2015/09/ruby-dsl-metaprogramming-part-i.html">Ruby DSL &amp; metaprogramming, part I</a></h2>

      <article class="text">
          <p>I‚Äôve been working with Ruby for nearly a year now, which means I‚Äôm starting to feel the urge to tell people how awesome the language is. One of the most interesting aspects of Ruby to me is <a href="https://en.wikipedia.org/wiki/Metaprogramming">metaprogramming</a>, which it seems to have quite a vocation for.</p>

<p>Since college I have a fondness for automata and formal languages theory. One of the topics I particularly like is text generation (if you haven‚Äôt already, check out the excellent <a href="http://pdos.csail.mit.edu/scigen/">SCIgen</a> and the <a href="http://dev.null.org/dadaengine/">Dada engine</a>), so I thought that building a Context-free grammar (CFG)-like text generator in Ruby would be a nice little exercise and an opportunity to use some of the language‚Äôs coolest features. Also I‚Äôve implemented one of those using Java several years ago, and it was <em>a mess</em>, so I was curious as to how much of an improvement would Ruby offer.</p>

<p>Suppose the following script:</p>

<div class="highlight"><pre><code class="language-ruby"><span class="n">dictionary</span> <span class="s1">'noun'</span><span class="p">,</span> <span class="s1">'dog'</span><span class="p">,</span> <span class="s1">'bus'</span>
<span class="n">dictionary</span> <span class="s1">'verb'</span><span class="p">,</span> <span class="s1">'barked'</span><span class="p">,</span> <span class="s1">'parked'</span>
<span class="n">dictionary</span> <span class="s1">'preposition'</span><span class="p">,</span> <span class="s1">'at'</span>

<span class="n">rule</span> <span class="s1">'phrase'</span><span class="p">,</span> <span class="s1">'noun'</span><span class="p">,</span> <span class="s1">'verb'</span><span class="p">,</span> <span class="s1">'preposition'</span><span class="p">,</span> <span class="s1">'noun'</span>

<span class="n">codex</span> <span class="s1">'phrase'</span></code></pre></div>

<p>We‚Äôd like <code>dictionary</code> to store some words according to their classes, and <code>rule</code> to define a specific ordering of words. For now let‚Äôs not worry about <code>codex</code> (it‚Äôs just a collection of rules).</p>

<p>At this point the seasoned programmer is mentally sketching some kind of text parser. It‚Äôs an okay solution, but isn‚Äôt there something <em>nicer</em> we can do? Well, there is: <a href="https://en.wikipedia.org/wiki/Domain-specific_language">DSL</a>s! In fact, Ruby is quite an excellent tool to build a DSL, and many famed Ruby-powered applications such as Rspec (and <a href="http://www.leighhalliday.com/creating-ruby-dsl">many others</a>) define some kind of DSL.</p>


        <div class="post-tags">
          
        </div>

        <div class="pure-g post-footer">
          <div class="pure-u-1-2">
              <a class="read-more" href="../../2015/09/ruby-dsl-metaprogramming-part-i.html">Continue reading ‚Ä∫</a>
          </div>
          <div class="pure-u-1-2 post-meta">
            <aside>Posted Sep 11, 2015</aside>

          </div>
        </div>
      </article>
    </div>
  
</div>


        <div class="footer">
          2020 Leonardo Brito
        </div>
      </div>

    </div>
  


</body></html>;
T;@$o;;;;	I"/tags/dijkstra;
T{;{	;U;[0I" ;
T;@+;U;[0I"ﬁ<!DOCTYPE html><html lang="en"><head>
    <meta charset="utf-8">
    <title>A Developer's Notebook - </title>
    <link rel="stylesheet" href="https://unpkg.com/purecss@1.0.1/build/pure-min.css" integrity="sha384-oAOxQR6DkCoMliIh8yFnu25d7Eq/PHS21PClpwjOTeU2jRSq11vu66rf90/cZr47" crossorigin="anonymous">
    <link rel="stylesheet" href="../../assets/stylesheet.css">
    <link rel="stylesheet" href="../../assets/highlight.css">

    <!-- you don't need to keep this, but it's cool for stats! -->
    <meta name="generator" content="Nanoc 4.11.9">
  </head>
  <body>
    <div id="layout">
      <div class="header">
        <h1>
          <a href="../../">A Developer's Notebook</a>
        </h1>
      </div>


      <div class="content">
        <nav class="pure-g">
          <div class="pure-u-2-3 links">
            <a href="../../index.html">Home</a> ¬∑
            <a href="../../tags.html">Tags</a> ¬∑
            <a href="../../years.html">Years</a> ¬∑
            <a href="../../about.html">About</a>
          </div>

          <div class="pure-u-1-3">
            <div class="contact">
              <span>
                <a href="https://github.com/lbrito1" download="">
                  <img src="../../assets/icons/github.svg" alt="Github icon">
                  </a>
              </span>
              <span>
                <a href="https://www.linkedin.com/in/leonardo-mendes-brito/">
                <img src="../../assets/icons/linkedin.svg" alt="LinkedIn icon">
                </a>
              </span>
            </div>
          </div>
        </nav>
        
  <h1>Posts tagged "dijkstra"</h1>

  <div class="pure-g">
  
    <div class="post-index pure-u-1-1">
      <h2><a href="../../2014/04/shortest-path-part-i-dijkstras-algorithm.html">Shortest path, part I - Dijkstra's algorithm</a></h2>

      <article class="text">
          <p>Now that we have a way to represent <a href="%7B%%20link%20_posts/2014-03-23-graph.markdown%20%%7D">graphs</a>, we can discuss one of the most important problems in graph theory: the shortest path problem (SPP). More or less formally, we‚Äôll define SPP as:</p>

<p>Given a weighted&nbsp;graph G(V,E), find the sequence P = {v0, v1, v2, ‚Ä¶, v(n-1)}, vi ‚àà V, from vertex V0 to vertex V(n-1), such that&nbsp;the list of edges&nbsp;EP = {(v0,v1), (v1,v2), ‚Ä¶ (v(n-2), v(n-1))} exists and the summation of costs of all elements e&nbsp;‚àà EP is the smallest possible.</p>

<p>In other words, find the less expensive (ergo ‚Äúshortest‚Äù)&nbsp;path between two vertices.</p>

<p>The trivial solution is using <a href="%7B%%20link%20_posts/2014-03-31-trees-part-i.markdown%20%%7D">BFS</a>&nbsp;starting at vertex A and stopping when it reaches vertex B. However, BFS doesn‚Äôt look at the edge costs: it calculates the path with&nbsp;least edges, not the path with least total cost.</p>

<p>Although not necessarily the fastest, Dijkstra‚Äôs algorithm is probably the most popular way to solve the shortest path problem due to its simplicity and elegance. The algorithm relies heavily on <a href="%7B%%20link%20_posts/2014-03-21-heap-priority-queues.markdown%20%%7D">priority queues</a>, so make sure to take a look at that if you haven‚Äôt already.</p>

<p><strong>Pseudocode</strong></p>

<div class="highlight"><pre><code class="language-bash">dist[from] <span class="o">=</span> 0
<span class="k">for </span>v : G
      <span class="k">if </span>v <span class="o">!=</span> <span class="nb">source
            </span>dist[v] <span class="o">=</span> infinity
      prev[v] <span class="o">=</span> <span class="nt">-1</span>
      PQ.add<span class="o">(</span>v, dist[v]<span class="o">)</span>
<span class="k">while </span>PQ.hasNext<span class="o">()</span>
      u <span class="o">=</span> PQ.pop<span class="o">()</span>
      <span class="k">for </span>each neighbor v of u
            alt <span class="o">=</span> dist[u] + length<span class="o">(</span>u, v<span class="o">)</span>
            <span class="k">if </span>alt &lt; dist[v]
                  dist[v] <span class="o">=</span> alt
                  prev[v] <span class="o">=</span> u
                  PQ.decrease_key<span class="o">(</span>v,alt<span class="o">)</span>
<span class="k">return </span>prev</code></pre></div>


        <div class="post-tags">
          
        </div>

        <div class="pure-g post-footer">
          <div class="pure-u-1-2">
              <a class="read-more" href="../../2014/04/shortest-path-part-i-dijkstras-algorithm.html">Continue reading ‚Ä∫</a>
          </div>
          <div class="pure-u-1-2 post-meta">
            <aside>Posted Apr 06, 2014</aside>

          </div>
        </div>
      </article>
    </div>
  
</div>


        <div class="footer">
          2020 Leonardo Brito
        </div>
      </div>

    </div>
  


</body></html>;
T;@.o;;;;	I"/tags/graph;
T{;{	;U;[0I" ;
T;@5;U;[0I"Ã&<!DOCTYPE html><html lang="en"><head>
    <meta charset="utf-8">
    <title>A Developer's Notebook - </title>
    <link rel="stylesheet" href="https://unpkg.com/purecss@1.0.1/build/pure-min.css" integrity="sha384-oAOxQR6DkCoMliIh8yFnu25d7Eq/PHS21PClpwjOTeU2jRSq11vu66rf90/cZr47" crossorigin="anonymous">
    <link rel="stylesheet" href="../../assets/stylesheet.css">
    <link rel="stylesheet" href="../../assets/highlight.css">

    <!-- you don't need to keep this, but it's cool for stats! -->
    <meta name="generator" content="Nanoc 4.11.9">
  </head>
  <body>
    <div id="layout">
      <div class="header">
        <h1>
          <a href="../../">A Developer's Notebook</a>
        </h1>
      </div>


      <div class="content">
        <nav class="pure-g">
          <div class="pure-u-2-3 links">
            <a href="../../index.html">Home</a> ¬∑
            <a href="../../tags.html">Tags</a> ¬∑
            <a href="../../years.html">Years</a> ¬∑
            <a href="../../about.html">About</a>
          </div>

          <div class="pure-u-1-3">
            <div class="contact">
              <span>
                <a href="https://github.com/lbrito1" download="">
                  <img src="../../assets/icons/github.svg" alt="Github icon">
                  </a>
              </span>
              <span>
                <a href="https://www.linkedin.com/in/leonardo-mendes-brito/">
                <img src="../../assets/icons/linkedin.svg" alt="LinkedIn icon">
                </a>
              </span>
            </div>
          </div>
        </nav>
        
  <h1>Posts tagged "graph"</h1>

  <div class="pure-g">
  
    <div class="post-index pure-u-1-1">
      <h2><a href="../../2014/04/shortest-path-part-i-dijkstras-algorithm.html">Shortest path, part I - Dijkstra's algorithm</a></h2>

      <article class="text">
          <p>Now that we have a way to represent <a href="%7B%%20link%20_posts/2014-03-23-graph.markdown%20%%7D">graphs</a>, we can discuss one of the most important problems in graph theory: the shortest path problem (SPP). More or less formally, we‚Äôll define SPP as:</p>

<p>Given a weighted&nbsp;graph G(V,E), find the sequence P = {v0, v1, v2, ‚Ä¶, v(n-1)}, vi ‚àà V, from vertex V0 to vertex V(n-1), such that&nbsp;the list of edges&nbsp;EP = {(v0,v1), (v1,v2), ‚Ä¶ (v(n-2), v(n-1))} exists and the summation of costs of all elements e&nbsp;‚àà EP is the smallest possible.</p>

<p>In other words, find the less expensive (ergo ‚Äúshortest‚Äù)&nbsp;path between two vertices.</p>

<p>The trivial solution is using <a href="%7B%%20link%20_posts/2014-03-31-trees-part-i.markdown%20%%7D">BFS</a>&nbsp;starting at vertex A and stopping when it reaches vertex B. However, BFS doesn‚Äôt look at the edge costs: it calculates the path with&nbsp;least edges, not the path with least total cost.</p>

<p>Although not necessarily the fastest, Dijkstra‚Äôs algorithm is probably the most popular way to solve the shortest path problem due to its simplicity and elegance. The algorithm relies heavily on <a href="%7B%%20link%20_posts/2014-03-21-heap-priority-queues.markdown%20%%7D">priority queues</a>, so make sure to take a look at that if you haven‚Äôt already.</p>

<p><strong>Pseudocode</strong></p>

<div class="highlight"><pre><code class="language-bash">dist[from] <span class="o">=</span> 0
<span class="k">for </span>v : G
      <span class="k">if </span>v <span class="o">!=</span> <span class="nb">source
            </span>dist[v] <span class="o">=</span> infinity
      prev[v] <span class="o">=</span> <span class="nt">-1</span>
      PQ.add<span class="o">(</span>v, dist[v]<span class="o">)</span>
<span class="k">while </span>PQ.hasNext<span class="o">()</span>
      u <span class="o">=</span> PQ.pop<span class="o">()</span>
      <span class="k">for </span>each neighbor v of u
            alt <span class="o">=</span> dist[u] + length<span class="o">(</span>u, v<span class="o">)</span>
            <span class="k">if </span>alt &lt; dist[v]
                  dist[v] <span class="o">=</span> alt
                  prev[v] <span class="o">=</span> u
                  PQ.decrease_key<span class="o">(</span>v,alt<span class="o">)</span>
<span class="k">return </span>prev</code></pre></div>


        <div class="post-tags">
          
        </div>

        <div class="pure-g post-footer">
          <div class="pure-u-1-2">
              <a class="read-more" href="../../2014/04/shortest-path-part-i-dijkstras-algorithm.html">Continue reading ‚Ä∫</a>
          </div>
          <div class="pure-u-1-2 post-meta">
            <aside>Posted Apr 06, 2014</aside>

          </div>
        </div>
      </article>
    </div>
  
    <div class="post-index pure-u-1-1">
      <h2><a href="../../2014/03/graph.html">Graph</a></h2>

      <article class="text">
          <p>Mathematically, a graph is a set of vertices and edges, thus a graph <code>G</code> is usually written as <code>G(V,E)</code>. Besides linking vertices in the graph, edges can also carry a specific value which may be interpreted as cost, weight, distance etc.</p>

<p><a href="../../assets/images/codedeposit/2014/03/graph1.jpg"><img src="../../assets/images/codedeposit/2014/03/graph1.jpg" alt="graph viewed with BurgerGFX"></a></p>

<p>In computer science, we‚Äôre interested in the (abstract) data structure used to implement the graph mathematical concept. Let‚Äôs first discuss the basic elements in a graph - vertices and edges:</p>

<div class="highlight"><pre><code class="language-c"><span class="k">typedef</span> <span class="k">struct</span> <span class="n">vertex</span>
<span class="p">{</span>
 <span class="kt">unsigned</span> <span class="kt">long</span> <span class="n">id</span><span class="p">;</span>
 <span class="kt">int</span> <span class="n">status</span><span class="p">;</span>
 <span class="kt">double</span> <span class="n">x</span><span class="p">,</span><span class="n">y</span><span class="p">;</span>
 <span class="kt">void</span><span class="o">*</span> <span class="n">data</span><span class="p">;</span>
<span class="p">}</span> <span class="n">vertex</span><span class="p">;</span></code></pre></div>

<p>Vertices should be able to hold any kind of data, so we‚Äôll just throw in a void pointer for that. Other than that we have an id, status (marked or unmarked - more on that later) and 2D coordinates so we can draw the vertices somewhere.</p>

<div class="highlight"><pre><code class="language-c"><span class="k">typedef</span> <span class="k">struct</span> <span class="n">edge</span>
<span class="p">{</span>
 <span class="n">vertex</span><span class="o">*</span> <span class="n">from</span><span class="p">,</span> <span class="o">*</span><span class="n">to</span><span class="p">;</span>
 <span class="kt">int</span> <span class="n">cost</span><span class="p">;</span>
<span class="p">}</span> <span class="n">edge</span><span class="p">;</span></code></pre></div>

<p>Edges consist of just pointers to the vertices they link and an optional value used as weight, distance, cost etc. Strictly speaking we could use a void pointer for that value as well, as long as we also defined a comparison function. But let‚Äôs save the hassle and just use an integer instead - most algorithms will be fine with that.</p>


        <div class="post-tags">
          
        </div>

        <div class="pure-g post-footer">
          <div class="pure-u-1-2">
              <a class="read-more" href="../../2014/03/graph.html">Continue reading ‚Ä∫</a>
          </div>
          <div class="pure-u-1-2 post-meta">
            <aside>Posted Mar 23, 2014</aside>

          </div>
        </div>
      </article>
    </div>
  
    <div class="post-index pure-u-1-1">
      <h2><a href="../../2014/03/trees-part-i.html">Trees - Part I</a></h2>

      <article class="text">
          <p><a href="../../assets/images/codedeposit/2014/03/tree1.jpg"><img src="../../assets/images/codedeposit/2014/03/tree1.jpg" alt="tree"></a></p>

<p><a href="http://commons.wikimedia.org/wiki/File%3ABright_green_tree_-_Waikato.jpg"><img src="//upload.wikimedia.org/wikipedia/commons/thumb/f/f6/Bright_green_tree_-_Waikato.jpg/512px-Bright_green_tree_-_Waikato.jpg" alt="Bright green tree - Waikato"></a></p>

<p>We used trees to build the <a href="%7B%%20link%20_posts/2014-03-21-heap-priority-queues.markdown%20%%7D">heap data structure</a> before, but we didn‚Äôt bother with the theory behind trees, which are abstract and concrete data structures themselves. There‚Äôs a huge range of material to cover so I‚Äôll split this in several posts.</p>

<p>In this first post we‚Äôll cover the basic theory and implement a binary search tree (BST), which provides <code>O(h)</code> time search, insert and delete operations (<code>h</code> is the tree height). First, the basics:</p>

<p>Trees are graphs with a few extra properties and interpretations/conventions.
* Trees have height (longest branch length) and depth (distance to root).
* The uppermost level consists of at most one node (the tree root).
* All nodes may have children.
* There are no edges other than parent-child edges.</p>

<p>Trees are classified according to some&nbsp;of those properties above and some others we‚Äôll mention later. Most commonly, there is a constraint to the maximum number of children per node -e.g. the binary tree limits children to 2 per node.

        </p><div class="post-tags">
          
        </div>

        <div class="pure-g post-footer">
          <div class="pure-u-1-2">
              <a class="read-more" href="../../2014/03/trees-part-i.html">Continue reading ‚Ä∫</a>
          </div>
          <div class="pure-u-1-2 post-meta">
            <aside>Posted Mar 31, 2014</aside>

          </div>
        </div>
      </article>
    </div>
  
</div>


        <div class="footer">
          2020 Leonardo Brito
        </div>
      </div>

    </div>
  


</body></html>;
T;@8o;;;;	I"/tags/graph search;
T{;{	;U;[0I" ;
T;@?;U;[0I"‚<!DOCTYPE html><html lang="en"><head>
    <meta charset="utf-8">
    <title>A Developer's Notebook - </title>
    <link rel="stylesheet" href="https://unpkg.com/purecss@1.0.1/build/pure-min.css" integrity="sha384-oAOxQR6DkCoMliIh8yFnu25d7Eq/PHS21PClpwjOTeU2jRSq11vu66rf90/cZr47" crossorigin="anonymous">
    <link rel="stylesheet" href="../../assets/stylesheet.css">
    <link rel="stylesheet" href="../../assets/highlight.css">

    <!-- you don't need to keep this, but it's cool for stats! -->
    <meta name="generator" content="Nanoc 4.11.9">
  </head>
  <body>
    <div id="layout">
      <div class="header">
        <h1>
          <a href="../../">A Developer's Notebook</a>
        </h1>
      </div>


      <div class="content">
        <nav class="pure-g">
          <div class="pure-u-2-3 links">
            <a href="../../index.html">Home</a> ¬∑
            <a href="../../tags.html">Tags</a> ¬∑
            <a href="../../years.html">Years</a> ¬∑
            <a href="../../about.html">About</a>
          </div>

          <div class="pure-u-1-3">
            <div class="contact">
              <span>
                <a href="https://github.com/lbrito1" download="">
                  <img src="../../assets/icons/github.svg" alt="Github icon">
                  </a>
              </span>
              <span>
                <a href="https://www.linkedin.com/in/leonardo-mendes-brito/">
                <img src="../../assets/icons/linkedin.svg" alt="LinkedIn icon">
                </a>
              </span>
            </div>
          </div>
        </nav>
        
  <h1>Posts tagged "graph search"</h1>

  <div class="pure-g">
  
    <div class="post-index pure-u-1-1">
      <h2><a href="../../2014/04/shortest-path-part-i-dijkstras-algorithm.html">Shortest path, part I - Dijkstra's algorithm</a></h2>

      <article class="text">
          <p>Now that we have a way to represent <a href="%7B%%20link%20_posts/2014-03-23-graph.markdown%20%%7D">graphs</a>, we can discuss one of the most important problems in graph theory: the shortest path problem (SPP). More or less formally, we‚Äôll define SPP as:</p>

<p>Given a weighted&nbsp;graph G(V,E), find the sequence P = {v0, v1, v2, ‚Ä¶, v(n-1)}, vi ‚àà V, from vertex V0 to vertex V(n-1), such that&nbsp;the list of edges&nbsp;EP = {(v0,v1), (v1,v2), ‚Ä¶ (v(n-2), v(n-1))} exists and the summation of costs of all elements e&nbsp;‚àà EP is the smallest possible.</p>

<p>In other words, find the less expensive (ergo ‚Äúshortest‚Äù)&nbsp;path between two vertices.</p>

<p>The trivial solution is using <a href="%7B%%20link%20_posts/2014-03-31-trees-part-i.markdown%20%%7D">BFS</a>&nbsp;starting at vertex A and stopping when it reaches vertex B. However, BFS doesn‚Äôt look at the edge costs: it calculates the path with&nbsp;least edges, not the path with least total cost.</p>

<p>Although not necessarily the fastest, Dijkstra‚Äôs algorithm is probably the most popular way to solve the shortest path problem due to its simplicity and elegance. The algorithm relies heavily on <a href="%7B%%20link%20_posts/2014-03-21-heap-priority-queues.markdown%20%%7D">priority queues</a>, so make sure to take a look at that if you haven‚Äôt already.</p>

<p><strong>Pseudocode</strong></p>

<div class="highlight"><pre><code class="language-bash">dist[from] <span class="o">=</span> 0
<span class="k">for </span>v : G
      <span class="k">if </span>v <span class="o">!=</span> <span class="nb">source
            </span>dist[v] <span class="o">=</span> infinity
      prev[v] <span class="o">=</span> <span class="nt">-1</span>
      PQ.add<span class="o">(</span>v, dist[v]<span class="o">)</span>
<span class="k">while </span>PQ.hasNext<span class="o">()</span>
      u <span class="o">=</span> PQ.pop<span class="o">()</span>
      <span class="k">for </span>each neighbor v of u
            alt <span class="o">=</span> dist[u] + length<span class="o">(</span>u, v<span class="o">)</span>
            <span class="k">if </span>alt &lt; dist[v]
                  dist[v] <span class="o">=</span> alt
                  prev[v] <span class="o">=</span> u
                  PQ.decrease_key<span class="o">(</span>v,alt<span class="o">)</span>
<span class="k">return </span>prev</code></pre></div>


        <div class="post-tags">
          
        </div>

        <div class="pure-g post-footer">
          <div class="pure-u-1-2">
              <a class="read-more" href="../../2014/04/shortest-path-part-i-dijkstras-algorithm.html">Continue reading ‚Ä∫</a>
          </div>
          <div class="pure-u-1-2 post-meta">
            <aside>Posted Apr 06, 2014</aside>

          </div>
        </div>
      </article>
    </div>
  
</div>


        <div class="footer">
          2020 Leonardo Brito
        </div>
      </div>

    </div>
  


</body></html>;
T;@Bo;;;;	I"/tags/shortest path;
T{;{	;U;[0I" ;
T;@I;U;[0I"„<!DOCTYPE html><html lang="en"><head>
    <meta charset="utf-8">
    <title>A Developer's Notebook - </title>
    <link rel="stylesheet" href="https://unpkg.com/purecss@1.0.1/build/pure-min.css" integrity="sha384-oAOxQR6DkCoMliIh8yFnu25d7Eq/PHS21PClpwjOTeU2jRSq11vu66rf90/cZr47" crossorigin="anonymous">
    <link rel="stylesheet" href="../../assets/stylesheet.css">
    <link rel="stylesheet" href="../../assets/highlight.css">

    <!-- you don't need to keep this, but it's cool for stats! -->
    <meta name="generator" content="Nanoc 4.11.9">
  </head>
  <body>
    <div id="layout">
      <div class="header">
        <h1>
          <a href="../../">A Developer's Notebook</a>
        </h1>
      </div>


      <div class="content">
        <nav class="pure-g">
          <div class="pure-u-2-3 links">
            <a href="../../index.html">Home</a> ¬∑
            <a href="../../tags.html">Tags</a> ¬∑
            <a href="../../years.html">Years</a> ¬∑
            <a href="../../about.html">About</a>
          </div>

          <div class="pure-u-1-3">
            <div class="contact">
              <span>
                <a href="https://github.com/lbrito1" download="">
                  <img src="../../assets/icons/github.svg" alt="Github icon">
                  </a>
              </span>
              <span>
                <a href="https://www.linkedin.com/in/leonardo-mendes-brito/">
                <img src="../../assets/icons/linkedin.svg" alt="LinkedIn icon">
                </a>
              </span>
            </div>
          </div>
        </nav>
        
  <h1>Posts tagged "shortest path"</h1>

  <div class="pure-g">
  
    <div class="post-index pure-u-1-1">
      <h2><a href="../../2014/04/shortest-path-part-i-dijkstras-algorithm.html">Shortest path, part I - Dijkstra's algorithm</a></h2>

      <article class="text">
          <p>Now that we have a way to represent <a href="%7B%%20link%20_posts/2014-03-23-graph.markdown%20%%7D">graphs</a>, we can discuss one of the most important problems in graph theory: the shortest path problem (SPP). More or less formally, we‚Äôll define SPP as:</p>

<p>Given a weighted&nbsp;graph G(V,E), find the sequence P = {v0, v1, v2, ‚Ä¶, v(n-1)}, vi ‚àà V, from vertex V0 to vertex V(n-1), such that&nbsp;the list of edges&nbsp;EP = {(v0,v1), (v1,v2), ‚Ä¶ (v(n-2), v(n-1))} exists and the summation of costs of all elements e&nbsp;‚àà EP is the smallest possible.</p>

<p>In other words, find the less expensive (ergo ‚Äúshortest‚Äù)&nbsp;path between two vertices.</p>

<p>The trivial solution is using <a href="%7B%%20link%20_posts/2014-03-31-trees-part-i.markdown%20%%7D">BFS</a>&nbsp;starting at vertex A and stopping when it reaches vertex B. However, BFS doesn‚Äôt look at the edge costs: it calculates the path with&nbsp;least edges, not the path with least total cost.</p>

<p>Although not necessarily the fastest, Dijkstra‚Äôs algorithm is probably the most popular way to solve the shortest path problem due to its simplicity and elegance. The algorithm relies heavily on <a href="%7B%%20link%20_posts/2014-03-21-heap-priority-queues.markdown%20%%7D">priority queues</a>, so make sure to take a look at that if you haven‚Äôt already.</p>

<p><strong>Pseudocode</strong></p>

<div class="highlight"><pre><code class="language-bash">dist[from] <span class="o">=</span> 0
<span class="k">for </span>v : G
      <span class="k">if </span>v <span class="o">!=</span> <span class="nb">source
            </span>dist[v] <span class="o">=</span> infinity
      prev[v] <span class="o">=</span> <span class="nt">-1</span>
      PQ.add<span class="o">(</span>v, dist[v]<span class="o">)</span>
<span class="k">while </span>PQ.hasNext<span class="o">()</span>
      u <span class="o">=</span> PQ.pop<span class="o">()</span>
      <span class="k">for </span>each neighbor v of u
            alt <span class="o">=</span> dist[u] + length<span class="o">(</span>u, v<span class="o">)</span>
            <span class="k">if </span>alt &lt; dist[v]
                  dist[v] <span class="o">=</span> alt
                  prev[v] <span class="o">=</span> u
                  PQ.decrease_key<span class="o">(</span>v,alt<span class="o">)</span>
<span class="k">return </span>prev</code></pre></div>


        <div class="post-tags">
          
        </div>

        <div class="pure-g post-footer">
          <div class="pure-u-1-2">
              <a class="read-more" href="../../2014/04/shortest-path-part-i-dijkstras-algorithm.html">Continue reading ‚Ä∫</a>
          </div>
          <div class="pure-u-1-2 post-meta">
            <aside>Posted Apr 06, 2014</aside>

          </div>
        </div>
      </article>
    </div>
  
</div>


        <div class="footer">
          2020 Leonardo Brito
        </div>
      </div>

    </div>
  


</body></html>;
T;@Lo;;;;	I"/tags/sorting algorithm;
T{;{	;U;[0I" ;
T;@S;U;[0I"K<!DOCTYPE html><html lang="en"><head>
    <meta charset="utf-8">
    <title>A Developer's Notebook - </title>
    <link rel="stylesheet" href="https://unpkg.com/purecss@1.0.1/build/pure-min.css" integrity="sha384-oAOxQR6DkCoMliIh8yFnu25d7Eq/PHS21PClpwjOTeU2jRSq11vu66rf90/cZr47" crossorigin="anonymous">
    <link rel="stylesheet" href="../../assets/stylesheet.css">
    <link rel="stylesheet" href="../../assets/highlight.css">

    <!-- you don't need to keep this, but it's cool for stats! -->
    <meta name="generator" content="Nanoc 4.11.9">
  </head>
  <body>
    <div id="layout">
      <div class="header">
        <h1>
          <a href="../../">A Developer's Notebook</a>
        </h1>
      </div>


      <div class="content">
        <nav class="pure-g">
          <div class="pure-u-2-3 links">
            <a href="../../index.html">Home</a> ¬∑
            <a href="../../tags.html">Tags</a> ¬∑
            <a href="../../years.html">Years</a> ¬∑
            <a href="../../about.html">About</a>
          </div>

          <div class="pure-u-1-3">
            <div class="contact">
              <span>
                <a href="https://github.com/lbrito1" download="">
                  <img src="../../assets/icons/github.svg" alt="Github icon">
                  </a>
              </span>
              <span>
                <a href="https://www.linkedin.com/in/leonardo-mendes-brito/">
                <img src="../../assets/icons/linkedin.svg" alt="LinkedIn icon">
                </a>
              </span>
            </div>
          </div>
        </nav>
        
  <h1>Posts tagged "sorting algorithm"</h1>

  <div class="pure-g">
  
    <div class="post-index pure-u-1-1">
      <h2><a href="../../2014/02/mergesort.html">Mergesort</a></h2>

      <article class="text">
          <p>Mergesort is an important sorting algorithm when you don‚Äôt have efficient random memory access, since it doesn‚Äôt rely on that and has good time complexity - O(n logn) specifically.</p>

<p>As a typical divide-and-conquer algorithm, Mergesort has two steps: first it recursively splits the lists in two until each half is unitary, then it recursively mends back the lists until it reaches the original size.</p>

<p>But before we dive into the actual algorithm, we need to make some changes to the linked list algorithm we‚Äôll be using.</p>


        <div class="post-tags">
          
        </div>

        <div class="pure-g post-footer">
          <div class="pure-u-1-2">
              <a class="read-more" href="../../2014/02/mergesort.html">Continue reading ‚Ä∫</a>
          </div>
          <div class="pure-u-1-2 post-meta">
            <aside>Posted Feb 21, 2014</aside>

          </div>
        </div>
      </article>
    </div>
  
</div>


        <div class="footer">
          2020 Leonardo Brito
        </div>
      </div>

    </div>
  


</body></html>;
T;@Vo;;;;	I""/tags/abstract data structure;
T{;{	;U;[0I" ;
T;@];U;[0I"Õ<!DOCTYPE html><html lang="en"><head>
    <meta charset="utf-8">
    <title>A Developer's Notebook - </title>
    <link rel="stylesheet" href="https://unpkg.com/purecss@1.0.1/build/pure-min.css" integrity="sha384-oAOxQR6DkCoMliIh8yFnu25d7Eq/PHS21PClpwjOTeU2jRSq11vu66rf90/cZr47" crossorigin="anonymous">
    <link rel="stylesheet" href="../../assets/stylesheet.css">
    <link rel="stylesheet" href="../../assets/highlight.css">

    <!-- you don't need to keep this, but it's cool for stats! -->
    <meta name="generator" content="Nanoc 4.11.9">
  </head>
  <body>
    <div id="layout">
      <div class="header">
        <h1>
          <a href="../../">A Developer's Notebook</a>
        </h1>
      </div>


      <div class="content">
        <nav class="pure-g">
          <div class="pure-u-2-3 links">
            <a href="../../index.html">Home</a> ¬∑
            <a href="../../tags.html">Tags</a> ¬∑
            <a href="../../years.html">Years</a> ¬∑
            <a href="../../about.html">About</a>
          </div>

          <div class="pure-u-1-3">
            <div class="contact">
              <span>
                <a href="https://github.com/lbrito1" download="">
                  <img src="../../assets/icons/github.svg" alt="Github icon">
                  </a>
              </span>
              <span>
                <a href="https://www.linkedin.com/in/leonardo-mendes-brito/">
                <img src="../../assets/icons/linkedin.svg" alt="LinkedIn icon">
                </a>
              </span>
            </div>
          </div>
        </nav>
        
  <h1>Posts tagged "abstract data structure"</h1>

  <div class="pure-g">
  
    <div class="post-index pure-u-1-1">
      <h2><a href="../../2014/03/heap-priority-queues.html">Heap &amp; Priority Queues</a></h2>

      <article class="text">
          <p>Priority queues (PQs) are abstract data types that work just like regular stacks, but the popping order depends on each element‚Äôs priority instead of the sequence they were pushed onto the queue (FIFO or LIFO).</p>

<p>The na√Øve way of implementing a PQ consists of using an unsorted list or array and searching for the highest-priority element at each pop, which takes O(n) time. There are several more efficient implementations, of which the most usual is the heap.</p>

<p>Heaps are complete (i.e. all levels except possibly the last are filled) binary trees that work as PQs by maintaining the following property: children nodes always have a smaller priority than their parent, i.e. for any node A with children B and C, priority(B) &lt; priority(A) &amp;&amp; priority(C) &lt; priority(A). Note that there is no assumed relation between siblings or cousins.</p>

<p><a href="../../assets/images/codedeposit/2014/03/heap.jpg"><img src="../../assets/images/codedeposit/2014/03/heap.jpg" alt="max-heap and corresponding array."></a>
<em>max-heap and corresponding array.</em></p>

<p>Each element of a heap has two pieces of information: a key and a value, hence we call them key-value (KV) pair. The key identifies the specific element, and the value determines the element‚Äôs priority within the heap. Heaps can be min-heaps (low value = high priority) or max-heaps (high value = high priority).</p>


        <div class="post-tags">
          
        </div>

        <div class="pure-g post-footer">
          <div class="pure-u-1-2">
              <a class="read-more" href="../../2014/03/heap-priority-queues.html">Continue reading ‚Ä∫</a>
          </div>
          <div class="pure-u-1-2 post-meta">
            <aside>Posted Mar 21, 2014</aside>

          </div>
        </div>
      </article>
    </div>
  
    <div class="post-index pure-u-1-1">
      <h2><a href="../../2014/03/trees-part-i.html">Trees - Part I</a></h2>

      <article class="text">
          <p><a href="../../assets/images/codedeposit/2014/03/tree1.jpg"><img src="../../assets/images/codedeposit/2014/03/tree1.jpg" alt="tree"></a></p>

<p><a href="http://commons.wikimedia.org/wiki/File%3ABright_green_tree_-_Waikato.jpg"><img src="//upload.wikimedia.org/wikipedia/commons/thumb/f/f6/Bright_green_tree_-_Waikato.jpg/512px-Bright_green_tree_-_Waikato.jpg" alt="Bright green tree - Waikato"></a></p>

<p>We used trees to build the <a href="%7B%%20link%20_posts/2014-03-21-heap-priority-queues.markdown%20%%7D">heap data structure</a> before, but we didn‚Äôt bother with the theory behind trees, which are abstract and concrete data structures themselves. There‚Äôs a huge range of material to cover so I‚Äôll split this in several posts.</p>

<p>In this first post we‚Äôll cover the basic theory and implement a binary search tree (BST), which provides <code>O(h)</code> time search, insert and delete operations (<code>h</code> is the tree height). First, the basics:</p>

<p>Trees are graphs with a few extra properties and interpretations/conventions.
* Trees have height (longest branch length) and depth (distance to root).
* The uppermost level consists of at most one node (the tree root).
* All nodes may have children.
* There are no edges other than parent-child edges.</p>

<p>Trees are classified according to some&nbsp;of those properties above and some others we‚Äôll mention later. Most commonly, there is a constraint to the maximum number of children per node -e.g. the binary tree limits children to 2 per node.

        </p><div class="post-tags">
          
        </div>

        <div class="pure-g post-footer">
          <div class="pure-u-1-2">
              <a class="read-more" href="../../2014/03/trees-part-i.html">Continue reading ‚Ä∫</a>
          </div>
          <div class="pure-u-1-2 post-meta">
            <aside>Posted Mar 31, 2014</aside>

          </div>
        </div>
      </article>
    </div>
  
    <div class="post-index pure-u-1-1">
      <h2><a href="../../2014/03/stack.html">Stack</a></h2>

      <article class="text">
          <p>Using our implementation of a doubly linked (DL) list, we can very simply build the most basic LIFO (last in, first out) data structure: the stack.</p>

<p><a href="../../assets/images/codedeposit/2014/03/stack.png"><img src="../../assets/images/codedeposit/2014/03/stack.png?w=300" alt="stack"></a></p>

<p>Stacks have two basic operations: push and pop. Push pushes data onto the stack (i.e., end of the DL list) and pop pops data off the list‚Äôs tail, which is only possible because we can set the new tail as tail-&gt;prev, since we‚Äôre using a DL list, with previous pointers. Another useful function is peek, which returns a pointer to the stack‚Äôs top.</p>


        <div class="post-tags">
          
        </div>

        <div class="pure-g post-footer">
          <div class="pure-u-1-2">
              <a class="read-more" href="../../2014/03/stack.html">Continue reading ‚Ä∫</a>
          </div>
          <div class="pure-u-1-2 post-meta">
            <aside>Posted Mar 18, 2014</aside>

          </div>
        </div>
      </article>
    </div>
  
</div>


        <div class="footer">
          2020 Leonardo Brito
        </div>
      </div>

    </div>
  


</body></html>;
T;@`o;;;;	I"/tags/data structure;
T{;{	;U;[0I" ;
T;@g;U;[0I"D<!DOCTYPE html><html lang="en"><head>
    <meta charset="utf-8">
    <title>A Developer's Notebook - </title>
    <link rel="stylesheet" href="https://unpkg.com/purecss@1.0.1/build/pure-min.css" integrity="sha384-oAOxQR6DkCoMliIh8yFnu25d7Eq/PHS21PClpwjOTeU2jRSq11vu66rf90/cZr47" crossorigin="anonymous">
    <link rel="stylesheet" href="../../assets/stylesheet.css">
    <link rel="stylesheet" href="../../assets/highlight.css">

    <!-- you don't need to keep this, but it's cool for stats! -->
    <meta name="generator" content="Nanoc 4.11.9">
  </head>
  <body>
    <div id="layout">
      <div class="header">
        <h1>
          <a href="../../">A Developer's Notebook</a>
        </h1>
      </div>


      <div class="content">
        <nav class="pure-g">
          <div class="pure-u-2-3 links">
            <a href="../../index.html">Home</a> ¬∑
            <a href="../../tags.html">Tags</a> ¬∑
            <a href="../../years.html">Years</a> ¬∑
            <a href="../../about.html">About</a>
          </div>

          <div class="pure-u-1-3">
            <div class="contact">
              <span>
                <a href="https://github.com/lbrito1" download="">
                  <img src="../../assets/icons/github.svg" alt="Github icon">
                  </a>
              </span>
              <span>
                <a href="https://www.linkedin.com/in/leonardo-mendes-brito/">
                <img src="../../assets/icons/linkedin.svg" alt="LinkedIn icon">
                </a>
              </span>
            </div>
          </div>
        </nav>
        
  <h1>Posts tagged "data structure"</h1>

  <div class="pure-g">
  
    <div class="post-index pure-u-1-1">
      <h2><a href="../../2014/03/heap-priority-queues.html">Heap &amp; Priority Queues</a></h2>

      <article class="text">
          <p>Priority queues (PQs) are abstract data types that work just like regular stacks, but the popping order depends on each element‚Äôs priority instead of the sequence they were pushed onto the queue (FIFO or LIFO).</p>

<p>The na√Øve way of implementing a PQ consists of using an unsorted list or array and searching for the highest-priority element at each pop, which takes O(n) time. There are several more efficient implementations, of which the most usual is the heap.</p>

<p>Heaps are complete (i.e. all levels except possibly the last are filled) binary trees that work as PQs by maintaining the following property: children nodes always have a smaller priority than their parent, i.e. for any node A with children B and C, priority(B) &lt; priority(A) &amp;&amp; priority(C) &lt; priority(A). Note that there is no assumed relation between siblings or cousins.</p>

<p><a href="../../assets/images/codedeposit/2014/03/heap.jpg"><img src="../../assets/images/codedeposit/2014/03/heap.jpg" alt="max-heap and corresponding array."></a>
<em>max-heap and corresponding array.</em></p>

<p>Each element of a heap has two pieces of information: a key and a value, hence we call them key-value (KV) pair. The key identifies the specific element, and the value determines the element‚Äôs priority within the heap. Heaps can be min-heaps (low value = high priority) or max-heaps (high value = high priority).</p>


        <div class="post-tags">
          
        </div>

        <div class="pure-g post-footer">
          <div class="pure-u-1-2">
              <a class="read-more" href="../../2014/03/heap-priority-queues.html">Continue reading ‚Ä∫</a>
          </div>
          <div class="pure-u-1-2 post-meta">
            <aside>Posted Mar 21, 2014</aside>

          </div>
        </div>
      </article>
    </div>
  
    <div class="post-index pure-u-1-1">
      <h2><a href="../../2014/04/trees-part-ii-avl-tree.html">Trees, Part II: AVL Tree</a></h2>

      <article class="text">
          <p>Masters classes started a few weeks ago, taking their&nbsp;toll on my productivity here. Sorry about that!</p>

<p>So we (pardon the&nbsp;<a href="http://en.wikipedia.org/wiki/Nosism">nosism</a>, but I think it sounds less egocentric&nbsp;than writing ‚ÄúI‚Äù all the time) hinted at AVL trees back on our <a href="%7B%%20link%20_posts/2014-03-31-trees-part-i.markdown%20%%7D">Trees, Part I</a>&nbsp;post. Specifically, we learned that:</p>

<blockquote>a binary search tree (BST), provides O(h) time search, insert and delete operations (h is the tree height.</blockquote>

<p>Linear time (O(h)) doesn‚Äôt sound very good - if h is close to n, we‚Äôll have the same performance as a <a href="%7B%%20link%20_posts/2014-02-14-3.markdown%20%%7D%7D">linked list</a>.&nbsp;What if there were a way to&nbsp;bound the tree height&nbsp;to some sub-linear factor? As it turns out, there are several ways to do so, and the general idea of somehow&nbsp;keeping the tree height limited to a certain factor of the number of elements it holds is called height&nbsp;<strong>balancing</strong>. Ergo we‚Äôll want to look into (height)&nbsp;<strong>balanced/self-balancing binary search trees **(BBST)</strong>.&nbsp;**</p>

<div class="highlight"><pre><code class="language-bash">                      Burger


                          M
                        <span class="nb">.</span>   <span class="nb">.</span>
                      <span class="nb">.</span>       <span class="nb">.</span>
                    <span class="nb">.</span>           <span class="nb">.</span>
                  <span class="nb">.</span>               <span class="nb">.</span>
                E <span class="nb">.</span>                 P <span class="nb">.</span>
              <span class="nb">.</span>     <span class="nb">.</span>                   <span class="nb">.</span>
            <span class="nb">.</span>         <span class="nb">.</span>                   <span class="nb">.</span>
          <span class="nb">.</span>             <span class="nb">.</span>                   <span class="nb">.</span>
      D <span class="nb">.</span>                 I                   Y
                        <span class="nb">.</span>
                      <span class="nb">.</span>
                    <span class="nb">.</span>
                  <span class="nb">.</span>
                F</code></pre></div>

<p><em>AVL tree</em></p>

<p>Since binary search trees have at most two children, the best tree height (i.e. smallest) we can achieve is log2 n (n being the number of elements in the tree). There are <a href="http://en.wikipedia.org/wiki/Self-balancing_binary_search_tree">several </a>self-balancing BSTs developed over the years. It seems that up there in the US college professors&nbsp;tend to prefer the red-black tree when studying BBSTs, whilst over here AVL is preferred. In any case, AVL tree was&nbsp;the first BBST ever devised, so we‚Äôll adopt it as our BBST model.</p>

<p>AVL trees (named after its two Soviet inventors Adelson-Velsky and Landis) use a series of <strong>rotations</strong> to keep the tree balanced. To keep track of when a certain subtree rooted at some node needs to be rotated, we maintain (or calculate) a&nbsp;<strong>balance factor</strong> variable for each node, which is the difference between the node‚Äôs left and right children‚Äôs heights, i.e.:</p>

<p>balance_factor(n) = n.left_child.height - n.right_child.height</p>


        <div class="post-tags">
          
        </div>

        <div class="pure-g post-footer">
          <div class="pure-u-1-2">
              <a class="read-more" href="../../2014/04/trees-part-ii-avl-tree.html">Continue reading ‚Ä∫</a>
          </div>
          <div class="pure-u-1-2 post-meta">
            <aside>Posted Apr 21, 2014</aside>

          </div>
        </div>
      </article>
    </div>
  
    <div class="post-index pure-u-1-1">
      <h2><a href="../../2014/03/graph.html">Graph</a></h2>

      <article class="text">
          <p>Mathematically, a graph is a set of vertices and edges, thus a graph <code>G</code> is usually written as <code>G(V,E)</code>. Besides linking vertices in the graph, edges can also carry a specific value which may be interpreted as cost, weight, distance etc.</p>

<p><a href="../../assets/images/codedeposit/2014/03/graph1.jpg"><img src="../../assets/images/codedeposit/2014/03/graph1.jpg" alt="graph viewed with BurgerGFX"></a></p>

<p>In computer science, we‚Äôre interested in the (abstract) data structure used to implement the graph mathematical concept. Let‚Äôs first discuss the basic elements in a graph - vertices and edges:</p>

<div class="highlight"><pre><code class="language-c"><span class="k">typedef</span> <span class="k">struct</span> <span class="n">vertex</span>
<span class="p">{</span>
 <span class="kt">unsigned</span> <span class="kt">long</span> <span class="n">id</span><span class="p">;</span>
 <span class="kt">int</span> <span class="n">status</span><span class="p">;</span>
 <span class="kt">double</span> <span class="n">x</span><span class="p">,</span><span class="n">y</span><span class="p">;</span>
 <span class="kt">void</span><span class="o">*</span> <span class="n">data</span><span class="p">;</span>
<span class="p">}</span> <span class="n">vertex</span><span class="p">;</span></code></pre></div>

<p>Vertices should be able to hold any kind of data, so we‚Äôll just throw in a void pointer for that. Other than that we have an id, status (marked or unmarked - more on that later) and 2D coordinates so we can draw the vertices somewhere.</p>

<div class="highlight"><pre><code class="language-c"><span class="k">typedef</span> <span class="k">struct</span> <span class="n">edge</span>
<span class="p">{</span>
 <span class="n">vertex</span><span class="o">*</span> <span class="n">from</span><span class="p">,</span> <span class="o">*</span><span class="n">to</span><span class="p">;</span>
 <span class="kt">int</span> <span class="n">cost</span><span class="p">;</span>
<span class="p">}</span> <span class="n">edge</span><span class="p">;</span></code></pre></div>

<p>Edges consist of just pointers to the vertices they link and an optional value used as weight, distance, cost etc. Strictly speaking we could use a void pointer for that value as well, as long as we also defined a comparison function. But let‚Äôs save the hassle and just use an integer instead - most algorithms will be fine with that.</p>


        <div class="post-tags">
          
        </div>

        <div class="pure-g post-footer">
          <div class="pure-u-1-2">
              <a class="read-more" href="../../2014/03/graph.html">Continue reading ‚Ä∫</a>
          </div>
          <div class="pure-u-1-2 post-meta">
            <aside>Posted Mar 23, 2014</aside>

          </div>
        </div>
      </article>
    </div>
  
    <div class="post-index pure-u-1-1">
      <h2><a href="../../2014/03/doubly-linked-list.html">Doubly linked list</a></h2>

      <article class="text">
          <p>A doubly linked list is like our previously implemented Linked List, but instead of only having pointers to the next element, it also has pointers to the _previous _element:</p>

<p><a href="../../assets/images/codedeposit/2014/03/610px-doubly-linked-list-svg.png"><img src="../../assets/images/codedeposit/2014/03/610px-doubly-linked-list-svg.png" alt="610px-Doubly-linked-list.svg"></a></p>

<p>This property makes the doubly linked list very useful as a base for other data structures such as the stack: having a previous pointer means we can quickly (O(1)) remove objects from the list‚Äôs tail, which would be impossible with a linked list.</p>

<p>We won‚Äôt discuss implementation since it so similar to a linked list. If anything implementation is even simpler than a linked list because of the previous pointer access.</p>


        <div class="post-tags">
          
        </div>

        <div class="pure-g post-footer">
          <div class="pure-u-1-2">
              <a class="read-more" href="../../2014/03/doubly-linked-list.html">Continue reading ‚Ä∫</a>
          </div>
          <div class="pure-u-1-2 post-meta">
            <aside>Posted Mar 18, 2014</aside>

          </div>
        </div>
      </article>
    </div>
  
    <div class="post-index pure-u-1-1">
      <h2><a href="../../2014/02/linked-list.html">Linked List</a></h2>

      <article class="text">
          <p>Here‚Äôs a very simple implementation of the linked list data structure.</p>

<p>A pointer to the head element is enough to define a linked list. Each element consists of one pointer to the subsequent element in the list and one pointer to the element‚Äôs data:</p>

<p><a href="../../assets/images/codedeposit/2014/02/linkedlist.png"><img src="../../assets/images/codedeposit/2014/02/linkedlist.png?w=450" alt="linkedlist"></a></p>


        <div class="post-tags">
          
        </div>

        <div class="pure-g post-footer">
          <div class="pure-u-1-2">
              <a class="read-more" href="../../2014/02/linked-list.html">Continue reading ‚Ä∫</a>
          </div>
          <div class="pure-u-1-2 post-meta">
            <aside>Posted Feb 14, 2014</aside>

          </div>
        </div>
      </article>
    </div>
  
    <div class="post-index pure-u-1-1">
      <h2><a href="../../2014/02/vector.html">Vector</a></h2>

      <article class="text">
          <p>Very simple Vector implementation with add, add_all, get and delete operations using arrays of void pointers.</p>

<p>The downside to this as compared to simply using an array is that here we have an <em>array of pointers</em>, which means the data will most likely be scattered over the memory, not coalesced.</p>


        <div class="post-tags">
          
        </div>

        <div class="pure-g post-footer">
          <div class="pure-u-1-2">
              <a class="read-more" href="../../2014/02/vector.html">Continue reading ‚Ä∫</a>
          </div>
          <div class="pure-u-1-2 post-meta">
            <aside>Posted Feb 21, 2014</aside>

          </div>
        </div>
      </article>
    </div>
  
    <div class="post-index pure-u-1-1">
      <h2><a href="../../2014/03/trees-part-i.html">Trees - Part I</a></h2>

      <article class="text">
          <p><a href="../../assets/images/codedeposit/2014/03/tree1.jpg"><img src="../../assets/images/codedeposit/2014/03/tree1.jpg" alt="tree"></a></p>

<p><a href="http://commons.wikimedia.org/wiki/File%3ABright_green_tree_-_Waikato.jpg"><img src="//upload.wikimedia.org/wikipedia/commons/thumb/f/f6/Bright_green_tree_-_Waikato.jpg/512px-Bright_green_tree_-_Waikato.jpg" alt="Bright green tree - Waikato"></a></p>

<p>We used trees to build the <a href="%7B%%20link%20_posts/2014-03-21-heap-priority-queues.markdown%20%%7D">heap data structure</a> before, but we didn‚Äôt bother with the theory behind trees, which are abstract and concrete data structures themselves. There‚Äôs a huge range of material to cover so I‚Äôll split this in several posts.</p>

<p>In this first post we‚Äôll cover the basic theory and implement a binary search tree (BST), which provides <code>O(h)</code> time search, insert and delete operations (<code>h</code> is the tree height). First, the basics:</p>

<p>Trees are graphs with a few extra properties and interpretations/conventions.
* Trees have height (longest branch length) and depth (distance to root).
* The uppermost level consists of at most one node (the tree root).
* All nodes may have children.
* There are no edges other than parent-child edges.</p>

<p>Trees are classified according to some&nbsp;of those properties above and some others we‚Äôll mention later. Most commonly, there is a constraint to the maximum number of children per node -e.g. the binary tree limits children to 2 per node.

        </p><div class="post-tags">
          
        </div>

        <div class="pure-g post-footer">
          <div class="pure-u-1-2">
              <a class="read-more" href="../../2014/03/trees-part-i.html">Continue reading ‚Ä∫</a>
          </div>
          <div class="pure-u-1-2 post-meta">
            <aside>Posted Mar 31, 2014</aside>

          </div>
        </div>
      </article>
    </div>
  
    <div class="post-index pure-u-1-1">
      <h2><a href="../../2014/03/stack.html">Stack</a></h2>

      <article class="text">
          <p>Using our implementation of a doubly linked (DL) list, we can very simply build the most basic LIFO (last in, first out) data structure: the stack.</p>

<p><a href="../../assets/images/codedeposit/2014/03/stack.png"><img src="../../assets/images/codedeposit/2014/03/stack.png?w=300" alt="stack"></a></p>

<p>Stacks have two basic operations: push and pop. Push pushes data onto the stack (i.e., end of the DL list) and pop pops data off the list‚Äôs tail, which is only possible because we can set the new tail as tail-&gt;prev, since we‚Äôre using a DL list, with previous pointers. Another useful function is peek, which returns a pointer to the stack‚Äôs top.</p>


        <div class="post-tags">
          
        </div>

        <div class="pure-g post-footer">
          <div class="pure-u-1-2">
              <a class="read-more" href="../../2014/03/stack.html">Continue reading ‚Ä∫</a>
          </div>
          <div class="pure-u-1-2 post-meta">
            <aside>Posted Mar 18, 2014</aside>

          </div>
        </div>
      </article>
    </div>
  
</div>


        <div class="footer">
          2020 Leonardo Brito
        </div>
      </div>

    </div>
  


</body></html>;
T;@jo;;;;	I"/tags/heap;
T{;{	;U;[0I" ;
T;@q;U;[0I"≈<!DOCTYPE html><html lang="en"><head>
    <meta charset="utf-8">
    <title>A Developer's Notebook - </title>
    <link rel="stylesheet" href="https://unpkg.com/purecss@1.0.1/build/pure-min.css" integrity="sha384-oAOxQR6DkCoMliIh8yFnu25d7Eq/PHS21PClpwjOTeU2jRSq11vu66rf90/cZr47" crossorigin="anonymous">
    <link rel="stylesheet" href="../../assets/stylesheet.css">
    <link rel="stylesheet" href="../../assets/highlight.css">

    <!-- you don't need to keep this, but it's cool for stats! -->
    <meta name="generator" content="Nanoc 4.11.9">
  </head>
  <body>
    <div id="layout">
      <div class="header">
        <h1>
          <a href="../../">A Developer's Notebook</a>
        </h1>
      </div>


      <div class="content">
        <nav class="pure-g">
          <div class="pure-u-2-3 links">
            <a href="../../index.html">Home</a> ¬∑
            <a href="../../tags.html">Tags</a> ¬∑
            <a href="../../years.html">Years</a> ¬∑
            <a href="../../about.html">About</a>
          </div>

          <div class="pure-u-1-3">
            <div class="contact">
              <span>
                <a href="https://github.com/lbrito1" download="">
                  <img src="../../assets/icons/github.svg" alt="Github icon">
                  </a>
              </span>
              <span>
                <a href="https://www.linkedin.com/in/leonardo-mendes-brito/">
                <img src="../../assets/icons/linkedin.svg" alt="LinkedIn icon">
                </a>
              </span>
            </div>
          </div>
        </nav>
        
  <h1>Posts tagged "heap"</h1>

  <div class="pure-g">
  
    <div class="post-index pure-u-1-1">
      <h2><a href="../../2014/03/heap-priority-queues.html">Heap &amp; Priority Queues</a></h2>

      <article class="text">
          <p>Priority queues (PQs) are abstract data types that work just like regular stacks, but the popping order depends on each element‚Äôs priority instead of the sequence they were pushed onto the queue (FIFO or LIFO).</p>

<p>The na√Øve way of implementing a PQ consists of using an unsorted list or array and searching for the highest-priority element at each pop, which takes O(n) time. There are several more efficient implementations, of which the most usual is the heap.</p>

<p>Heaps are complete (i.e. all levels except possibly the last are filled) binary trees that work as PQs by maintaining the following property: children nodes always have a smaller priority than their parent, i.e. for any node A with children B and C, priority(B) &lt; priority(A) &amp;&amp; priority(C) &lt; priority(A). Note that there is no assumed relation between siblings or cousins.</p>

<p><a href="../../assets/images/codedeposit/2014/03/heap.jpg"><img src="../../assets/images/codedeposit/2014/03/heap.jpg" alt="max-heap and corresponding array."></a>
<em>max-heap and corresponding array.</em></p>

<p>Each element of a heap has two pieces of information: a key and a value, hence we call them key-value (KV) pair. The key identifies the specific element, and the value determines the element‚Äôs priority within the heap. Heaps can be min-heaps (low value = high priority) or max-heaps (high value = high priority).</p>


        <div class="post-tags">
          
        </div>

        <div class="pure-g post-footer">
          <div class="pure-u-1-2">
              <a class="read-more" href="../../2014/03/heap-priority-queues.html">Continue reading ‚Ä∫</a>
          </div>
          <div class="pure-u-1-2 post-meta">
            <aside>Posted Mar 21, 2014</aside>

          </div>
        </div>
      </article>
    </div>
  
</div>


        <div class="footer">
          2020 Leonardo Brito
        </div>
      </div>

    </div>
  


</body></html>;
T;@to;;;;	I"/tags/priority queue;
T{;{	;U;[0I" ;
T;@{;U;[0I"œ<!DOCTYPE html><html lang="en"><head>
    <meta charset="utf-8">
    <title>A Developer's Notebook - </title>
    <link rel="stylesheet" href="https://unpkg.com/purecss@1.0.1/build/pure-min.css" integrity="sha384-oAOxQR6DkCoMliIh8yFnu25d7Eq/PHS21PClpwjOTeU2jRSq11vu66rf90/cZr47" crossorigin="anonymous">
    <link rel="stylesheet" href="../../assets/stylesheet.css">
    <link rel="stylesheet" href="../../assets/highlight.css">

    <!-- you don't need to keep this, but it's cool for stats! -->
    <meta name="generator" content="Nanoc 4.11.9">
  </head>
  <body>
    <div id="layout">
      <div class="header">
        <h1>
          <a href="../../">A Developer's Notebook</a>
        </h1>
      </div>


      <div class="content">
        <nav class="pure-g">
          <div class="pure-u-2-3 links">
            <a href="../../index.html">Home</a> ¬∑
            <a href="../../tags.html">Tags</a> ¬∑
            <a href="../../years.html">Years</a> ¬∑
            <a href="../../about.html">About</a>
          </div>

          <div class="pure-u-1-3">
            <div class="contact">
              <span>
                <a href="https://github.com/lbrito1" download="">
                  <img src="../../assets/icons/github.svg" alt="Github icon">
                  </a>
              </span>
              <span>
                <a href="https://www.linkedin.com/in/leonardo-mendes-brito/">
                <img src="../../assets/icons/linkedin.svg" alt="LinkedIn icon">
                </a>
              </span>
            </div>
          </div>
        </nav>
        
  <h1>Posts tagged "priority queue"</h1>

  <div class="pure-g">
  
    <div class="post-index pure-u-1-1">
      <h2><a href="../../2014/03/heap-priority-queues.html">Heap &amp; Priority Queues</a></h2>

      <article class="text">
          <p>Priority queues (PQs) are abstract data types that work just like regular stacks, but the popping order depends on each element‚Äôs priority instead of the sequence they were pushed onto the queue (FIFO or LIFO).</p>

<p>The na√Øve way of implementing a PQ consists of using an unsorted list or array and searching for the highest-priority element at each pop, which takes O(n) time. There are several more efficient implementations, of which the most usual is the heap.</p>

<p>Heaps are complete (i.e. all levels except possibly the last are filled) binary trees that work as PQs by maintaining the following property: children nodes always have a smaller priority than their parent, i.e. for any node A with children B and C, priority(B) &lt; priority(A) &amp;&amp; priority(C) &lt; priority(A). Note that there is no assumed relation between siblings or cousins.</p>

<p><a href="../../assets/images/codedeposit/2014/03/heap.jpg"><img src="../../assets/images/codedeposit/2014/03/heap.jpg" alt="max-heap and corresponding array."></a>
<em>max-heap and corresponding array.</em></p>

<p>Each element of a heap has two pieces of information: a key and a value, hence we call them key-value (KV) pair. The key identifies the specific element, and the value determines the element‚Äôs priority within the heap. Heaps can be min-heaps (low value = high priority) or max-heaps (high value = high priority).</p>


        <div class="post-tags">
          
        </div>

        <div class="pure-g post-footer">
          <div class="pure-u-1-2">
              <a class="read-more" href="../../2014/03/heap-priority-queues.html">Continue reading ‚Ä∫</a>
          </div>
          <div class="pure-u-1-2 post-meta">
            <aside>Posted Mar 21, 2014</aside>

          </div>
        </div>
      </article>
    </div>
  
</div>


        <div class="footer">
          2020 Leonardo Brito
        </div>
      </div>

    </div>
  


</body></html>;
T;@~o;;;;	I"/tags/queue;
T{;{	;U;[0I" ;
T;@Ö;U;[0I"∆<!DOCTYPE html><html lang="en"><head>
    <meta charset="utf-8">
    <title>A Developer's Notebook - </title>
    <link rel="stylesheet" href="https://unpkg.com/purecss@1.0.1/build/pure-min.css" integrity="sha384-oAOxQR6DkCoMliIh8yFnu25d7Eq/PHS21PClpwjOTeU2jRSq11vu66rf90/cZr47" crossorigin="anonymous">
    <link rel="stylesheet" href="../../assets/stylesheet.css">
    <link rel="stylesheet" href="../../assets/highlight.css">

    <!-- you don't need to keep this, but it's cool for stats! -->
    <meta name="generator" content="Nanoc 4.11.9">
  </head>
  <body>
    <div id="layout">
      <div class="header">
        <h1>
          <a href="../../">A Developer's Notebook</a>
        </h1>
      </div>


      <div class="content">
        <nav class="pure-g">
          <div class="pure-u-2-3 links">
            <a href="../../index.html">Home</a> ¬∑
            <a href="../../tags.html">Tags</a> ¬∑
            <a href="../../years.html">Years</a> ¬∑
            <a href="../../about.html">About</a>
          </div>

          <div class="pure-u-1-3">
            <div class="contact">
              <span>
                <a href="https://github.com/lbrito1" download="">
                  <img src="../../assets/icons/github.svg" alt="Github icon">
                  </a>
              </span>
              <span>
                <a href="https://www.linkedin.com/in/leonardo-mendes-brito/">
                <img src="../../assets/icons/linkedin.svg" alt="LinkedIn icon">
                </a>
              </span>
            </div>
          </div>
        </nav>
        
  <h1>Posts tagged "queue"</h1>

  <div class="pure-g">
  
    <div class="post-index pure-u-1-1">
      <h2><a href="../../2014/03/heap-priority-queues.html">Heap &amp; Priority Queues</a></h2>

      <article class="text">
          <p>Priority queues (PQs) are abstract data types that work just like regular stacks, but the popping order depends on each element‚Äôs priority instead of the sequence they were pushed onto the queue (FIFO or LIFO).</p>

<p>The na√Øve way of implementing a PQ consists of using an unsorted list or array and searching for the highest-priority element at each pop, which takes O(n) time. There are several more efficient implementations, of which the most usual is the heap.</p>

<p>Heaps are complete (i.e. all levels except possibly the last are filled) binary trees that work as PQs by maintaining the following property: children nodes always have a smaller priority than their parent, i.e. for any node A with children B and C, priority(B) &lt; priority(A) &amp;&amp; priority(C) &lt; priority(A). Note that there is no assumed relation between siblings or cousins.</p>

<p><a href="../../assets/images/codedeposit/2014/03/heap.jpg"><img src="../../assets/images/codedeposit/2014/03/heap.jpg" alt="max-heap and corresponding array."></a>
<em>max-heap and corresponding array.</em></p>

<p>Each element of a heap has two pieces of information: a key and a value, hence we call them key-value (KV) pair. The key identifies the specific element, and the value determines the element‚Äôs priority within the heap. Heaps can be min-heaps (low value = high priority) or max-heaps (high value = high priority).</p>


        <div class="post-tags">
          
        </div>

        <div class="pure-g post-footer">
          <div class="pure-u-1-2">
              <a class="read-more" href="../../2014/03/heap-priority-queues.html">Continue reading ‚Ä∫</a>
          </div>
          <div class="pure-u-1-2 post-meta">
            <aside>Posted Mar 21, 2014</aside>

          </div>
        </div>
      </article>
    </div>
  
</div>


        <div class="footer">
          2020 Leonardo Brito
        </div>
      </div>

    </div>
  


</body></html>;
T;@ào;;;;	I"/tags/Remote work;
T{;{	;U;[0I" ;
T;@è;U;[0I"ô<!DOCTYPE html><html lang="en"><head>
    <meta charset="utf-8">
    <title>A Developer's Notebook - </title>
    <link rel="stylesheet" href="https://unpkg.com/purecss@1.0.1/build/pure-min.css" integrity="sha384-oAOxQR6DkCoMliIh8yFnu25d7Eq/PHS21PClpwjOTeU2jRSq11vu66rf90/cZr47" crossorigin="anonymous">
    <link rel="stylesheet" href="../../assets/stylesheet.css">
    <link rel="stylesheet" href="../../assets/highlight.css">

    <!-- you don't need to keep this, but it's cool for stats! -->
    <meta name="generator" content="Nanoc 4.11.9">
  </head>
  <body>
    <div id="layout">
      <div class="header">
        <h1>
          <a href="../../">A Developer's Notebook</a>
        </h1>
      </div>


      <div class="content">
        <nav class="pure-g">
          <div class="pure-u-2-3 links">
            <a href="../../index.html">Home</a> ¬∑
            <a href="../../tags.html">Tags</a> ¬∑
            <a href="../../years.html">Years</a> ¬∑
            <a href="../../about.html">About</a>
          </div>

          <div class="pure-u-1-3">
            <div class="contact">
              <span>
                <a href="https://github.com/lbrito1" download="">
                  <img src="../../assets/icons/github.svg" alt="Github icon">
                  </a>
              </span>
              <span>
                <a href="https://www.linkedin.com/in/leonardo-mendes-brito/">
                <img src="../../assets/icons/linkedin.svg" alt="LinkedIn icon">
                </a>
              </span>
            </div>
          </div>
        </nav>
        
  <h1>Posts tagged "Remote work"</h1>

  <div class="pure-g">
  
    <div class="post-index pure-u-1-1">
      <h2><a href="../../2018/06/working-remotely-in-a-non-remote-company.html">Working remotely in a non-remote company</a></h2>

      <article class="text">
          <p><img src="../../assets/images/goiabada/1*mgVZOuAHmp9Ipm2asL0IQQ.jpg" alt=""></p>

<p>We‚Äôre a small team here at Guava, and we‚Äôve always considered ourselves <em>remote friendly.</em> Most of us work remotely every now and then pushed by varied <em>force majeure</em> situations‚Äî be it the flu, the need to supervise renovation or construction work at home, flash floods near the office, receiving guests at home or any number of other situations. We‚Äôve also had a few of us working remotely for a few days or weeks while traveling to or back from a conference, or when visiting relatives that live out of town. In other words, remote working has always been a very temporary and circumstantial thing among us.</p>

<p>We have a nice office (with hammocks!), excellent work equipment, great desk space, comfortable chairs, plenty of snacks and comfort food and an infinite supply of coffee. We‚Äôre also easygoing and overall pleasant people (well, most of us are) to work with several hours a day, and some of us are even mildly funny.</p>


        <div class="post-tags">
          
        </div>

        <div class="pure-g post-footer">
          <div class="pure-u-1-2">
              <a class="read-more" href="../../2018/06/working-remotely-in-a-non-remote-company.html">Continue reading ‚Ä∫</a>
          </div>
          <div class="pure-u-1-2 post-meta">
            <aside>Posted Jun 12, 2018</aside>

          </div>
        </div>
      </article>
    </div>
  
</div>


        <div class="footer">
          2020 Leonardo Brito
        </div>
      </div>

    </div>
  


</body></html>;
T;@ío;;;;	I"/tags/hello world;
T{;{	;U;[0I" ;
T;@ô;U;[0I"k<!DOCTYPE html><html lang="en"><head>
    <meta charset="utf-8">
    <title>A Developer's Notebook - </title>
    <link rel="stylesheet" href="https://unpkg.com/purecss@1.0.1/build/pure-min.css" integrity="sha384-oAOxQR6DkCoMliIh8yFnu25d7Eq/PHS21PClpwjOTeU2jRSq11vu66rf90/cZr47" crossorigin="anonymous">
    <link rel="stylesheet" href="../../assets/stylesheet.css">
    <link rel="stylesheet" href="../../assets/highlight.css">

    <!-- you don't need to keep this, but it's cool for stats! -->
    <meta name="generator" content="Nanoc 4.11.9">
  </head>
  <body>
    <div id="layout">
      <div class="header">
        <h1>
          <a href="../../">A Developer's Notebook</a>
        </h1>
      </div>


      <div class="content">
        <nav class="pure-g">
          <div class="pure-u-2-3 links">
            <a href="../../index.html">Home</a> ¬∑
            <a href="../../tags.html">Tags</a> ¬∑
            <a href="../../years.html">Years</a> ¬∑
            <a href="../../about.html">About</a>
          </div>

          <div class="pure-u-1-3">
            <div class="contact">
              <span>
                <a href="https://github.com/lbrito1" download="">
                  <img src="../../assets/icons/github.svg" alt="Github icon">
                  </a>
              </span>
              <span>
                <a href="https://www.linkedin.com/in/leonardo-mendes-brito/">
                <img src="../../assets/icons/linkedin.svg" alt="LinkedIn icon">
                </a>
              </span>
            </div>
          </div>
        </nav>
        
  <h1>Posts tagged "hello world"</h1>

  <div class="pure-g">
  
    <div class="post-index pure-u-1-1">
      <h2><a href="../../2019/08/creating-more.html">My attempt at creating more</a></h2>

      <article class="text">
          <p>I began blogging in the now prehistoric late 2000s.</p>

<p>I‚Äôve done a few blogs about different subjects (computer science, algorithms, web development, short stories and political ramblings). I‚Äôve had blogs on Blogspot, Wordpress and, more recently, Medium.</p>

<p>Those platforms were (or are, I suppose) an easy way to spew your ideas over the Internet while also being nice and comfy for other people to actually read (this last point is important for the CSS-challenged such as yours truly). In other words, those services Got Shit Done‚Ñ¢.</p>


        <div class="post-tags">
          
        </div>

        <div class="pure-g post-footer">
          <div class="pure-u-1-2">
              <a class="read-more" href="../../2019/08/creating-more.html">Continue reading ‚Ä∫</a>
          </div>
          <div class="pure-u-1-2 post-meta">
            <aside>Posted Aug 29, 2019</aside>

          </div>
        </div>
      </article>
    </div>
  
</div>


        <div class="footer">
          2020 Leonardo Brito
        </div>
      </div>

    </div>
  


</body></html>;
T;@úo;;;;	I"/tags/Legacy code;
T{;{	;U;[0I" ;
T;@£;U;[0I"O<!DOCTYPE html><html lang="en"><head>
    <meta charset="utf-8">
    <title>A Developer's Notebook - </title>
    <link rel="stylesheet" href="https://unpkg.com/purecss@1.0.1/build/pure-min.css" integrity="sha384-oAOxQR6DkCoMliIh8yFnu25d7Eq/PHS21PClpwjOTeU2jRSq11vu66rf90/cZr47" crossorigin="anonymous">
    <link rel="stylesheet" href="../../assets/stylesheet.css">
    <link rel="stylesheet" href="../../assets/highlight.css">

    <!-- you don't need to keep this, but it's cool for stats! -->
    <meta name="generator" content="Nanoc 4.11.9">
  </head>
  <body>
    <div id="layout">
      <div class="header">
        <h1>
          <a href="../../">A Developer's Notebook</a>
        </h1>
      </div>


      <div class="content">
        <nav class="pure-g">
          <div class="pure-u-2-3 links">
            <a href="../../index.html">Home</a> ¬∑
            <a href="../../tags.html">Tags</a> ¬∑
            <a href="../../years.html">Years</a> ¬∑
            <a href="../../about.html">About</a>
          </div>

          <div class="pure-u-1-3">
            <div class="contact">
              <span>
                <a href="https://github.com/lbrito1" download="">
                  <img src="../../assets/icons/github.svg" alt="Github icon">
                  </a>
              </span>
              <span>
                <a href="https://www.linkedin.com/in/leonardo-mendes-brito/">
                <img src="../../assets/icons/linkedin.svg" alt="LinkedIn icon">
                </a>
              </span>
            </div>
          </div>
        </nav>
        
  <h1>Posts tagged "Legacy code"</h1>

  <div class="pure-g">
  
    <div class="post-index pure-u-1-1">
      <h2><a href="../../2018/03/the-5-stages-of-dealing-with-legacy-code.html">The 5 stages of dealing with legacy code</a></h2>

      <article class="text">
          <p>Yes, this article will use the <a href="https://en.wikipedia.org/wiki/K%C3%BCbler-Ross_model">5 stages of grief</a> as an analogy for something software development-related. There are at least a few thousand other articles with a similar motif (424,000 results for ‚Äúgrief stages software‚Äù according to <a href="https://www.google.es/search?q=grief+stages+software&amp;oq=grief+stages+software">Google</a>). But bear with me for the next 5 minutes and I promise you‚Äôll get something out of this‚Ää‚Äî‚Ääif nothing else, at least the smirk of those who read their past follies put on text by someone else.</p>

<p>I have been working on a rather big Rails project for the past year and half. The project is nearly 7 years old, and has an all-too-common successful-startup-bought-by-industry-giant background story. In a project with this kind of background, some things are bound to happen: many developers of many skill ranges have come and gone, many software fads (cough, Meteor, cough), and above all else <em>a lot</em> of legacy code that is, well, let‚Äôs put it nicely, <em>not so great</em>. None of this should be taken personally in any way‚Ää‚Äî‚Ääit is just natural for such things to occur in such projects.</p>


        <div class="post-tags">
          
        </div>

        <div class="pure-g post-footer">
          <div class="pure-u-1-2">
              <a class="read-more" href="../../2018/03/the-5-stages-of-dealing-with-legacy-code.html">Continue reading ‚Ä∫</a>
          </div>
          <div class="pure-u-1-2 post-meta">
            <aside>Posted Mar 05, 2018</aside>

          </div>
        </div>
      </article>
    </div>
  
</div>


        <div class="footer">
          2020 Leonardo Brito
        </div>
      </div>

    </div>
  


</body></html>;
T;@¶o;;;;	I"/tags/Devops;
T{;{	;U;[0I" ;
T;@≠;U;[0I"<!DOCTYPE html><html lang="en"><head>
    <meta charset="utf-8">
    <title>A Developer's Notebook - </title>
    <link rel="stylesheet" href="https://unpkg.com/purecss@1.0.1/build/pure-min.css" integrity="sha384-oAOxQR6DkCoMliIh8yFnu25d7Eq/PHS21PClpwjOTeU2jRSq11vu66rf90/cZr47" crossorigin="anonymous">
    <link rel="stylesheet" href="../../assets/stylesheet.css">
    <link rel="stylesheet" href="../../assets/highlight.css">

    <!-- you don't need to keep this, but it's cool for stats! -->
    <meta name="generator" content="Nanoc 4.11.9">
  </head>
  <body>
    <div id="layout">
      <div class="header">
        <h1>
          <a href="../../">A Developer's Notebook</a>
        </h1>
      </div>


      <div class="content">
        <nav class="pure-g">
          <div class="pure-u-2-3 links">
            <a href="../../index.html">Home</a> ¬∑
            <a href="../../tags.html">Tags</a> ¬∑
            <a href="../../years.html">Years</a> ¬∑
            <a href="../../about.html">About</a>
          </div>

          <div class="pure-u-1-3">
            <div class="contact">
              <span>
                <a href="https://github.com/lbrito1" download="">
                  <img src="../../assets/icons/github.svg" alt="Github icon">
                  </a>
              </span>
              <span>
                <a href="https://www.linkedin.com/in/leonardo-mendes-brito/">
                <img src="../../assets/icons/linkedin.svg" alt="LinkedIn icon">
                </a>
              </span>
            </div>
          </div>
        </nav>
        
  <h1>Posts tagged "Devops"</h1>

  <div class="pure-g">
  
    <div class="post-index pure-u-1-1">
      <h2><a href="../../2018/09/10-ways-not-to-do-a-big-deploy.html">10 ways not to do a big deploy</a></h2>

      <article class="text">
          <p>Ideally, deploys should be small, concise, easily revertible, fast and with a small or nil footprint on the database. However, no matter how awesome you are, sometimes that is just unattainable and you end up needing to deploy something that is just the opposite: big, messy, hard to revert, painfully slow and rubbing the DB the wrong way. If the deploy messes with a mission-critical part of your software, all the worse for you.</p>

<p>But there are actually many ways you can make those situations even worse. Here are a few bullet points you can follow to guarantee a nightmarish deploy complete with nasty side-effects that will haunt you and your coworkers for days to come.</p>


        <div class="post-tags">
          
        </div>

        <div class="pure-g post-footer">
          <div class="pure-u-1-2">
              <a class="read-more" href="../../2018/09/10-ways-not-to-do-a-big-deploy.html">Continue reading ‚Ä∫</a>
          </div>
          <div class="pure-u-1-2 post-meta">
            <aside>Posted Sep 03, 2018</aside>

          </div>
        </div>
      </article>
    </div>
  
</div>


        <div class="footer">
          2020 Leonardo Brito
        </div>
      </div>

    </div>
  


</body></html>;
T;@∞o;;;;	I"/tags/avl;
T{;{	;U;[0I" ;
T;@∑;U;[0I"ª<!DOCTYPE html><html lang="en"><head>
    <meta charset="utf-8">
    <title>A Developer's Notebook - </title>
    <link rel="stylesheet" href="https://unpkg.com/purecss@1.0.1/build/pure-min.css" integrity="sha384-oAOxQR6DkCoMliIh8yFnu25d7Eq/PHS21PClpwjOTeU2jRSq11vu66rf90/cZr47" crossorigin="anonymous">
    <link rel="stylesheet" href="../../assets/stylesheet.css">
    <link rel="stylesheet" href="../../assets/highlight.css">

    <!-- you don't need to keep this, but it's cool for stats! -->
    <meta name="generator" content="Nanoc 4.11.9">
  </head>
  <body>
    <div id="layout">
      <div class="header">
        <h1>
          <a href="../../">A Developer's Notebook</a>
        </h1>
      </div>


      <div class="content">
        <nav class="pure-g">
          <div class="pure-u-2-3 links">
            <a href="../../index.html">Home</a> ¬∑
            <a href="../../tags.html">Tags</a> ¬∑
            <a href="../../years.html">Years</a> ¬∑
            <a href="../../about.html">About</a>
          </div>

          <div class="pure-u-1-3">
            <div class="contact">
              <span>
                <a href="https://github.com/lbrito1" download="">
                  <img src="../../assets/icons/github.svg" alt="Github icon">
                  </a>
              </span>
              <span>
                <a href="https://www.linkedin.com/in/leonardo-mendes-brito/">
                <img src="../../assets/icons/linkedin.svg" alt="LinkedIn icon">
                </a>
              </span>
            </div>
          </div>
        </nav>
        
  <h1>Posts tagged "avl"</h1>

  <div class="pure-g">
  
    <div class="post-index pure-u-1-1">
      <h2><a href="../../2014/04/trees-part-ii-avl-tree.html">Trees, Part II: AVL Tree</a></h2>

      <article class="text">
          <p>Masters classes started a few weeks ago, taking their&nbsp;toll on my productivity here. Sorry about that!</p>

<p>So we (pardon the&nbsp;<a href="http://en.wikipedia.org/wiki/Nosism">nosism</a>, but I think it sounds less egocentric&nbsp;than writing ‚ÄúI‚Äù all the time) hinted at AVL trees back on our <a href="%7B%%20link%20_posts/2014-03-31-trees-part-i.markdown%20%%7D">Trees, Part I</a>&nbsp;post. Specifically, we learned that:</p>

<blockquote>a binary search tree (BST), provides O(h) time search, insert and delete operations (h is the tree height.</blockquote>

<p>Linear time (O(h)) doesn‚Äôt sound very good - if h is close to n, we‚Äôll have the same performance as a <a href="%7B%%20link%20_posts/2014-02-14-3.markdown%20%%7D%7D">linked list</a>.&nbsp;What if there were a way to&nbsp;bound the tree height&nbsp;to some sub-linear factor? As it turns out, there are several ways to do so, and the general idea of somehow&nbsp;keeping the tree height limited to a certain factor of the number of elements it holds is called height&nbsp;<strong>balancing</strong>. Ergo we‚Äôll want to look into (height)&nbsp;<strong>balanced/self-balancing binary search trees **(BBST)</strong>.&nbsp;**</p>

<div class="highlight"><pre><code class="language-bash">                      Burger


                          M
                        <span class="nb">.</span>   <span class="nb">.</span>
                      <span class="nb">.</span>       <span class="nb">.</span>
                    <span class="nb">.</span>           <span class="nb">.</span>
                  <span class="nb">.</span>               <span class="nb">.</span>
                E <span class="nb">.</span>                 P <span class="nb">.</span>
              <span class="nb">.</span>     <span class="nb">.</span>                   <span class="nb">.</span>
            <span class="nb">.</span>         <span class="nb">.</span>                   <span class="nb">.</span>
          <span class="nb">.</span>             <span class="nb">.</span>                   <span class="nb">.</span>
      D <span class="nb">.</span>                 I                   Y
                        <span class="nb">.</span>
                      <span class="nb">.</span>
                    <span class="nb">.</span>
                  <span class="nb">.</span>
                F</code></pre></div>

<p><em>AVL tree</em></p>

<p>Since binary search trees have at most two children, the best tree height (i.e. smallest) we can achieve is log2 n (n being the number of elements in the tree). There are <a href="http://en.wikipedia.org/wiki/Self-balancing_binary_search_tree">several </a>self-balancing BSTs developed over the years. It seems that up there in the US college professors&nbsp;tend to prefer the red-black tree when studying BBSTs, whilst over here AVL is preferred. In any case, AVL tree was&nbsp;the first BBST ever devised, so we‚Äôll adopt it as our BBST model.</p>

<p>AVL trees (named after its two Soviet inventors Adelson-Velsky and Landis) use a series of <strong>rotations</strong> to keep the tree balanced. To keep track of when a certain subtree rooted at some node needs to be rotated, we maintain (or calculate) a&nbsp;<strong>balance factor</strong> variable for each node, which is the difference between the node‚Äôs left and right children‚Äôs heights, i.e.:</p>

<p>balance_factor(n) = n.left_child.height - n.right_child.height</p>


        <div class="post-tags">
          
        </div>

        <div class="pure-g post-footer">
          <div class="pure-u-1-2">
              <a class="read-more" href="../../2014/04/trees-part-ii-avl-tree.html">Continue reading ‚Ä∫</a>
          </div>
          <div class="pure-u-1-2 post-meta">
            <aside>Posted Apr 21, 2014</aside>

          </div>
        </div>
      </article>
    </div>
  
</div>


        <div class="footer">
          2020 Leonardo Brito
        </div>
      </div>

    </div>
  


</body></html>;
T;@∫o;;;;	I"/tags/binary search tree;
T{;{	;U;[0I" ;
T;@¡;U;[0I" <!DOCTYPE html><html lang="en"><head>
    <meta charset="utf-8">
    <title>A Developer's Notebook - </title>
    <link rel="stylesheet" href="https://unpkg.com/purecss@1.0.1/build/pure-min.css" integrity="sha384-oAOxQR6DkCoMliIh8yFnu25d7Eq/PHS21PClpwjOTeU2jRSq11vu66rf90/cZr47" crossorigin="anonymous">
    <link rel="stylesheet" href="../../assets/stylesheet.css">
    <link rel="stylesheet" href="../../assets/highlight.css">

    <!-- you don't need to keep this, but it's cool for stats! -->
    <meta name="generator" content="Nanoc 4.11.9">
  </head>
  <body>
    <div id="layout">
      <div class="header">
        <h1>
          <a href="../../">A Developer's Notebook</a>
        </h1>
      </div>


      <div class="content">
        <nav class="pure-g">
          <div class="pure-u-2-3 links">
            <a href="../../index.html">Home</a> ¬∑
            <a href="../../tags.html">Tags</a> ¬∑
            <a href="../../years.html">Years</a> ¬∑
            <a href="../../about.html">About</a>
          </div>

          <div class="pure-u-1-3">
            <div class="contact">
              <span>
                <a href="https://github.com/lbrito1" download="">
                  <img src="../../assets/icons/github.svg" alt="Github icon">
                  </a>
              </span>
              <span>
                <a href="https://www.linkedin.com/in/leonardo-mendes-brito/">
                <img src="../../assets/icons/linkedin.svg" alt="LinkedIn icon">
                </a>
              </span>
            </div>
          </div>
        </nav>
        
  <h1>Posts tagged "binary search tree"</h1>

  <div class="pure-g">
  
    <div class="post-index pure-u-1-1">
      <h2><a href="../../2014/04/trees-part-ii-avl-tree.html">Trees, Part II: AVL Tree</a></h2>

      <article class="text">
          <p>Masters classes started a few weeks ago, taking their&nbsp;toll on my productivity here. Sorry about that!</p>

<p>So we (pardon the&nbsp;<a href="http://en.wikipedia.org/wiki/Nosism">nosism</a>, but I think it sounds less egocentric&nbsp;than writing ‚ÄúI‚Äù all the time) hinted at AVL trees back on our <a href="%7B%%20link%20_posts/2014-03-31-trees-part-i.markdown%20%%7D">Trees, Part I</a>&nbsp;post. Specifically, we learned that:</p>

<blockquote>a binary search tree (BST), provides O(h) time search, insert and delete operations (h is the tree height.</blockquote>

<p>Linear time (O(h)) doesn‚Äôt sound very good - if h is close to n, we‚Äôll have the same performance as a <a href="%7B%%20link%20_posts/2014-02-14-3.markdown%20%%7D%7D">linked list</a>.&nbsp;What if there were a way to&nbsp;bound the tree height&nbsp;to some sub-linear factor? As it turns out, there are several ways to do so, and the general idea of somehow&nbsp;keeping the tree height limited to a certain factor of the number of elements it holds is called height&nbsp;<strong>balancing</strong>. Ergo we‚Äôll want to look into (height)&nbsp;<strong>balanced/self-balancing binary search trees **(BBST)</strong>.&nbsp;**</p>

<div class="highlight"><pre><code class="language-bash">                      Burger


                          M
                        <span class="nb">.</span>   <span class="nb">.</span>
                      <span class="nb">.</span>       <span class="nb">.</span>
                    <span class="nb">.</span>           <span class="nb">.</span>
                  <span class="nb">.</span>               <span class="nb">.</span>
                E <span class="nb">.</span>                 P <span class="nb">.</span>
              <span class="nb">.</span>     <span class="nb">.</span>                   <span class="nb">.</span>
            <span class="nb">.</span>         <span class="nb">.</span>                   <span class="nb">.</span>
          <span class="nb">.</span>             <span class="nb">.</span>                   <span class="nb">.</span>
      D <span class="nb">.</span>                 I                   Y
                        <span class="nb">.</span>
                      <span class="nb">.</span>
                    <span class="nb">.</span>
                  <span class="nb">.</span>
                F</code></pre></div>

<p><em>AVL tree</em></p>

<p>Since binary search trees have at most two children, the best tree height (i.e. smallest) we can achieve is log2 n (n being the number of elements in the tree). There are <a href="http://en.wikipedia.org/wiki/Self-balancing_binary_search_tree">several </a>self-balancing BSTs developed over the years. It seems that up there in the US college professors&nbsp;tend to prefer the red-black tree when studying BBSTs, whilst over here AVL is preferred. In any case, AVL tree was&nbsp;the first BBST ever devised, so we‚Äôll adopt it as our BBST model.</p>

<p>AVL trees (named after its two Soviet inventors Adelson-Velsky and Landis) use a series of <strong>rotations</strong> to keep the tree balanced. To keep track of when a certain subtree rooted at some node needs to be rotated, we maintain (or calculate) a&nbsp;<strong>balance factor</strong> variable for each node, which is the difference between the node‚Äôs left and right children‚Äôs heights, i.e.:</p>

<p>balance_factor(n) = n.left_child.height - n.right_child.height</p>


        <div class="post-tags">
          
        </div>

        <div class="pure-g post-footer">
          <div class="pure-u-1-2">
              <a class="read-more" href="../../2014/04/trees-part-ii-avl-tree.html">Continue reading ‚Ä∫</a>
          </div>
          <div class="pure-u-1-2 post-meta">
            <aside>Posted Apr 21, 2014</aside>

          </div>
        </div>
      </article>
    </div>
  
</div>


        <div class="footer">
          2020 Leonardo Brito
        </div>
      </div>

    </div>
  


</body></html>;
T;@ƒo;;;;	I"/tags/bst;
T{;{	;U;[0I" ;
T;@À;U;[0I"Ù<!DOCTYPE html><html lang="en"><head>
    <meta charset="utf-8">
    <title>A Developer's Notebook - </title>
    <link rel="stylesheet" href="https://unpkg.com/purecss@1.0.1/build/pure-min.css" integrity="sha384-oAOxQR6DkCoMliIh8yFnu25d7Eq/PHS21PClpwjOTeU2jRSq11vu66rf90/cZr47" crossorigin="anonymous">
    <link rel="stylesheet" href="../../assets/stylesheet.css">
    <link rel="stylesheet" href="../../assets/highlight.css">

    <!-- you don't need to keep this, but it's cool for stats! -->
    <meta name="generator" content="Nanoc 4.11.9">
  </head>
  <body>
    <div id="layout">
      <div class="header">
        <h1>
          <a href="../../">A Developer's Notebook</a>
        </h1>
      </div>


      <div class="content">
        <nav class="pure-g">
          <div class="pure-u-2-3 links">
            <a href="../../index.html">Home</a> ¬∑
            <a href="../../tags.html">Tags</a> ¬∑
            <a href="../../years.html">Years</a> ¬∑
            <a href="../../about.html">About</a>
          </div>

          <div class="pure-u-1-3">
            <div class="contact">
              <span>
                <a href="https://github.com/lbrito1" download="">
                  <img src="../../assets/icons/github.svg" alt="Github icon">
                  </a>
              </span>
              <span>
                <a href="https://www.linkedin.com/in/leonardo-mendes-brito/">
                <img src="../../assets/icons/linkedin.svg" alt="LinkedIn icon">
                </a>
              </span>
            </div>
          </div>
        </nav>
        
  <h1>Posts tagged "bst"</h1>

  <div class="pure-g">
  
    <div class="post-index pure-u-1-1">
      <h2><a href="../../2014/04/trees-part-ii-avl-tree.html">Trees, Part II: AVL Tree</a></h2>

      <article class="text">
          <p>Masters classes started a few weeks ago, taking their&nbsp;toll on my productivity here. Sorry about that!</p>

<p>So we (pardon the&nbsp;<a href="http://en.wikipedia.org/wiki/Nosism">nosism</a>, but I think it sounds less egocentric&nbsp;than writing ‚ÄúI‚Äù all the time) hinted at AVL trees back on our <a href="%7B%%20link%20_posts/2014-03-31-trees-part-i.markdown%20%%7D">Trees, Part I</a>&nbsp;post. Specifically, we learned that:</p>

<blockquote>a binary search tree (BST), provides O(h) time search, insert and delete operations (h is the tree height.</blockquote>

<p>Linear time (O(h)) doesn‚Äôt sound very good - if h is close to n, we‚Äôll have the same performance as a <a href="%7B%%20link%20_posts/2014-02-14-3.markdown%20%%7D%7D">linked list</a>.&nbsp;What if there were a way to&nbsp;bound the tree height&nbsp;to some sub-linear factor? As it turns out, there are several ways to do so, and the general idea of somehow&nbsp;keeping the tree height limited to a certain factor of the number of elements it holds is called height&nbsp;<strong>balancing</strong>. Ergo we‚Äôll want to look into (height)&nbsp;<strong>balanced/self-balancing binary search trees **(BBST)</strong>.&nbsp;**</p>

<div class="highlight"><pre><code class="language-bash">                      Burger


                          M
                        <span class="nb">.</span>   <span class="nb">.</span>
                      <span class="nb">.</span>       <span class="nb">.</span>
                    <span class="nb">.</span>           <span class="nb">.</span>
                  <span class="nb">.</span>               <span class="nb">.</span>
                E <span class="nb">.</span>                 P <span class="nb">.</span>
              <span class="nb">.</span>     <span class="nb">.</span>                   <span class="nb">.</span>
            <span class="nb">.</span>         <span class="nb">.</span>                   <span class="nb">.</span>
          <span class="nb">.</span>             <span class="nb">.</span>                   <span class="nb">.</span>
      D <span class="nb">.</span>                 I                   Y
                        <span class="nb">.</span>
                      <span class="nb">.</span>
                    <span class="nb">.</span>
                  <span class="nb">.</span>
                F</code></pre></div>

<p><em>AVL tree</em></p>

<p>Since binary search trees have at most two children, the best tree height (i.e. smallest) we can achieve is log2 n (n being the number of elements in the tree). There are <a href="http://en.wikipedia.org/wiki/Self-balancing_binary_search_tree">several </a>self-balancing BSTs developed over the years. It seems that up there in the US college professors&nbsp;tend to prefer the red-black tree when studying BBSTs, whilst over here AVL is preferred. In any case, AVL tree was&nbsp;the first BBST ever devised, so we‚Äôll adopt it as our BBST model.</p>

<p>AVL trees (named after its two Soviet inventors Adelson-Velsky and Landis) use a series of <strong>rotations</strong> to keep the tree balanced. To keep track of when a certain subtree rooted at some node needs to be rotated, we maintain (or calculate) a&nbsp;<strong>balance factor</strong> variable for each node, which is the difference between the node‚Äôs left and right children‚Äôs heights, i.e.:</p>

<p>balance_factor(n) = n.left_child.height - n.right_child.height</p>


        <div class="post-tags">
          
        </div>

        <div class="pure-g post-footer">
          <div class="pure-u-1-2">
              <a class="read-more" href="../../2014/04/trees-part-ii-avl-tree.html">Continue reading ‚Ä∫</a>
          </div>
          <div class="pure-u-1-2 post-meta">
            <aside>Posted Apr 21, 2014</aside>

          </div>
        </div>
      </article>
    </div>
  
    <div class="post-index pure-u-1-1">
      <h2><a href="../../2014/03/trees-part-i.html">Trees - Part I</a></h2>

      <article class="text">
          <p><a href="../../assets/images/codedeposit/2014/03/tree1.jpg"><img src="../../assets/images/codedeposit/2014/03/tree1.jpg" alt="tree"></a></p>

<p><a href="http://commons.wikimedia.org/wiki/File%3ABright_green_tree_-_Waikato.jpg"><img src="//upload.wikimedia.org/wikipedia/commons/thumb/f/f6/Bright_green_tree_-_Waikato.jpg/512px-Bright_green_tree_-_Waikato.jpg" alt="Bright green tree - Waikato"></a></p>

<p>We used trees to build the <a href="%7B%%20link%20_posts/2014-03-21-heap-priority-queues.markdown%20%%7D">heap data structure</a> before, but we didn‚Äôt bother with the theory behind trees, which are abstract and concrete data structures themselves. There‚Äôs a huge range of material to cover so I‚Äôll split this in several posts.</p>

<p>In this first post we‚Äôll cover the basic theory and implement a binary search tree (BST), which provides <code>O(h)</code> time search, insert and delete operations (<code>h</code> is the tree height). First, the basics:</p>

<p>Trees are graphs with a few extra properties and interpretations/conventions.
* Trees have height (longest branch length) and depth (distance to root).
* The uppermost level consists of at most one node (the tree root).
* All nodes may have children.
* There are no edges other than parent-child edges.</p>

<p>Trees are classified according to some&nbsp;of those properties above and some others we‚Äôll mention later. Most commonly, there is a constraint to the maximum number of children per node -e.g. the binary tree limits children to 2 per node.

        </p><div class="post-tags">
          
        </div>

        <div class="pure-g post-footer">
          <div class="pure-u-1-2">
              <a class="read-more" href="../../2014/03/trees-part-i.html">Continue reading ‚Ä∫</a>
          </div>
          <div class="pure-u-1-2 post-meta">
            <aside>Posted Mar 31, 2014</aside>

          </div>
        </div>
      </article>
    </div>
  
</div>


        <div class="footer">
          2020 Leonardo Brito
        </div>
      </div>

    </div>
  


</body></html>;
T;@Œo;;;;	I"/tags/tree;
T{;{	;U;[0I" ;
T;@’;U;[0I"ı<!DOCTYPE html><html lang="en"><head>
    <meta charset="utf-8">
    <title>A Developer's Notebook - </title>
    <link rel="stylesheet" href="https://unpkg.com/purecss@1.0.1/build/pure-min.css" integrity="sha384-oAOxQR6DkCoMliIh8yFnu25d7Eq/PHS21PClpwjOTeU2jRSq11vu66rf90/cZr47" crossorigin="anonymous">
    <link rel="stylesheet" href="../../assets/stylesheet.css">
    <link rel="stylesheet" href="../../assets/highlight.css">

    <!-- you don't need to keep this, but it's cool for stats! -->
    <meta name="generator" content="Nanoc 4.11.9">
  </head>
  <body>
    <div id="layout">
      <div class="header">
        <h1>
          <a href="../../">A Developer's Notebook</a>
        </h1>
      </div>


      <div class="content">
        <nav class="pure-g">
          <div class="pure-u-2-3 links">
            <a href="../../index.html">Home</a> ¬∑
            <a href="../../tags.html">Tags</a> ¬∑
            <a href="../../years.html">Years</a> ¬∑
            <a href="../../about.html">About</a>
          </div>

          <div class="pure-u-1-3">
            <div class="contact">
              <span>
                <a href="https://github.com/lbrito1" download="">
                  <img src="../../assets/icons/github.svg" alt="Github icon">
                  </a>
              </span>
              <span>
                <a href="https://www.linkedin.com/in/leonardo-mendes-brito/">
                <img src="../../assets/icons/linkedin.svg" alt="LinkedIn icon">
                </a>
              </span>
            </div>
          </div>
        </nav>
        
  <h1>Posts tagged "tree"</h1>

  <div class="pure-g">
  
    <div class="post-index pure-u-1-1">
      <h2><a href="../../2014/04/trees-part-ii-avl-tree.html">Trees, Part II: AVL Tree</a></h2>

      <article class="text">
          <p>Masters classes started a few weeks ago, taking their&nbsp;toll on my productivity here. Sorry about that!</p>

<p>So we (pardon the&nbsp;<a href="http://en.wikipedia.org/wiki/Nosism">nosism</a>, but I think it sounds less egocentric&nbsp;than writing ‚ÄúI‚Äù all the time) hinted at AVL trees back on our <a href="%7B%%20link%20_posts/2014-03-31-trees-part-i.markdown%20%%7D">Trees, Part I</a>&nbsp;post. Specifically, we learned that:</p>

<blockquote>a binary search tree (BST), provides O(h) time search, insert and delete operations (h is the tree height.</blockquote>

<p>Linear time (O(h)) doesn‚Äôt sound very good - if h is close to n, we‚Äôll have the same performance as a <a href="%7B%%20link%20_posts/2014-02-14-3.markdown%20%%7D%7D">linked list</a>.&nbsp;What if there were a way to&nbsp;bound the tree height&nbsp;to some sub-linear factor? As it turns out, there are several ways to do so, and the general idea of somehow&nbsp;keeping the tree height limited to a certain factor of the number of elements it holds is called height&nbsp;<strong>balancing</strong>. Ergo we‚Äôll want to look into (height)&nbsp;<strong>balanced/self-balancing binary search trees **(BBST)</strong>.&nbsp;**</p>

<div class="highlight"><pre><code class="language-bash">                      Burger


                          M
                        <span class="nb">.</span>   <span class="nb">.</span>
                      <span class="nb">.</span>       <span class="nb">.</span>
                    <span class="nb">.</span>           <span class="nb">.</span>
                  <span class="nb">.</span>               <span class="nb">.</span>
                E <span class="nb">.</span>                 P <span class="nb">.</span>
              <span class="nb">.</span>     <span class="nb">.</span>                   <span class="nb">.</span>
            <span class="nb">.</span>         <span class="nb">.</span>                   <span class="nb">.</span>
          <span class="nb">.</span>             <span class="nb">.</span>                   <span class="nb">.</span>
      D <span class="nb">.</span>                 I                   Y
                        <span class="nb">.</span>
                      <span class="nb">.</span>
                    <span class="nb">.</span>
                  <span class="nb">.</span>
                F</code></pre></div>

<p><em>AVL tree</em></p>

<p>Since binary search trees have at most two children, the best tree height (i.e. smallest) we can achieve is log2 n (n being the number of elements in the tree). There are <a href="http://en.wikipedia.org/wiki/Self-balancing_binary_search_tree">several </a>self-balancing BSTs developed over the years. It seems that up there in the US college professors&nbsp;tend to prefer the red-black tree when studying BBSTs, whilst over here AVL is preferred. In any case, AVL tree was&nbsp;the first BBST ever devised, so we‚Äôll adopt it as our BBST model.</p>

<p>AVL trees (named after its two Soviet inventors Adelson-Velsky and Landis) use a series of <strong>rotations</strong> to keep the tree balanced. To keep track of when a certain subtree rooted at some node needs to be rotated, we maintain (or calculate) a&nbsp;<strong>balance factor</strong> variable for each node, which is the difference between the node‚Äôs left and right children‚Äôs heights, i.e.:</p>

<p>balance_factor(n) = n.left_child.height - n.right_child.height</p>


        <div class="post-tags">
          
        </div>

        <div class="pure-g post-footer">
          <div class="pure-u-1-2">
              <a class="read-more" href="../../2014/04/trees-part-ii-avl-tree.html">Continue reading ‚Ä∫</a>
          </div>
          <div class="pure-u-1-2 post-meta">
            <aside>Posted Apr 21, 2014</aside>

          </div>
        </div>
      </article>
    </div>
  
    <div class="post-index pure-u-1-1">
      <h2><a href="../../2014/03/trees-part-i.html">Trees - Part I</a></h2>

      <article class="text">
          <p><a href="../../assets/images/codedeposit/2014/03/tree1.jpg"><img src="../../assets/images/codedeposit/2014/03/tree1.jpg" alt="tree"></a></p>

<p><a href="http://commons.wikimedia.org/wiki/File%3ABright_green_tree_-_Waikato.jpg"><img src="//upload.wikimedia.org/wikipedia/commons/thumb/f/f6/Bright_green_tree_-_Waikato.jpg/512px-Bright_green_tree_-_Waikato.jpg" alt="Bright green tree - Waikato"></a></p>

<p>We used trees to build the <a href="%7B%%20link%20_posts/2014-03-21-heap-priority-queues.markdown%20%%7D">heap data structure</a> before, but we didn‚Äôt bother with the theory behind trees, which are abstract and concrete data structures themselves. There‚Äôs a huge range of material to cover so I‚Äôll split this in several posts.</p>

<p>In this first post we‚Äôll cover the basic theory and implement a binary search tree (BST), which provides <code>O(h)</code> time search, insert and delete operations (<code>h</code> is the tree height). First, the basics:</p>

<p>Trees are graphs with a few extra properties and interpretations/conventions.
* Trees have height (longest branch length) and depth (distance to root).
* The uppermost level consists of at most one node (the tree root).
* All nodes may have children.
* There are no edges other than parent-child edges.</p>

<p>Trees are classified according to some&nbsp;of those properties above and some others we‚Äôll mention later. Most commonly, there is a constraint to the maximum number of children per node -e.g. the binary tree limits children to 2 per node.

        </p><div class="post-tags">
          
        </div>

        <div class="pure-g post-footer">
          <div class="pure-u-1-2">
              <a class="read-more" href="../../2014/03/trees-part-i.html">Continue reading ‚Ä∫</a>
          </div>
          <div class="pure-u-1-2 post-meta">
            <aside>Posted Mar 31, 2014</aside>

          </div>
        </div>
      </article>
    </div>
  
</div>


        <div class="footer">
          2020 Leonardo Brito
        </div>
      </div>

    </div>
  


</body></html>;
T;@ÿo;;;;	I"/tags/c;
T{;{	;U;[0I" ;
T;@ﬂ;U;[0I"6<!DOCTYPE html><html lang="en"><head>
    <meta charset="utf-8">
    <title>A Developer's Notebook - </title>
    <link rel="stylesheet" href="https://unpkg.com/purecss@1.0.1/build/pure-min.css" integrity="sha384-oAOxQR6DkCoMliIh8yFnu25d7Eq/PHS21PClpwjOTeU2jRSq11vu66rf90/cZr47" crossorigin="anonymous">
    <link rel="stylesheet" href="../../assets/stylesheet.css">
    <link rel="stylesheet" href="../../assets/highlight.css">

    <!-- you don't need to keep this, but it's cool for stats! -->
    <meta name="generator" content="Nanoc 4.11.9">
  </head>
  <body>
    <div id="layout">
      <div class="header">
        <h1>
          <a href="../../">A Developer's Notebook</a>
        </h1>
      </div>


      <div class="content">
        <nav class="pure-g">
          <div class="pure-u-2-3 links">
            <a href="../../index.html">Home</a> ¬∑
            <a href="../../tags.html">Tags</a> ¬∑
            <a href="../../years.html">Years</a> ¬∑
            <a href="../../about.html">About</a>
          </div>

          <div class="pure-u-1-3">
            <div class="contact">
              <span>
                <a href="https://github.com/lbrito1" download="">
                  <img src="../../assets/icons/github.svg" alt="Github icon">
                  </a>
              </span>
              <span>
                <a href="https://www.linkedin.com/in/leonardo-mendes-brito/">
                <img src="../../assets/icons/linkedin.svg" alt="LinkedIn icon">
                </a>
              </span>
            </div>
          </div>
        </nav>
        
  <h1>Posts tagged "c"</h1>

  <div class="pure-g">
  
    <div class="post-index pure-u-1-1">
      <h2><a href="../../2015/10/building-a-shared-library-in-c-and-using-it-in-a-python-program.html">Building a shared library in C and using it in a Python program</a></h2>

      <article class="text">
          <p><a href="../../assets/images/codedeposit/2015/10/pathfinding.png"><img src="../../assets/images/codedeposit/2015/10/pathfinding.png?w=660" alt="pathfinding"></a></p>

<p>Figure 1</p>

<p>How do old-time languages such as C, Fortran and others survive in a world with Python, Ruby and so on?</p>

<p>There is&nbsp;plenty&nbsp;legacy code still around which need maintaining, of course. And there are (will always be?) a few specific applications where low level is needed. But&nbsp;one of the great things with software is building upon old stuff using new tools, which brings us to our topic today: building a shared library containing some of our C stuff and using it in nice and comfy Python. Figure 1 shows an example of what we can achieve by using graphical tools available in Python to improve our existing code‚Äôs text-based output. More on that later on.</p>

<p>For our purposes, we consider shared libraries as a collection of compiled objects condensed into a single file, which may then be called by other software. This is, of course, a simplification. A longer discussion about shared and static libraries can be found in [1].</p>


        <div class="post-tags">
          
        </div>

        <div class="pure-g post-footer">
          <div class="pure-u-1-2">
              <a class="read-more" href="../../2015/10/building-a-shared-library-in-c-and-using-it-in-a-python-program.html">Continue reading ‚Ä∫</a>
          </div>
          <div class="pure-u-1-2 post-meta">
            <aside>Posted Oct 28, 2015</aside>

          </div>
        </div>
      </article>
    </div>
  
</div>


        <div class="footer">
          2020 Leonardo Brito
        </div>
      </div>

    </div>
  


</body></html>;
T;@‚o;;;;	I"/tags/linux;
T{;{	;U;[0I" ;
T;@È;U;[0I":<!DOCTYPE html><html lang="en"><head>
    <meta charset="utf-8">
    <title>A Developer's Notebook - </title>
    <link rel="stylesheet" href="https://unpkg.com/purecss@1.0.1/build/pure-min.css" integrity="sha384-oAOxQR6DkCoMliIh8yFnu25d7Eq/PHS21PClpwjOTeU2jRSq11vu66rf90/cZr47" crossorigin="anonymous">
    <link rel="stylesheet" href="../../assets/stylesheet.css">
    <link rel="stylesheet" href="../../assets/highlight.css">

    <!-- you don't need to keep this, but it's cool for stats! -->
    <meta name="generator" content="Nanoc 4.11.9">
  </head>
  <body>
    <div id="layout">
      <div class="header">
        <h1>
          <a href="../../">A Developer's Notebook</a>
        </h1>
      </div>


      <div class="content">
        <nav class="pure-g">
          <div class="pure-u-2-3 links">
            <a href="../../index.html">Home</a> ¬∑
            <a href="../../tags.html">Tags</a> ¬∑
            <a href="../../years.html">Years</a> ¬∑
            <a href="../../about.html">About</a>
          </div>

          <div class="pure-u-1-3">
            <div class="contact">
              <span>
                <a href="https://github.com/lbrito1" download="">
                  <img src="../../assets/icons/github.svg" alt="Github icon">
                  </a>
              </span>
              <span>
                <a href="https://www.linkedin.com/in/leonardo-mendes-brito/">
                <img src="../../assets/icons/linkedin.svg" alt="LinkedIn icon">
                </a>
              </span>
            </div>
          </div>
        </nav>
        
  <h1>Posts tagged "linux"</h1>

  <div class="pure-g">
  
    <div class="post-index pure-u-1-1">
      <h2><a href="../../2015/10/building-a-shared-library-in-c-and-using-it-in-a-python-program.html">Building a shared library in C and using it in a Python program</a></h2>

      <article class="text">
          <p><a href="../../assets/images/codedeposit/2015/10/pathfinding.png"><img src="../../assets/images/codedeposit/2015/10/pathfinding.png?w=660" alt="pathfinding"></a></p>

<p>Figure 1</p>

<p>How do old-time languages such as C, Fortran and others survive in a world with Python, Ruby and so on?</p>

<p>There is&nbsp;plenty&nbsp;legacy code still around which need maintaining, of course. And there are (will always be?) a few specific applications where low level is needed. But&nbsp;one of the great things with software is building upon old stuff using new tools, which brings us to our topic today: building a shared library containing some of our C stuff and using it in nice and comfy Python. Figure 1 shows an example of what we can achieve by using graphical tools available in Python to improve our existing code‚Äôs text-based output. More on that later on.</p>

<p>For our purposes, we consider shared libraries as a collection of compiled objects condensed into a single file, which may then be called by other software. This is, of course, a simplification. A longer discussion about shared and static libraries can be found in [1].</p>


        <div class="post-tags">
          
        </div>

        <div class="pure-g post-footer">
          <div class="pure-u-1-2">
              <a class="read-more" href="../../2015/10/building-a-shared-library-in-c-and-using-it-in-a-python-program.html">Continue reading ‚Ä∫</a>
          </div>
          <div class="pure-u-1-2 post-meta">
            <aside>Posted Oct 28, 2015</aside>

          </div>
        </div>
      </article>
    </div>
  
</div>


        <div class="footer">
          2020 Leonardo Brito
        </div>
      </div>

    </div>
  


</body></html>;
T;@Ïo;;;;	I"/tags/python;
T{;{	;U;[0I" ;
T;@Û;U;[0I";<!DOCTYPE html><html lang="en"><head>
    <meta charset="utf-8">
    <title>A Developer's Notebook - </title>
    <link rel="stylesheet" href="https://unpkg.com/purecss@1.0.1/build/pure-min.css" integrity="sha384-oAOxQR6DkCoMliIh8yFnu25d7Eq/PHS21PClpwjOTeU2jRSq11vu66rf90/cZr47" crossorigin="anonymous">
    <link rel="stylesheet" href="../../assets/stylesheet.css">
    <link rel="stylesheet" href="../../assets/highlight.css">

    <!-- you don't need to keep this, but it's cool for stats! -->
    <meta name="generator" content="Nanoc 4.11.9">
  </head>
  <body>
    <div id="layout">
      <div class="header">
        <h1>
          <a href="../../">A Developer's Notebook</a>
        </h1>
      </div>


      <div class="content">
        <nav class="pure-g">
          <div class="pure-u-2-3 links">
            <a href="../../index.html">Home</a> ¬∑
            <a href="../../tags.html">Tags</a> ¬∑
            <a href="../../years.html">Years</a> ¬∑
            <a href="../../about.html">About</a>
          </div>

          <div class="pure-u-1-3">
            <div class="contact">
              <span>
                <a href="https://github.com/lbrito1" download="">
                  <img src="../../assets/icons/github.svg" alt="Github icon">
                  </a>
              </span>
              <span>
                <a href="https://www.linkedin.com/in/leonardo-mendes-brito/">
                <img src="../../assets/icons/linkedin.svg" alt="LinkedIn icon">
                </a>
              </span>
            </div>
          </div>
        </nav>
        
  <h1>Posts tagged "python"</h1>

  <div class="pure-g">
  
    <div class="post-index pure-u-1-1">
      <h2><a href="../../2015/10/building-a-shared-library-in-c-and-using-it-in-a-python-program.html">Building a shared library in C and using it in a Python program</a></h2>

      <article class="text">
          <p><a href="../../assets/images/codedeposit/2015/10/pathfinding.png"><img src="../../assets/images/codedeposit/2015/10/pathfinding.png?w=660" alt="pathfinding"></a></p>

<p>Figure 1</p>

<p>How do old-time languages such as C, Fortran and others survive in a world with Python, Ruby and so on?</p>

<p>There is&nbsp;plenty&nbsp;legacy code still around which need maintaining, of course. And there are (will always be?) a few specific applications where low level is needed. But&nbsp;one of the great things with software is building upon old stuff using new tools, which brings us to our topic today: building a shared library containing some of our C stuff and using it in nice and comfy Python. Figure 1 shows an example of what we can achieve by using graphical tools available in Python to improve our existing code‚Äôs text-based output. More on that later on.</p>

<p>For our purposes, we consider shared libraries as a collection of compiled objects condensed into a single file, which may then be called by other software. This is, of course, a simplification. A longer discussion about shared and static libraries can be found in [1].</p>


        <div class="post-tags">
          
        </div>

        <div class="pure-g post-footer">
          <div class="pure-u-1-2">
              <a class="read-more" href="../../2015/10/building-a-shared-library-in-c-and-using-it-in-a-python-program.html">Continue reading ‚Ä∫</a>
          </div>
          <div class="pure-u-1-2 post-meta">
            <aside>Posted Oct 28, 2015</aside>

          </div>
        </div>
      </article>
    </div>
  
</div>


        <div class="footer">
          2020 Leonardo Brito
        </div>
      </div>

    </div>
  


</body></html>;
T;@ˆo;;;;	I"/tags/reuse;
T{;{	;U;[0I" ;
T;@˝;U;[0I":<!DOCTYPE html><html lang="en"><head>
    <meta charset="utf-8">
    <title>A Developer's Notebook - </title>
    <link rel="stylesheet" href="https://unpkg.com/purecss@1.0.1/build/pure-min.css" integrity="sha384-oAOxQR6DkCoMliIh8yFnu25d7Eq/PHS21PClpwjOTeU2jRSq11vu66rf90/cZr47" crossorigin="anonymous">
    <link rel="stylesheet" href="../../assets/stylesheet.css">
    <link rel="stylesheet" href="../../assets/highlight.css">

    <!-- you don't need to keep this, but it's cool for stats! -->
    <meta name="generator" content="Nanoc 4.11.9">
  </head>
  <body>
    <div id="layout">
      <div class="header">
        <h1>
          <a href="../../">A Developer's Notebook</a>
        </h1>
      </div>


      <div class="content">
        <nav class="pure-g">
          <div class="pure-u-2-3 links">
            <a href="../../index.html">Home</a> ¬∑
            <a href="../../tags.html">Tags</a> ¬∑
            <a href="../../years.html">Years</a> ¬∑
            <a href="../../about.html">About</a>
          </div>

          <div class="pure-u-1-3">
            <div class="contact">
              <span>
                <a href="https://github.com/lbrito1" download="">
                  <img src="../../assets/icons/github.svg" alt="Github icon">
                  </a>
              </span>
              <span>
                <a href="https://www.linkedin.com/in/leonardo-mendes-brito/">
                <img src="../../assets/icons/linkedin.svg" alt="LinkedIn icon">
                </a>
              </span>
            </div>
          </div>
        </nav>
        
  <h1>Posts tagged "reuse"</h1>

  <div class="pure-g">
  
    <div class="post-index pure-u-1-1">
      <h2><a href="../../2015/10/building-a-shared-library-in-c-and-using-it-in-a-python-program.html">Building a shared library in C and using it in a Python program</a></h2>

      <article class="text">
          <p><a href="../../assets/images/codedeposit/2015/10/pathfinding.png"><img src="../../assets/images/codedeposit/2015/10/pathfinding.png?w=660" alt="pathfinding"></a></p>

<p>Figure 1</p>

<p>How do old-time languages such as C, Fortran and others survive in a world with Python, Ruby and so on?</p>

<p>There is&nbsp;plenty&nbsp;legacy code still around which need maintaining, of course. And there are (will always be?) a few specific applications where low level is needed. But&nbsp;one of the great things with software is building upon old stuff using new tools, which brings us to our topic today: building a shared library containing some of our C stuff and using it in nice and comfy Python. Figure 1 shows an example of what we can achieve by using graphical tools available in Python to improve our existing code‚Äôs text-based output. More on that later on.</p>

<p>For our purposes, we consider shared libraries as a collection of compiled objects condensed into a single file, which may then be called by other software. This is, of course, a simplification. A longer discussion about shared and static libraries can be found in [1].</p>


        <div class="post-tags">
          
        </div>

        <div class="pure-g post-footer">
          <div class="pure-u-1-2">
              <a class="read-more" href="../../2015/10/building-a-shared-library-in-c-and-using-it-in-a-python-program.html">Continue reading ‚Ä∫</a>
          </div>
          <div class="pure-u-1-2 post-meta">
            <aside>Posted Oct 28, 2015</aside>

          </div>
        </div>
      </article>
    </div>
  
</div>


        <div class="footer">
          2020 Leonardo Brito
        </div>
      </div>

    </div>
  


</body></html>;
T;@ o;;;;	I"/tags/shared library;
T{;{	;U;[0I" ;
T;@;U;[0I"C<!DOCTYPE html><html lang="en"><head>
    <meta charset="utf-8">
    <title>A Developer's Notebook - </title>
    <link rel="stylesheet" href="https://unpkg.com/purecss@1.0.1/build/pure-min.css" integrity="sha384-oAOxQR6DkCoMliIh8yFnu25d7Eq/PHS21PClpwjOTeU2jRSq11vu66rf90/cZr47" crossorigin="anonymous">
    <link rel="stylesheet" href="../../assets/stylesheet.css">
    <link rel="stylesheet" href="../../assets/highlight.css">

    <!-- you don't need to keep this, but it's cool for stats! -->
    <meta name="generator" content="Nanoc 4.11.9">
  </head>
  <body>
    <div id="layout">
      <div class="header">
        <h1>
          <a href="../../">A Developer's Notebook</a>
        </h1>
      </div>


      <div class="content">
        <nav class="pure-g">
          <div class="pure-u-2-3 links">
            <a href="../../index.html">Home</a> ¬∑
            <a href="../../tags.html">Tags</a> ¬∑
            <a href="../../years.html">Years</a> ¬∑
            <a href="../../about.html">About</a>
          </div>

          <div class="pure-u-1-3">
            <div class="contact">
              <span>
                <a href="https://github.com/lbrito1" download="">
                  <img src="../../assets/icons/github.svg" alt="Github icon">
                  </a>
              </span>
              <span>
                <a href="https://www.linkedin.com/in/leonardo-mendes-brito/">
                <img src="../../assets/icons/linkedin.svg" alt="LinkedIn icon">
                </a>
              </span>
            </div>
          </div>
        </nav>
        
  <h1>Posts tagged "shared library"</h1>

  <div class="pure-g">
  
    <div class="post-index pure-u-1-1">
      <h2><a href="../../2015/10/building-a-shared-library-in-c-and-using-it-in-a-python-program.html">Building a shared library in C and using it in a Python program</a></h2>

      <article class="text">
          <p><a href="../../assets/images/codedeposit/2015/10/pathfinding.png"><img src="../../assets/images/codedeposit/2015/10/pathfinding.png?w=660" alt="pathfinding"></a></p>

<p>Figure 1</p>

<p>How do old-time languages such as C, Fortran and others survive in a world with Python, Ruby and so on?</p>

<p>There is&nbsp;plenty&nbsp;legacy code still around which need maintaining, of course. And there are (will always be?) a few specific applications where low level is needed. But&nbsp;one of the great things with software is building upon old stuff using new tools, which brings us to our topic today: building a shared library containing some of our C stuff and using it in nice and comfy Python. Figure 1 shows an example of what we can achieve by using graphical tools available in Python to improve our existing code‚Äôs text-based output. More on that later on.</p>

<p>For our purposes, we consider shared libraries as a collection of compiled objects condensed into a single file, which may then be called by other software. This is, of course, a simplification. A longer discussion about shared and static libraries can be found in [1].</p>


        <div class="post-tags">
          
        </div>

        <div class="pure-g post-footer">
          <div class="pure-u-1-2">
              <a class="read-more" href="../../2015/10/building-a-shared-library-in-c-and-using-it-in-a-python-program.html">Continue reading ‚Ä∫</a>
          </div>
          <div class="pure-u-1-2 post-meta">
            <aside>Posted Oct 28, 2015</aside>

          </div>
        </div>
      </article>
    </div>
  
</div>


        <div class="footer">
          2020 Leonardo Brito
        </div>
      </div>

    </div>
  


</body></html>;
T;@
o;;;;	I"/tags/graph theory;
T{;{	;U;[0I" ;
T;@;U;[0I"∞<!DOCTYPE html><html lang="en"><head>
    <meta charset="utf-8">
    <title>A Developer's Notebook - </title>
    <link rel="stylesheet" href="https://unpkg.com/purecss@1.0.1/build/pure-min.css" integrity="sha384-oAOxQR6DkCoMliIh8yFnu25d7Eq/PHS21PClpwjOTeU2jRSq11vu66rf90/cZr47" crossorigin="anonymous">
    <link rel="stylesheet" href="../../assets/stylesheet.css">
    <link rel="stylesheet" href="../../assets/highlight.css">

    <!-- you don't need to keep this, but it's cool for stats! -->
    <meta name="generator" content="Nanoc 4.11.9">
  </head>
  <body>
    <div id="layout">
      <div class="header">
        <h1>
          <a href="../../">A Developer's Notebook</a>
        </h1>
      </div>


      <div class="content">
        <nav class="pure-g">
          <div class="pure-u-2-3 links">
            <a href="../../index.html">Home</a> ¬∑
            <a href="../../tags.html">Tags</a> ¬∑
            <a href="../../years.html">Years</a> ¬∑
            <a href="../../about.html">About</a>
          </div>

          <div class="pure-u-1-3">
            <div class="contact">
              <span>
                <a href="https://github.com/lbrito1" download="">
                  <img src="../../assets/icons/github.svg" alt="Github icon">
                  </a>
              </span>
              <span>
                <a href="https://www.linkedin.com/in/leonardo-mendes-brito/">
                <img src="../../assets/icons/linkedin.svg" alt="LinkedIn icon">
                </a>
              </span>
            </div>
          </div>
        </nav>
        
  <h1>Posts tagged "graph theory"</h1>

  <div class="pure-g">
  
    <div class="post-index pure-u-1-1">
      <h2><a href="../../2014/03/graph.html">Graph</a></h2>

      <article class="text">
          <p>Mathematically, a graph is a set of vertices and edges, thus a graph <code>G</code> is usually written as <code>G(V,E)</code>. Besides linking vertices in the graph, edges can also carry a specific value which may be interpreted as cost, weight, distance etc.</p>

<p><a href="../../assets/images/codedeposit/2014/03/graph1.jpg"><img src="../../assets/images/codedeposit/2014/03/graph1.jpg" alt="graph viewed with BurgerGFX"></a></p>

<p>In computer science, we‚Äôre interested in the (abstract) data structure used to implement the graph mathematical concept. Let‚Äôs first discuss the basic elements in a graph - vertices and edges:</p>

<div class="highlight"><pre><code class="language-c"><span class="k">typedef</span> <span class="k">struct</span> <span class="n">vertex</span>
<span class="p">{</span>
 <span class="kt">unsigned</span> <span class="kt">long</span> <span class="n">id</span><span class="p">;</span>
 <span class="kt">int</span> <span class="n">status</span><span class="p">;</span>
 <span class="kt">double</span> <span class="n">x</span><span class="p">,</span><span class="n">y</span><span class="p">;</span>
 <span class="kt">void</span><span class="o">*</span> <span class="n">data</span><span class="p">;</span>
<span class="p">}</span> <span class="n">vertex</span><span class="p">;</span></code></pre></div>

<p>Vertices should be able to hold any kind of data, so we‚Äôll just throw in a void pointer for that. Other than that we have an id, status (marked or unmarked - more on that later) and 2D coordinates so we can draw the vertices somewhere.</p>

<div class="highlight"><pre><code class="language-c"><span class="k">typedef</span> <span class="k">struct</span> <span class="n">edge</span>
<span class="p">{</span>
 <span class="n">vertex</span><span class="o">*</span> <span class="n">from</span><span class="p">,</span> <span class="o">*</span><span class="n">to</span><span class="p">;</span>
 <span class="kt">int</span> <span class="n">cost</span><span class="p">;</span>
<span class="p">}</span> <span class="n">edge</span><span class="p">;</span></code></pre></div>

<p>Edges consist of just pointers to the vertices they link and an optional value used as weight, distance, cost etc. Strictly speaking we could use a void pointer for that value as well, as long as we also defined a comparison function. But let‚Äôs save the hassle and just use an integer instead - most algorithms will be fine with that.</p>


        <div class="post-tags">
          
        </div>

        <div class="pure-g post-footer">
          <div class="pure-u-1-2">
              <a class="read-more" href="../../2014/03/graph.html">Continue reading ‚Ä∫</a>
          </div>
          <div class="pure-u-1-2 post-meta">
            <aside>Posted Mar 23, 2014</aside>

          </div>
        </div>
      </article>
    </div>
  
</div>


        <div class="footer">
          2020 Leonardo Brito
        </div>
      </div>

    </div>
  


</body></html>;
T;@o;;;;	I"/tags/list;
T{;{	;U;[0I" ;
T;@;U;[0I"\<!DOCTYPE html><html lang="en"><head>
    <meta charset="utf-8">
    <title>A Developer's Notebook - </title>
    <link rel="stylesheet" href="https://unpkg.com/purecss@1.0.1/build/pure-min.css" integrity="sha384-oAOxQR6DkCoMliIh8yFnu25d7Eq/PHS21PClpwjOTeU2jRSq11vu66rf90/cZr47" crossorigin="anonymous">
    <link rel="stylesheet" href="../../assets/stylesheet.css">
    <link rel="stylesheet" href="../../assets/highlight.css">

    <!-- you don't need to keep this, but it's cool for stats! -->
    <meta name="generator" content="Nanoc 4.11.9">
  </head>
  <body>
    <div id="layout">
      <div class="header">
        <h1>
          <a href="../../">A Developer's Notebook</a>
        </h1>
      </div>


      <div class="content">
        <nav class="pure-g">
          <div class="pure-u-2-3 links">
            <a href="../../index.html">Home</a> ¬∑
            <a href="../../tags.html">Tags</a> ¬∑
            <a href="../../years.html">Years</a> ¬∑
            <a href="../../about.html">About</a>
          </div>

          <div class="pure-u-1-3">
            <div class="contact">
              <span>
                <a href="https://github.com/lbrito1" download="">
                  <img src="../../assets/icons/github.svg" alt="Github icon">
                  </a>
              </span>
              <span>
                <a href="https://www.linkedin.com/in/leonardo-mendes-brito/">
                <img src="../../assets/icons/linkedin.svg" alt="LinkedIn icon">
                </a>
              </span>
            </div>
          </div>
        </nav>
        
  <h1>Posts tagged "list"</h1>

  <div class="pure-g">
  
    <div class="post-index pure-u-1-1">
      <h2><a href="../../2014/03/doubly-linked-list.html">Doubly linked list</a></h2>

      <article class="text">
          <p>A doubly linked list is like our previously implemented Linked List, but instead of only having pointers to the next element, it also has pointers to the _previous _element:</p>

<p><a href="../../assets/images/codedeposit/2014/03/610px-doubly-linked-list-svg.png"><img src="../../assets/images/codedeposit/2014/03/610px-doubly-linked-list-svg.png" alt="610px-Doubly-linked-list.svg"></a></p>

<p>This property makes the doubly linked list very useful as a base for other data structures such as the stack: having a previous pointer means we can quickly (O(1)) remove objects from the list‚Äôs tail, which would be impossible with a linked list.</p>

<p>We won‚Äôt discuss implementation since it so similar to a linked list. If anything implementation is even simpler than a linked list because of the previous pointer access.</p>


        <div class="post-tags">
          
        </div>

        <div class="pure-g post-footer">
          <div class="pure-u-1-2">
              <a class="read-more" href="../../2014/03/doubly-linked-list.html">Continue reading ‚Ä∫</a>
          </div>
          <div class="pure-u-1-2 post-meta">
            <aside>Posted Mar 18, 2014</aside>

          </div>
        </div>
      </article>
    </div>
  
    <div class="post-index pure-u-1-1">
      <h2><a href="../../2014/02/linked-list.html">Linked List</a></h2>

      <article class="text">
          <p>Here‚Äôs a very simple implementation of the linked list data structure.</p>

<p>A pointer to the head element is enough to define a linked list. Each element consists of one pointer to the subsequent element in the list and one pointer to the element‚Äôs data:</p>

<p><a href="../../assets/images/codedeposit/2014/02/linkedlist.png"><img src="../../assets/images/codedeposit/2014/02/linkedlist.png?w=450" alt="linkedlist"></a></p>


        <div class="post-tags">
          
        </div>

        <div class="pure-g post-footer">
          <div class="pure-u-1-2">
              <a class="read-more" href="../../2014/02/linked-list.html">Continue reading ‚Ä∫</a>
          </div>
          <div class="pure-u-1-2 post-meta">
            <aside>Posted Feb 14, 2014</aside>

          </div>
        </div>
      </article>
    </div>
  
</div>


        <div class="footer">
          2020 Leonardo Brito
        </div>
      </div>

    </div>
  


</body></html>;
T;@o;;;;	I"/tags/Unix;
T{;{	;U;[0I" ;
T;@%;U;[0I"4<!DOCTYPE html><html lang="en"><head>
    <meta charset="utf-8">
    <title>A Developer's Notebook - </title>
    <link rel="stylesheet" href="https://unpkg.com/purecss@1.0.1/build/pure-min.css" integrity="sha384-oAOxQR6DkCoMliIh8yFnu25d7Eq/PHS21PClpwjOTeU2jRSq11vu66rf90/cZr47" crossorigin="anonymous">
    <link rel="stylesheet" href="../../assets/stylesheet.css">
    <link rel="stylesheet" href="../../assets/highlight.css">

    <!-- you don't need to keep this, but it's cool for stats! -->
    <meta name="generator" content="Nanoc 4.11.9">
  </head>
  <body>
    <div id="layout">
      <div class="header">
        <h1>
          <a href="../../">A Developer's Notebook</a>
        </h1>
      </div>


      <div class="content">
        <nav class="pure-g">
          <div class="pure-u-2-3 links">
            <a href="../../index.html">Home</a> ¬∑
            <a href="../../tags.html">Tags</a> ¬∑
            <a href="../../years.html">Years</a> ¬∑
            <a href="../../about.html">About</a>
          </div>

          <div class="pure-u-1-3">
            <div class="contact">
              <span>
                <a href="https://github.com/lbrito1" download="">
                  <img src="../../assets/icons/github.svg" alt="Github icon">
                  </a>
              </span>
              <span>
                <a href="https://www.linkedin.com/in/leonardo-mendes-brito/">
                <img src="../../assets/icons/linkedin.svg" alt="LinkedIn icon">
                </a>
              </span>
            </div>
          </div>
        </nav>
        
  <h1>Posts tagged "Unix"</h1>

  <div class="pure-g">
  
    <div class="post-index pure-u-1-1">
      <h2><a href="../../2017/06/how-a-Unix-CLI-tool-made-me-care-about-software-feedback.html">How a Unix CLI tool made me care about software feedback</a></h2>

      <article class="text">
          <p>Providing feedback is one of the most important parts of any software. Unfortunately, more often than not we tend to downplay or ignore the very simple yet crucial task of letting the user know what is going on. In this article I‚Äôll use a short cautionary tale of how the lack of proper user feedback (and some laziness, I admit) almost cost me an entire HDD with years of personal data.</p>


        <div class="post-tags">
          
        </div>

        <div class="pure-g post-footer">
          <div class="pure-u-1-2">
              <a class="read-more" href="../../2017/06/how-a-Unix-CLI-tool-made-me-care-about-software-feedback.html">Continue reading ‚Ä∫</a>
          </div>
          <div class="pure-u-1-2 post-meta">
            <aside>Posted Jun 19, 2017</aside>

          </div>
        </div>
      </article>
    </div>
  
</div>


        <div class="footer">
          2020 Leonardo Brito
        </div>
      </div>

    </div>
  


</body></html>;
T;@(o;;;;	I"/tags/graphics;
T{;{	;U;[0I" ;
T;@/;U;[0I"<!DOCTYPE html><html lang="en"><head>
    <meta charset="utf-8">
    <title>A Developer's Notebook - </title>
    <link rel="stylesheet" href="https://unpkg.com/purecss@1.0.1/build/pure-min.css" integrity="sha384-oAOxQR6DkCoMliIh8yFnu25d7Eq/PHS21PClpwjOTeU2jRSq11vu66rf90/cZr47" crossorigin="anonymous">
    <link rel="stylesheet" href="../../assets/stylesheet.css">
    <link rel="stylesheet" href="../../assets/highlight.css">

    <!-- you don't need to keep this, but it's cool for stats! -->
    <meta name="generator" content="Nanoc 4.11.9">
  </head>
  <body>
    <div id="layout">
      <div class="header">
        <h1>
          <a href="../../">A Developer's Notebook</a>
        </h1>
      </div>


      <div class="content">
        <nav class="pure-g">
          <div class="pure-u-2-3 links">
            <a href="../../index.html">Home</a> ¬∑
            <a href="../../tags.html">Tags</a> ¬∑
            <a href="../../years.html">Years</a> ¬∑
            <a href="../../about.html">About</a>
          </div>

          <div class="pure-u-1-3">
            <div class="contact">
              <span>
                <a href="https://github.com/lbrito1" download="">
                  <img src="../../assets/icons/github.svg" alt="Github icon">
                  </a>
              </span>
              <span>
                <a href="https://www.linkedin.com/in/leonardo-mendes-brito/">
                <img src="../../assets/icons/linkedin.svg" alt="LinkedIn icon">
                </a>
              </span>
            </div>
          </div>
        </nav>
        
  <h1>Posts tagged "graphics"</h1>

  <div class="pure-g">
  
    <div class="post-index pure-u-1-1">
      <h2><a href="../../2014/03/burgergfx-simple-2d-graphics.html">BurgerGFX - simple 2D graphics</a></h2>

      <article class="text">
          <p><a href="../../assets/images/codedeposit/2014/03/burger_gfx1.jpg"><img src="../../assets/images/codedeposit/2014/03/burger_gfx1.jpg" alt="sample code and output"></a></p>

<p>Several times I find myself wanting to visualize something in 2D, but can‚Äôt bother to fire up OpenGL or other cumbersome API.</p>

<p>So I wrote a simple program which I called BurgerGFX, with 2 core functionalities: draw point and draw line. I find this to be quite enough for simple applications such as viewing a graph.</p>

<p>Setting up the drawing canvas, which I call burger, is simple: call create(width, height), which returns a pointer to the burger. Then simply call the draws, prints and cleans as needed.</p>


        <div class="post-tags">
          
        </div>

        <div class="pure-g post-footer">
          <div class="pure-u-1-2">
              <a class="read-more" href="../../2014/03/burgergfx-simple-2d-graphics.html">Continue reading ‚Ä∫</a>
          </div>
          <div class="pure-u-1-2 post-meta">
            <aside>Posted Mar 18, 2014</aside>

          </div>
        </div>
      </article>
    </div>
  
</div>


        <div class="footer">
          2020 Leonardo Brito
        </div>
      </div>

    </div>
  


</body></html>;
T;@2o;;;;	I"/years/2018;
T{;{
;U;[0I" ;
T;@9;U;[0I"ª!<!DOCTYPE html><html lang="en"><head>
    <meta charset="utf-8">
    <title>A Developer's Notebook - </title>
    <link rel="stylesheet" href="https://unpkg.com/purecss@1.0.1/build/pure-min.css" integrity="sha384-oAOxQR6DkCoMliIh8yFnu25d7Eq/PHS21PClpwjOTeU2jRSq11vu66rf90/cZr47" crossorigin="anonymous">
    <link rel="stylesheet" href="../assets/stylesheet.css">
    <link rel="stylesheet" href="../assets/highlight.css">

    <!-- you don't need to keep this, but it's cool for stats! -->
    <meta name="generator" content="Nanoc 4.11.9">
  </head>
  <body>
    <div id="layout">
      <div class="header">
        <h1>
          <a href="../">A Developer's Notebook</a>
        </h1>
      </div>


      <div class="content">
        <nav class="pure-g">
          <div class="pure-u-2-3 links">
            <a href="../index.html">Home</a> ¬∑
            <a href="../tags.html">Tags</a> ¬∑
            <a href="../years.html">Years</a> ¬∑
            <a href="../about.html">About</a>
          </div>

          <div class="pure-u-1-3">
            <div class="contact">
              <span>
                <a href="https://github.com/lbrito1" download="">
                  <img src="../assets/icons/github.svg" alt="Github icon">
                  </a>
              </span>
              <span>
                <a href="https://www.linkedin.com/in/leonardo-mendes-brito/">
                <img src="../assets/icons/linkedin.svg" alt="LinkedIn icon">
                </a>
              </span>
            </div>
          </div>
        </nav>
        
  <h1>Posted in 2018</h1>

  <div class="pure-g">
  
    <div class="post-index pure-u-1-1">
      <h2><a href="../2019/01/halving-page-sizes-with-srcset.html">Halving page sizes with srcset</a></h2>

      <article class="text">
          <p><a href="https://www.webbloatscore.com/">Web bloat</a> is <a href="http://idlewords.com/talks/website_obesity.htm">discussed</a> a lot nowadays. Web pages with fairly straightforward content‚Ää‚Äî‚Ääsuch as a Google search results page‚Ää‚Äî‚Ääare substantially bigger today than they were a few decades ago, even though the content itself hasn‚Äôt changed that much. We, web developers, are at least partly to blame: laziness or just <a href="http://www.haneycodes.net/npm-left-pad-have-we-forgotten-how-to-program/">bad programming</a> are definitively part of the problem (of course, laziness might stem from a tight or impossible deadline, and bad code might come from inexperienced programmers‚Ää‚Äî‚Ääno judgment going on here).</p>


        <div class="post-tags">
          
            <div class="tags">
            
              <a class="pure-button button-xsmall" href="../tags/Web development">Web development</a>
            
            </div>
          
        </div>

        <div class="pure-g post-footer">
          <div class="pure-u-1-2">
              <a class="read-more" href="../2019/01/halving-page-sizes-with-srcset.html">Continue reading ‚Ä∫</a>
          </div>
          <div class="pure-u-1-2 post-meta">
            <aside>Posted Sep 03, 2018</aside>

          </div>
        </div>
      </article>
    </div>
  
    <div class="post-index pure-u-1-1">
      <h2><a href="06/working-remotely-in-a-non-remote-company.html">Working remotely in a non-remote company</a></h2>

      <article class="text">
          <p><img src="../assets/images/goiabada/1*mgVZOuAHmp9Ipm2asL0IQQ.jpg" alt=""></p>

<p>We‚Äôre a small team here at Guava, and we‚Äôve always considered ourselves <em>remote friendly.</em> Most of us work remotely every now and then pushed by varied <em>force majeure</em> situations‚Äî be it the flu, the need to supervise renovation or construction work at home, flash floods near the office, receiving guests at home or any number of other situations. We‚Äôve also had a few of us working remotely for a few days or weeks while traveling to or back from a conference, or when visiting relatives that live out of town. In other words, remote working has always been a very temporary and circumstantial thing among us.</p>

<p>We have a nice office (with hammocks!), excellent work equipment, great desk space, comfortable chairs, plenty of snacks and comfort food and an infinite supply of coffee. We‚Äôre also easygoing and overall pleasant people (well, most of us are) to work with several hours a day, and some of us are even mildly funny.</p>


        <div class="post-tags">
          
            <div class="tags">
            
              <a class="pure-button button-xsmall" href="../tags/Remote work">Remote work</a>
            
            </div>
          
        </div>

        <div class="pure-g post-footer">
          <div class="pure-u-1-2">
              <a class="read-more" href="06/working-remotely-in-a-non-remote-company.html">Continue reading ‚Ä∫</a>
          </div>
          <div class="pure-u-1-2 post-meta">
            <aside>Posted Jun 12, 2018</aside>

          </div>
        </div>
      </article>
    </div>
  
    <div class="post-index pure-u-1-1">
      <h2><a href="03/the-5-stages-of-dealing-with-legacy-code.html">The 5 stages of dealing with legacy code</a></h2>

      <article class="text">
          <p>Yes, this article will use the <a href="https://en.wikipedia.org/wiki/K%C3%BCbler-Ross_model">5 stages of grief</a> as an analogy for something software development-related. There are at least a few thousand other articles with a similar motif (424,000 results for ‚Äúgrief stages software‚Äù according to <a href="https://www.google.es/search?q=grief+stages+software&amp;oq=grief+stages+software">Google</a>). But bear with me for the next 5 minutes and I promise you‚Äôll get something out of this‚Ää‚Äî‚Ääif nothing else, at least the smirk of those who read their past follies put on text by someone else.</p>

<p>I have been working on a rather big Rails project for the past year and half. The project is nearly 7 years old, and has an all-too-common successful-startup-bought-by-industry-giant background story. In a project with this kind of background, some things are bound to happen: many developers of many skill ranges have come and gone, many software fads (cough, Meteor, cough), and above all else <em>a lot</em> of legacy code that is, well, let‚Äôs put it nicely, <em>not so great</em>. None of this should be taken personally in any way‚Ää‚Äî‚Ääit is just natural for such things to occur in such projects.</p>


        <div class="post-tags">
          
            <div class="tags">
            
              <a class="pure-button button-xsmall" href="../tags/Legacy code">Legacy code</a>
            
            </div>
          
        </div>

        <div class="pure-g post-footer">
          <div class="pure-u-1-2">
              <a class="read-more" href="03/the-5-stages-of-dealing-with-legacy-code.html">Continue reading ‚Ä∫</a>
          </div>
          <div class="pure-u-1-2 post-meta">
            <aside>Posted Mar 05, 2018</aside>

          </div>
        </div>
      </article>
    </div>
  
    <div class="post-index pure-u-1-1">
      <h2><a href="09/10-ways-not-to-do-a-big-deploy.html">10 ways not to do a big deploy</a></h2>

      <article class="text">
          <p>Ideally, deploys should be small, concise, easily revertible, fast and with a small or nil footprint on the database. However, no matter how awesome you are, sometimes that is just unattainable and you end up needing to deploy something that is just the opposite: big, messy, hard to revert, painfully slow and rubbing the DB the wrong way. If the deploy messes with a mission-critical part of your software, all the worse for you.</p>

<p>But there are actually many ways you can make those situations even worse. Here are a few bullet points you can follow to guarantee a nightmarish deploy complete with nasty side-effects that will haunt you and your coworkers for days to come.</p>


        <div class="post-tags">
          
            <div class="tags">
            
              <a class="pure-button button-xsmall" href="../tags/Devops">Devops</a>
            
            </div>
          
        </div>

        <div class="pure-g post-footer">
          <div class="pure-u-1-2">
              <a class="read-more" href="09/10-ways-not-to-do-a-big-deploy.html">Continue reading ‚Ä∫</a>
          </div>
          <div class="pure-u-1-2 post-meta">
            <aside>Posted Sep 03, 2018</aside>

          </div>
        </div>
      </article>
    </div>
  
</div>


        <div class="footer">
          2020 Leonardo Brito
        </div>
      </div>

    </div>
  


</body></html>;
T;@<;@<o;;;;	I"/years/2017;
T{;{
;U;[0I" ;
T;@C;U;[0I"ã"<!DOCTYPE html><html lang="en"><head>
    <meta charset="utf-8">
    <title>A Developer's Notebook - </title>
    <link rel="stylesheet" href="https://unpkg.com/purecss@1.0.1/build/pure-min.css" integrity="sha384-oAOxQR6DkCoMliIh8yFnu25d7Eq/PHS21PClpwjOTeU2jRSq11vu66rf90/cZr47" crossorigin="anonymous">
    <link rel="stylesheet" href="../assets/stylesheet.css">
    <link rel="stylesheet" href="../assets/highlight.css">

    <!-- you don't need to keep this, but it's cool for stats! -->
    <meta name="generator" content="Nanoc 4.11.9">
  </head>
  <body>
    <div id="layout">
      <div class="header">
        <h1>
          <a href="../">A Developer's Notebook</a>
        </h1>
      </div>


      <div class="content">
        <nav class="pure-g">
          <div class="pure-u-2-3 links">
            <a href="../index.html">Home</a> ¬∑
            <a href="../tags.html">Tags</a> ¬∑
            <a href="../years.html">Years</a> ¬∑
            <a href="../about.html">About</a>
          </div>

          <div class="pure-u-1-3">
            <div class="contact">
              <span>
                <a href="https://github.com/lbrito1" download="">
                  <img src="../assets/icons/github.svg" alt="Github icon">
                  </a>
              </span>
              <span>
                <a href="https://www.linkedin.com/in/leonardo-mendes-brito/">
                <img src="../assets/icons/linkedin.svg" alt="LinkedIn icon">
                </a>
              </span>
            </div>
          </div>
        </nav>
        
  <h1>Posted in 2017</h1>

  <div class="pure-g">
  
    <div class="post-index pure-u-1-1">
      <h2><a href="05/when-postgres-is-not-enough.html">When Postgres is not enough</a></h2>

      <article class="text">
          <p>What happens when your project‚Äôs RDBMS is just not enough to deal with unexpectedly huge amounts of data?</p>

<p>You could try to de-normalize some tables here and there to avoid unnecessary JOINs, create a few indexes, implement some kind of pagination or even pre-process the data into a more palatable format. However, if you did all that and it still was not enough, the ‚Äúnatural impulse‚Äù is to give up on the RDBMS altogether and just use Elasticsearch. Sounds like a no-brainer, right?</p>


        <div class="post-tags">
          
            <div class="tags">
            
              <a class="pure-button button-xsmall" href="../tags/Ruby">Ruby</a>
            
              <a class="pure-button button-xsmall" href="../tags/Software Engineering">Software Engineering</a>
            
              <a class="pure-button button-xsmall" href="../tags/Postgresql">Postgresql</a>
            
              <a class="pure-button button-xsmall" href="../tags/SQL">SQL</a>
            
            </div>
          
        </div>

        <div class="pure-g post-footer">
          <div class="pure-u-1-2">
              <a class="read-more" href="05/when-postgres-is-not-enough.html">Continue reading ‚Ä∫</a>
          </div>
          <div class="pure-u-1-2 post-meta">
            <aside>Posted May 08, 2017</aside>

          </div>
        </div>
      </article>
    </div>
  
    <div class="post-index pure-u-1-1">
      <h2><a href="09/improving-spec-speed-in-a-huge-old-Rails-app.html">Improving spec speed in a huge, old Rails app</a></h2>

      <article class="text">
          <p>We got a 6-year-old Rails app with ~370k LOC and a ~6k-test suite which took 24 minutes to complete. Not good! We took a few days off of the main project to see if we could make things better.</p>

<p>More often than not, test suites are the nasty underbelly of a Rails app. Size and age just aggravate the problem. Tests are seldom a high priority in any project, and speed might not be an issue at all in smaller apps where the whole test suite might take just a few seconds to complete. As the project grows and the CI takes increasingly longer to complete, spec speed suddenly becomes more of an issue.</p>

<p>‚ÄúSmall‚Äù and ‚Äúnew‚Äù are not exactly the case for a certain Rails project we‚Äôre working on here at Guava. We‚Äôre talking about a 6-year-old e-commerce portal with ~370k LOC, a couple million customers and a ~6k-test, 300-spec suite which took, on average, a whopping 24 minutes to complete in our CI. <em>Not good!</em> So we took a couple of days off the main project to see if we could make things better‚Ää‚Äî‚Ääor less worse.</p>


        <div class="post-tags">
          
            <div class="tags">
            
              <a class="pure-button button-xsmall" href="../tags/Ruby">Ruby</a>
            
              <a class="pure-button button-xsmall" href="../tags/Rails">Rails</a>
            
              <a class="pure-button button-xsmall" href="../tags/Software Engineering">Software Engineering</a>
            
              <a class="pure-button button-xsmall" href="../tags/TDD">TDD</a>
            
              <a class="pure-button button-xsmall" href="../tags/RSpec">RSpec</a>
            
            </div>
          
        </div>

        <div class="pure-g post-footer">
          <div class="pure-u-1-2">
              <a class="read-more" href="09/improving-spec-speed-in-a-huge-old-Rails-app.html">Continue reading ‚Ä∫</a>
          </div>
          <div class="pure-u-1-2 post-meta">
            <aside>Posted Sep 04, 2017</aside>

          </div>
        </div>
      </article>
    </div>
  
    <div class="post-index pure-u-1-1">
      <h2><a href="03/dont-obsess-over-code-dry.html">Don't obsess over code DRYness</a></h2>

      <article class="text">
          <p>Being clever is a good thing for a developer. Ingenuity allows us to write software that solves complex real-world problems. However, ‚Äúclever‚Äù <em>code</em> is not always a good thing. In many cases‚Ää‚Äî‚ÄäI dare say in <em>most</em> cases‚Ää‚Äî‚Ääit is a very bad thing. I consciously try to avoid writing code that might be seen as ‚Äúclever‚Äù. The smart thing to do is trying hard not to be smart (yes, very <a href="http://literarydevices.net/war-is-peace/">1984</a>).</p>

<p>Developers tend to see themselves (quite indulgently) as smart people. Not many people understand what we do, and society sees a developer as a kind of modern wizard, writing unreadable magic spells in a small metal box. In reality, though, we are not half as smart as we think: for instance, if you are a developer, you are certainly familiar with the frustration of trying to understand some cryptic piece of code that seemed perfectly reasonable and straightforward when you wrote it a couple of months earlier.</p>


        <div class="post-tags">
          
            <div class="tags">
            
              <a class="pure-button button-xsmall" href="../tags/Ruby">Ruby</a>
            
              <a class="pure-button button-xsmall" href="../tags/Software Engineering">Software Engineering</a>
            
            </div>
          
        </div>

        <div class="pure-g post-footer">
          <div class="pure-u-1-2">
              <a class="read-more" href="03/dont-obsess-over-code-dry.html">Continue reading ‚Ä∫</a>
          </div>
          <div class="pure-u-1-2 post-meta">
            <aside>Posted Mar 20, 2017</aside>

          </div>
        </div>
      </article>
    </div>
  
    <div class="post-index pure-u-1-1">
      <h2><a href="06/how-a-Unix-CLI-tool-made-me-care-about-software-feedback.html">How a Unix CLI tool made me care about software feedback</a></h2>

      <article class="text">
          <p>Providing feedback is one of the most important parts of any software. Unfortunately, more often than not we tend to downplay or ignore the very simple yet crucial task of letting the user know what is going on. In this article I‚Äôll use a short cautionary tale of how the lack of proper user feedback (and some laziness, I admit) almost cost me an entire HDD with years of personal data.</p>


        <div class="post-tags">
          
            <div class="tags">
            
              <a class="pure-button button-xsmall" href="../tags/Software Engineering">Software Engineering</a>
            
              <a class="pure-button button-xsmall" href="../tags/Unix">Unix</a>
            
            </div>
          
        </div>

        <div class="pure-g post-footer">
          <div class="pure-u-1-2">
              <a class="read-more" href="06/how-a-Unix-CLI-tool-made-me-care-about-software-feedback.html">Continue reading ‚Ä∫</a>
          </div>
          <div class="pure-u-1-2 post-meta">
            <aside>Posted Jun 19, 2017</aside>

          </div>
        </div>
      </article>
    </div>
  
</div>


        <div class="footer">
          2020 Leonardo Brito
        </div>
      </div>

    </div>
  


</body></html>;
T;@F;@Fo;;;;	I"/years/2015;
T{;{
;U;[0I" ;
T;@M;U;[0I")8<!DOCTYPE html><html lang="en"><head>
    <meta charset="utf-8">
    <title>A Developer's Notebook - </title>
    <link rel="stylesheet" href="https://unpkg.com/purecss@1.0.1/build/pure-min.css" integrity="sha384-oAOxQR6DkCoMliIh8yFnu25d7Eq/PHS21PClpwjOTeU2jRSq11vu66rf90/cZr47" crossorigin="anonymous">
    <link rel="stylesheet" href="../assets/stylesheet.css">
    <link rel="stylesheet" href="../assets/highlight.css">

    <!-- you don't need to keep this, but it's cool for stats! -->
    <meta name="generator" content="Nanoc 4.11.9">
  </head>
  <body>
    <div id="layout">
      <div class="header">
        <h1>
          <a href="../">A Developer's Notebook</a>
        </h1>
      </div>


      <div class="content">
        <nav class="pure-g">
          <div class="pure-u-2-3 links">
            <a href="../index.html">Home</a> ¬∑
            <a href="../tags.html">Tags</a> ¬∑
            <a href="../years.html">Years</a> ¬∑
            <a href="../about.html">About</a>
          </div>

          <div class="pure-u-1-3">
            <div class="contact">
              <span>
                <a href="https://github.com/lbrito1" download="">
                  <img src="../assets/icons/github.svg" alt="Github icon">
                  </a>
              </span>
              <span>
                <a href="https://www.linkedin.com/in/leonardo-mendes-brito/">
                <img src="../assets/icons/linkedin.svg" alt="LinkedIn icon">
                </a>
              </span>
            </div>
          </div>
        </nav>
        
  <h1>Posted in 2015</h1>

  <div class="pure-g">
  
    <div class="post-index pure-u-1-1">
      <h2><a href="09/ruby-dsl-metaprogramming-part-ii.html">Ruby DSL &amp; metaprogramming, part II</a></h2>

      <article class="text">
          <p>In the previous installment we built a simple text generator using some Ruby meta-programming tricks. It was still far from being our desired context-free grammar (CFG) generator, though, since it lacked many <a href="https://www.cs.rochester.edu/~nelson/courses/csc_173/grammars/cfg.html">CFG prerequisites</a>. Most flagrantly, we had no rule recursion and only one production (rule definition) per rule. Here‚Äôs the what a script that would use both features:</p>

<div class="highlight"><pre><code class="language-bash">dictionary
  noun <span class="s1">'dog'</span>, <span class="s1">'bus'</span>
  verb <span class="s1">'barked'</span>, <span class="s1">'parked'</span>
  preposition <span class="s1">'at'</span>

rule <span class="s1">'phrase'</span>
  opt <span class="s1">'The'</span>, noun, verb, preposition, <span class="s1">'a'</span>, noun
  opt <span class="s1">'Here goes some'</span>, phrase, <span class="s1">'recursion.'</span>
  opt <span class="s1">'Meet me'</span>, preposition, <span class="s1">'the station.'</span>

grammar phrase: 10</code></pre></div>

<p>The <code>dictionary</code> section is just as we left it. Let‚Äôs see what changed in the <code>rule</code> section.</p>


        <div class="post-tags">
          
            <div class="tags">
            
              <a class="pure-button button-xsmall" href="../tags/DSL">DSL</a>
            
              <a class="pure-button button-xsmall" href="../tags/metaprogramming">metaprogramming</a>
            
              <a class="pure-button button-xsmall" href="../tags/Ruby">Ruby</a>
            
            </div>
          
        </div>

        <div class="pure-g post-footer">
          <div class="pure-u-1-2">
              <a class="read-more" href="09/ruby-dsl-metaprogramming-part-ii.html">Continue reading ‚Ä∫</a>
          </div>
          <div class="pure-u-1-2 post-meta">
            <aside>Posted Sep 20, 2015</aside>

          </div>
        </div>
      </article>
    </div>
  
    <div class="post-index pure-u-1-1">
      <h2><a href="09/ruby-dsl-metaprogramming-part-i.html">Ruby DSL &amp; metaprogramming, part I</a></h2>

      <article class="text">
          <p>I‚Äôve been working with Ruby for nearly a year now, which means I‚Äôm starting to feel the urge to tell people how awesome the language is. One of the most interesting aspects of Ruby to me is <a href="https://en.wikipedia.org/wiki/Metaprogramming">metaprogramming</a>, which it seems to have quite a vocation for.</p>

<p>Since college I have a fondness for automata and formal languages theory. One of the topics I particularly like is text generation (if you haven‚Äôt already, check out the excellent <a href="http://pdos.csail.mit.edu/scigen/">SCIgen</a> and the <a href="http://dev.null.org/dadaengine/">Dada engine</a>), so I thought that building a Context-free grammar (CFG)-like text generator in Ruby would be a nice little exercise and an opportunity to use some of the language‚Äôs coolest features. Also I‚Äôve implemented one of those using Java several years ago, and it was <em>a mess</em>, so I was curious as to how much of an improvement would Ruby offer.</p>

<p>Suppose the following script:</p>

<div class="highlight"><pre><code class="language-ruby"><span class="n">dictionary</span> <span class="s1">'noun'</span><span class="p">,</span> <span class="s1">'dog'</span><span class="p">,</span> <span class="s1">'bus'</span>
<span class="n">dictionary</span> <span class="s1">'verb'</span><span class="p">,</span> <span class="s1">'barked'</span><span class="p">,</span> <span class="s1">'parked'</span>
<span class="n">dictionary</span> <span class="s1">'preposition'</span><span class="p">,</span> <span class="s1">'at'</span>

<span class="n">rule</span> <span class="s1">'phrase'</span><span class="p">,</span> <span class="s1">'noun'</span><span class="p">,</span> <span class="s1">'verb'</span><span class="p">,</span> <span class="s1">'preposition'</span><span class="p">,</span> <span class="s1">'noun'</span>

<span class="n">codex</span> <span class="s1">'phrase'</span></code></pre></div>

<p>We‚Äôd like <code>dictionary</code> to store some words according to their classes, and <code>rule</code> to define a specific ordering of words. For now let‚Äôs not worry about <code>codex</code> (it‚Äôs just a collection of rules).</p>

<p>At this point the seasoned programmer is mentally sketching some kind of text parser. It‚Äôs an okay solution, but isn‚Äôt there something <em>nicer</em> we can do? Well, there is: <a href="https://en.wikipedia.org/wiki/Domain-specific_language">DSL</a>s! In fact, Ruby is quite an excellent tool to build a DSL, and many famed Ruby-powered applications such as Rspec (and <a href="http://www.leighhalliday.com/creating-ruby-dsl">many others</a>) define some kind of DSL.</p>


        <div class="post-tags">
          
            <div class="tags">
            
              <a class="pure-button button-xsmall" href="../tags/DSL">DSL</a>
            
              <a class="pure-button button-xsmall" href="../tags/metaprogramming">metaprogramming</a>
            
              <a class="pure-button button-xsmall" href="../tags/Ruby">Ruby</a>
            
            </div>
          
        </div>

        <div class="pure-g post-footer">
          <div class="pure-u-1-2">
              <a class="read-more" href="09/ruby-dsl-metaprogramming-part-i.html">Continue reading ‚Ä∫</a>
          </div>
          <div class="pure-u-1-2 post-meta">
            <aside>Posted Sep 11, 2015</aside>

          </div>
        </div>
      </article>
    </div>
  
    <div class="post-index pure-u-1-1">
      <h2><a href="10/trees-part-iii-red-black-tree.html">Trees, part III - Red-black tree</a></h2>

      <article class="text">
          <p>In our last installment on trees, we studied and implemented the <a href="%7B%%20link%20_posts/2014-04-21-trees-part-ii-avl-tree.markdown%20%%7D">AVL tree</a>. The AVL tree is one of many <a href="https://en.wikipedia.org/wiki/Self-balancing_binary_search_tree">self-balancing binary search trees</a>, a special kind of BST that enforces sub-linear operation costs by maintaining tree height close to the theoretical minimum of $latex log_{2}(n)$. This is usually done by what is called <em>tree rotation</em>, which is basically moving around tree nodes (and updating some special node properties).</p>

<p>As you can see in the Wikipedia page¬π, AVL trees guarantee that the tree height is strictly less than $latex \approx 1.44~log_{2}(n)$, while Red-black trees have a slightly worse threshold of $latex \approx 2~log_{2}(n)$; thus, AVL trees will provide significantly better search times than Red-black trees. However, while AVL trees may need to do $latex O(log(n))$ rotations after each insertion, Red-black trees must do at most 2 rotations per insertion. So either one may be your tree of choice depending on the application: if search time is critical but data doesn‚Äôt get updated too often, an AVL tree will perform better; whereas a Red-black tree will perform better in scenarios where data is constantly being changed.</p>

<p>Self-balancing BSTs add some kind of property to tree nodes that make way for tree balancing: with AVL trees, it was the ‚Äúbalance factor‚Äù. With Red-black trees, a ‚Äúcolor‚Äù property is added to each node. This leads us to the <strong>Red-black tree properties</strong>:</p>

<ol>
  <li>Every node is either red or black</li>
  <li>Every leaf is black</li>
  <li>If a node is red, then both its children are black</li>
  <li>Every path from a node to any of its descendant leafs contains the same number of black nodes</li>
</ol>


        <div class="post-tags">
          
        </div>

        <div class="pure-g post-footer">
          <div class="pure-u-1-2">
              <a class="read-more" href="10/trees-part-iii-red-black-tree.html">Continue reading ‚Ä∫</a>
          </div>
          <div class="pure-u-1-2 post-meta">
            <aside>Posted Oct 01, 2015</aside>

          </div>
        </div>
      </article>
    </div>
  
    <div class="post-index pure-u-1-1">
      <h2><a href="10/building-a-shared-library-in-c-and-using-it-in-a-python-program.html">Building a shared library in C and using it in a Python program</a></h2>

      <article class="text">
          <p><a href="../assets/images/codedeposit/2015/10/pathfinding.png"><img src="../assets/images/codedeposit/2015/10/pathfinding.png?w=660" alt="pathfinding"></a></p>

<p>Figure 1</p>

<p>How do old-time languages such as C, Fortran and others survive in a world with Python, Ruby and so on?</p>

<p>There is&nbsp;plenty&nbsp;legacy code still around which need maintaining, of course. And there are (will always be?) a few specific applications where low level is needed. But&nbsp;one of the great things with software is building upon old stuff using new tools, which brings us to our topic today: building a shared library containing some of our C stuff and using it in nice and comfy Python. Figure 1 shows an example of what we can achieve by using graphical tools available in Python to improve our existing code‚Äôs text-based output. More on that later on.</p>

<p>For our purposes, we consider shared libraries as a collection of compiled objects condensed into a single file, which may then be called by other software. This is, of course, a simplification. A longer discussion about shared and static libraries can be found in [1].</p>


        <div class="post-tags">
          
            <div class="tags">
            
              <a class="pure-button button-xsmall" href="../tags/c">c</a>
            
              <a class="pure-button button-xsmall" href="../tags/linux">linux</a>
            
              <a class="pure-button button-xsmall" href="../tags/python">python</a>
            
              <a class="pure-button button-xsmall" href="../tags/reuse">reuse</a>
            
              <a class="pure-button button-xsmall" href="../tags/shared library">shared library</a>
            
            </div>
          
        </div>

        <div class="pure-g post-footer">
          <div class="pure-u-1-2">
              <a class="read-more" href="10/building-a-shared-library-in-c-and-using-it-in-a-python-program.html">Continue reading ‚Ä∫</a>
          </div>
          <div class="pure-u-1-2 post-meta">
            <aside>Posted Oct 28, 2015</aside>

          </div>
        </div>
      </article>
    </div>
  
    <div class="post-index pure-u-1-1">
      <h2><a href="10/red-black-vs-avl.html">Trees, part IV - Benchmarking Red-black and AVL trees</a></h2>

      <article class="text">
          <p>In our previous installments we implemented two of the most well-known self-balancing binary search trees: <a href="%7B%%20link%20_posts/2014-04-21-trees-part-ii-avl-tree.markdown%20%%7D">AVL</a> and <a href="%7B%%20link%20_posts/2015-10-01-trees-part-iii-red-black-tree.markdown%20%%7D">Red-black</a> <a href="%7B%%20link%20_posts/2014-03-31-trees-part-i.markdown%20%%7D">trees</a>.</p>

<p>We had a few classes on AVL trees in our basic data structures &amp; algorithms class back in college, which made its implementation far less of a challenge than the Red-black tree. So besides the fundamental guidance of CLRS I had to do quite some googling to get it working. While googling I noticed there were quite a lot of questions about which (AVL or RB) tree was ‚Äúbetter‚Äù in some sense, be it insertion, search time, deletion time, etc. Most textbooks and articles dismiss this question just by stating the factor differences in either trees‚Äô worst case heights, <a href="%7B%%20link%20_posts/2015-10-01-trees-part-iii-red-black-tree.markdown%20%%7D">as we briefly mentioned</a> in the past installment. If you‚Äôre anything like me, however, you‚Äôll want to see some comparisons where the trees are <em>actually</em> tested. So I decided to do some simple benchmarking to test those theoretical worst-cases. Here‚Äôs what I found out.</p>


        <div class="post-tags">
          
        </div>

        <div class="pure-g post-footer">
          <div class="pure-u-1-2">
              <a class="read-more" href="10/red-black-vs-avl.html">Continue reading ‚Ä∫</a>
          </div>
          <div class="pure-u-1-2 post-meta">
            <aside>Posted Oct 07, 2015</aside>

          </div>
        </div>
      </article>
    </div>
  
</div>


        <div class="footer">
          2020 Leonardo Brito
        </div>
      </div>

    </div>
  


</body></html>;
T;@P;@Po;;;;	I"/years/2014;
T{;{
;U;[0I" ;
T;@W;U;[0I"9h<!DOCTYPE html><html lang="en"><head>
    <meta charset="utf-8">
    <title>A Developer's Notebook - </title>
    <link rel="stylesheet" href="https://unpkg.com/purecss@1.0.1/build/pure-min.css" integrity="sha384-oAOxQR6DkCoMliIh8yFnu25d7Eq/PHS21PClpwjOTeU2jRSq11vu66rf90/cZr47" crossorigin="anonymous">
    <link rel="stylesheet" href="../assets/stylesheet.css">
    <link rel="stylesheet" href="../assets/highlight.css">

    <!-- you don't need to keep this, but it's cool for stats! -->
    <meta name="generator" content="Nanoc 4.11.9">
  </head>
  <body>
    <div id="layout">
      <div class="header">
        <h1>
          <a href="../">A Developer's Notebook</a>
        </h1>
      </div>


      <div class="content">
        <nav class="pure-g">
          <div class="pure-u-2-3 links">
            <a href="../index.html">Home</a> ¬∑
            <a href="../tags.html">Tags</a> ¬∑
            <a href="../years.html">Years</a> ¬∑
            <a href="../about.html">About</a>
          </div>

          <div class="pure-u-1-3">
            <div class="contact">
              <span>
                <a href="https://github.com/lbrito1" download="">
                  <img src="../assets/icons/github.svg" alt="Github icon">
                  </a>
              </span>
              <span>
                <a href="https://www.linkedin.com/in/leonardo-mendes-brito/">
                <img src="../assets/icons/linkedin.svg" alt="LinkedIn icon">
                </a>
              </span>
            </div>
          </div>
        </nav>
        
  <h1>Posted in 2014</h1>

  <div class="pure-g">
  
    <div class="post-index pure-u-1-1">
      <h2><a href="04/shortest-path-part-i-dijkstras-algorithm.html">Shortest path, part I - Dijkstra's algorithm</a></h2>

      <article class="text">
          <p>Now that we have a way to represent <a href="%7B%%20link%20_posts/2014-03-23-graph.markdown%20%%7D">graphs</a>, we can discuss one of the most important problems in graph theory: the shortest path problem (SPP). More or less formally, we‚Äôll define SPP as:</p>

<p>Given a weighted&nbsp;graph G(V,E), find the sequence P = {v0, v1, v2, ‚Ä¶, v(n-1)}, vi ‚àà V, from vertex V0 to vertex V(n-1), such that&nbsp;the list of edges&nbsp;EP = {(v0,v1), (v1,v2), ‚Ä¶ (v(n-2), v(n-1))} exists and the summation of costs of all elements e&nbsp;‚àà EP is the smallest possible.</p>

<p>In other words, find the less expensive (ergo ‚Äúshortest‚Äù)&nbsp;path between two vertices.</p>

<p>The trivial solution is using <a href="%7B%%20link%20_posts/2014-03-31-trees-part-i.markdown%20%%7D">BFS</a>&nbsp;starting at vertex A and stopping when it reaches vertex B. However, BFS doesn‚Äôt look at the edge costs: it calculates the path with&nbsp;least edges, not the path with least total cost.</p>

<p>Although not necessarily the fastest, Dijkstra‚Äôs algorithm is probably the most popular way to solve the shortest path problem due to its simplicity and elegance. The algorithm relies heavily on <a href="%7B%%20link%20_posts/2014-03-21-heap-priority-queues.markdown%20%%7D">priority queues</a>, so make sure to take a look at that if you haven‚Äôt already.</p>

<p><strong>Pseudocode</strong></p>

<div class="highlight"><pre><code class="language-bash">dist[from] <span class="o">=</span> 0
<span class="k">for </span>v : G
      <span class="k">if </span>v <span class="o">!=</span> <span class="nb">source
            </span>dist[v] <span class="o">=</span> infinity
      prev[v] <span class="o">=</span> <span class="nt">-1</span>
      PQ.add<span class="o">(</span>v, dist[v]<span class="o">)</span>
<span class="k">while </span>PQ.hasNext<span class="o">()</span>
      u <span class="o">=</span> PQ.pop<span class="o">()</span>
      <span class="k">for </span>each neighbor v of u
            alt <span class="o">=</span> dist[u] + length<span class="o">(</span>u, v<span class="o">)</span>
            <span class="k">if </span>alt &lt; dist[v]
                  dist[v] <span class="o">=</span> alt
                  prev[v] <span class="o">=</span> u
                  PQ.decrease_key<span class="o">(</span>v,alt<span class="o">)</span>
<span class="k">return </span>prev</code></pre></div>


        <div class="post-tags">
          
            <div class="tags">
            
              <a class="pure-button button-xsmall" href="../tags/dijkstra">dijkstra</a>
            
              <a class="pure-button button-xsmall" href="../tags/graph">graph</a>
            
              <a class="pure-button button-xsmall" href="../tags/graph search">graph search</a>
            
              <a class="pure-button button-xsmall" href="../tags/shortest path">shortest path</a>
            
            </div>
          
        </div>

        <div class="pure-g post-footer">
          <div class="pure-u-1-2">
              <a class="read-more" href="04/shortest-path-part-i-dijkstras-algorithm.html">Continue reading ‚Ä∫</a>
          </div>
          <div class="pure-u-1-2 post-meta">
            <aside>Posted Apr 06, 2014</aside>

          </div>
        </div>
      </article>
    </div>
  
    <div class="post-index pure-u-1-1">
      <h2><a href="02/mergesort.html">Mergesort</a></h2>

      <article class="text">
          <p>Mergesort is an important sorting algorithm when you don‚Äôt have efficient random memory access, since it doesn‚Äôt rely on that and has good time complexity - O(n logn) specifically.</p>

<p>As a typical divide-and-conquer algorithm, Mergesort has two steps: first it recursively splits the lists in two until each half is unitary, then it recursively mends back the lists until it reaches the original size.</p>

<p>But before we dive into the actual algorithm, we need to make some changes to the linked list algorithm we‚Äôll be using.</p>


        <div class="post-tags">
          
            <div class="tags">
            
              <a class="pure-button button-xsmall" href="../tags/sorting algorithm">sorting algorithm</a>
            
            </div>
          
        </div>

        <div class="pure-g post-footer">
          <div class="pure-u-1-2">
              <a class="read-more" href="02/mergesort.html">Continue reading ‚Ä∫</a>
          </div>
          <div class="pure-u-1-2 post-meta">
            <aside>Posted Feb 21, 2014</aside>

          </div>
        </div>
      </article>
    </div>
  
    <div class="post-index pure-u-1-1">
      <h2><a href="03/heap-priority-queues.html">Heap &amp; Priority Queues</a></h2>

      <article class="text">
          <p>Priority queues (PQs) are abstract data types that work just like regular stacks, but the popping order depends on each element‚Äôs priority instead of the sequence they were pushed onto the queue (FIFO or LIFO).</p>

<p>The na√Øve way of implementing a PQ consists of using an unsorted list or array and searching for the highest-priority element at each pop, which takes O(n) time. There are several more efficient implementations, of which the most usual is the heap.</p>

<p>Heaps are complete (i.e. all levels except possibly the last are filled) binary trees that work as PQs by maintaining the following property: children nodes always have a smaller priority than their parent, i.e. for any node A with children B and C, priority(B) &lt; priority(A) &amp;&amp; priority(C) &lt; priority(A). Note that there is no assumed relation between siblings or cousins.</p>

<p><a href="../assets/images/codedeposit/2014/03/heap.jpg"><img src="../assets/images/codedeposit/2014/03/heap.jpg" alt="max-heap and corresponding array."></a>
<em>max-heap and corresponding array.</em></p>

<p>Each element of a heap has two pieces of information: a key and a value, hence we call them key-value (KV) pair. The key identifies the specific element, and the value determines the element‚Äôs priority within the heap. Heaps can be min-heaps (low value = high priority) or max-heaps (high value = high priority).</p>


        <div class="post-tags">
          
            <div class="tags">
            
              <a class="pure-button button-xsmall" href="../tags/abstract data structure">abstract data structure</a>
            
              <a class="pure-button button-xsmall" href="../tags/data structure">data structure</a>
            
              <a class="pure-button button-xsmall" href="../tags/heap">heap</a>
            
              <a class="pure-button button-xsmall" href="../tags/priority queue">priority queue</a>
            
              <a class="pure-button button-xsmall" href="../tags/queue">queue</a>
            
            </div>
          
        </div>

        <div class="pure-g post-footer">
          <div class="pure-u-1-2">
              <a class="read-more" href="03/heap-priority-queues.html">Continue reading ‚Ä∫</a>
          </div>
          <div class="pure-u-1-2 post-meta">
            <aside>Posted Mar 21, 2014</aside>

          </div>
        </div>
      </article>
    </div>
  
    <div class="post-index pure-u-1-1">
      <h2><a href="04/trees-part-ii-avl-tree.html">Trees, Part II: AVL Tree</a></h2>

      <article class="text">
          <p>Masters classes started a few weeks ago, taking their&nbsp;toll on my productivity here. Sorry about that!</p>

<p>So we (pardon the&nbsp;<a href="http://en.wikipedia.org/wiki/Nosism">nosism</a>, but I think it sounds less egocentric&nbsp;than writing ‚ÄúI‚Äù all the time) hinted at AVL trees back on our <a href="%7B%%20link%20_posts/2014-03-31-trees-part-i.markdown%20%%7D">Trees, Part I</a>&nbsp;post. Specifically, we learned that:</p>

<blockquote>a binary search tree (BST), provides O(h) time search, insert and delete operations (h is the tree height.</blockquote>

<p>Linear time (O(h)) doesn‚Äôt sound very good - if h is close to n, we‚Äôll have the same performance as a <a href="%7B%%20link%20_posts/2014-02-14-3.markdown%20%%7D%7D">linked list</a>.&nbsp;What if there were a way to&nbsp;bound the tree height&nbsp;to some sub-linear factor? As it turns out, there are several ways to do so, and the general idea of somehow&nbsp;keeping the tree height limited to a certain factor of the number of elements it holds is called height&nbsp;<strong>balancing</strong>. Ergo we‚Äôll want to look into (height)&nbsp;<strong>balanced/self-balancing binary search trees **(BBST)</strong>.&nbsp;**</p>

<div class="highlight"><pre><code class="language-bash">                      Burger


                          M
                        <span class="nb">.</span>   <span class="nb">.</span>
                      <span class="nb">.</span>       <span class="nb">.</span>
                    <span class="nb">.</span>           <span class="nb">.</span>
                  <span class="nb">.</span>               <span class="nb">.</span>
                E <span class="nb">.</span>                 P <span class="nb">.</span>
              <span class="nb">.</span>     <span class="nb">.</span>                   <span class="nb">.</span>
            <span class="nb">.</span>         <span class="nb">.</span>                   <span class="nb">.</span>
          <span class="nb">.</span>             <span class="nb">.</span>                   <span class="nb">.</span>
      D <span class="nb">.</span>                 I                   Y
                        <span class="nb">.</span>
                      <span class="nb">.</span>
                    <span class="nb">.</span>
                  <span class="nb">.</span>
                F</code></pre></div>

<p><em>AVL tree</em></p>

<p>Since binary search trees have at most two children, the best tree height (i.e. smallest) we can achieve is log2 n (n being the number of elements in the tree). There are <a href="http://en.wikipedia.org/wiki/Self-balancing_binary_search_tree">several </a>self-balancing BSTs developed over the years. It seems that up there in the US college professors&nbsp;tend to prefer the red-black tree when studying BBSTs, whilst over here AVL is preferred. In any case, AVL tree was&nbsp;the first BBST ever devised, so we‚Äôll adopt it as our BBST model.</p>

<p>AVL trees (named after its two Soviet inventors Adelson-Velsky and Landis) use a series of <strong>rotations</strong> to keep the tree balanced. To keep track of when a certain subtree rooted at some node needs to be rotated, we maintain (or calculate) a&nbsp;<strong>balance factor</strong> variable for each node, which is the difference between the node‚Äôs left and right children‚Äôs heights, i.e.:</p>

<p>balance_factor(n) = n.left_child.height - n.right_child.height</p>


        <div class="post-tags">
          
            <div class="tags">
            
              <a class="pure-button button-xsmall" href="../tags/avl">avl</a>
            
              <a class="pure-button button-xsmall" href="../tags/binary search tree">binary search tree</a>
            
              <a class="pure-button button-xsmall" href="../tags/bst">bst</a>
            
              <a class="pure-button button-xsmall" href="../tags/data structure">data structure</a>
            
              <a class="pure-button button-xsmall" href="../tags/tree">tree</a>
            
            </div>
          
        </div>

        <div class="pure-g post-footer">
          <div class="pure-u-1-2">
              <a class="read-more" href="04/trees-part-ii-avl-tree.html">Continue reading ‚Ä∫</a>
          </div>
          <div class="pure-u-1-2 post-meta">
            <aside>Posted Apr 21, 2014</aside>

          </div>
        </div>
      </article>
    </div>
  
    <div class="post-index pure-u-1-1">
      <h2><a href="03/graph.html">Graph</a></h2>

      <article class="text">
          <p>Mathematically, a graph is a set of vertices and edges, thus a graph <code>G</code> is usually written as <code>G(V,E)</code>. Besides linking vertices in the graph, edges can also carry a specific value which may be interpreted as cost, weight, distance etc.</p>

<p><a href="../assets/images/codedeposit/2014/03/graph1.jpg"><img src="../assets/images/codedeposit/2014/03/graph1.jpg" alt="graph viewed with BurgerGFX"></a></p>

<p>In computer science, we‚Äôre interested in the (abstract) data structure used to implement the graph mathematical concept. Let‚Äôs first discuss the basic elements in a graph - vertices and edges:</p>

<div class="highlight"><pre><code class="language-c"><span class="k">typedef</span> <span class="k">struct</span> <span class="n">vertex</span>
<span class="p">{</span>
 <span class="kt">unsigned</span> <span class="kt">long</span> <span class="n">id</span><span class="p">;</span>
 <span class="kt">int</span> <span class="n">status</span><span class="p">;</span>
 <span class="kt">double</span> <span class="n">x</span><span class="p">,</span><span class="n">y</span><span class="p">;</span>
 <span class="kt">void</span><span class="o">*</span> <span class="n">data</span><span class="p">;</span>
<span class="p">}</span> <span class="n">vertex</span><span class="p">;</span></code></pre></div>

<p>Vertices should be able to hold any kind of data, so we‚Äôll just throw in a void pointer for that. Other than that we have an id, status (marked or unmarked - more on that later) and 2D coordinates so we can draw the vertices somewhere.</p>

<div class="highlight"><pre><code class="language-c"><span class="k">typedef</span> <span class="k">struct</span> <span class="n">edge</span>
<span class="p">{</span>
 <span class="n">vertex</span><span class="o">*</span> <span class="n">from</span><span class="p">,</span> <span class="o">*</span><span class="n">to</span><span class="p">;</span>
 <span class="kt">int</span> <span class="n">cost</span><span class="p">;</span>
<span class="p">}</span> <span class="n">edge</span><span class="p">;</span></code></pre></div>

<p>Edges consist of just pointers to the vertices they link and an optional value used as weight, distance, cost etc. Strictly speaking we could use a void pointer for that value as well, as long as we also defined a comparison function. But let‚Äôs save the hassle and just use an integer instead - most algorithms will be fine with that.</p>


        <div class="post-tags">
          
            <div class="tags">
            
              <a class="pure-button button-xsmall" href="../tags/data structure">data structure</a>
            
              <a class="pure-button button-xsmall" href="../tags/graph">graph</a>
            
              <a class="pure-button button-xsmall" href="../tags/graph theory">graph theory</a>
            
            </div>
          
        </div>

        <div class="pure-g post-footer">
          <div class="pure-u-1-2">
              <a class="read-more" href="03/graph.html">Continue reading ‚Ä∫</a>
          </div>
          <div class="pure-u-1-2 post-meta">
            <aside>Posted Mar 23, 2014</aside>

          </div>
        </div>
      </article>
    </div>
  
    <div class="post-index pure-u-1-1">
      <h2><a href="03/doubly-linked-list.html">Doubly linked list</a></h2>

      <article class="text">
          <p>A doubly linked list is like our previously implemented Linked List, but instead of only having pointers to the next element, it also has pointers to the _previous _element:</p>

<p><a href="../assets/images/codedeposit/2014/03/610px-doubly-linked-list-svg.png"><img src="../assets/images/codedeposit/2014/03/610px-doubly-linked-list-svg.png" alt="610px-Doubly-linked-list.svg"></a></p>

<p>This property makes the doubly linked list very useful as a base for other data structures such as the stack: having a previous pointer means we can quickly (O(1)) remove objects from the list‚Äôs tail, which would be impossible with a linked list.</p>

<p>We won‚Äôt discuss implementation since it so similar to a linked list. If anything implementation is even simpler than a linked list because of the previous pointer access.</p>


        <div class="post-tags">
          
            <div class="tags">
            
              <a class="pure-button button-xsmall" href="../tags/data structure">data structure</a>
            
              <a class="pure-button button-xsmall" href="../tags/list">list</a>
            
            </div>
          
        </div>

        <div class="pure-g post-footer">
          <div class="pure-u-1-2">
              <a class="read-more" href="03/doubly-linked-list.html">Continue reading ‚Ä∫</a>
          </div>
          <div class="pure-u-1-2 post-meta">
            <aside>Posted Mar 18, 2014</aside>

          </div>
        </div>
      </article>
    </div>
  
    <div class="post-index pure-u-1-1">
      <h2><a href="02/linked-list.html">Linked List</a></h2>

      <article class="text">
          <p>Here‚Äôs a very simple implementation of the linked list data structure.</p>

<p>A pointer to the head element is enough to define a linked list. Each element consists of one pointer to the subsequent element in the list and one pointer to the element‚Äôs data:</p>

<p><a href="../assets/images/codedeposit/2014/02/linkedlist.png"><img src="../assets/images/codedeposit/2014/02/linkedlist.png?w=450" alt="linkedlist"></a></p>


        <div class="post-tags">
          
            <div class="tags">
            
              <a class="pure-button button-xsmall" href="../tags/data structure">data structure</a>
            
              <a class="pure-button button-xsmall" href="../tags/list">list</a>
            
            </div>
          
        </div>

        <div class="pure-g post-footer">
          <div class="pure-u-1-2">
              <a class="read-more" href="02/linked-list.html">Continue reading ‚Ä∫</a>
          </div>
          <div class="pure-u-1-2 post-meta">
            <aside>Posted Feb 14, 2014</aside>

          </div>
        </div>
      </article>
    </div>
  
    <div class="post-index pure-u-1-1">
      <h2><a href="02/vector.html">Vector</a></h2>

      <article class="text">
          <p>Very simple Vector implementation with add, add_all, get and delete operations using arrays of void pointers.</p>

<p>The downside to this as compared to simply using an array is that here we have an <em>array of pointers</em>, which means the data will most likely be scattered over the memory, not coalesced.</p>


        <div class="post-tags">
          
            <div class="tags">
            
              <a class="pure-button button-xsmall" href="../tags/data structure">data structure</a>
            
            </div>
          
        </div>

        <div class="pure-g post-footer">
          <div class="pure-u-1-2">
              <a class="read-more" href="02/vector.html">Continue reading ‚Ä∫</a>
          </div>
          <div class="pure-u-1-2 post-meta">
            <aside>Posted Feb 21, 2014</aside>

          </div>
        </div>
      </article>
    </div>
  
    <div class="post-index pure-u-1-1">
      <h2><a href="03/trees-part-i.html">Trees - Part I</a></h2>

      <article class="text">
          <p><a href="../assets/images/codedeposit/2014/03/tree1.jpg"><img src="../assets/images/codedeposit/2014/03/tree1.jpg" alt="tree"></a></p>

<p><a href="http://commons.wikimedia.org/wiki/File%3ABright_green_tree_-_Waikato.jpg"><img src="//upload.wikimedia.org/wikipedia/commons/thumb/f/f6/Bright_green_tree_-_Waikato.jpg/512px-Bright_green_tree_-_Waikato.jpg" alt="Bright green tree - Waikato"></a></p>

<p>We used trees to build the <a href="%7B%%20link%20_posts/2014-03-21-heap-priority-queues.markdown%20%%7D">heap data structure</a> before, but we didn‚Äôt bother with the theory behind trees, which are abstract and concrete data structures themselves. There‚Äôs a huge range of material to cover so I‚Äôll split this in several posts.</p>

<p>In this first post we‚Äôll cover the basic theory and implement a binary search tree (BST), which provides <code>O(h)</code> time search, insert and delete operations (<code>h</code> is the tree height). First, the basics:</p>

<p>Trees are graphs with a few extra properties and interpretations/conventions.
* Trees have height (longest branch length) and depth (distance to root).
* The uppermost level consists of at most one node (the tree root).
* All nodes may have children.
* There are no edges other than parent-child edges.</p>

<p>Trees are classified according to some&nbsp;of those properties above and some others we‚Äôll mention later. Most commonly, there is a constraint to the maximum number of children per node -e.g. the binary tree limits children to 2 per node.

        </p><div class="post-tags">
          
            <div class="tags">
            
              <a class="pure-button button-xsmall" href="../tags/abstract data structure">abstract data structure</a>
            
              <a class="pure-button button-xsmall" href="../tags/bst">bst</a>
            
              <a class="pure-button button-xsmall" href="../tags/data structure">data structure</a>
            
              <a class="pure-button button-xsmall" href="../tags/graph">graph</a>
            
              <a class="pure-button button-xsmall" href="../tags/tree">tree</a>
            
            </div>
          
        </div>

        <div class="pure-g post-footer">
          <div class="pure-u-1-2">
              <a class="read-more" href="03/trees-part-i.html">Continue reading ‚Ä∫</a>
          </div>
          <div class="pure-u-1-2 post-meta">
            <aside>Posted Mar 31, 2014</aside>

          </div>
        </div>
      </article>
    </div>
  
    <div class="post-index pure-u-1-1">
      <h2><a href="03/stack.html">Stack</a></h2>

      <article class="text">
          <p>Using our implementation of a doubly linked (DL) list, we can very simply build the most basic LIFO (last in, first out) data structure: the stack.</p>

<p><a href="../assets/images/codedeposit/2014/03/stack.png"><img src="../assets/images/codedeposit/2014/03/stack.png?w=300" alt="stack"></a></p>

<p>Stacks have two basic operations: push and pop. Push pushes data onto the stack (i.e., end of the DL list) and pop pops data off the list‚Äôs tail, which is only possible because we can set the new tail as tail-&gt;prev, since we‚Äôre using a DL list, with previous pointers. Another useful function is peek, which returns a pointer to the stack‚Äôs top.</p>


        <div class="post-tags">
          
            <div class="tags">
            
              <a class="pure-button button-xsmall" href="../tags/abstract data structure">abstract data structure</a>
            
              <a class="pure-button button-xsmall" href="../tags/data structure">data structure</a>
            
            </div>
          
        </div>

        <div class="pure-g post-footer">
          <div class="pure-u-1-2">
              <a class="read-more" href="03/stack.html">Continue reading ‚Ä∫</a>
          </div>
          <div class="pure-u-1-2 post-meta">
            <aside>Posted Mar 18, 2014</aside>

          </div>
        </div>
      </article>
    </div>
  
    <div class="post-index pure-u-1-1">
      <h2><a href="03/burgergfx-simple-2d-graphics.html">BurgerGFX - simple 2D graphics</a></h2>

      <article class="text">
          <p><a href="../assets/images/codedeposit/2014/03/burger_gfx1.jpg"><img src="../assets/images/codedeposit/2014/03/burger_gfx1.jpg" alt="sample code and output"></a></p>

<p>Several times I find myself wanting to visualize something in 2D, but can‚Äôt bother to fire up OpenGL or other cumbersome API.</p>

<p>So I wrote a simple program which I called BurgerGFX, with 2 core functionalities: draw point and draw line. I find this to be quite enough for simple applications such as viewing a graph.</p>

<p>Setting up the drawing canvas, which I call burger, is simple: call create(width, height), which returns a pointer to the burger. Then simply call the draws, prints and cleans as needed.</p>


        <div class="post-tags">
          
            <div class="tags">
            
              <a class="pure-button button-xsmall" href="../tags/graphics">graphics</a>
            
            </div>
          
        </div>

        <div class="pure-g post-footer">
          <div class="pure-u-1-2">
              <a class="read-more" href="03/burgergfx-simple-2d-graphics.html">Continue reading ‚Ä∫</a>
          </div>
          <div class="pure-u-1-2 post-meta">
            <aside>Posted Mar 18, 2014</aside>

          </div>
        </div>
      </article>
    </div>
  
</div>


        <div class="footer">
          2020 Leonardo Brito
        </div>
      </div>

    </div>
  


</body></html>;
T;@Z;@Zo;;;;	I"/years/2019;
T{;{
;U;[0I" ;
T;@a;U;[0I"„<!DOCTYPE html><html lang="en"><head>
    <meta charset="utf-8">
    <title>A Developer's Notebook - </title>
    <link rel="stylesheet" href="https://unpkg.com/purecss@1.0.1/build/pure-min.css" integrity="sha384-oAOxQR6DkCoMliIh8yFnu25d7Eq/PHS21PClpwjOTeU2jRSq11vu66rf90/cZr47" crossorigin="anonymous">
    <link rel="stylesheet" href="../assets/stylesheet.css">
    <link rel="stylesheet" href="../assets/highlight.css">

    <!-- you don't need to keep this, but it's cool for stats! -->
    <meta name="generator" content="Nanoc 4.11.9">
  </head>
  <body>
    <div id="layout">
      <div class="header">
        <h1>
          <a href="../">A Developer's Notebook</a>
        </h1>
      </div>


      <div class="content">
        <nav class="pure-g">
          <div class="pure-u-2-3 links">
            <a href="../index.html">Home</a> ¬∑
            <a href="../tags.html">Tags</a> ¬∑
            <a href="../years.html">Years</a> ¬∑
            <a href="../about.html">About</a>
          </div>

          <div class="pure-u-1-3">
            <div class="contact">
              <span>
                <a href="https://github.com/lbrito1" download="">
                  <img src="../assets/icons/github.svg" alt="Github icon">
                  </a>
              </span>
              <span>
                <a href="https://www.linkedin.com/in/leonardo-mendes-brito/">
                <img src="../assets/icons/linkedin.svg" alt="LinkedIn icon">
                </a>
              </span>
            </div>
          </div>
        </nav>
        
  <h1>Posted in 2019</h1>

  <div class="pure-g">
  
    <div class="post-index pure-u-1-1">
      <h2><a href="08/creating-more.html">My attempt at creating more</a></h2>

      <article class="text">
          <p>I began blogging in the now prehistoric late 2000s.</p>

<p>I‚Äôve done a few blogs about different subjects (computer science, algorithms, web development, short stories and political ramblings). I‚Äôve had blogs on Blogspot, Wordpress and, more recently, Medium.</p>

<p>Those platforms were (or are, I suppose) an easy way to spew your ideas over the Internet while also being nice and comfy for other people to actually read (this last point is important for the CSS-challenged such as yours truly). In other words, those services Got Shit Done‚Ñ¢.</p>


        <div class="post-tags">
          
            <div class="tags">
            
              <a class="pure-button button-xsmall" href="../tags/hello world">hello world</a>
            
            </div>
          
        </div>

        <div class="pure-g post-footer">
          <div class="pure-u-1-2">
              <a class="read-more" href="08/creating-more.html">Continue reading ‚Ä∫</a>
          </div>
          <div class="pure-u-1-2 post-meta">
            <aside>Posted Aug 29, 2019</aside>

          </div>
        </div>
      </article>
    </div>
  
</div>


        <div class="footer">
          2020 Leonardo Brito
        </div>
      </div>

    </div>
  


</body></html>;
T;@d;@d:versioni